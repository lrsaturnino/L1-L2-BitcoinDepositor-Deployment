/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TransferWithPayloadStruct = {
  payloadID: BigNumberish;
  amount: BigNumberish;
  tokenAddress: BytesLike;
  tokenChain: BigNumberish;
  to: BytesLike;
  toChain: BigNumberish;
  fromAddress: BytesLike;
  payload: BytesLike;
};

export type TransferWithPayloadStructOutput = [
  number,
  BigNumber,
  string,
  number,
  string,
  number,
  string,
  string
] & {
  payloadID: number;
  amount: BigNumber;
  tokenAddress: string;
  tokenChain: number;
  to: string;
  toChain: number;
  fromAddress: string;
  payload: string;
};

export interface IWormholeTokenBridgeInterface extends utils.Interface {
  functions: {
    "completeTransferWithPayload(bytes)": FunctionFragment;
    "parseTransferWithPayload(bytes)": FunctionFragment;
    "transferTokens(address,uint256,uint16,bytes32,uint256,uint32)": FunctionFragment;
    "transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "completeTransferWithPayload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferWithPayload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokensWithPayload",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokensWithPayload",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWormholeTokenBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeTokenBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [TransferWithPayloadStructOutput] & {
        transfer: TransferWithPayloadStructOutput;
      }
    >;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokensWithPayload(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  completeTransferWithPayload(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseTransferWithPayload(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<TransferWithPayloadStructOutput>;

  transferTokens(
    token: string,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    recipient: BytesLike,
    arbiterFee: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokensWithPayload(
    token: string,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    recipient: BytesLike,
    nonce: BigNumberish,
    payload: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<TransferWithPayloadStructOutput>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTokensWithPayload(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokensWithPayload(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokensWithPayload(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
