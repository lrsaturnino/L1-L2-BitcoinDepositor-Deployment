/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ReimbursementPoolInterface extends utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "refund(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxGasPrice(uint256)": FunctionFragment;
    "setStaticGas(uint256)": FunctionFragment;
    "staticGas()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaticGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staticGas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStaticGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staticGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedContract(address)": EventFragment;
    "FundsWithdrawn(uint256,address)": EventFragment;
    "MaxGasPriceUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SendingEtherFailed(uint256,address)": EventFragment;
    "StaticGasUpdated(uint256)": EventFragment;
    "UnauthorizedContract(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxGasPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendingEtherFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StaticGasUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnauthorizedContract"): EventFragment;
}

export type AuthorizedContractEvent = TypedEvent<
  [string],
  { thirdPartyContract: string }
>;

export type AuthorizedContractEventFilter =
  TypedEventFilter<AuthorizedContractEvent>;

export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string],
  { withdrawnAmount: BigNumber; receiver: string }
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export type MaxGasPriceUpdatedEvent = TypedEvent<
  [BigNumber],
  { newMaxGasPrice: BigNumber }
>;

export type MaxGasPriceUpdatedEventFilter =
  TypedEventFilter<MaxGasPriceUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SendingEtherFailedEvent = TypedEvent<
  [BigNumber, string],
  { refundAmount: BigNumber; receiver: string }
>;

export type SendingEtherFailedEventFilter =
  TypedEventFilter<SendingEtherFailedEvent>;

export type StaticGasUpdatedEvent = TypedEvent<
  [BigNumber],
  { newStaticGas: BigNumber }
>;

export type StaticGasUpdatedEventFilter =
  TypedEventFilter<StaticGasUpdatedEvent>;

export type UnauthorizedContractEvent = TypedEvent<
  [string],
  { thirdPartyContract: string }
>;

export type UnauthorizedContractEventFilter =
  TypedEventFilter<UnauthorizedContractEvent>;

export interface ReimbursementPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReimbursementPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refund(
      gasSpent: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaticGas(
      _staticGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staticGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorize(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  refund(
    gasSpent: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaticGas(
    _staticGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staticGas(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorize(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorize(_contract: string, overrides?: CallOverrides): Promise<void>;

    isAuthorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    refund(
      gasSpent: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaticGas(
      _staticGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    staticGas(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorize(_contract: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(receiver: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuthorizedContract(address)"(
      thirdPartyContract?: null
    ): AuthorizedContractEventFilter;
    AuthorizedContract(
      thirdPartyContract?: null
    ): AuthorizedContractEventFilter;

    "FundsWithdrawn(uint256,address)"(
      withdrawnAmount?: null,
      receiver?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      withdrawnAmount?: null,
      receiver?: null
    ): FundsWithdrawnEventFilter;

    "MaxGasPriceUpdated(uint256)"(
      newMaxGasPrice?: null
    ): MaxGasPriceUpdatedEventFilter;
    MaxGasPriceUpdated(newMaxGasPrice?: null): MaxGasPriceUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SendingEtherFailed(uint256,address)"(
      refundAmount?: null,
      receiver?: null
    ): SendingEtherFailedEventFilter;
    SendingEtherFailed(
      refundAmount?: null,
      receiver?: null
    ): SendingEtherFailedEventFilter;

    "StaticGasUpdated(uint256)"(
      newStaticGas?: null
    ): StaticGasUpdatedEventFilter;
    StaticGasUpdated(newStaticGas?: null): StaticGasUpdatedEventFilter;

    "UnauthorizedContract(address)"(
      thirdPartyContract?: null
    ): UnauthorizedContractEventFilter;
    UnauthorizedContract(
      thirdPartyContract?: null
    ): UnauthorizedContractEventFilter;
  };

  estimateGas: {
    authorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      gasSpent: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaticGas(
      _staticGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staticGas(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      gasSpent: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaticGas(
      _staticGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staticGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorize(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
