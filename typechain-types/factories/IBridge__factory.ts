/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IBridge, IBridgeInterface } from "../IBridge";

const _abi = [
  {
    inputs: [],
    name: "depositParameters",
    outputs: [
      {
        internalType: "uint64",
        name: "depositDustThreshold",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "depositTreasuryFeeDivisor",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "depositTxMaxFee",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "depositRevealAheadPeriod",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositKey",
        type: "uint256",
      },
    ],
    name: "deposits",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "amount",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "revealedAt",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "vault",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "treasuryFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "sweptAt",
            type: "uint32",
          },
          {
            internalType: "bytes32",
            name: "extraData",
            type: "bytes32",
          },
        ],
        internalType: "struct IBridgeTypes.DepositRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "version",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "inputVector",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "outputVector",
            type: "bytes",
          },
          {
            internalType: "bytes4",
            name: "locktime",
            type: "bytes4",
          },
        ],
        internalType: "struct IBridgeTypes.BitcoinTxInfo",
        name: "fundingTx",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "fundingOutputIndex",
            type: "uint32",
          },
          {
            internalType: "bytes8",
            name: "blindingFactor",
            type: "bytes8",
          },
          {
            internalType: "bytes20",
            name: "walletPubKeyHash",
            type: "bytes20",
          },
          {
            internalType: "bytes20",
            name: "refundPubKeyHash",
            type: "bytes20",
          },
          {
            internalType: "bytes4",
            name: "refundLocktime",
            type: "bytes4",
          },
          {
            internalType: "address",
            name: "vault",
            type: "address",
          },
        ],
        internalType: "struct IBridgeTypes.DepositRevealInfo",
        name: "reveal",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "extraData",
        type: "bytes32",
      },
    ],
    name: "revealDepositWithExtraData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBridge__factory {
  static readonly abi = _abi;
  static createInterface(): IBridgeInterface {
    return new utils.Interface(_abi) as IBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBridge {
    return new Contract(address, _abi, signerOrProvider) as IBridge;
  }
}
