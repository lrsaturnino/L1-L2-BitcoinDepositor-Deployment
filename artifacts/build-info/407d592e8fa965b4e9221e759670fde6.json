{"id":"407d592e8fa965b4e9221e759670fde6","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol":{"content":"pragma solidity ^0.8.4;\n\n/** @title BitcoinSPV */\n/** @author Summa (https://summa.one) */\n\nimport {BytesLib} from \"./BytesLib.sol\";\nimport {SafeMath} from \"./SafeMath.sol\";\n\nlibrary BTCUtils {\n    using BytesLib for bytes;\n    using SafeMath for uint256;\n\n    // The target at minimum Difficulty. Also the target of the genesis block\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\n\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\n\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /* ***** */\n    /* UTILS */\n    /* ***** */\n\n    /// @notice         Determines the length of a VarInt in bytes\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\n    /// @param _flag    The first byte of a VarInt\n    /// @return         The number of non-flag bytes in the VarInt\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\n        return determineVarIntDataLengthAt(_flag, 0);\n    }\n\n    /// @notice         Determines the length of a VarInt in bytes\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\n    /// @param _b       The byte array containing a VarInt\n    /// @param _at      The position of the VarInt in the array\n    /// @return         The number of non-flag bytes in the VarInt\n    function determineVarIntDataLengthAt(bytes memory _b, uint256 _at) internal pure returns (uint8) {\n        if (uint8(_b[_at]) == 0xff) {\n            return 8;  // one-byte flag, 8 bytes data\n        }\n        if (uint8(_b[_at]) == 0xfe) {\n            return 4;  // one-byte flag, 4 bytes data\n        }\n        if (uint8(_b[_at]) == 0xfd) {\n            return 2;  // one-byte flag, 2 bytes data\n        }\n\n        return 0;  // flag is data\n    }\n\n    /// @notice     Parse a VarInt into its data length and the number it represents\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\n    /// @param _b   A byte-string starting with a VarInt\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\n        return parseVarIntAt(_b, 0);\n    }\n\n    /// @notice     Parse a VarInt into its data length and the number it represents\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\n    /// @param _b   A byte-string containing a VarInt\n    /// @param _at  The position of the VarInt\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\n    function parseVarIntAt(bytes memory _b, uint256 _at) internal pure returns (uint256, uint256) {\n        uint8 _dataLen = determineVarIntDataLengthAt(_b, _at);\n\n        if (_dataLen == 0) {\n            return (0, uint8(_b[_at]));\n        }\n        if (_b.length < 1 + _dataLen + _at) {\n            return (ERR_BAD_ARG, 0);\n        }\n        uint256 _number;\n        if (_dataLen == 2) {\n            _number = reverseUint16(uint16(_b.slice2(1 + _at)));\n        } else if (_dataLen == 4) {\n            _number = reverseUint32(uint32(_b.slice4(1 + _at)));\n        } else if (_dataLen == 8) {\n            _number = reverseUint64(uint64(_b.slice8(1 + _at)));\n        }\n        return (_dataLen, _number);\n    }\n\n    /// @notice          Changes the endianness of a byte array\n    /// @dev             Returns a new, backwards, bytes\n    /// @param _b        The bytes to reverse\n    /// @return          The reversed bytes\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\n        bytes memory _newValue = new bytes(_b.length);\n\n        for (uint i = 0; i < _b.length; i++) {\n            _newValue[_b.length - i - 1] = _b[i];\n        }\n\n        return _newValue;\n    }\n\n    /// @notice          Changes the endianness of a uint256\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n    /// @param _b        The unsigned integer to reverse\n    /// @return v        The reversed value\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n        // swap 4-byte long pairs\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n        // swap 8-byte long pairs\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\n        // swap 16-byte long pairs\n        v = (v >> 128) | (v << 128);\n    }\n\n    /// @notice          Changes the endianness of a uint64\n    /// @param _b        The unsigned integer to reverse\n    /// @return v        The reversed value\n    function reverseUint64(uint64 _b) internal pure returns (uint64 v) {\n        v = _b;\n\n        // swap bytes\n        v = ((v >> 8) & 0x00FF00FF00FF00FF) |\n            ((v & 0x00FF00FF00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v = ((v >> 16) & 0x0000FFFF0000FFFF) |\n            ((v & 0x0000FFFF0000FFFF) << 16);\n        // swap 4-byte long pairs\n        v = (v >> 32) | (v << 32);\n    }\n\n    /// @notice          Changes the endianness of a uint32\n    /// @param _b        The unsigned integer to reverse\n    /// @return v        The reversed value\n    function reverseUint32(uint32 _b) internal pure returns (uint32 v) {\n        v = _b;\n\n        // swap bytes\n        v = ((v >> 8) & 0x00FF00FF) |\n            ((v & 0x00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v = (v >> 16) | (v << 16);\n    }\n\n    /// @notice          Changes the endianness of a uint24\n    /// @param _b        The unsigned integer to reverse\n    /// @return v        The reversed value\n    function reverseUint24(uint24 _b) internal pure returns (uint24 v) {\n        v =  (_b << 16) | (_b & 0x00FF00) | (_b >> 16);\n    }\n\n    /// @notice          Changes the endianness of a uint16\n    /// @param _b        The unsigned integer to reverse\n    /// @return v        The reversed value\n    function reverseUint16(uint16 _b) internal pure returns (uint16 v) {\n        v =  (_b << 8) | (_b >> 8);\n    }\n\n\n    /// @notice          Converts big-endian bytes to a uint\n    /// @dev             Traverses the byte array and sums the bytes\n    /// @param _b        The big-endian bytes-encoded integer\n    /// @return          The integer representation\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\n        uint256 _number;\n\n        for (uint i = 0; i < _b.length; i++) {\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\n        }\n\n        return _number;\n    }\n\n    /// @notice          Get the last _num bytes from a byte array\n    /// @param _b        The byte array to slice\n    /// @param _num      The number of bytes to extract from the end\n    /// @return          The last _num bytes of _b\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\n        uint256 _start = _b.length.sub(_num);\n\n        return _b.slice(_start, _num);\n    }\n\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\n    /// @param _b        The pre-image\n    /// @return          The digest\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\n    }\n\n    /// @notice          Implements bitcoin's hash160 (sha2 + ripemd160)\n    /// @dev             sha2 precompile at address(2), ripemd160 at address(3)\n    /// @param _b        The pre-image\n    /// @return res      The digest\n    function hash160View(bytes memory _b) internal view returns (bytes20 res) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\n            pop(staticcall(gas(), 3, 0x00, 32, 0x00, 32))\n            // read from position 12 = 0c\n            res := mload(0x0c)\n        }\n    }\n\n    /// @notice          Implements bitcoin's hash256 (double sha2)\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\n    /// @param _b        The pre-image\n    /// @return          The digest\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\n        return sha256(abi.encodePacked(sha256(_b)));\n    }\n\n    /// @notice          Implements bitcoin's hash256 (double sha2)\n    /// @dev             sha2 is precompiled smart contract located at address(2)\n    /// @param _b        The pre-image\n    /// @return res      The digest\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\n            res := mload(0x00)\n        }\n    }\n\n    /// @notice          Implements bitcoin's hash256 on a pair of bytes32\n    /// @dev             sha2 is precompiled smart contract located at address(2)\n    /// @param _a        The first bytes32 of the pre-image\n    /// @param _b        The second bytes32 of the pre-image\n    /// @return res      The digest\n    function hash256Pair(bytes32 _a, bytes32 _b) internal view returns (bytes32 res) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            mstore(0x00, _a)\n            mstore(0x20, _b)\n            pop(staticcall(gas(), 2, 0x00, 64, 0x00, 32))\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\n            res := mload(0x00)\n        }\n    }\n\n    /// @notice          Implements bitcoin's hash256 (double sha2)\n    /// @dev             sha2 is precompiled smart contract located at address(2)\n    /// @param _b        The array containing the pre-image\n    /// @param at        The start of the pre-image\n    /// @param len       The length of the pre-image\n    /// @return res      The digest\n    function hash256Slice(\n        bytes memory _b,\n        uint256 at,\n        uint256 len\n    ) internal view returns (bytes32 res) {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            pop(staticcall(gas(), 2, add(_b, add(32, at)), len, 0x00, 32))\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\n            res := mload(0x00)\n        }\n    }\n\n    /* ************ */\n    /* Legacy Input */\n    /* ************ */\n\n    /// @notice          Extracts the nth input from the vin (0-indexed)\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\n    /// @param _vin      The vin as a tightly-packed byte array\n    /// @param _index    The 0-indexed location of the input to extract\n    /// @return          The input as a byte array\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _nIns;\n\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Read overrun during VarInt parsing\");\n        require(_index < _nIns, \"Vin read overrun\");\n\n        uint256 _len = 0;\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 _i = 0; _i < _index; _i ++) {\n            _len = determineInputLengthAt(_vin, _offset);\n            require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n            _offset = _offset + _len;\n        }\n\n        _len = determineInputLengthAt(_vin, _offset);\n        require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _vin.slice(_offset, _len);\n    }\n\n    /// @notice          Determines whether an input is legacy\n    /// @dev             False if no scriptSig, otherwise True\n    /// @param _input    The input\n    /// @return          True for legacy, False for witness\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\n        return _input[36] != hex\"00\";\n    }\n\n    /// @notice          Determines the length of a scriptSig in an input\n    /// @dev             Will return 0 if passed a witness input.\n    /// @param _input    The LEGACY input\n    /// @return          The length of the script sig\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\n        return extractScriptSigLenAt(_input, 0);\n    }\n\n    /// @notice          Determines the length of a scriptSig in an input\n    ///                  starting at the specified position\n    /// @dev             Will return 0 if passed a witness input.\n    /// @param _input    The byte array containing the LEGACY input\n    /// @param _at       The position of the input in the array\n    /// @return          The length of the script sig\n    function extractScriptSigLenAt(bytes memory _input, uint256 _at) internal pure returns (uint256, uint256) {\n        if (_input.length < 37 + _at) {\n            return (ERR_BAD_ARG, 0);\n        }\n\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = parseVarIntAt(_input, _at + 36);\n\n        return (_varIntDataLen, _scriptSigLen);\n    }\n\n    /// @notice          Determines the length of an input from its scriptSig\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\n    /// @param _input    The input\n    /// @return          The length of the input in bytes\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\n        return determineInputLengthAt(_input, 0);\n    }\n\n    /// @notice          Determines the length of an input from its scriptSig,\n    ///                  starting at the specified position\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\n    /// @param _input    The byte array containing the input\n    /// @param _at       The position of the input in the array\n    /// @return          The length of the input in bytes\n    function determineInputLengthAt(bytes memory _input, uint256 _at) internal pure returns (uint256) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLenAt(_input, _at);\n        if (_varIntDataLen == ERR_BAD_ARG) {\n            return ERR_BAD_ARG;\n        }\n\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\n    }\n\n    /// @notice          Extracts the LE sequence bytes from an input\n    /// @dev             Sequence is used for relative time locks\n    /// @param _input    The LEGACY input\n    /// @return          The sequence bytes (LE uint)\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes4) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _input.slice4(36 + 1 + _varIntDataLen + _scriptSigLen);\n    }\n\n    /// @notice          Extracts the sequence from the input\n    /// @dev             Sequence is a 4-byte little-endian number\n    /// @param _input    The LEGACY input\n    /// @return          The sequence number (big-endian uint)\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\n        uint32 _leSeqence = uint32(extractSequenceLELegacy(_input));\n        uint32 _beSequence = reverseUint32(_leSeqence);\n        return _beSequence;\n    }\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\n    /// @dev             Will return hex\"00\" if passed a witness input\n    /// @param _input    The LEGACY input\n    /// @return          The length-prepended scriptSig\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\n    }\n\n\n    /* ************* */\n    /* Witness Input */\n    /* ************* */\n\n    /// @notice          Extracts the LE sequence bytes from an input\n    /// @dev             Sequence is used for relative time locks\n    /// @param _input    The WITNESS input\n    /// @return          The sequence bytes (LE uint)\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes4) {\n        return _input.slice4(37);\n    }\n\n    /// @notice          Extracts the sequence from the input in a tx\n    /// @dev             Sequence is a 4-byte little-endian number\n    /// @param _input    The WITNESS input\n    /// @return          The sequence number (big-endian uint)\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\n        uint32 _leSeqence = uint32(extractSequenceLEWitness(_input));\n        uint32 _inputeSequence = reverseUint32(_leSeqence);\n        return _inputeSequence;\n    }\n\n    /// @notice          Extracts the outpoint from the input in a tx\n    /// @dev             32-byte tx id with 4-byte index\n    /// @param _input    The input\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\n        return _input.slice(0, 36);\n    }\n\n    /// @notice          Extracts the outpoint tx id from an input\n    /// @dev             32-byte tx id\n    /// @param _input    The input\n    /// @return          The tx id (little-endian bytes)\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\n        return _input.slice32(0);\n    }\n\n    /// @notice          Extracts the outpoint tx id from an input\n    ///                  starting at the specified position\n    /// @dev             32-byte tx id\n    /// @param _input    The byte array containing the input\n    /// @param _at       The position of the input\n    /// @return          The tx id (little-endian bytes)\n    function extractInputTxIdLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes32) {\n        return _input.slice32(_at);\n    }\n\n    /// @notice          Extracts the LE tx input index from the input in a tx\n    /// @dev             4-byte tx index\n    /// @param _input    The input\n    /// @return          The tx index (little-endian bytes)\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes4) {\n        return _input.slice4(32);\n    }\n\n    /// @notice          Extracts the LE tx input index from the input in a tx\n    ///                  starting at the specified position\n    /// @dev             4-byte tx index\n    /// @param _input    The byte array containing the input\n    /// @param _at       The position of the input\n    /// @return          The tx index (little-endian bytes)\n    function extractTxIndexLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes4) {\n        return _input.slice4(32 + _at);\n    }\n\n    /* ****** */\n    /* Output */\n    /* ****** */\n\n    /// @notice          Determines the length of an output\n    /// @dev             Works with any properly formatted output\n    /// @param _output   The output\n    /// @return          The length indicated by the prefix, error if invalid length\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\n        return determineOutputLengthAt(_output, 0);\n    }\n\n    /// @notice          Determines the length of an output\n    ///                  starting at the specified position\n    /// @dev             Works with any properly formatted output\n    /// @param _output   The byte array containing the output\n    /// @param _at       The position of the output\n    /// @return          The length indicated by the prefix, error if invalid length\n    function determineOutputLengthAt(bytes memory _output, uint256 _at) internal pure returns (uint256) {\n        if (_output.length < 9 + _at) {\n            return ERR_BAD_ARG;\n        }\n        uint256 _varIntDataLen;\n        uint256 _scriptPubkeyLength;\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarIntAt(_output, 8 + _at);\n\n        if (_varIntDataLen == ERR_BAD_ARG) {\n            return ERR_BAD_ARG;\n        }\n\n        // 8-byte value, 1-byte for tag itself\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\n    }\n\n    /// @notice          Extracts the output at a given index in the TxOuts vector\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\n    /// @param _vout     The _vout to extract from\n    /// @param _index    The 0-indexed location of the output to extract\n    /// @return          The specified output\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _nOuts;\n\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Read overrun during VarInt parsing\");\n        require(_index < _nOuts, \"Vout read overrun\");\n\n        uint256 _len = 0;\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 _i = 0; _i < _index; _i ++) {\n            _len = determineOutputLengthAt(_vout, _offset);\n            require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptPubkey\");\n            _offset += _len;\n        }\n\n        _len = determineOutputLengthAt(_vout, _offset);\n        require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptPubkey\");\n        return _vout.slice(_offset, _len);\n    }\n\n    /// @notice          Extracts the value bytes from the output in a tx\n    /// @dev             Value is an 8-byte little-endian number\n    /// @param _output   The output\n    /// @return          The output value as LE bytes\n    function extractValueLE(bytes memory _output) internal pure returns (bytes8) {\n        return _output.slice8(0);\n    }\n\n    /// @notice          Extracts the value from the output in a tx\n    /// @dev             Value is an 8-byte little-endian number\n    /// @param _output   The output\n    /// @return          The output value\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\n        uint64 _leValue = uint64(extractValueLE(_output));\n        uint64 _beValue = reverseUint64(_leValue);\n        return _beValue;\n    }\n\n    /// @notice          Extracts the value from the output in a tx\n    /// @dev             Value is an 8-byte little-endian number\n    /// @param _output   The byte array containing the output\n    /// @param _at       The starting index of the output in the array\n    /// @return          The output value\n    function extractValueAt(bytes memory _output, uint256 _at) internal pure returns (uint64) {\n        uint64 _leValue = uint64(_output.slice8(_at));\n        uint64 _beValue = reverseUint64(_leValue);\n        return _beValue;\n    }\n\n    /// @notice          Extracts the data from an op return output\n    /// @dev             Returns hex\"\" if no data or not an op return\n    /// @param _output   The output\n    /// @return          Any data contained in the opreturn output, null if not an op return\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\n        if (_output[9] != hex\"6a\") {\n            return hex\"\";\n        }\n        bytes1 _dataLen = _output[10];\n        return _output.slice(11, uint256(uint8(_dataLen)));\n    }\n\n    /// @notice          Extracts the hash from the output script\n    /// @dev             Determines type by the length prefix and validates format\n    /// @param _output   The output\n    /// @return          The hash committed to by the pk_script, or null for errors\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\n        return extractHashAt(_output, 8, _output.length - 8);\n    }\n\n    /// @notice          Extracts the hash from the output script\n    /// @dev             Determines type by the length prefix and validates format\n    /// @param _output   The byte array containing the output\n    /// @param _at       The starting index of the output script in the array\n    ///                  (output start + 8)\n    /// @param _len      The length of the output script\n    ///                  (output length - 8)\n    /// @return          The hash committed to by the pk_script, or null for errors\n    function extractHashAt(\n        bytes memory _output,\n        uint256 _at,\n        uint256 _len\n    ) internal pure returns (bytes memory) {\n        uint8 _scriptLen = uint8(_output[_at]);\n\n        // don't have to worry about overflow here.\n        // if _scriptLen + 1 overflows, then output length would have to be < 1\n        // for this check to pass. if it's < 1, then we errored when assigning\n        // _scriptLen\n        if (_scriptLen + 1 != _len) {\n            return hex\"\";\n        }\n\n        if (uint8(_output[_at + 1]) == 0) {\n            if (_scriptLen < 2) {\n                return hex\"\";\n            }\n            uint256 _payloadLen = uint8(_output[_at + 2]);\n            // Check for maliciously formatted witness outputs.\n            // No need to worry about underflow as long b/c of the `< 2` check\n            if (_payloadLen != _scriptLen - 2 || (_payloadLen != 0x20 && _payloadLen != 0x14)) {\n                return hex\"\";\n            }\n            return _output.slice(_at + 3, _payloadLen);\n        } else {\n            bytes3 _tag = _output.slice3(_at);\n            // p2pkh\n            if (_tag == hex\"1976a9\") {\n                // Check for maliciously formatted p2pkh\n                // No need to worry about underflow, b/c of _scriptLen check\n                if (uint8(_output[_at + 3]) != 0x14 ||\n                    _output.slice2(_at + _len - 2) != hex\"88ac\") {\n                    return hex\"\";\n                }\n                return _output.slice(_at + 4, 20);\n            //p2sh\n            } else if (_tag == hex\"17a914\") {\n                // Check for maliciously formatted p2sh\n                // No need to worry about underflow, b/c of _scriptLen check\n                if (uint8(_output[_at + _len - 1]) != 0x87) {\n                    return hex\"\";\n                }\n                return _output.slice(_at + 3, 20);\n            }\n        }\n        return hex\"\";  /* NB: will trigger on OPRETURN and any non-standard that doesn't overrun */\n    }\n\n    /* ********** */\n    /* Witness TX */\n    /* ********** */\n\n\n    /// @notice      Checks that the vin passed up is properly formatted\n    /// @dev         Consider a vin with a valid vout in its scriptsig\n    /// @param _vin  Raw bytes length-prefixed input vector\n    /// @return      True if it represents a validly formatted vin\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\n        uint256 _varIntDataLen;\n        uint256 _nIns;\n\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\n\n        // Not valid if it says there are too many or no inputs\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\n            return false;\n        }\n\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 i = 0; i < _nIns; i++) {\n            // If we're at the end, but still expect more\n            if (_offset >= _vin.length) {\n                return false;\n            }\n\n            // Grab the next input and determine its length.\n            uint256 _nextLen = determineInputLengthAt(_vin, _offset);\n            if (_nextLen == ERR_BAD_ARG) {\n                return false;\n            }\n\n            // Increase the offset by that much\n            _offset += _nextLen;\n        }\n\n        // Returns false if we're not exactly at the end\n        return _offset == _vin.length;\n    }\n\n    /// @notice      Checks that the vout passed up is properly formatted\n    /// @dev         Consider a vout with a valid scriptpubkey\n    /// @param _vout Raw bytes length-prefixed output vector\n    /// @return      True if it represents a validly formatted vout\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\n        uint256 _varIntDataLen;\n        uint256 _nOuts;\n\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\n\n        // Not valid if it says there are too many or no outputs\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\n            return false;\n        }\n\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 i = 0; i < _nOuts; i++) {\n            // If we're at the end, but still expect more\n            if (_offset >= _vout.length) {\n                return false;\n            }\n\n            // Grab the next output and determine its length.\n            // Increase the offset by that much\n            uint256 _nextLen = determineOutputLengthAt(_vout, _offset);\n            if (_nextLen == ERR_BAD_ARG) {\n                return false;\n            }\n\n            _offset += _nextLen;\n        }\n\n        // Returns false if we're not exactly at the end\n        return _offset == _vout.length;\n    }\n\n\n\n    /* ************ */\n    /* Block Header */\n    /* ************ */\n\n    /// @notice          Extracts the transaction merkle root from a block header\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\n    /// @param _header   The header\n    /// @return          The merkle root (little-endian)\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes32) {\n        return _header.slice32(36);\n    }\n\n    /// @notice          Extracts the target from a block header\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n    /// @param _header   The header\n    /// @return          The target threshold\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\n        return extractTargetAt(_header, 0);\n    }\n\n    /// @notice          Extracts the target from a block header\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n    /// @param _header   The array containing the header\n    /// @param at        The start of the header\n    /// @return          The target threshold\n    function extractTargetAt(bytes memory _header, uint256 at) internal pure returns (uint256) {\n        uint24 _m = uint24(_header.slice3(72 + at));\n        uint8 _e = uint8(_header[75 + at]);\n        uint256 _mantissa = uint256(reverseUint24(_m));\n        uint _exponent = _e - 3;\n\n        return _mantissa * (256 ** _exponent);\n    }\n\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\n    /// @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n    /// @param _target   The current target\n    /// @return          The block difficulty (bdiff)\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\n        // Difficulty 1 calculated from 0x1d00ffff\n        return DIFF1_TARGET.div(_target);\n    }\n\n    /// @notice          Extracts the previous block's hash from a block header\n    /// @dev             Block headers do NOT include block number :(\n    /// @param _header   The header\n    /// @return          The previous block's hash (little-endian)\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes32) {\n        return _header.slice32(4);\n    }\n\n    /// @notice          Extracts the previous block's hash from a block header\n    /// @dev             Block headers do NOT include block number :(\n    /// @param _header   The array containing the header\n    /// @param at        The start of the header\n    /// @return          The previous block's hash (little-endian)\n    function extractPrevBlockLEAt(\n        bytes memory _header,\n        uint256 at\n    ) internal pure returns (bytes32) {\n        return _header.slice32(4 + at);\n    }\n\n    /// @notice          Extracts the timestamp from a block header\n    /// @dev             Time is not 100% reliable\n    /// @param _header   The header\n    /// @return          The timestamp (little-endian bytes)\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes4) {\n        return _header.slice4(68);\n    }\n\n    /// @notice          Extracts the timestamp from a block header\n    /// @dev             Time is not 100% reliable\n    /// @param _header   The header\n    /// @return          The timestamp (uint)\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\n        return reverseUint32(uint32(extractTimestampLE(_header)));\n    }\n\n    /// @notice          Extracts the expected difficulty from a block header\n    /// @dev             Does NOT verify the work\n    /// @param _header   The header\n    /// @return          The difficulty as an integer\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\n        return calculateDifficulty(extractTarget(_header));\n    }\n\n    /// @notice          Concatenates and hashes two inputs for merkle proving\n    /// @param _a        The first hash\n    /// @param _b        The second hash\n    /// @return          The double-sha256 of the concatenated hashes\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal view returns (bytes32) {\n        return hash256View(abi.encodePacked(_a, _b));\n    }\n\n    /// @notice          Concatenates and hashes two inputs for merkle proving\n    /// @param _a        The first hash\n    /// @param _b        The second hash\n    /// @return          The double-sha256 of the concatenated hashes\n    function _hash256MerkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32) {\n        return hash256Pair(_a, _b);\n    }\n\n\n    /// @notice          Verifies a Bitcoin-style merkle tree\n    /// @dev             Leaves are 0-indexed. Inefficient version.\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\n    /// @param _index    The index of the leaf\n    /// @return          true if the proof is valid, else false\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal view returns (bool) {\n        // Not an even number of hashes\n        if (_proof.length % 32 != 0) {\n            return false;\n        }\n\n        // Special case for coinbase-only blocks\n        if (_proof.length == 32) {\n            return true;\n        }\n\n        // Should never occur\n        if (_proof.length == 64) {\n            return false;\n        }\n\n        bytes32 _root = _proof.slice32(_proof.length - 32);\n        bytes32 _current = _proof.slice32(0);\n        bytes memory _tree = _proof.slice(32, _proof.length - 64);\n\n        return verifyHash256Merkle(_current, _tree, _root, _index);\n    }\n\n    /// @notice          Verifies a Bitcoin-style merkle tree\n    /// @dev             Leaves are 0-indexed. Efficient version.\n    /// @param _leaf     The leaf of the proof. LE sha256 hash.\n    /// @param _tree     The intermediate nodes in the proof.\n    ///                  Tightly packed LE sha256 hashes.\n    /// @param _root     The root of the proof. LE sha256 hash.\n    /// @param _index    The index of the leaf\n    /// @return          true if the proof is valid, else false\n    function verifyHash256Merkle(\n        bytes32 _leaf,\n        bytes memory _tree,\n        bytes32 _root,\n        uint _index\n    ) internal view returns (bool) {\n        // Not an even number of hashes\n        if (_tree.length % 32 != 0) {\n            return false;\n        }\n\n        // Should never occur\n        if (_tree.length == 0) {\n            return false;\n        }\n\n        uint _idx = _index;\n        bytes32 _current = _leaf;\n\n        // i moves in increments of 32\n        for (uint i = 0; i < _tree.length; i += 32) {\n            if (_idx % 2 == 1) {\n                _current = _hash256MerkleStep(_tree.slice32(i), _current);\n            } else {\n                _current = _hash256MerkleStep(_current, _tree.slice32(i));\n            }\n            _idx = _idx >> 1;\n        }\n        return _current == _root;\n    }\n\n    /*\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\n    NB: We get a full-bitlength target from this. For comparison with\n        header-encoded targets we need to mask it with the header target\n        e.g. (full & truncated) == truncated\n    */\n    /// @notice                 performs the bitcoin difficulty retarget\n    /// @dev                    implements the Bitcoin algorithm precisely\n    /// @param _previousTarget  the target of the previous period\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\n    /// @return                 the new period's target threshold\n    function retargetAlgorithm(\n        uint256 _previousTarget,\n        uint256 _firstTimestamp,\n        uint256 _secondTimestamp\n    ) internal pure returns (uint256) {\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\n\n        // Normalize ratio to factor of 4 if very long or very short\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\n            _elapsedTime = RETARGET_PERIOD.div(4);\n        }\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\n            _elapsedTime = RETARGET_PERIOD.mul(4);\n        }\n\n        /*\n          NB: high targets e.g. ffff0020 can cause overflows here\n              so we divide it by 256**2, then multiply by 256**2 later\n              we know the target is evenly divisible by 256**2, so this isn't an issue\n        */\n\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\n    }\n}\n"},"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol":{"content":"pragma solidity ^0.8.4;\n\n/*\n\nhttps://github.com/GNSPS/solidity-bytes-utils/\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n*/\n\n\n/** @title BytesLib **/\n/** @author https://github.com/GNSPS **/\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                        ),\n                        // and now shift left the number of bytes to\n                        // leave space for the length in the slot\n                        exp(0x100, sub(32, newlength))\n                        ),\n                        // increase length by the double of the memory\n                        // bytes length\n                        mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                    ),\n                    and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\n        if (_length == 0) {\n            return hex\"\";\n        }\n        uint _end = _start + _length;\n        require(_end > _start && _bytes.length >= _end, \"Slice out of bounds\");\n\n        assembly {\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\n            res := mload(0x40)\n            mstore(0x40, add(add(res, 64), _length))\n            mstore(res, _length)\n\n            // Compute distance between source and destination pointers\n            let diff := sub(res, add(_bytes, _start))\n\n            for {\n                let src := add(add(_bytes, 32), _start)\n                let end := add(src, _length)\n            } lt(src, end) {\n                src := add(src, 32)\n            } {\n                mstore(add(src, diff), mload(src))\n            }\n        }\n    }\n\n    /// @notice Take a slice of the byte array, overwriting the destination.\n    /// The length of the slice will equal the length of the destination array.\n    /// @dev Make sure the destination array has afterspace if required.\n    /// @param _bytes The source array\n    /// @param _dest The destination array.\n    /// @param _start The location to start in the source array.\n    function sliceInPlace(\n        bytes memory _bytes,\n        bytes memory _dest,\n        uint _start\n    ) internal pure {\n        uint _length = _dest.length;\n        uint _end = _start + _length;\n        require(_end > _start && _bytes.length >= _end, \"Slice out of bounds\");\n\n        assembly {\n            for {\n                let src := add(add(_bytes, 32), _start)\n                let res := add(_dest, 32)\n                let end := add(src, _length)\n            } lt(src, end) {\n                src := add(src, 32)\n                res := add(res, 32)\n            } {\n                mstore(res, mload(src))\n            }\n        }\n    }\n\n    // Static slice functions, no bounds checking\n    /// @notice take a 32-byte slice from the specified position\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\n        assembly {\n            res := mload(add(add(_bytes, 32), _start))\n        }\n    }\n\n    /// @notice take a 20-byte slice from the specified position\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\n        return bytes20(slice32(_bytes, _start));\n    }\n\n    /// @notice take a 8-byte slice from the specified position\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\n        return bytes8(slice32(_bytes, _start));\n    }\n\n    /// @notice take a 4-byte slice from the specified position\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\n        return bytes4(slice32(_bytes, _start));\n    }\n\n    /// @notice take a 3-byte slice from the specified position\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\n        return bytes3(slice32(_bytes, _start));\n    }\n\n    /// @notice take a 2-byte slice from the specified position\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\n        return bytes2(slice32(_bytes, _start));\n    }\n\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\n        uint _totalLen = _start + 20;\n        require(_totalLen > _start && _bytes.length >= _totalLen, \"Address conversion out of bounds.\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\n        uint _totalLen = _start + 32;\n        require(_totalLen > _start && _bytes.length >= _totalLen, \"Uint conversion out of bounds.\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\n        if (_source.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(_source, 32))\n        }\n    }\n\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\n        uint _end = _start + _length;\n        require(_end > _start && _bytes.length >= _end, \"Slice out of bounds\");\n\n        assembly {\n            result := keccak256(add(add(_bytes, 32), _start), _length)\n        }\n    }\n}\n"},"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol":{"content":"pragma solidity ^0.8.4;\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Smart Contract Solutions, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        require(c / _a == _b, \"Overflow during multiplication.\");\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"Underflow during subtraction.\");\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        require(c >= _a, \"Overflow during addition.\");\n        return c;\n    }\n}\n"},"@keep-network/random-beacon/contracts/Reimbursable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n//\n// ▓▓▌ ▓▓ ▐▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\n// ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n//   ▓▓▓▓▓▓    ▓▓▓▓▓▓▓▀    ▐▓▓▓▓▓▓    ▐▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▄▄▓▓▓▓▓▓▓▀      ▐▓▓▓▓▓▓▄▄▄▄         ▓▓▓▓▓▓▄▄▄▄         ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n//   ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌\n// ▓▓▓▓▓▓▓▓▓▓ █▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n// ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n//\n//                           Trust math, not hardware.\n\npragma solidity 0.8.17;\n\nimport \"./ReimbursementPool.sol\";\n\nabstract contract Reimbursable {\n    // The variable should be initialized by the implementing contract.\n    // slither-disable-next-line uninitialized-state\n    ReimbursementPool public reimbursementPool;\n\n    // Reserved storage space in case we need to add more variables,\n    // since there are upgradeable contracts that inherit from this one.\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n    // slither-disable-next-line unused-state\n    uint256[49] private __gap;\n\n    event ReimbursementPoolUpdated(address newReimbursementPool);\n\n    modifier refundable(address receiver) {\n        uint256 gasStart = gasleft();\n        _;\n        reimbursementPool.refund(gasStart - gasleft(), receiver);\n    }\n\n    modifier onlyReimbursableAdmin() virtual {\n        _;\n    }\n\n    function updateReimbursementPool(ReimbursementPool _reimbursementPool)\n        external\n        onlyReimbursableAdmin\n    {\n        emit ReimbursementPoolUpdated(address(_reimbursementPool));\n\n        reimbursementPool = _reimbursementPool;\n    }\n}\n"},"@keep-network/random-beacon/contracts/ReimbursementPool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n//\n// ▓▓▌ ▓▓ ▐▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\n// ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n//   ▓▓▓▓▓▓    ▓▓▓▓▓▓▓▀    ▐▓▓▓▓▓▓    ▐▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▄▄▓▓▓▓▓▓▓▀      ▐▓▓▓▓▓▓▄▄▄▄         ▓▓▓▓▓▓▄▄▄▄         ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n//   ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n//   ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌\n// ▓▓▓▓▓▓▓▓▓▓ █▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n// ▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n//\n//                           Trust math, not hardware.\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract ReimbursementPool is Ownable, ReentrancyGuard {\n    /// @notice Authorized contracts that can interact with the reimbursment pool.\n    ///         Authorization can be granted and removed by the owner.\n    mapping(address => bool) public isAuthorized;\n\n    /// @notice Static gas includes:\n    ///         - cost of the refund function\n    ///         - base transaction cost\n    uint256 public staticGas;\n\n    /// @notice Max gas price used to reimburse a transaction submitter. Protects\n    ///         against malicious operator-miners.\n    uint256 public maxGasPrice;\n\n    event StaticGasUpdated(uint256 newStaticGas);\n\n    event MaxGasPriceUpdated(uint256 newMaxGasPrice);\n\n    event SendingEtherFailed(uint256 refundAmount, address receiver);\n\n    event AuthorizedContract(address thirdPartyContract);\n\n    event UnauthorizedContract(address thirdPartyContract);\n\n    event FundsWithdrawn(uint256 withdrawnAmount, address receiver);\n\n    constructor(uint256 _staticGas, uint256 _maxGasPrice) {\n        staticGas = _staticGas;\n        maxGasPrice = _maxGasPrice;\n    }\n\n    /// @notice Receive ETH\n    receive() external payable {}\n\n    /// @notice Refunds ETH to a spender for executing specific transactions.\n    /// @dev Ignoring the result of sending ETH to a receiver is made on purpose.\n    ///      For EOA receiving ETH should always work. If a receiver is a smart\n    ///      contract, then we do not want to fail a transaction, because in some\n    ///      cases the refund is done at the very end of multiple calls where all\n    ///      the previous calls were already paid off. It is a receiver's smart\n    ///      contract resposibility to make sure it can receive ETH.\n    /// @dev Only authorized contracts are allowed calling this function.\n    /// @param gasSpent Gas spent on a transaction that needs to be reimbursed.\n    /// @param receiver Address where the reimbursment is sent.\n    function refund(uint256 gasSpent, address receiver) external nonReentrant {\n        require(\n            isAuthorized[msg.sender],\n            \"Contract is not authorized for a refund\"\n        );\n        require(receiver != address(0), \"Receiver's address cannot be zero\");\n\n        uint256 gasPrice = tx.gasprice < maxGasPrice\n            ? tx.gasprice\n            : maxGasPrice;\n\n        uint256 refundAmount = (gasSpent + staticGas) * gasPrice;\n\n        /* solhint-disable avoid-low-level-calls */\n        // slither-disable-next-line low-level-calls,unchecked-lowlevel\n        (bool sent, ) = receiver.call{value: refundAmount}(\"\");\n        /* solhint-enable avoid-low-level-calls */\n        if (!sent) {\n            // slither-disable-next-line reentrancy-events\n            emit SendingEtherFailed(refundAmount, receiver);\n        }\n    }\n\n    /// @notice Authorize a contract that can interact with this reimbursment pool.\n    ///         Can be authorized by the owner only.\n    /// @param _contract Authorized contract.\n    function authorize(address _contract) external onlyOwner {\n        isAuthorized[_contract] = true;\n\n        emit AuthorizedContract(_contract);\n    }\n\n    /// @notice Unauthorize a contract that was previously authorized to interact\n    ///         with this reimbursment pool. Can be unauthorized by the\n    ///         owner only.\n    /// @param _contract Authorized contract.\n    function unauthorize(address _contract) external onlyOwner {\n        delete isAuthorized[_contract];\n\n        emit UnauthorizedContract(_contract);\n    }\n\n    /// @notice Setting a static gas cost for executing a transaction. Can be set\n    ///         by the owner only.\n    /// @param _staticGas Static gas cost.\n    function setStaticGas(uint256 _staticGas) external onlyOwner {\n        staticGas = _staticGas;\n\n        emit StaticGasUpdated(_staticGas);\n    }\n\n    /// @notice Setting a max gas price for transactions. Can be set by the\n    ///         owner only.\n    /// @param _maxGasPrice Max gas price used to reimburse tx submitters.\n    function setMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\n        maxGasPrice = _maxGasPrice;\n\n        emit MaxGasPriceUpdated(_maxGasPrice);\n    }\n\n    /// @notice Withdraws all ETH from this pool which are sent to a given\n    ///         address. Can be set by the owner only.\n    /// @param receiver An address where ETH is sent.\n    function withdrawAll(address receiver) external onlyOwner {\n        withdraw(address(this).balance, receiver);\n    }\n\n    /// @notice Withdraws ETH amount from this pool which are sent to a given\n    ///         address. Can be set by the owner only.\n    /// @param amount Amount to withdraw from the pool.\n    /// @param receiver An address where ETH is sent.\n    function withdraw(uint256 amount, address receiver) public onlyOwner {\n        require(\n            address(this).balance >= amount,\n            \"Insufficient contract balance\"\n        );\n        require(receiver != address(0), \"Receiver's address cannot be zero\");\n\n        emit FundsWithdrawn(amount, receiver);\n\n        /* solhint-disable avoid-low-level-calls */\n        // slither-disable-next-line low-level-calls,arbitrary-send\n        (bool sent, ) = receiver.call{value: amount}(\"\");\n        /* solhint-enable avoid-low-level-calls */\n        require(sent, \"Failed to send Ether\");\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"contracts/integrator/AbstractTBTCDepositor.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity ^0.8.0;\n\nimport {BTCUtils} from \"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\";\n\nimport \"./IBridge.sol\";\nimport \"./ITBTCVault.sol\";\n\n/// @title Abstract AbstractTBTCDepositor contract.\n/// @notice This abstract contract is meant to facilitate integration of protocols\n///         aiming to use tBTC as an underlying Bitcoin bridge.\n///\n///         Such an integrator is supposed to:\n///         - Create a child contract inheriting from this abstract contract\n///         - Call the `__AbstractTBTCDepositor_initialize` initializer function\n///         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their\n///           business logic in order to initialize and finalize deposits.\n///\n/// @dev Example usage:\n///      ```\n///      // Example upgradeable integrator contract.\n///      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {\n///          /// @custom:oz-upgrades-unsafe-allow constructor\n///          constructor() {\n///              // Prevents the contract from being initialized again.\n///              _disableInitializers();\n///          }\n///\n///          function initialize(\n///              address _bridge,\n///              address _tbtcVault\n///          ) external initializer {\n///              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);\n///          }\n///\n///          function startProcess(\n///              IBridgeTypes.BitcoinTxInfo calldata fundingTx,\n///              IBridgeTypes.DepositRevealInfo calldata reveal\n///          ) external {\n///              // Embed necessary context as extra data.\n///              bytes32 extraData = ...;\n///\n///              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(\n///                  fundingTx,\n///                  reveal,\n///                  extraData\n///              );\n///\n///              // Use the depositKey to track the process.\n///          }\n///\n///          function finalizeProcess(uint256 depositKey) external {\n///              // Ensure the function cannot be called for the same deposit\n///              // twice.\n///\n///              (\n///                  uint256 initialDepositAmount,\n///                  uint256 tbtcAmount,\n///                  bytes32 extraData\n///              ) = _finalizeDeposit(depositKey);\n///\n///              // Do something with the minted TBTC using context\n///              // embedded in the extraData.\n///          }\n///      }\nabstract contract AbstractTBTCDepositor {\n    using BTCUtils for bytes;\n\n    /// @notice Multiplier to convert satoshi to TBTC token units.\n    uint256 public constant SATOSHI_MULTIPLIER = 10**10;\n\n    /// @notice Bridge contract address.\n    IBridge public bridge;\n    /// @notice TBTCVault contract address.\n    ITBTCVault public tbtcVault;\n\n    // Reserved storage space that allows adding more variables without affecting\n    // the storage layout of the child contracts. The convention from OpenZeppelin\n    // suggests the storage space should add up to 50 slots. If more variables are\n    // added in the upcoming versions one need to reduce the array size accordingly.\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n    // slither-disable-next-line unused-state\n    uint256[47] private __gap;\n\n    /// @notice Initializes the contract. MUST BE CALLED from the child\n    ///         contract initializer.\n    // slither-disable-next-line dead-code\n    function __AbstractTBTCDepositor_initialize(\n        address _bridge,\n        address _tbtcVault\n    ) internal {\n        require(\n            address(bridge) == address(0) && address(tbtcVault) == address(0),\n            \"AbstractTBTCDepositor already initialized\"\n        );\n\n        require(_bridge != address(0), \"Bridge address cannot be zero\");\n        require(_tbtcVault != address(0), \"TBTCVault address cannot be zero\");\n\n        bridge = IBridge(_bridge);\n        tbtcVault = ITBTCVault(_tbtcVault);\n    }\n\n    /// @notice Initializes a deposit by revealing it to the Bridge.\n    /// @param fundingTx Bitcoin funding transaction data, see `IBridgeTypes.BitcoinTxInfo`.\n    /// @param reveal Deposit reveal data, see `IBridgeTypes.DepositRevealInfo` struct.\n    /// @param extraData 32-byte deposit extra data.\n    /// @return depositKey Deposit key computed as\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\n    ///         key can be used to refer to the deposit in the Bridge and\n    ///         TBTCVault contracts.\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\n    ///         TBTC token decimals precision.\n    /// @dev Requirements:\n    ///      - The revealed vault address must match the TBTCVault address,\n    ///      - All requirements from {Bridge#revealDepositWithExtraData}\n    ///        function must be met.\n    /// @dev This function doesn't validate if a deposit has been initialized before,\n    ///      as the Bridge won't allow the same deposit to be revealed twice.\n    // slither-disable-next-line dead-code\n    function _initializeDeposit(\n        IBridgeTypes.BitcoinTxInfo memory fundingTx,\n        IBridgeTypes.DepositRevealInfo memory reveal,\n        bytes32 extraData\n    ) internal returns (uint256 depositKey, uint256 initialDepositAmount) {\n        require(reveal.vault == address(tbtcVault), \"Vault address mismatch\");\n\n        depositKey = _calculateDepositKey(\n            _calculateBitcoinTxHash(fundingTx),\n            reveal.fundingOutputIndex\n        );\n\n        // The Bridge does not allow to reveal the same deposit twice and\n        // revealed deposits stay there forever. The transaction will revert\n        // if the deposit has already been revealed so, there is no need to do\n        // an explicit check here.\n        bridge.revealDepositWithExtraData(fundingTx, reveal, extraData);\n\n        initialDepositAmount =\n            bridge.deposits(depositKey).amount *\n            SATOSHI_MULTIPLIER;\n    }\n\n    /// @notice Finalizes a deposit by calculating the amount of TBTC minted\n    ///         for the deposit.\n    /// @param depositKey Deposit key identifying the deposit.\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\n    ///         TBTC token decimals precision.\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit. In\n    ///         TBTC token decimals precision.\n    /// @return extraData 32-byte deposit extra data.\n    /// @dev Requirements:\n    ///      - The deposit must be initialized but not finalized\n    ///        (in the context of this contract) yet.\n    ///      - The deposit must be finalized on the Bridge side. That means the\n    ///        deposit must be either swept or optimistically minted.\n    /// @dev THIS FUNCTION DOESN'T VALIDATE IF A DEPOSIT HAS BEEN FINALIZED BEFORE,\n    ///      IT IS A RESPONSIBILITY OF THE IMPLEMENTING CONTRACT TO ENSURE THIS\n    ///      FUNCTION WON'T BE CALLED TWICE FOR THE SAME DEPOSIT.\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function is an\n    ///      approximation. See documentation of the `calculateTbtcAmount`\n    ///      responsible for calculating this value for more details.\n    // slither-disable-next-line dead-code\n    function _finalizeDeposit(uint256 depositKey)\n        internal\n        returns (\n            uint256 initialDepositAmount,\n            uint256 tbtcAmount,\n            bytes32 extraData\n        )\n    {\n        IBridgeTypes.DepositRequest memory deposit = bridge.deposits(\n            depositKey\n        );\n        require(deposit.revealedAt != 0, \"Deposit not initialized\");\n\n        (, uint64 finalizedAt) = tbtcVault.optimisticMintingRequests(\n            depositKey\n        );\n\n        require(\n            deposit.sweptAt != 0 || finalizedAt != 0,\n            \"Deposit not finalized by the bridge\"\n        );\n\n        initialDepositAmount = deposit.amount * SATOSHI_MULTIPLIER;\n\n        tbtcAmount = _calculateTbtcAmount(deposit.amount, deposit.treasuryFee);\n\n        extraData = deposit.extraData;\n    }\n\n    /// @notice Calculates the amount of TBTC minted for the deposit.\n    /// @param depositAmountSat Deposit amount in satoshi (1e8 precision).\n    ///        This is the actual amount deposited by the deposit creator, i.e.\n    ///        the gross amount the Bridge's fees are cut from.\n    /// @param depositTreasuryFeeSat Deposit treasury fee in satoshi (1e8 precision).\n    ///        This is an accurate value of the treasury fee that was actually\n    ///        cut upon minting.\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit.\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function may\n    ///      not correspond to the actual amount of TBTC minted for the deposit.\n    ///      Although the treasury fee cut upon minting is known precisely,\n    ///      this is not the case for the optimistic minting fee and the Bitcoin\n    ///      transaction fee. To overcome that problem, this function just takes\n    ///      the current maximum allowed values of both fees, at the moment of deposit\n    ///      finalization. For the great majority of the deposits, such an\n    ///      algorithm will return a tbtcAmount slightly lesser than the\n    ///      actual amount of TBTC minted for the deposit. This will cause\n    ///      some TBTC to be left in the contract and ensure there is enough\n    ///      liquidity to finalize the deposit. However, in some rare cases,\n    ///      where the actual values of those fees change between the deposit\n    ///      minting and finalization, the tbtcAmount returned by this function\n    ///      may be greater than the actual amount of TBTC minted for the deposit.\n    ///      If this happens and the reserve coming from previous deposits\n    ///      leftovers does not provide enough liquidity, the deposit will have\n    ///      to wait for finalization until the reserve is refilled by subsequent\n    ///      deposits or a manual top-up. The integrator is responsible for\n    ///      handling such cases.\n    // slither-disable-next-line dead-code\n    function _calculateTbtcAmount(\n        uint64 depositAmountSat,\n        uint64 depositTreasuryFeeSat\n    ) internal view virtual returns (uint256) {\n        // Both deposit amount and treasury fee are in the 1e8 satoshi precision.\n        // We need to convert them to the 1e18 TBTC precision.\n        uint256 amountSubTreasury = (depositAmountSat - depositTreasuryFeeSat) *\n            SATOSHI_MULTIPLIER;\n\n        uint256 omFeeDivisor = tbtcVault.optimisticMintingFeeDivisor();\n        uint256 omFee = omFeeDivisor > 0\n            ? (amountSubTreasury / omFeeDivisor)\n            : 0;\n\n        // The deposit transaction max fee is in the 1e8 satoshi precision.\n        // We need to convert them to the 1e18 TBTC precision.\n        (, , uint64 depositTxMaxFee, ) = bridge.depositParameters();\n        uint256 txMaxFee = depositTxMaxFee * SATOSHI_MULTIPLIER;\n\n        return amountSubTreasury - omFee - txMaxFee;\n    }\n\n    /// @notice Calculates the deposit key for the given funding transaction\n    ///         hash and funding output index.\n    /// @param fundingTxHash Funding transaction hash.\n    /// @param fundingOutputIndex Funding output index.\n    /// @return depositKey Deposit key computed as\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\n    ///         key can be used to refer to the deposit in the Bridge and\n    ///         TBTCVault contracts.\n    // slither-disable-next-line dead-code\n    function _calculateDepositKey(\n        bytes32 fundingTxHash,\n        uint32 fundingOutputIndex\n    ) internal pure returns (uint256) {\n        return\n            uint256(\n                keccak256(abi.encodePacked(fundingTxHash, fundingOutputIndex))\n            );\n    }\n\n    /// @notice Calculates the Bitcoin transaction hash for the given Bitcoin\n    ///         transaction data.\n    /// @param txInfo Bitcoin transaction data, see `IBridgeTypes.BitcoinTxInfo` struct.\n    /// @return txHash Bitcoin transaction hash.\n    // slither-disable-next-line dead-code\n    function _calculateBitcoinTxHash(IBridgeTypes.BitcoinTxInfo memory txInfo)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            abi\n                .encodePacked(\n                    txInfo.version,\n                    txInfo.inputVector,\n                    txInfo.outputVector,\n                    txInfo.locktime\n                )\n                .hash256View();\n    }\n\n    /// @notice Returns minimum deposit amount.\n    /// @return Minimum deposit amount. In TBTC token decimals precision.\n    // slither-disable-next-line dead-code\n    function _minDepositAmount() internal view returns (uint256) {\n        // Read tBTC Bridge Deposit Dust Threshold in satoshi precision.\n        (uint64 bridgeDepositDustThresholdSat, , , ) = bridge\n            .depositParameters();\n\n        // Convert tBTC Bridge Deposit Dust Threshold to TBTC token precision.\n        return bridgeDepositDustThresholdSat * SATOSHI_MULTIPLIER;\n    }\n}\n"},"contracts/integrator/IBridge.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity ^0.8.0;\n\n/// @notice Namespace which groups all types relevant to the IBridge interface.\n/// @dev This is a mirror of the real types used in the Bridge contract.\n///      This way, the `integrator` subpackage does not need to import\n///      anything from the `bridge` subpackage and explicitly depend on it.\n///      This simplifies the dependency graph for integrators.\nlibrary IBridgeTypes {\n    /// @dev See bridge/BitcoinTx.sol#Info\n    struct BitcoinTxInfo {\n        bytes4 version;\n        bytes inputVector;\n        bytes outputVector;\n        bytes4 locktime;\n    }\n\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\n    struct DepositRevealInfo {\n        uint32 fundingOutputIndex;\n        bytes8 blindingFactor;\n        bytes20 walletPubKeyHash;\n        bytes20 refundPubKeyHash;\n        bytes4 refundLocktime;\n        address vault;\n    }\n\n    /// @dev See bridge/Deposit.sol#DepositRequest\n    struct DepositRequest {\n        address depositor;\n        uint64 amount;\n        uint32 revealedAt;\n        address vault;\n        uint64 treasuryFee;\n        uint32 sweptAt;\n        bytes32 extraData;\n    }\n}\n\n/// @notice Interface of the Bridge contract.\n/// @dev See bridge/Bridge.sol\ninterface IBridge {\n    /// @dev See {Bridge#revealDepositWithExtraData}\n    function revealDepositWithExtraData(\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\n        IBridgeTypes.DepositRevealInfo calldata reveal,\n        bytes32 extraData\n    ) external;\n\n    /// @dev See {Bridge#deposits}\n    function deposits(uint256 depositKey)\n        external\n        view\n        returns (IBridgeTypes.DepositRequest memory);\n\n    /// @dev See {Bridge#depositParameters}\n    function depositParameters()\n        external\n        view\n        returns (\n            uint64 depositDustThreshold,\n            uint64 depositTreasuryFeeDivisor,\n            uint64 depositTxMaxFee,\n            uint32 depositRevealAheadPeriod\n        );\n}\n"},"contracts/integrator/ITBTCVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity ^0.8.0;\n\n/// @notice Interface of the TBTCVault contract.\n/// @dev See vault/TBTCVault.sol\ninterface ITBTCVault {\n    /// @dev See {TBTCVault#optimisticMintingRequests}\n    function optimisticMintingRequests(uint256 depositKey)\n        external\n        returns (uint64 requestedAt, uint64 finalizedAt);\n\n    /// @dev See {TBTCVault#optimisticMintingFeeDivisor}\n    function optimisticMintingFeeDivisor() external view returns (uint32);\n\n    /// @dev See {TBTCVault#tbtcToken}\n    function tbtcToken() external view returns (address);\n}\n"},"contracts/l2/L1BitcoinDepositor.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity 0.8.17;\n\nimport \"@keep-network/random-beacon/contracts/Reimbursable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../integrator/AbstractTBTCDepositor.sol\";\nimport \"../integrator/IBridge.sol\";\nimport \"../integrator/ITBTCVault.sol\";\nimport \"./Wormhole.sol\";\n\n/// @title L1BitcoinDepositor\n/// @notice This contract is part of the direct bridging mechanism allowing\n///         users to obtain ERC20 TBTC on supported L2 chains, without the need\n///         to interact with the L1 tBTC ledger chain where minting occurs.\n///\n///         `L1BitcoinDepositor` is deployed on the L1 chain and interacts with\n///         their L2 counterpart, the `L2BitcoinDepositor`, deployed on the given\n///         L2 chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor` pair is\n///         responsible for a specific L2 chain.\n///\n///         The outline of the direct bridging mechanism is as follows:\n///         1. An L2 user issues a Bitcoin funding transaction to a P2(W)SH\n///            deposit address that embeds the `L1BitcoinDepositor` contract\n///            and L2 user addresses. The `L1BitcoinDepositor` contract serves\n///            as the actual depositor on the L1 chain while the L2 user\n///            address is set as the deposit owner who will receive the\n///            minted ERC20 TBTC.\n///         2. The data about the Bitcoin funding transaction and deposit\n///            address are passed to the relayer. In the first iteration of\n///            the direct bridging mechanism, this is achieved using an\n///            on-chain event emitted by the `L2BitcoinDepositor` contract.\n///            Further iterations assumes those data are passed off-chain, e.g.\n///            through a REST API exposed by the relayer.\n///         3. The relayer uses the data to initialize a deposit on the L1\n///            chain by calling the `initializeDeposit` function of the\n///            `L1BitcoinDepositor` contract. The `initializeDeposit` function\n///            reveals the deposit to the tBTC Bridge so minting of ERC20 L1 TBTC\n///            can occur.\n///         4. Once minting is complete, the `L1BitcoinDepositor` contract\n///            receives minted ERC20 L1 TBTC. The relayer then calls the\n///            `finalizeDeposit` function of the `L1BitcoinDepositor` contract\n///            to transfer the minted ERC20 L1 TBTC to the L2 user address. This\n///            is achieved using the Wormhole protocol. First, the `finalizeDeposit`\n///            function initiates a Wormhole token transfer that locks the ERC20\n///            L1 TBTC within the Wormhole Token Bridge contract and assigns\n///            Wormhole-wrapped L2 TBTC to the corresponding `L2WormholeGateway`\n///            contract. Then, `finalizeDeposit` notifies the `L2BitcoinDepositor`\n///            contract by sending a Wormhole message containing the VAA\n///            of the Wormhole token transfer. The `L2BitcoinDepositor` contract\n///            receives the Wormhole message, and calls the `L2WormholeGateway`\n///            contract that redeems Wormhole-wrapped L2 TBTC from the Wormhole\n///            Token Bridge and uses it to mint canonical L2 TBTC to the L2 user\n///            address.\ncontract L1BitcoinDepositor is\n    Initializable,\n    AbstractTBTCDepositor,\n    OwnableUpgradeable,\n    Reimbursable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice Reflects the deposit state:\n    ///         - Unknown deposit has not been initialized yet.\n    ///         - Initialized deposit has been initialized with a call to\n    ///           `initializeDeposit` function and is known to this contract.\n    ///         - Finalized deposit led to TBTC ERC20 minting and was finalized\n    ///           with a call to `finalizeDeposit` function that transferred\n    ///           TBTC ERC20 to the L2 deposit owner.\n    enum DepositState {\n        Unknown,\n        Initialized,\n        Finalized\n    }\n\n    /// @notice Holds information about a deferred gas reimbursement.\n    struct GasReimbursement {\n        /// @notice Receiver that is supposed to receive the reimbursement.\n        address receiver;\n        /// @notice Gas expenditure that is meant to be reimbursed.\n        uint96 gasSpent;\n    }\n\n    /// @notice Holds the deposit state, keyed by the deposit key calculated for\n    ///         the individual deposit during the call to `initializeDeposit`\n    ///         function.\n    mapping(uint256 => DepositState) public deposits;\n    /// @notice ERC20 L1 TBTC token contract.\n    IERC20Upgradeable public tbtcToken;\n    /// @notice `Wormhole` core contract on L1.\n    IWormhole public wormhole;\n    /// @notice `WormholeRelayer` contract on L1.\n    IWormholeRelayer public wormholeRelayer;\n    /// @notice Wormhole `TokenBridge` contract on L1.\n    IWormholeTokenBridge public wormholeTokenBridge;\n    /// @notice tBTC `L2WormholeGateway` contract on the corresponding L2 chain.\n    address public l2WormholeGateway;\n    /// @notice Wormhole chain ID of the corresponding L2 chain.\n    uint16 public l2ChainId;\n    /// @notice tBTC `L2BitcoinDepositor` contract on the corresponding L2 chain.\n    address public l2BitcoinDepositor;\n    /// @notice Gas limit necessary to execute the L2 part of the deposit\n    ///         finalization. This value is used to calculate the payment for\n    ///         the Wormhole Relayer that is responsible to execute the\n    ///         deposit finalization on the corresponding L2 chain. Can be\n    ///         updated by the owner.\n    uint256 public l2FinalizeDepositGasLimit;\n    /// @notice Holds deferred gas reimbursements for deposit initialization\n    ///         (indexed by deposit key). Reimbursement for deposit\n    ///         initialization is paid out upon deposit finalization. This is\n    ///         because the tBTC Bridge accepts all (even invalid) deposits but\n    ///         mints ERC20 TBTC only for the valid ones. Paying out the\n    ///         reimbursement directly upon initialization would make the\n    ///         reimbursement pool vulnerable to malicious actors that could\n    ///         drain it by initializing invalid deposits.\n    mapping(uint256 => GasReimbursement) public gasReimbursements;\n    /// @notice Gas that is meant to balance the overall cost of deposit initialization.\n    ///         Can be updated by the owner based on the current market conditions.\n    uint256 public initializeDepositGasOffset;\n    /// @notice Gas that is meant to balance the overall cost of deposit finalization.\n    ///         Can be updated by the owner based on the current market conditions.\n    uint256 public finalizeDepositGasOffset;\n    /// @notice Set of addresses that are authorized to receive gas reimbursements\n    ///         for deposit initialization and finalization. The authorization is\n    ///         granted by the contract owner.\n    mapping(address => bool) public reimbursementAuthorizations;\n\n    event DepositInitialized(\n        uint256 indexed depositKey,\n        address indexed l2DepositOwner,\n        address indexed l1Sender\n    );\n\n    event DepositFinalized(\n        uint256 indexed depositKey,\n        address indexed l2DepositOwner,\n        address indexed l1Sender,\n        uint256 initialAmount,\n        uint256 tbtcAmount\n    );\n\n    event L2FinalizeDepositGasLimitUpdated(uint256 l2FinalizeDepositGasLimit);\n\n    event GasOffsetParametersUpdated(\n        uint256 initializeDepositGasOffset,\n        uint256 finalizeDepositGasOffset\n    );\n\n    event ReimbursementAuthorizationUpdated(\n        address indexed _address,\n        bool authorization\n    );\n\n    /// @dev This modifier comes from the `Reimbursable` base contract and\n    ///      must be overridden to protect the `updateReimbursementPool` call.\n    modifier onlyReimbursableAdmin() override {\n        require(msg.sender == owner(), \"Caller is not the owner\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _tbtcBridge,\n        address _tbtcVault,\n        address _wormhole,\n        address _wormholeRelayer,\n        address _wormholeTokenBridge,\n        address _l2WormholeGateway,\n        uint16 _l2ChainId\n    ) external initializer {\n        __AbstractTBTCDepositor_initialize(_tbtcBridge, _tbtcVault);\n        __Ownable_init();\n\n        require(_wormhole != address(0), \"Wormhole address cannot be zero\");\n        require(\n            _wormholeRelayer != address(0),\n            \"WormholeRelayer address cannot be zero\"\n        );\n        require(\n            _wormholeTokenBridge != address(0),\n            \"WormholeTokenBridge address cannot be zero\"\n        );\n        require(\n            _l2WormholeGateway != address(0),\n            \"L2WormholeGateway address cannot be zero\"\n        );\n\n        tbtcToken = IERC20Upgradeable(ITBTCVault(_tbtcVault).tbtcToken());\n        wormhole = IWormhole(_wormhole);\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\n        wormholeTokenBridge = IWormholeTokenBridge(_wormholeTokenBridge);\n        // slither-disable-next-line missing-zero-check\n        l2WormholeGateway = _l2WormholeGateway;\n        l2ChainId = _l2ChainId;\n        l2FinalizeDepositGasLimit = 500_000;\n        initializeDepositGasOffset = 60_000;\n        finalizeDepositGasOffset = 20_000;\n    }\n\n    /// @notice Sets the address of the `L2BitcoinDepositor` contract on the\n    ///         corresponding L2 chain. This function solves the chicken-and-egg\n    ///         problem of setting the `L2BitcoinDepositor` contract address\n    ///         on the `L1BitcoinDepositor` contract and vice versa.\n    /// @param _l2BitcoinDepositor Address of the `L2BitcoinDepositor` contract.\n    /// @dev Requirements:\n    ///      - Can be called only by the contract owner,\n    ///      - The address must not be set yet,\n    ///      - The new address must not be 0x0.\n    function attachL2BitcoinDepositor(address _l2BitcoinDepositor)\n        external\n        onlyOwner\n    {\n        require(\n            l2BitcoinDepositor == address(0),\n            \"L2 Bitcoin Depositor already set\"\n        );\n        require(\n            _l2BitcoinDepositor != address(0),\n            \"L2 Bitcoin Depositor must not be 0x0\"\n        );\n        l2BitcoinDepositor = _l2BitcoinDepositor;\n    }\n\n    /// @notice Updates the gas limit necessary to execute the L2 part of the\n    ///         deposit finalization.\n    /// @param _l2FinalizeDepositGasLimit New gas limit.\n    /// @dev Requirements:\n    ///      - Can be called only by the contract owner.\n    function updateL2FinalizeDepositGasLimit(uint256 _l2FinalizeDepositGasLimit)\n        external\n        onlyOwner\n    {\n        l2FinalizeDepositGasLimit = _l2FinalizeDepositGasLimit;\n        emit L2FinalizeDepositGasLimitUpdated(_l2FinalizeDepositGasLimit);\n    }\n\n    /// @notice Updates the values of gas offset parameters.\n    /// @dev Can be called only by the contract owner. The caller is responsible\n    ///      for validating parameters.\n    /// @param _initializeDepositGasOffset New initialize deposit gas offset.\n    /// @param _finalizeDepositGasOffset New finalize deposit gas offset.\n    function updateGasOffsetParameters(\n        uint256 _initializeDepositGasOffset,\n        uint256 _finalizeDepositGasOffset\n    ) external onlyOwner {\n        initializeDepositGasOffset = _initializeDepositGasOffset;\n        finalizeDepositGasOffset = _finalizeDepositGasOffset;\n\n        emit GasOffsetParametersUpdated(\n            _initializeDepositGasOffset,\n            _finalizeDepositGasOffset\n        );\n    }\n\n    /// @notice Updates the reimbursement authorization for the given address.\n    /// @param _address Address to update the authorization for.\n    /// @param authorization New authorization status.\n    /// @dev Requirements:\n    ///      - Can be called only by the contract owner.\n    function updateReimbursementAuthorization(\n        address _address,\n        bool authorization\n    ) external onlyOwner {\n        emit ReimbursementAuthorizationUpdated(_address, authorization);\n        reimbursementAuthorizations[_address] = authorization;\n    }\n\n    /// @notice Initializes the deposit process on L1 by revealing the deposit\n    ///         data (funding transaction and components of the P2(W)SH deposit\n    ///         address) to the tBTC Bridge. Once tBTC minting is completed,\n    ///         this call should be followed by a call to `finalizeDeposit`.\n    ///         Callers of `initializeDeposit` are eligible for a gas refund\n    ///         that is paid out upon deposit finalization (only if the\n    ///         reimbursement pool is attached and the given caller is\n    ///         authorized for refunds).\n    ///\n    ///         The Bitcoin funding transaction must transfer funds to a P2(W)SH\n    ///         deposit address whose underlying script is built from the\n    ///         following components:\n    ///\n    ///         <depositor-address> DROP\n    ///         <depositor-extra-data> DROP\n    ///         <blinding-factor> DROP\n    ///         DUP HASH160 <signingGroupPubkeyHash> EQUAL\n    ///         IF\n    ///           CHECKSIG\n    ///         ELSE\n    ///           DUP HASH160 <refundPubkeyHash> EQUALVERIFY\n    ///           <locktime> CHECKLOCKTIMEVERIFY DROP\n    ///           CHECKSIG\n    ///         ENDIF\n    ///\n    ///         Where:\n    ///\n    ///         <depositor-address> 20-byte L1 address of the\n    ///         `L1BitcoinDepositor` contract.\n    ///\n    ///         <depositor-extra-data> L2 deposit owner address in the Wormhole\n    ///         format, i.e. 32-byte value left-padded with 0.\n    ///\n    ///         <blinding-factor> 8-byte deposit blinding factor, as used in the\n    ///         tBTC bridge.\n    ///\n    ///         <signingGroupPubkeyHash> The compressed Bitcoin public key (33\n    ///         bytes and 02 or 03 prefix) of the deposit's wallet hashed in the\n    ///         HASH160 Bitcoin opcode style. This must point to the active tBTC\n    ///         bridge wallet.\n    ///\n    ///         <refundPubkeyHash> The compressed Bitcoin public key (33 bytes\n    ///         and 02 or 03 prefix) that can be used to make the deposit refund\n    ///         after the tBTC bridge refund locktime passed. Hashed in the\n    ///         HASH160 Bitcoin opcode style. This is needed only as a security\n    ///         measure protecting the user in case tBTC bridge completely stops\n    ///         functioning.\n    ///\n    ///         <locktime> The Bitcoin script refund locktime (4-byte LE),\n    ///         according to tBTC bridge rules.\n    ///\n    ///         Please consult tBTC `Bridge.revealDepositWithExtraData` function\n    ///         documentation for more information.\n    /// @param fundingTx Bitcoin funding transaction data.\n    /// @param reveal Deposit reveal data.\n    /// @param l2DepositOwner Address of the L2 deposit owner.\n    /// @dev Requirements:\n    ///      - The L2 deposit owner address must not be 0x0,\n    ///      - The function can be called only one time for the given Bitcoin\n    ///        funding transaction,\n    ///      - The L2 deposit owner must be embedded in the Bitcoin P2(W)SH\n    ///        deposit script as the <depositor-extra-data> field. The 20-byte\n    ///        address must be expressed as a 32-byte value left-padded with 0.\n    ///        If the value in the Bitcoin script and the value passed as\n    ///        parameter do not match, the function will revert,\n    ///      - All the requirements of tBTC Bridge.revealDepositWithExtraData\n    ///        must be met.\n    function initializeDeposit(\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\n        IBridgeTypes.DepositRevealInfo calldata reveal,\n        address l2DepositOwner\n    ) external {\n        uint256 gasStart = gasleft();\n\n        require(\n            l2DepositOwner != address(0),\n            \"L2 deposit owner must not be 0x0\"\n        );\n\n        // Convert the L2 deposit owner address into the Wormhole format and\n        // encode it as deposit extra data.\n        bytes32 extraData = WormholeUtils.toWormholeAddress(l2DepositOwner);\n\n        // Input parameters do not have to be validated in any way.\n        // The tBTC Bridge is responsible for validating whether the provided\n        // Bitcoin funding transaction transfers funds to the P2(W)SH deposit\n        // address built from the reveal data. Despite the tBTC Bridge accepts\n        // all transactions that meet the format requirements, it mints ERC20\n        // L1 TBTC only for the ones that actually occurred on the Bitcoin\n        // network and gathered enough confirmations.\n        (uint256 depositKey, ) = _initializeDeposit(\n            fundingTx,\n            reveal,\n            extraData\n        );\n\n        require(\n            deposits[depositKey] == DepositState.Unknown,\n            \"Wrong deposit state\"\n        );\n\n        // slither-disable-next-line reentrancy-benign\n        deposits[depositKey] = DepositState.Initialized;\n\n        // slither-disable-next-line reentrancy-events\n        emit DepositInitialized(depositKey, l2DepositOwner, msg.sender);\n\n        // Record a deferred gas reimbursement if the reimbursement pool is\n        // attached and the caller is authorized to receive reimbursements.\n        if (\n            address(reimbursementPool) != address(0) &&\n            reimbursementAuthorizations[msg.sender]\n        ) {\n            uint256 gasSpent = (gasStart - gasleft()) +\n                initializeDepositGasOffset;\n\n            // Should not happen as long as initializeDepositGasOffset is\n            // set to a reasonable value. If it happens, it's better to\n            // omit the reimbursement than to revert the transaction.\n            if (gasSpent > type(uint96).max) {\n                return;\n            }\n\n            // Do not issue a reimbursement immediately. Record\n            // a deferred reimbursement that will be paid out upon deposit\n            // finalization. This is because the tBTC Bridge accepts all\n            // (even invalid) deposits but mints ERC20 TBTC only for the valid\n            // ones. Paying out the reimbursement directly upon initialization\n            // would make the reimbursement pool vulnerable to malicious actors\n            // that could drain it by initializing invalid deposits.\n            // slither-disable-next-line reentrancy-benign\n            gasReimbursements[depositKey] = GasReimbursement({\n                receiver: msg.sender,\n                gasSpent: uint96(gasSpent)\n            });\n        }\n    }\n\n    /// @notice Finalizes the deposit process by transferring ERC20 L1 TBTC\n    ///         to the L2 deposit owner. This function should be called after\n    ///         the deposit was initialized with a call to `initializeDeposit`\n    ///         function and after ERC20 L1 TBTC was minted by the tBTC Bridge\n    ///         to the `L1BitcoinDepositor` contract. Please note several hours\n    ///         may pass between `initializeDeposit`and `finalizeDeposit`.\n    ///         If the reimbursement pool is attached, the function pays out\n    ///         a gas and call's value refund to the caller (if the given\n    ///         caller is authorized for refunds) as well as the deferred gas\n    ///         refund to the caller of `initializeDeposit` corresponding to\n    ///         the finalized deposit.\n    /// @param depositKey The deposit key, as emitted in the `DepositInitialized`\n    ///        event emitted by the `initializeDeposit` function for the deposit.\n    /// @dev Requirements:\n    ///      - `initializeDeposit` was called for the given deposit before,\n    ///      - ERC20 L1 TBTC was minted by tBTC Bridge to this contract,\n    ///      - The function was not called for the given deposit before,\n    ///      - The call must carry a payment for the Wormhole Relayer that\n    ///        is responsible for executing the deposit finalization on the\n    ///        corresponding L2 chain. The payment must be equal to the\n    ///        value returned by the `quoteFinalizeDeposit` function.\n    function finalizeDeposit(uint256 depositKey) external payable {\n        uint256 gasStart = gasleft();\n\n        require(\n            deposits[depositKey] == DepositState.Initialized,\n            \"Wrong deposit state\"\n        );\n\n        deposits[depositKey] = DepositState.Finalized;\n\n        (\n            uint256 initialDepositAmount,\n            uint256 tbtcAmount,\n            // Deposit extra data is actually the L2 deposit owner\n            // address in Wormhole format.\n            bytes32 l2DepositOwner\n        ) = _finalizeDeposit(depositKey);\n\n        // slither-disable-next-line reentrancy-events\n        emit DepositFinalized(\n            depositKey,\n            WormholeUtils.fromWormholeAddress(l2DepositOwner),\n            msg.sender,\n            initialDepositAmount,\n            tbtcAmount\n        );\n\n        _transferTbtc(tbtcAmount, l2DepositOwner);\n\n        // `ReimbursementPool` calls the untrusted receiver address using a\n        // low-level call. Reentrancy risk is mitigated by making sure that\n        // `ReimbursementPool.refund` is a non-reentrant function and executing\n        // reimbursements as the last step of the deposit finalization.\n        if (address(reimbursementPool) != address(0)) {\n            // If there is a deferred reimbursement for this deposit\n            // initialization, pay it out now. No need to check reimbursement\n            // authorization for the initialization caller. If the deferred\n            // reimbursement is here, that implies the caller was authorized\n            // to receive it.\n            GasReimbursement memory reimbursement = gasReimbursements[\n                depositKey\n            ];\n            if (reimbursement.receiver != address(0)) {\n                delete gasReimbursements[depositKey];\n\n                reimbursementPool.refund(\n                    reimbursement.gasSpent,\n                    reimbursement.receiver\n                );\n            }\n\n            // Pay out the reimbursement for deposit finalization if the caller\n            // is authorized to receive reimbursements.\n            if (reimbursementAuthorizations[msg.sender]) {\n                // As this call is payable and this transaction carries out a\n                // msg.value that covers Wormhole cost, we need to reimburse\n                // that as well. However, the `ReimbursementPool` issues refunds\n                // based on gas spent. We need to convert msg.value accordingly\n                // using the `_refundToGasSpent` function.\n                uint256 msgValueOffset = _refundToGasSpent(msg.value);\n                reimbursementPool.refund(\n                    (gasStart - gasleft()) +\n                        msgValueOffset +\n                        finalizeDepositGasOffset,\n                    msg.sender\n                );\n            }\n        }\n    }\n\n    /// @notice The `ReimbursementPool` contract issues refunds based on\n    ///         gas spent. If there is a need to get a specific refund based\n    ///         on WEI value, such a value must be first converted to gas spent.\n    ///         This function does such a conversion.\n    /// @param refund Refund value in WEI.\n    /// @return Refund value as gas spent.\n    /// @dev This function is the reverse of the logic used\n    ///      within `ReimbursementPool.refund`.\n    function _refundToGasSpent(uint256 refund) internal returns (uint256) {\n        uint256 maxGasPrice = reimbursementPool.maxGasPrice();\n        uint256 staticGas = reimbursementPool.staticGas();\n\n        uint256 gasPrice = tx.gasprice < maxGasPrice\n            ? tx.gasprice\n            : maxGasPrice;\n\n        // Should not happen but check just in case of weird ReimbursementPool\n        // configuration.\n        if (gasPrice == 0) {\n            return 0;\n        }\n\n        uint256 gasSpent = (refund / gasPrice);\n\n        // Should not happen but check just in case of weird ReimbursementPool\n        // configuration.\n        if (staticGas > gasSpent) {\n            return 0;\n        }\n\n        return gasSpent - staticGas;\n    }\n\n    /// @notice Quotes the payment that must be attached to the `finalizeDeposit`\n    ///         function call. The payment is necessary to cover the cost of\n    ///         the Wormhole Relayer that is responsible for executing the\n    ///         deposit finalization on the corresponding L2 chain.\n    /// @return cost The cost of the `finalizeDeposit` function call in WEI.\n    function quoteFinalizeDeposit() external view returns (uint256 cost) {\n        cost = _quoteFinalizeDeposit(wormhole.messageFee());\n    }\n\n    /// @notice Internal version of the `quoteFinalizeDeposit` function that\n    ///         works with a custom Wormhole message fee.\n    /// @param messageFee Custom Wormhole message fee.\n    /// @return cost The cost of the `finalizeDeposit` function call in WEI.\n    /// @dev Implemented based on examples presented as part of the Wormhole SDK:\n    ///      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L23\n    function _quoteFinalizeDeposit(uint256 messageFee)\n        internal\n        view\n        returns (uint256 cost)\n    {\n        // Cost of delivering token and payload to `l2ChainId`.\n        (uint256 deliveryCost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\n            l2ChainId,\n            0,\n            l2FinalizeDepositGasLimit\n        );\n\n        // Total cost = delivery cost + cost of publishing the `sending token`\n        // Wormhole message.\n        cost = deliveryCost + messageFee;\n    }\n\n    /// @notice Transfers ERC20 L1 TBTC to the L2 deposit owner using the Wormhole\n    ///         protocol. The function initiates a Wormhole token transfer that\n    ///         locks the ERC20 L1 TBTC within the Wormhole Token Bridge contract\n    ///         and assigns Wormhole-wrapped L2 TBTC to the corresponding\n    ///         `L2WormholeGateway` contract. Then, the function notifies the\n    ///         `L2BitcoinDepositor` contract by sending a Wormhole message\n    ///         containing the VAA of the Wormhole token transfer. The\n    ///         `L2BitcoinDepositor` contract receives the Wormhole message,\n    ///         and calls the `L2WormholeGateway` contract that redeems\n    ///         Wormhole-wrapped L2 TBTC from the Wormhole Token Bridge and\n    ///         uses it to mint canonical L2 TBTC to the L2 deposit owner address.\n    /// @param amount Amount of TBTC L1 ERC20 to transfer (1e18 precision).\n    /// @param l2Receiver Address of the L2 deposit owner.\n    /// @dev Requirements:\n    ///      - The normalized amount (1e8 precision) must be greater than 0,\n    ///      - The appropriate payment for the Wormhole Relayer must be\n    ///        attached to the call (as calculated by `quoteFinalizeDeposit`).\n    /// @dev Implemented based on examples presented as part of the Wormhole SDK:\n    ///      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L29\n    function _transferTbtc(uint256 amount, bytes32 l2Receiver) internal {\n        // Wormhole supports the 1e8 precision at most. TBTC is 1e18 so\n        // the amount needs to be normalized.\n        amount = WormholeUtils.normalize(amount);\n\n        require(amount > 0, \"Amount too low to bridge\");\n\n        // Cost of requesting a `finalizeDeposit` message to be sent to\n        //  `l2ChainId` with a gasLimit of `l2FinalizeDepositGasLimit`.\n        uint256 wormholeMessageFee = wormhole.messageFee();\n        uint256 cost = _quoteFinalizeDeposit(wormholeMessageFee);\n\n        require(msg.value == cost, \"Payment for Wormhole Relayer is too low\");\n\n        // The Wormhole Token Bridge will pull the TBTC amount\n        // from this contract. We need to approve the transfer first.\n        tbtcToken.safeIncreaseAllowance(address(wormholeTokenBridge), amount);\n\n        // Initiate a Wormhole token transfer that will lock L1 TBTC within\n        // the Wormhole Token Bridge contract and assign Wormhole-wrapped\n        // L2 TBTC to the corresponding `L2WormholeGateway` contract.\n        // slither-disable-next-line arbitrary-send-eth\n        uint64 transferSequence = wormholeTokenBridge.transferTokensWithPayload{\n            value: wormholeMessageFee\n        }(\n            address(tbtcToken),\n            amount,\n            l2ChainId,\n            WormholeUtils.toWormholeAddress(l2WormholeGateway),\n            0, // Nonce is a free field that is not relevant in this context.\n            abi.encode(l2Receiver) // Set the L2 receiver address as the transfer payload.\n        );\n\n        // Construct the VAA key corresponding to the above Wormhole token transfer.\n        WormholeTypes.VaaKey[]\n            memory additionalVaas = new WormholeTypes.VaaKey[](1);\n        additionalVaas[0] = WormholeTypes.VaaKey({\n            chainId: wormhole.chainId(),\n            emitterAddress: WormholeUtils.toWormholeAddress(\n                address(wormholeTokenBridge)\n            ),\n            sequence: transferSequence\n        });\n\n        // The Wormhole token transfer initiated above must be finalized on\n        // the L2 chain. We achieve that by sending the transfer's VAA to the\n        // `L2BitcoinDepositor` contract. Once, the `L2BitcoinDepositor`\n        // contract receives it, it calls the `L2WormholeGateway` contract\n        // that redeems Wormhole-wrapped L2 TBTC from the Wormhole Token\n        // Bridge and use it to mint canonical L2 TBTC to the receiver address.\n        // slither-disable-next-line arbitrary-send-eth,unused-return\n        wormholeRelayer.sendVaasToEvm{value: cost - wormholeMessageFee}(\n            l2ChainId,\n            l2BitcoinDepositor,\n            bytes(\"\"), // No payload needed. The L2 receiver address is already encoded in the Wormhole token transfer payload.\n            0, // No receiver value needed.\n            l2FinalizeDepositGasLimit,\n            additionalVaas,\n            l2ChainId, // Set the L2 chain as the refund chain to avoid cross-chain refunds.\n            msg.sender // Set the caller as the refund receiver.\n        );\n    }\n}\n"},"contracts/l2/L2BitcoinDepositor.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../integrator/IBridge.sol\";\nimport \"./Wormhole.sol\";\n\n/// @title IL2WormholeGateway\n/// @notice Interface to the `L2WormholeGateway` contract.\ninterface IL2WormholeGateway {\n    /// @dev See ./L2WormholeGateway.sol#receiveTbtc\n    function receiveTbtc(bytes memory vaa) external;\n}\n\n/// @title L2BitcoinDepositor\n/// @notice This contract is part of the direct bridging mechanism allowing\n///         users to obtain ERC20 TBTC on supported L2 chains, without the need\n///         to interact with the L1 tBTC ledger chain where minting occurs.\n///\n///         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with\n///         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the\n///         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`\n///         pair is responsible for a specific L2 chain.\n///\n///         Please consult the `L1BitcoinDepositor` docstring for an\n///         outline of the direct bridging mechanism\n// slither-disable-next-line locked-ether\ncontract L2BitcoinDepositor is IWormholeReceiver, OwnableUpgradeable {\n    /// @notice `WormholeRelayer` contract on L2.\n    IWormholeRelayer public wormholeRelayer;\n    /// @notice tBTC `L2WormholeGateway` contract on L2.\n    IL2WormholeGateway public l2WormholeGateway;\n    /// @notice Wormhole chain ID of the corresponding L1 chain.\n    uint16 public l1ChainId;\n    /// @notice tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain.\n    address public l1BitcoinDepositor;\n\n    event DepositInitialized(\n        IBridgeTypes.BitcoinTxInfo fundingTx,\n        IBridgeTypes.DepositRevealInfo reveal,\n        address indexed l2DepositOwner,\n        address indexed l2Sender\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _wormholeRelayer,\n        address _l2WormholeGateway,\n        uint16 _l1ChainId\n    ) external initializer {\n        __Ownable_init();\n\n        require(\n            _wormholeRelayer != address(0),\n            \"WormholeRelayer address cannot be zero\"\n        );\n        require(\n            _l2WormholeGateway != address(0),\n            \"L2WormholeGateway address cannot be zero\"\n        );\n\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\n        l2WormholeGateway = IL2WormholeGateway(_l2WormholeGateway);\n        l1ChainId = _l1ChainId;\n    }\n\n    /// @notice Sets the address of the `L1BitcoinDepositor` contract on the\n    ///         corresponding L1 chain. This function solves the chicken-and-egg\n    ///         problem of setting the `L1BitcoinDepositor` contract address\n    ///         on the `L2BitcoinDepositor` contract and vice versa.\n    /// @param _l1BitcoinDepositor Address of the `L1BitcoinDepositor` contract.\n    /// @dev Requirements:\n    ///      - Can be called only by the contract owner,\n    ///      - The address must not be set yet,\n    ///      - The new address must not be 0x0.\n    function attachL1BitcoinDepositor(address _l1BitcoinDepositor)\n        external\n        onlyOwner\n    {\n        require(\n            l1BitcoinDepositor == address(0),\n            \"L1 Bitcoin Depositor already set\"\n        );\n        require(\n            _l1BitcoinDepositor != address(0),\n            \"L1 Bitcoin Depositor must not be 0x0\"\n        );\n        l1BitcoinDepositor = _l1BitcoinDepositor;\n    }\n\n    /// @notice Initializes the deposit process on L2 by emitting an event\n    ///         containing the deposit data (funding transaction and\n    ///         components of the P2(W)SH deposit address). The event is\n    ///         supposed to be picked up by the relayer and used to initialize\n    ///         the deposit on L1 through the `L1BitcoinDepositor` contract.\n    /// @param fundingTx Bitcoin funding transaction data.\n    /// @param reveal Deposit reveal data.\n    /// @param l2DepositOwner Address of the L2 deposit owner.\n    /// @dev The alternative approach of using Wormhole Relayer to send the\n    ///      deposit data to L1 was considered. However, it turned out to be\n    ///      too expensive. For example, relying deposit data from Base L2 to\n    ///      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).\n    ///      Moreover, the next iteration of the direct bridging mechanism\n    ///      assumes that no L2 transaction will be required to initialize the\n    ///      deposit and the relayer should obtain the deposit data off-chain.\n    ///      There is a high chance this function will be removed then.\n    ///      That said, there was no sense to explore another cross-chain\n    ///      messaging solutions. Relying on simple on-chain event and custom\n    ///      off-chain relayer seems to be the most reasonable way to go. It\n    ///      also aligns with the future direction of the direct bridging mechanism.\n    function initializeDeposit(\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\n        IBridgeTypes.DepositRevealInfo calldata reveal,\n        address l2DepositOwner\n    ) external {\n        emit DepositInitialized(fundingTx, reveal, l2DepositOwner, msg.sender);\n    }\n\n    /// @notice Receives Wormhole messages originating from the corresponding\n    ///         `L1BitcoinDepositor` contract that lives on the L1 chain.\n    ///         Messages are issued upon deposit finalization on L1 and\n    ///         are supposed to carry the VAA of the Wormhole token transfer of\n    ///         ERC20 L1 TBTC to the L2 chain. This contract performs some basic\n    ///         checks and forwards the VAA to the `L2WormholeGateway` contract\n    ///         that is authorized to withdraw the Wormhole-wrapped L2 TBTC\n    ///         from the Wormhole Token Bridge (representing the ERC20 TBTC\n    ///         locked on L1) and use it to mint the canonical L2 TBTC for the\n    ///         deposit owner.\n    /// @param additionalVaas Additional VAAs that are part of the Wormhole message.\n    /// @param sourceAddress Address of the source of the message (in Wormhole format).\n    /// @param sourceChain Wormhole chain ID of the source chain.\n    /// @dev Requirements:\n    ///      - Can be called only by the Wormhole Relayer contract,\n    ///      - The source chain must be the expected L1 chain,\n    ///      - The source address must be the corresponding\n    ///        `L1BitcoinDepositor` contract,\n    ///      - The message must carry exactly 1 additional VAA key representing\n    ///        the token transfer.\n    function receiveWormholeMessages(\n        bytes memory,\n        bytes[] memory additionalVaas,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32\n    ) external payable {\n        require(\n            msg.sender == address(wormholeRelayer),\n            \"Caller is not Wormhole Relayer\"\n        );\n\n        require(\n            sourceChain == l1ChainId,\n            \"Source chain is not the expected L1 chain\"\n        );\n\n        require(\n            WormholeUtils.fromWormholeAddress(sourceAddress) ==\n                l1BitcoinDepositor,\n            \"Source address is not the expected L1 Bitcoin depositor\"\n        );\n\n        require(\n            additionalVaas.length == 1,\n            \"Expected 1 additional VAA key for token transfer\"\n        );\n\n        l2WormholeGateway.receiveTbtc(additionalVaas[0]);\n    }\n}\n"},"contracts/l2/Wormhole.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n// ██████████████     ▐████▌     ██████████████\n// ██████████████     ▐████▌     ██████████████\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n//               ▐████▌    ▐████▌\n\npragma solidity ^0.8.17;\n\n/// @title WormholeTypes\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\nlibrary WormholeTypes {\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\n    struct VaaKey {\n        uint16 chainId;\n        bytes32 emitterAddress;\n        uint64 sequence;\n    }\n}\n\n/// @title IWormhole\n/// @notice Wormhole interface.\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\ninterface IWormhole {\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\n    function chainId() external view returns (uint16);\n\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\n    function messageFee() external view returns (uint256);\n}\n\n/// @title IWormholeRelayer\n/// @notice Wormhole Relayer interface.\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\ninterface IWormholeRelayer {\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\n    function quoteEVMDeliveryPrice(\n        uint16 targetChain,\n        uint256 receiverValue,\n        uint256 gasLimit\n    )\n        external\n        view\n        returns (\n            uint256 nativePriceQuote,\n            uint256 targetChainRefundPerGasUnused\n        );\n\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\n    function sendVaasToEvm(\n        uint16 targetChain,\n        address targetAddress,\n        bytes memory payload,\n        uint256 receiverValue,\n        uint256 gasLimit,\n        WormholeTypes.VaaKey[] memory vaaKeys,\n        uint16 refundChain,\n        address refundAddress\n    ) external payable returns (uint64 sequence);\n}\n\n/// @title IWormholeReceiver\n/// @notice Wormhole Receiver interface.\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\ninterface IWormholeReceiver {\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\n    function receiveWormholeMessages(\n        bytes memory payload,\n        bytes[] memory additionalVaas,\n        bytes32 sourceAddress,\n        uint16 sourceChain,\n        bytes32 deliveryHash\n    ) external payable;\n}\n\n/// @title IWormholeTokenBridge\n/// @notice Wormhole Token Bridge interface.\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\ninterface IWormholeTokenBridge {\n    function completeTransferWithPayload(bytes memory encodedVm)\n        external\n        returns (bytes memory);\n\n    function parseTransferWithPayload(bytes memory encoded)\n        external\n        pure\n        returns (TransferWithPayload memory transfer);\n\n    function transferTokens(\n        address token,\n        uint256 amount,\n        uint16 recipientChain,\n        bytes32 recipient,\n        uint256 arbiterFee,\n        uint32 nonce\n    ) external payable returns (uint64 sequence);\n\n    function transferTokensWithPayload(\n        address token,\n        uint256 amount,\n        uint16 recipientChain,\n        bytes32 recipient,\n        uint32 nonce,\n        bytes memory payload\n    ) external payable returns (uint64 sequence);\n\n    struct TransferWithPayload {\n        uint8 payloadID;\n        uint256 amount;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        bytes32 to;\n        uint16 toChain;\n        bytes32 fromAddress;\n        bytes payload;\n    }\n}\n\n/// @title WormholeUtils\n/// @notice Library for Wormhole utilities.\nlibrary WormholeUtils {\n    /// @notice Converts Ethereum address into Wormhole format.\n    /// @param _address The address to convert.\n    function toWormholeAddress(address _address)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return bytes32(uint256(uint160(_address)));\n    }\n\n    /// @notice Converts Wormhole address into Ethereum format.\n    /// @param _address The address to convert.\n    function fromWormholeAddress(bytes32 _address)\n        internal\n        pure\n        returns (address)\n    {\n        return address(uint160(uint256(_address)));\n    }\n\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\n    ///      due to the decimal shift in the Wormhole Bridge contract.\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\n    function normalize(uint256 amount) internal pure returns (uint256) {\n        // slither-disable-next-line divide-before-multiply\n        amount /= 10**10;\n        amount *= 10**10;\n        return amount;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> @keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> @keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> @keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> contracts/l2/L1BitcoinDepositor.sol:525:5:\n    |\n525 |     function _refundToGasSpent(uint256 refund) internal returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":25407,"file":"contracts/l2/L1BitcoinDepositor.sol","start":24673},"type":"Warning"}],"sources":{"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol":{"ast":{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol","exportedSymbols":{"BTCUtils":[2202],"BytesLib":[2561],"SafeMath":[2663]},"id":2203,"nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"0:23:0"},{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol","file":"./BytesLib.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2203,"sourceUnit":2562,"src":"92:40:0","symbolAliases":[{"foreign":{"id":2,"name":"BytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"100:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol","file":"./SafeMath.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2203,"sourceUnit":2664,"src":"133:40:0","symbolAliases":[{"foreign":{"id":4,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"141:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BTCUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2202,"linearizedBaseContracts":[2202],"name":"BTCUtils","nameLocation":"183:8:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":8,"libraryName":{"id":6,"name":"BytesLib","nameLocations":["204:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":2561,"src":"204:8:0"},"nodeType":"UsingForDirective","src":"198:25:0","typeName":{"id":7,"name":"bytes","nodeType":"ElementaryTypeName","src":"217:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"global":false,"id":11,"libraryName":{"id":9,"name":"SafeMath","nameLocations":["234:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":2663,"src":"234:8:0"},"nodeType":"UsingForDirective","src":"228:27:0","typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"247:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"functionSelector":"d4258ca7","id":14,"mutability":"constant","name":"DIFF1_TARGET","nameLocation":"363:12:0","nodeType":"VariableDeclaration","scope":2202,"src":"339:97:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"339:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30786666666630303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"378:58:0","typeDescriptions":{"typeIdentifier":"t_rational_26959535291011309493156476344723991336010898738574164086137773096960_by_1","typeString":"int_const 2695...(60 digits omitted)...6960"},"value":"0xffff0000000000000000000000000000000000000000000000000000"},"visibility":"public"},{"constant":true,"functionSelector":"056e04ec","id":25,"mutability":"constant","name":"RETARGET_PERIOD","nameLocation":"467:15:0","nodeType":"VariableDeclaration","scope":2202,"src":"443:62:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"443:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1209600_by_1","typeString":"int_const 1209600"},"id":24,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_20160_by_1","typeString":"int_const 20160"},"id":22,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_336_by_1","typeString":"int_const 336"},"id":20,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_14_by_1","typeString":"int_const 14"},"id":18,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":16,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"485:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"37","id":17,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"489:1:0","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"485:5:0","typeDescriptions":{"typeIdentifier":"t_rational_14_by_1","typeString":"int_const 14"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3234","id":19,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"493:2:0","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"485:10:0","typeDescriptions":{"typeIdentifier":"t_rational_336_by_1","typeString":"int_const 336"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3630","id":21,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"498:2:0","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"src":"485:15:0","typeDescriptions":{"typeIdentifier":"t_rational_20160_by_1","typeString":"int_const 20160"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3630","id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"503:2:0","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"src":"485:20:0","typeDescriptions":{"typeIdentifier":"t_rational_1209600_by_1","typeString":"int_const 1209600"}},"visibility":"public"},{"constant":true,"functionSelector":"8cc71569","id":28,"mutability":"constant","name":"RETARGET_PERIOD_BLOCKS","nameLocation":"558:22:0","nodeType":"VariableDeclaration","scope":2202,"src":"534:53:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"534:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32303136","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"583:4:0","typeDescriptions":{"typeIdentifier":"t_rational_2016_by_1","typeString":"int_const 2016"},"value":"2016"},"visibility":"public"},{"constant":true,"functionSelector":"8db69e60","id":31,"mutability":"constant","name":"ERR_BAD_ARG","nameLocation":"640:11:0","nodeType":"VariableDeclaration","scope":2202,"src":"616:104:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":29,"name":"uint256","nodeType":"ElementaryTypeName","src":"616:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"654:66:0","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1","typeString":"int_const 1157...(70 digits omitted)...9935"},"value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},"visibility":"public"},{"body":{"id":44,"nodeType":"Block","src":"1136:61:0","statements":[{"expression":{"arguments":[{"id":40,"name":"_flag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"1181:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1188:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":39,"name":"determineVarIntDataLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1153:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1153:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":38,"id":43,"nodeType":"Return","src":"1146:44:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"776:270:0","text":"@notice         Determines the length of a VarInt in bytes\n @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\n @param _flag    The first byte of a VarInt\n @return         The number of non-flag bytes in the VarInt"},"id":45,"implemented":true,"kind":"function","modifiers":[],"name":"determineVarIntDataLength","nameLocation":"1060:25:0","nodeType":"FunctionDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"_flag","nameLocation":"1099:5:0","nodeType":"VariableDeclaration","scope":45,"src":"1086:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":33,"name":"bytes","nodeType":"ElementaryTypeName","src":"1086:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1085:20:0"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":45,"src":"1129:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":36,"name":"uint8","nodeType":"ElementaryTypeName","src":"1129:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1128:7:0"},"scope":2202,"src":"1051:146:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":93,"nodeType":"Block","src":"1647:349:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":57,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1667:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":59,"indexExpression":{"id":58,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"1670:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1667:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":56,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1661:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":55,"name":"uint8","nodeType":"ElementaryTypeName","src":"1661:5:0","typeDescriptions":{}}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30786666","id":61,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:4:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1661:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":66,"nodeType":"IfStatement","src":"1657:93:0","trueBody":{"id":65,"nodeType":"Block","src":"1685:65:0","statements":[{"expression":{"hexValue":"38","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1706:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"functionReturnParameters":54,"id":64,"nodeType":"Return","src":"1699:8:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":69,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1769:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":71,"indexExpression":{"id":70,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"1772:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1769:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":68,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1763:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":67,"name":"uint8","nodeType":"ElementaryTypeName","src":"1763:5:0","typeDescriptions":{}}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1763:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30786665","id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:4:0","typeDescriptions":{"typeIdentifier":"t_rational_254_by_1","typeString":"int_const 254"},"value":"0xfe"},"src":"1763:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":78,"nodeType":"IfStatement","src":"1759:93:0","trueBody":{"id":77,"nodeType":"Block","src":"1787:65:0","statements":[{"expression":{"hexValue":"34","id":75,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"functionReturnParameters":54,"id":76,"nodeType":"Return","src":"1801:8:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":81,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1871:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":83,"indexExpression":{"id":82,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"1874:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1871:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":80,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1865:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":79,"name":"uint8","nodeType":"ElementaryTypeName","src":"1865:5:0","typeDescriptions":{}}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1865:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30786664","id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1883:4:0","typeDescriptions":{"typeIdentifier":"t_rational_253_by_1","typeString":"int_const 253"},"value":"0xfd"},"src":"1865:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":90,"nodeType":"IfStatement","src":"1861:93:0","trueBody":{"id":89,"nodeType":"Block","src":"1889:65:0","statements":[{"expression":{"hexValue":"32","id":87,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1910:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"functionReturnParameters":54,"id":88,"nodeType":"Return","src":"1903:8:0"}]}},{"expression":{"hexValue":"30","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1971:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":54,"id":92,"nodeType":"Return","src":"1964:8:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1203:342:0","text":"@notice         Determines the length of a VarInt in bytes\n @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\n @param _b       The byte array containing a VarInt\n @param _at      The position of the VarInt in the array\n @return         The number of non-flag bytes in the VarInt"},"id":94,"implemented":true,"kind":"function","modifiers":[],"name":"determineVarIntDataLengthAt","nameLocation":"1559:27:0","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"_b","nameLocation":"1600:2:0","nodeType":"VariableDeclaration","scope":94,"src":"1587:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":47,"name":"bytes","nodeType":"ElementaryTypeName","src":"1587:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"_at","nameLocation":"1612:3:0","nodeType":"VariableDeclaration","scope":94,"src":"1604:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1586:30:0"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"1640:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":52,"name":"uint8","nodeType":"ElementaryTypeName","src":"1640:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1639:7:0"},"scope":2202,"src":"1550:446:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":109,"nodeType":"Block","src":"2493:44:0","statements":[{"expression":{"arguments":[{"id":105,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"2524:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2528:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":104,"name":"parseVarIntAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"2510:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256,uint256)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2510:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":103,"id":108,"nodeType":"Return","src":"2503:27:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"2002:407:0","text":"@notice     Parse a VarInt into its data length and the number it represents\n @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\n             Caller SHOULD explicitly handle this case (or bubble it up)\n @param _b   A byte-string starting with a VarInt\n @return     number of bytes in the encoding (not counting the tag), the encoded int"},"id":110,"implemented":true,"kind":"function","modifiers":[],"name":"parseVarInt","nameLocation":"2423:11:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"_b","nameLocation":"2448:2:0","nodeType":"VariableDeclaration","scope":110,"src":"2435:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":96,"name":"bytes","nodeType":"ElementaryTypeName","src":"2435:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2434:17:0"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":110,"src":"2475:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99,"name":"uint256","nodeType":"ElementaryTypeName","src":"2475:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":110,"src":"2484:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2484:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2474:18:0"},"scope":2202,"src":"2414:123:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":221,"nodeType":"Block","src":"3093:610:0","statements":[{"assignments":[123],"declarations":[{"constant":false,"id":123,"mutability":"mutable","name":"_dataLen","nameLocation":"3109:8:0","nodeType":"VariableDeclaration","scope":221,"src":"3103:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":122,"name":"uint8","nodeType":"ElementaryTypeName","src":"3103:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":128,"initialValue":{"arguments":[{"id":125,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3148:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":126,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3152:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":124,"name":"determineVarIntDataLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3120:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3120:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"3103:53:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":129,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3171:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3183:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3171:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":142,"nodeType":"IfStatement","src":"3167:70:0","trueBody":{"id":141,"nodeType":"Block","src":"3186:51:0","statements":[{"expression":{"components":[{"hexValue":"30","id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3208:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"baseExpression":{"id":135,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3217:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":137,"indexExpression":{"id":136,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3220:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3217:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3211:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":133,"name":"uint8","nodeType":"ElementaryTypeName","src":"3211:5:0","typeDescriptions":{}}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3211:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3207:19:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_uint8_$","typeString":"tuple(int_const 0,uint8)"}},"functionReturnParameters":121,"id":140,"nodeType":"Return","src":"3200:26:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":143,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3250:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3253:6:0","memberName":"length","nodeType":"MemberAccess","src":"3250:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3262:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":146,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3266:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3262:12:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":148,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3277:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3262:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3250:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":156,"nodeType":"IfStatement","src":"3246:84:0","trueBody":{"id":155,"nodeType":"Block","src":"3282:48:0","statements":[{"expression":{"components":[{"id":151,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"3304:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3317:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3303:16:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":121,"id":154,"nodeType":"Return","src":"3296:23:0"}]}},{"assignments":[158],"declarations":[{"constant":false,"id":158,"mutability":"mutable","name":"_number","nameLocation":"3347:7:0","nodeType":"VariableDeclaration","scope":221,"src":"3339:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint256","nodeType":"ElementaryTypeName","src":"3339:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":159,"nodeType":"VariableDeclarationStatement","src":"3339:15:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":160,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3368:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3368:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":178,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3469:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3481:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"3469:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3570:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"38","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3582:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"3570:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":214,"nodeType":"IfStatement","src":"3566:95:0","trueBody":{"id":213,"nodeType":"Block","src":"3585:76:0","statements":[{"expression":{"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":199,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3599:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3640:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":206,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3644:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3640:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":203,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3630:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3633:6:0","memberName":"slice8","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"3630:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes8)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3630:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes8","typeString":"bytes8"}],"id":202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3623:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":201,"name":"uint64","nodeType":"ElementaryTypeName","src":"3623:6:0","typeDescriptions":{}}},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":200,"name":"reverseUint64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"3609:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint64_$returns$_t_uint64_$","typeString":"function (uint64) pure returns (uint64)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3609:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3599:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":212,"nodeType":"ExpressionStatement","src":"3599:51:0"}]}},"id":215,"nodeType":"IfStatement","src":"3465:196:0","trueBody":{"id":195,"nodeType":"Block","src":"3484:76:0","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":181,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3498:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3539:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":188,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3543:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3539:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":185,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3529:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3532:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"3529:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3529:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3522:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":183,"name":"uint32","nodeType":"ElementaryTypeName","src":"3522:6:0","typeDescriptions":{}}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3522:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":182,"name":"reverseUint32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"3508:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$returns$_t_uint32_$","typeString":"function (uint32) pure returns (uint32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3508:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3498:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":194,"nodeType":"ExpressionStatement","src":"3498:51:0"}]}},"id":216,"nodeType":"IfStatement","src":"3364:297:0","trueBody":{"id":177,"nodeType":"Block","src":"3383:76:0","statements":[{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":163,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3397:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3438:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":170,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3442:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3438:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":167,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3428:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:6:0","memberName":"slice2","nodeType":"MemberAccess","referencedDeclaration":2410,"src":"3428:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes2_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes2)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3428:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes2","typeString":"bytes2"}],"id":166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3421:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":165,"name":"uint16","nodeType":"ElementaryTypeName","src":"3421:6:0","typeDescriptions":{}}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3421:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":164,"name":"reverseUint16","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"3407:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint16_$returns$_t_uint16_$","typeString":"function (uint16) pure returns (uint16)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3397:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":176,"nodeType":"ExpressionStatement","src":"3397:51:0"}]}},{"expression":{"components":[{"id":217,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3678:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":218,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3688:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":219,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3677:19:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint8_$_t_uint256_$","typeString":"tuple(uint8,uint256)"}},"functionReturnParameters":121,"id":220,"nodeType":"Return","src":"3670:26:0"}]},"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"2543:451:0","text":"@notice     Parse a VarInt into its data length and the number it represents\n @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\n             Caller SHOULD explicitly handle this case (or bubble it up)\n @param _b   A byte-string containing a VarInt\n @param _at  The position of the VarInt\n @return     number of bytes in the encoding (not counting the tag), the encoded int"},"id":222,"implemented":true,"kind":"function","modifiers":[],"name":"parseVarIntAt","nameLocation":"3008:13:0","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"_b","nameLocation":"3035:2:0","nodeType":"VariableDeclaration","scope":222,"src":"3022:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":112,"name":"bytes","nodeType":"ElementaryTypeName","src":"3022:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"_at","nameLocation":"3047:3:0","nodeType":"VariableDeclaration","scope":222,"src":"3039:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"3039:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3021:30:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":222,"src":"3075:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"3075:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":222,"src":"3084:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3084:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3074:18:0"},"scope":2202,"src":"2999:704:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"4001:197:0","statements":[{"assignments":[231],"declarations":[{"constant":false,"id":231,"mutability":"mutable","name":"_newValue","nameLocation":"4024:9:0","nodeType":"VariableDeclaration","scope":266,"src":"4011:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"4011:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":237,"initialValue":{"arguments":[{"expression":{"id":234,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4046:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4049:6:0","memberName":"length","nodeType":"MemberAccess","src":"4046:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4036:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"4040:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4036:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4011:45:0"},{"body":{"id":262,"nodeType":"Block","src":"4104:61:0","statements":[{"expression":{"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":249,"name":"_newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"4118:9:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":256,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":250,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4128:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4131:6:0","memberName":"length","nodeType":"MemberAccess","src":"4128:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":252,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4140:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4128:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4144:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4128:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4118:28:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":257,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4149:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":259,"indexExpression":{"id":258,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4152:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4149:5:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"4118:36:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":261,"nodeType":"ExpressionStatement","src":"4118:36:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":242,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4084:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":243,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"4088:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4091:6:0","memberName":"length","nodeType":"MemberAccess","src":"4088:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4084:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":263,"initializationExpression":{"assignments":[239],"declarations":[{"constant":false,"id":239,"mutability":"mutable","name":"i","nameLocation":"4077:1:0","nodeType":"VariableDeclaration","scope":263,"src":"4072:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":238,"name":"uint","nodeType":"ElementaryTypeName","src":"4072:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":241,"initialValue":{"hexValue":"30","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4081:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4072:10:0"},"loopExpression":{"expression":{"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4099:3:0","subExpression":{"id":246,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4099:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":248,"nodeType":"ExpressionStatement","src":"4099:3:0"},"nodeType":"ForStatement","src":"4067:98:0"},{"expression":{"id":264,"name":"_newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"4182:9:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":229,"id":265,"nodeType":"Return","src":"4175:16:0"}]},"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"3709:206:0","text":"@notice          Changes the endianness of a byte array\n @dev             Returns a new, backwards, bytes\n @param _b        The bytes to reverse\n @return          The reversed bytes"},"id":267,"implemented":true,"kind":"function","modifiers":[],"name":"reverseEndianness","nameLocation":"3929:17:0","nodeType":"FunctionDefinition","parameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"_b","nameLocation":"3960:2:0","nodeType":"VariableDeclaration","scope":267,"src":"3947:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":224,"name":"bytes","nodeType":"ElementaryTypeName","src":"3947:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3946:17:0"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":267,"src":"3987:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":227,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3986:14:0"},"scope":2202,"src":"3920:278:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":363,"nodeType":"Block","src":"4530:974:0","statements":[{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":275,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4540:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":276,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"4544:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4540:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":278,"nodeType":"ExpressionStatement","src":"4540:6:0"},{"expression":{"id":295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":279,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4579:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":280,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4585:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4590:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"4585:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4584:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646","id":284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4595:66:0","typeDescriptions":{"typeIdentifier":"t_rational_450552876409790643671482431940419874915447411150352389258589821042463539455_by_1","typeString":"int_const 4505...(67 digits omitted)...9455"},"value":"0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF"},"src":"4584:77:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":286,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4583:79:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":287,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4679:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646303046463030464630304646","id":288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4683:66:0","typeDescriptions":{"typeIdentifier":"t_rational_450552876409790643671482431940419874915447411150352389258589821042463539455_by_1","typeString":"int_const 4505...(67 digits omitted)...9455"},"value":"0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF"},"src":"4679:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4678:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4754:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"4678:77:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":293,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4677:79:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4583:173:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4579:177:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":296,"nodeType":"ExpressionStatement","src":"4579:177:0"},{"expression":{"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":297,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4800:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":298,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4806:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4811:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"4806:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4805:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4817:66:0","typeDescriptions":{"typeIdentifier":"t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1","typeString":"int_const 1766...(65 digits omitted)...4255"},"value":"0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"},"src":"4805:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4804:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":305,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"4901:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646303030304646464630303030464646463030303046464646303030304646464630303030464646463030303046464646","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4905:66:0","typeDescriptions":{"typeIdentifier":"t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1","typeString":"int_const 1766...(65 digits omitted)...4255"},"value":"0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"},"src":"4901:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4900:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4976:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"4900:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4899:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4804:175:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4800:179:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":314,"nodeType":"ExpressionStatement","src":"4800:179:0"},{"expression":{"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":315,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5023:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":316,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5029:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5034:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5029:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5028:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030304646464646464646303030303030303046464646464646463030303030303030464646464646464630303030303030304646464646464646","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5040:66:0","typeDescriptions":{"typeIdentifier":"t_rational_26959946660873538060741835960174461801791452538186943042387869433855_by_1","typeString":"int_const 2695...(60 digits omitted)...3855"},"value":"0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF"},"src":"5028:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5027:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":323,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5124:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030304646464646464646303030303030303046464646464646463030303030303030464646464646464630303030303030304646464646464646","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5128:66:0","typeDescriptions":{"typeIdentifier":"t_rational_26959946660873538060741835960174461801791452538186943042387869433855_by_1","typeString":"int_const 2695...(60 digits omitted)...3855"},"value":"0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF"},"src":"5124:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5123:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5199:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5123:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5122:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5027:175:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5023:179:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":332,"nodeType":"ExpressionStatement","src":"5023:179:0"},{"expression":{"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":333,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5246:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":334,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5252:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5257:2:0","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5252:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":337,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5251:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030303030303030303030464646464646464646464646464646463030303030303030303030303030303046464646464646464646464646464646","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5263:66:0","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763495507056286727952657427581105975853055_by_1","typeString":"int_const 6277...(50 digits omitted)...3055"},"value":"0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF"},"src":"5251:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5250:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5347:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030303030303030303030303030464646464646464646464646464646463030303030303030303030303030303046464646464646464646464646464646","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5351:66:0","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763495507056286727952657427581105975853055_by_1","typeString":"int_const 6277...(50 digits omitted)...3055"},"value":"0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF"},"src":"5347:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":344,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5346:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5422:2:0","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5346:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5345:80:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5250:175:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5246:179:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":350,"nodeType":"ExpressionStatement","src":"5246:179:0"},{"expression":{"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":351,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5470:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":352,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5475:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5480:3:0","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5475:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5474:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":356,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"5488:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5493:3:0","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5488:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":359,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5487:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5474:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5470:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":362,"nodeType":"ExpressionStatement","src":"5470:27:0"}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"4204:251:0","text":"@notice          Changes the endianness of a uint256\n @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n @param _b        The unsigned integer to reverse\n @return v        The reversed value"},"id":364,"implemented":true,"kind":"function","modifiers":[],"name":"reverseUint256","nameLocation":"4469:14:0","nodeType":"FunctionDefinition","parameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"_b","nameLocation":"4492:2:0","nodeType":"VariableDeclaration","scope":364,"src":"4484:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"4484:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4483:12:0"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"v","nameLocation":"4527:1:0","nodeType":"VariableDeclaration","scope":364,"src":"4519:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":272,"name":"uint256","nodeType":"ElementaryTypeName","src":"4519:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4518:11:0"},"scope":2202,"src":"4460:1044:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":424,"nodeType":"Block","src":"5738:333:0","statements":[{"expression":{"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":372,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5748:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":373,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"5752:2:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5748:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":375,"nodeType":"ExpressionStatement","src":"5748:6:0"},{"expression":{"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":376,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5787:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":377,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5793:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5798:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"5793:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":380,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5792:8:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830304646303046463030464630304646","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5803:18:0","typeDescriptions":{"typeIdentifier":"t_rational_71777214294589695_by_1","typeString":"int_const 71777214294589695"},"value":"0x00FF00FF00FF00FF"},"src":"5792:29:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":383,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5791:31:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":384,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5839:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830304646303046463030464630304646","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5843:18:0","typeDescriptions":{"typeIdentifier":"t_rational_71777214294589695_by_1","typeString":"int_const 71777214294589695"},"value":"0x00FF00FF00FF00FF"},"src":"5839:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":387,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5838:24:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5866:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"5838:29:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":390,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5837:31:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5791:77:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5787:81:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":393,"nodeType":"ExpressionStatement","src":"5787:81:0"},{"expression":{"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":394,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5912:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":395,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5918:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5923:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"5918:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5917:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5929:18:0","typeDescriptions":{"typeIdentifier":"t_rational_281470681808895_by_1","typeString":"int_const 281470681808895"},"value":"0x0000FFFF0000FFFF"},"src":"5917:30:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":401,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5916:32:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":402,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5965:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307830303030464646463030303046464646","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:18:0","typeDescriptions":{"typeIdentifier":"t_rational_281470681808895_by_1","typeString":"int_const 281470681808895"},"value":"0x0000FFFF0000FFFF"},"src":"5965:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5964:24:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5992:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"5964:30:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5963:32:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5916:79:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5912:83:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":411,"nodeType":"ExpressionStatement","src":"5912:83:0"},{"expression":{"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":412,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6039:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6044:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6049:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"6044:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":416,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6043:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":417,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6056:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6061:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"6056:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":420,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6055:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6043:21:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6039:25:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":423,"nodeType":"ExpressionStatement","src":"6039:25:0"}]},"documentation":{"id":365,"nodeType":"StructuredDocumentation","src":"5510:156:0","text":"@notice          Changes the endianness of a uint64\n @param _b        The unsigned integer to reverse\n @return v        The reversed value"},"id":425,"implemented":true,"kind":"function","modifiers":[],"name":"reverseUint64","nameLocation":"5680:13:0","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"_b","nameLocation":"5701:2:0","nodeType":"VariableDeclaration","scope":425,"src":"5694:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":366,"name":"uint64","nodeType":"ElementaryTypeName","src":"5694:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5693:11:0"},"returnParameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"v","nameLocation":"5735:1:0","nodeType":"VariableDeclaration","scope":425,"src":"5728:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":369,"name":"uint64","nodeType":"ElementaryTypeName","src":"5728:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5727:10:0"},"scope":2202,"src":"5671:400:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":467,"nodeType":"Block","src":"6305:190:0","statements":[{"expression":{"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":433,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6315:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":434,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"6319:2:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6315:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":436,"nodeType":"ExpressionStatement","src":"6315:6:0"},{"expression":{"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":437,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6354:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":438,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6360:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6365:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"6360:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6359:8:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783030464630304646","id":442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6370:10:0","typeDescriptions":{"typeIdentifier":"t_rational_16711935_by_1","typeString":"int_const 16711935"},"value":"0x00FF00FF"},"src":"6359:21:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6358:23:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":445,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6398:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783030464630304646","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6402:10:0","typeDescriptions":{"typeIdentifier":"t_rational_16711935_by_1","typeString":"int_const 16711935"},"value":"0x00FF00FF"},"src":"6398:14:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":448,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6397:16:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6417:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"6397:21:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6396:23:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6358:61:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6354:65:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":454,"nodeType":"ExpressionStatement","src":"6354:65:0"},{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":455,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6463:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6468:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6473:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"6468:7:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6467:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":460,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6480:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6485:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"6480:7:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":463,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6479:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6467:21:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6463:25:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":466,"nodeType":"ExpressionStatement","src":"6463:25:0"}]},"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"6077:156:0","text":"@notice          Changes the endianness of a uint32\n @param _b        The unsigned integer to reverse\n @return v        The reversed value"},"id":468,"implemented":true,"kind":"function","modifiers":[],"name":"reverseUint32","nameLocation":"6247:13:0","nodeType":"FunctionDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"_b","nameLocation":"6268:2:0","nodeType":"VariableDeclaration","scope":468,"src":"6261:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":427,"name":"uint32","nodeType":"ElementaryTypeName","src":"6261:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6260:11:0"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"v","nameLocation":"6302:1:0","nodeType":"VariableDeclaration","scope":468,"src":"6295:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":430,"name":"uint32","nodeType":"ElementaryTypeName","src":"6295:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6294:10:0"},"scope":2202,"src":"6238:257:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":493,"nodeType":"Block","src":"6729:63:0","statements":[{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":476,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6739:1:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":477,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"6745:2:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6751:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"6745:8:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"id":480,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6744:10:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":481,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"6758:2:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078303046463030","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6763:8:0","typeDescriptions":{"typeIdentifier":"t_rational_65280_by_1","typeString":"int_const 65280"},"value":"0x00FF00"},"src":"6758:13:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"id":484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6757:15:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"6744:28:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":486,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"6776:2:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6782:2:0","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"6776:8:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6775:10:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"6744:41:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"6739:46:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":492,"nodeType":"ExpressionStatement","src":"6739:46:0"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"6501:156:0","text":"@notice          Changes the endianness of a uint24\n @param _b        The unsigned integer to reverse\n @return v        The reversed value"},"id":494,"implemented":true,"kind":"function","modifiers":[],"name":"reverseUint24","nameLocation":"6671:13:0","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"_b","nameLocation":"6692:2:0","nodeType":"VariableDeclaration","scope":494,"src":"6685:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":470,"name":"uint24","nodeType":"ElementaryTypeName","src":"6685:6:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"6684:11:0"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"v","nameLocation":"6726:1:0","nodeType":"VariableDeclaration","scope":494,"src":"6719:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":473,"name":"uint24","nodeType":"ElementaryTypeName","src":"6719:6:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"6718:10:0"},"scope":2202,"src":"6662:130:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"7026:43:0","statements":[{"expression":{"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":502,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"7036:1:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"7042:2:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7048:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7042:7:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7041:9:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":507,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"7054:2:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7060:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7054:7:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7053:9:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7041:21:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7036:26:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":513,"nodeType":"ExpressionStatement","src":"7036:26:0"}]},"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"6798:156:0","text":"@notice          Changes the endianness of a uint16\n @param _b        The unsigned integer to reverse\n @return v        The reversed value"},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"reverseUint16","nameLocation":"6968:13:0","nodeType":"FunctionDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"_b","nameLocation":"6989:2:0","nodeType":"VariableDeclaration","scope":515,"src":"6982:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":496,"name":"uint16","nodeType":"ElementaryTypeName","src":"6982:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6981:11:0"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"v","nameLocation":"7023:1:0","nodeType":"VariableDeclaration","scope":515,"src":"7016:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":499,"name":"uint16","nodeType":"ElementaryTypeName","src":"7016:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"7015:10:0"},"scope":2202,"src":"6959:110:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":567,"nodeType":"Block","src":"7390:198:0","statements":[{"assignments":[524],"declarations":[{"constant":false,"id":524,"mutability":"mutable","name":"_number","nameLocation":"7408:7:0","nodeType":"VariableDeclaration","scope":567,"src":"7400:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"7400:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":525,"nodeType":"VariableDeclarationStatement","src":"7400:15:0"},{"body":{"id":563,"nodeType":"Block","src":"7463:94:0","statements":[{"expression":{"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":537,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7477:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":538,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7487:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":541,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"7503:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":543,"indexExpression":{"id":542,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"7506:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7503:5:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7497:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":539,"name":"uint8","nodeType":"ElementaryTypeName","src":"7497:5:0","typeDescriptions":{}}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7497:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7513:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7519:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":547,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"7524:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7527:6:0","memberName":"length","nodeType":"MemberAccess","src":"7524:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":549,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"7537:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7541:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7537:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7536:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7524:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7523:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7519:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":556,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7518:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7513:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":558,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7512:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7497:49:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7487:59:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7477:69:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":562,"nodeType":"ExpressionStatement","src":"7477:69:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":530,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"7443:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":531,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"7447:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7450:6:0","memberName":"length","nodeType":"MemberAccess","src":"7447:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7443:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":564,"initializationExpression":{"assignments":[527],"declarations":[{"constant":false,"id":527,"mutability":"mutable","name":"i","nameLocation":"7436:1:0","nodeType":"VariableDeclaration","scope":564,"src":"7431:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":526,"name":"uint","nodeType":"ElementaryTypeName","src":"7431:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":529,"initialValue":{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7440:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7431:10:0"},"loopExpression":{"expression":{"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7458:3:0","subExpression":{"id":534,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"7458:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":536,"nodeType":"ExpressionStatement","src":"7458:3:0"},"nodeType":"ForStatement","src":"7426:131:0"},{"expression":{"id":565,"name":"_number","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"7574:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":522,"id":566,"nodeType":"Return","src":"7567:14:0"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"7076:239:0","text":"@notice          Converts big-endian bytes to a uint\n @dev             Traverses the byte array and sums the bytes\n @param _b        The big-endian bytes-encoded integer\n @return          The integer representation"},"id":568,"implemented":true,"kind":"function","modifiers":[],"name":"bytesToUint","nameLocation":"7329:11:0","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"_b","nameLocation":"7354:2:0","nodeType":"VariableDeclaration","scope":568,"src":"7341:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":517,"name":"bytes","nodeType":"ElementaryTypeName","src":"7341:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7340:17:0"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":568,"src":"7381:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"7381:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7380:9:0"},"scope":2202,"src":"7320:268:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"7917:93:0","statements":[{"assignments":[579],"declarations":[{"constant":false,"id":579,"mutability":"mutable","name":"_start","nameLocation":"7935:6:0","nodeType":"VariableDeclaration","scope":592,"src":"7927:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":578,"name":"uint256","nodeType":"ElementaryTypeName","src":"7927:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":585,"initialValue":{"arguments":[{"id":583,"name":"_num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"7958:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":580,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"7944:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7947:6:0","memberName":"length","nodeType":"MemberAccess","src":"7944:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7954:3:0","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":2636,"src":"7944:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7944:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7927:36:0"},{"expression":{"arguments":[{"id":588,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"7990:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":589,"name":"_num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"7998:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":586,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"7981:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7984:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"7981:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":577,"id":591,"nodeType":"Return","src":"7974:29:0"}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"7594:231:0","text":"@notice          Get the last _num bytes from a byte array\n @param _b        The byte array to slice\n @param _num      The number of bytes to extract from the end\n @return          The last _num bytes of _b"},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"lastBytes","nameLocation":"7839:9:0","nodeType":"FunctionDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"_b","nameLocation":"7862:2:0","nodeType":"VariableDeclaration","scope":593,"src":"7849:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":570,"name":"bytes","nodeType":"ElementaryTypeName","src":"7849:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"_num","nameLocation":"7874:4:0","nodeType":"VariableDeclaration","scope":593,"src":"7866:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":572,"name":"uint256","nodeType":"ElementaryTypeName","src":"7866:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7848:31:0"},"returnParameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":593,"src":"7903:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":575,"name":"bytes","nodeType":"ElementaryTypeName","src":"7903:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7902:14:0"},"scope":2202,"src":"7830:180:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":613,"nodeType":"Block","src":"8322:81:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":607,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"8390:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":606,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"8383:6:0","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8383:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":604,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8366:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8370:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"8366:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8366:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":603,"name":"ripemd160","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-20,"src":"8356:9:0","typeDescriptions":{"typeIdentifier":"t_function_ripemd160_pure$_t_bytes_memory_ptr_$returns$_t_bytes20_$","typeString":"function (bytes memory) pure returns (bytes20)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8356:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"expression":{"id":601,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8339:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8343:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"8339:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8339:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":600,"id":612,"nodeType":"Return","src":"8332:64:0"}]},"documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"8016:230:0","text":"@notice          Implements bitcoin's hash160 (rmd160(sha2()))\n @dev             abi.encodePacked changes the return to bytes instead of bytes32\n @param _b        The pre-image\n @return          The digest"},"id":614,"implemented":true,"kind":"function","modifiers":[],"name":"hash160","nameLocation":"8260:7:0","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"_b","nameLocation":"8281:2:0","nodeType":"VariableDeclaration","scope":614,"src":"8268:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":595,"name":"bytes","nodeType":"ElementaryTypeName","src":"8268:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8267:17:0"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":614,"src":"8308:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":598,"name":"bytes","nodeType":"ElementaryTypeName","src":"8308:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8307:14:0"},"scope":2202,"src":"8251:152:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"8711:303:0","statements":[{"AST":{"nodeType":"YulBlock","src":"8794:214:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"8823:3:0"},"nodeType":"YulFunctionCall","src":"8823:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"8830:1:0","type":"","value":"2"},{"arguments":[{"name":"_b","nodeType":"YulIdentifier","src":"8837:2:0"},{"kind":"number","nodeType":"YulLiteral","src":"8841:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8833:3:0"},"nodeType":"YulFunctionCall","src":"8833:11:0"},{"arguments":[{"name":"_b","nodeType":"YulIdentifier","src":"8852:2:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8846:5:0"},"nodeType":"YulFunctionCall","src":"8846:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"8857:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8863:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"8812:10:0"},"nodeType":"YulFunctionCall","src":"8812:54:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"8808:3:0"},"nodeType":"YulFunctionCall","src":"8808:59:0"},"nodeType":"YulExpressionStatement","src":"8808:59:0"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"8895:3:0"},"nodeType":"YulFunctionCall","src":"8895:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"8902:1:0","type":"","value":"3"},{"kind":"number","nodeType":"YulLiteral","src":"8905:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8911:2:0","type":"","value":"32"},{"kind":"number","nodeType":"YulLiteral","src":"8915:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8921:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"8884:10:0"},"nodeType":"YulFunctionCall","src":"8884:40:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"8880:3:0"},"nodeType":"YulFunctionCall","src":"8880:45:0"},"nodeType":"YulExpressionStatement","src":"8880:45:0"},{"nodeType":"YulAssignment","src":"8980:18:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8993:4:0","type":"","value":"0x0c"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8987:5:0"},"nodeType":"YulFunctionCall","src":"8987:11:0"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"8980:3:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":617,"isOffset":false,"isSlot":false,"src":"8837:2:0","valueSize":1},{"declaration":617,"isOffset":false,"isSlot":false,"src":"8852:2:0","valueSize":1},{"declaration":620,"isOffset":false,"isSlot":false,"src":"8980:3:0","valueSize":1}],"id":622,"nodeType":"InlineAssembly","src":"8785:223:0"}]},"documentation":{"id":615,"nodeType":"StructuredDocumentation","src":"8409:223:0","text":"@notice          Implements bitcoin's hash160 (sha2 + ripemd160)\n @dev             sha2 precompile at address(2), ripemd160 at address(3)\n @param _b        The pre-image\n @return res      The digest"},"id":624,"implemented":true,"kind":"function","modifiers":[],"name":"hash160View","nameLocation":"8646:11:0","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":617,"mutability":"mutable","name":"_b","nameLocation":"8671:2:0","nodeType":"VariableDeclaration","scope":624,"src":"8658:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":616,"name":"bytes","nodeType":"ElementaryTypeName","src":"8658:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8657:17:0"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"res","nameLocation":"8706:3:0","nodeType":"VariableDeclaration","scope":624,"src":"8698:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":619,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8698:7:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8697:13:0"},"scope":2202,"src":"8637:377:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":641,"nodeType":"Block","src":"9318:60:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":636,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"9366:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":635,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"9359:6:0","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9359:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":633,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9342:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9346:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"9342:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9342:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":632,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"9335:6:0","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":631,"id":640,"nodeType":"Return","src":"9328:43:0"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"9020:227:0","text":"@notice          Implements bitcoin's hash256 (double sha2)\n @dev             abi.encodePacked changes the return to bytes instead of bytes32\n @param _b        The pre-image\n @return          The digest"},"id":642,"implemented":true,"kind":"function","modifiers":[],"name":"hash256","nameLocation":"9261:7:0","nodeType":"FunctionDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"_b","nameLocation":"9282:2:0","nodeType":"VariableDeclaration","scope":642,"src":"9269:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":626,"name":"bytes","nodeType":"ElementaryTypeName","src":"9269:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9268:17:0"},"returnParameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":642,"src":"9309:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9309:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9308:9:0"},"scope":2202,"src":"9252:126:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"9683:261:0","statements":[{"AST":{"nodeType":"YulBlock","src":"9766:172:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"9795:3:0"},"nodeType":"YulFunctionCall","src":"9795:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"9802:1:0","type":"","value":"2"},{"arguments":[{"name":"_b","nodeType":"YulIdentifier","src":"9809:2:0"},{"kind":"number","nodeType":"YulLiteral","src":"9813:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9805:3:0"},"nodeType":"YulFunctionCall","src":"9805:11:0"},{"arguments":[{"name":"_b","nodeType":"YulIdentifier","src":"9824:2:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9818:5:0"},"nodeType":"YulFunctionCall","src":"9818:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"9829:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9835:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"9784:10:0"},"nodeType":"YulFunctionCall","src":"9784:54:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"9780:3:0"},"nodeType":"YulFunctionCall","src":"9780:59:0"},"nodeType":"YulExpressionStatement","src":"9780:59:0"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"9867:3:0"},"nodeType":"YulFunctionCall","src":"9867:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"9874:1:0","type":"","value":"2"},{"kind":"number","nodeType":"YulLiteral","src":"9877:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9883:2:0","type":"","value":"32"},{"kind":"number","nodeType":"YulLiteral","src":"9887:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9893:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"9856:10:0"},"nodeType":"YulFunctionCall","src":"9856:40:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"9852:3:0"},"nodeType":"YulFunctionCall","src":"9852:45:0"},"nodeType":"YulExpressionStatement","src":"9852:45:0"},{"nodeType":"YulAssignment","src":"9910:18:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9923:4:0","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9917:5:0"},"nodeType":"YulFunctionCall","src":"9917:11:0"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"9910:3:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":645,"isOffset":false,"isSlot":false,"src":"9809:2:0","valueSize":1},{"declaration":645,"isOffset":false,"isSlot":false,"src":"9824:2:0","valueSize":1},{"declaration":648,"isOffset":false,"isSlot":false,"src":"9910:3:0","valueSize":1}],"id":650,"nodeType":"InlineAssembly","src":"9757:181:0"}]},"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"9384:220:0","text":"@notice          Implements bitcoin's hash256 (double sha2)\n @dev             sha2 is precompiled smart contract located at address(2)\n @param _b        The pre-image\n @return res      The digest"},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"hash256View","nameLocation":"9618:11:0","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"_b","nameLocation":"9643:2:0","nodeType":"VariableDeclaration","scope":652,"src":"9630:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":644,"name":"bytes","nodeType":"ElementaryTypeName","src":"9630:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9629:17:0"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"res","nameLocation":"9678:3:0","nodeType":"VariableDeclaration","scope":652,"src":"9670:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9670:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9669:13:0"},"scope":2202,"src":"9609:335:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":663,"nodeType":"Block","src":"10345:305:0","statements":[{"AST":{"nodeType":"YulBlock","src":"10428:216:0","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10449:4:0","type":"","value":"0x00"},{"name":"_a","nodeType":"YulIdentifier","src":"10455:2:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10442:6:0"},"nodeType":"YulFunctionCall","src":"10442:16:0"},"nodeType":"YulExpressionStatement","src":"10442:16:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10478:4:0","type":"","value":"0x20"},{"name":"_b","nodeType":"YulIdentifier","src":"10484:2:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10471:6:0"},"nodeType":"YulFunctionCall","src":"10471:16:0"},"nodeType":"YulExpressionStatement","src":"10471:16:0"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"10515:3:0"},"nodeType":"YulFunctionCall","src":"10515:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"10522:1:0","type":"","value":"2"},{"kind":"number","nodeType":"YulLiteral","src":"10525:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10531:2:0","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"10535:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10541:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"10504:10:0"},"nodeType":"YulFunctionCall","src":"10504:40:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"10500:3:0"},"nodeType":"YulFunctionCall","src":"10500:45:0"},"nodeType":"YulExpressionStatement","src":"10500:45:0"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"10573:3:0"},"nodeType":"YulFunctionCall","src":"10573:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"10580:1:0","type":"","value":"2"},{"kind":"number","nodeType":"YulLiteral","src":"10583:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10589:2:0","type":"","value":"32"},{"kind":"number","nodeType":"YulLiteral","src":"10593:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"10599:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"10562:10:0"},"nodeType":"YulFunctionCall","src":"10562:40:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"10558:3:0"},"nodeType":"YulFunctionCall","src":"10558:45:0"},"nodeType":"YulExpressionStatement","src":"10558:45:0"},{"nodeType":"YulAssignment","src":"10616:18:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10629:4:0","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10623:5:0"},"nodeType":"YulFunctionCall","src":"10623:11:0"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"10616:3:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":655,"isOffset":false,"isSlot":false,"src":"10455:2:0","valueSize":1},{"declaration":657,"isOffset":false,"isSlot":false,"src":"10484:2:0","valueSize":1},{"declaration":660,"isOffset":false,"isSlot":false,"src":"10616:3:0","valueSize":1}],"id":662,"nodeType":"InlineAssembly","src":"10419:225:0"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"9950:309:0","text":"@notice          Implements bitcoin's hash256 on a pair of bytes32\n @dev             sha2 is precompiled smart contract located at address(2)\n @param _a        The first bytes32 of the pre-image\n @param _b        The second bytes32 of the pre-image\n @return res      The digest"},"id":664,"implemented":true,"kind":"function","modifiers":[],"name":"hash256Pair","nameLocation":"10273:11:0","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"_a","nameLocation":"10293:2:0","nodeType":"VariableDeclaration","scope":664,"src":"10285:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10285:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"_b","nameLocation":"10305:2:0","nodeType":"VariableDeclaration","scope":664,"src":"10297:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10297:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10284:24:0"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"res","nameLocation":"10340:3:0","nodeType":"VariableDeclaration","scope":664,"src":"10332:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10332:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10331:13:0"},"scope":2202,"src":"10264:386:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":677,"nodeType":"Block","src":"11137:264:0","statements":[{"AST":{"nodeType":"YulBlock","src":"11220:175:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"11249:3:0"},"nodeType":"YulFunctionCall","src":"11249:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"11256:1:0","type":"","value":"2"},{"arguments":[{"name":"_b","nodeType":"YulIdentifier","src":"11263:2:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11271:2:0","type":"","value":"32"},{"name":"at","nodeType":"YulIdentifier","src":"11275:2:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11267:3:0"},"nodeType":"YulFunctionCall","src":"11267:11:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11259:3:0"},"nodeType":"YulFunctionCall","src":"11259:20:0"},{"name":"len","nodeType":"YulIdentifier","src":"11281:3:0"},{"kind":"number","nodeType":"YulLiteral","src":"11286:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11292:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"11238:10:0"},"nodeType":"YulFunctionCall","src":"11238:57:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"11234:3:0"},"nodeType":"YulFunctionCall","src":"11234:62:0"},"nodeType":"YulExpressionStatement","src":"11234:62:0"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"11324:3:0"},"nodeType":"YulFunctionCall","src":"11324:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"11331:1:0","type":"","value":"2"},{"kind":"number","nodeType":"YulLiteral","src":"11334:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11340:2:0","type":"","value":"32"},{"kind":"number","nodeType":"YulLiteral","src":"11344:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"11350:2:0","type":"","value":"32"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"11313:10:0"},"nodeType":"YulFunctionCall","src":"11313:40:0"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"11309:3:0"},"nodeType":"YulFunctionCall","src":"11309:45:0"},"nodeType":"YulExpressionStatement","src":"11309:45:0"},{"nodeType":"YulAssignment","src":"11367:18:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11380:4:0","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11374:5:0"},"nodeType":"YulFunctionCall","src":"11374:11:0"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"11367:3:0"}]}]},"evmVersion":"london","externalReferences":[{"declaration":667,"isOffset":false,"isSlot":false,"src":"11263:2:0","valueSize":1},{"declaration":669,"isOffset":false,"isSlot":false,"src":"11275:2:0","valueSize":1},{"declaration":671,"isOffset":false,"isSlot":false,"src":"11281:3:0","valueSize":1},{"declaration":674,"isOffset":false,"isSlot":false,"src":"11367:3:0","valueSize":1}],"id":676,"nodeType":"InlineAssembly","src":"11211:184:0"}]},"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"10656:346:0","text":"@notice          Implements bitcoin's hash256 (double sha2)\n @dev             sha2 is precompiled smart contract located at address(2)\n @param _b        The array containing the pre-image\n @param at        The start of the pre-image\n @param len       The length of the pre-image\n @return res      The digest"},"id":678,"implemented":true,"kind":"function","modifiers":[],"name":"hash256Slice","nameLocation":"11016:12:0","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"_b","nameLocation":"11051:2:0","nodeType":"VariableDeclaration","scope":678,"src":"11038:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":666,"name":"bytes","nodeType":"ElementaryTypeName","src":"11038:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"at","nameLocation":"11071:2:0","nodeType":"VariableDeclaration","scope":678,"src":"11063:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"11063:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"len","nameLocation":"11091:3:0","nodeType":"VariableDeclaration","scope":678,"src":"11083:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":670,"name":"uint256","nodeType":"ElementaryTypeName","src":"11083:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11028:72:0"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"res","nameLocation":"11132:3:0","nodeType":"VariableDeclaration","scope":678,"src":"11124:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11124:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11123:13:0"},"scope":2202,"src":"11007:394:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":778,"nodeType":"Block","src":"11942:717:0","statements":[{"assignments":[689],"declarations":[{"constant":false,"id":689,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"11960:14:0","nodeType":"VariableDeclaration","scope":778,"src":"11952:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"11952:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":690,"nodeType":"VariableDeclarationStatement","src":"11952:22:0"},{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"_nIns","nameLocation":"11992:5:0","nodeType":"VariableDeclaration","scope":778,"src":"11984:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"11984:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":693,"nodeType":"VariableDeclarationStatement","src":"11984:13:0"},{"expression":{"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":694,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12009:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":695,"name":"_nIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"12025:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":696,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"12008:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":698,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"12046:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":697,"name":"parseVarInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"12034:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12034:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"12008:43:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"ExpressionStatement","src":"12008:43:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":703,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12069:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":704,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"12087:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12069:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52656164206f76657272756e20647572696e6720566172496e742070617273696e67","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12100:36:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_44f1d85595cd9e7bca9d9a2d6049b01f75f753890836287504890b72b66f7afd","typeString":"literal_string \"Read overrun during VarInt parsing\""},"value":"Read overrun during VarInt parsing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_44f1d85595cd9e7bca9d9a2d6049b01f75f753890836287504890b72b66f7afd","typeString":"literal_string \"Read overrun during VarInt parsing\""}],"id":702,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12061:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12061:76:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":708,"nodeType":"ExpressionStatement","src":"12061:76:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":710,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"12155:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":711,"name":"_nIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"12164:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12155:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"56696e2072656164206f76657272756e","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12171:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a957e9d3071160b28fdf54b241ef5554d7ebf4457632e38cd7ec08cd05aece4f","typeString":"literal_string \"Vin read overrun\""},"value":"Vin read overrun"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a957e9d3071160b28fdf54b241ef5554d7ebf4457632e38cd7ec08cd05aece4f","typeString":"literal_string \"Vin read overrun\""}],"id":709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12147:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12147:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"12147:43:0"},{"assignments":[717],"declarations":[{"constant":false,"id":717,"mutability":"mutable","name":"_len","nameLocation":"12209:4:0","nodeType":"VariableDeclaration","scope":778,"src":"12201:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":716,"name":"uint256","nodeType":"ElementaryTypeName","src":"12201:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":719,"initialValue":{"hexValue":"30","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12216:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12201:16:0"},{"assignments":[721],"declarations":[{"constant":false,"id":721,"mutability":"mutable","name":"_offset","nameLocation":"12235:7:0","nodeType":"VariableDeclaration","scope":778,"src":"12227:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"12227:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":725,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12245:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":723,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12249:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12245:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12227:36:0"},{"body":{"id":756,"nodeType":"Block","src":"12315:176:0","statements":[{"expression":{"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":736,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12329:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":738,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"12359:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":739,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"12365:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":737,"name":"determineInputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"12336:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12336:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12329:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":742,"nodeType":"ExpressionStatement","src":"12329:44:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12395:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":745,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"12403:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12395:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e20736372697074536967","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12416:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""},"value":"Bad VarInt in scriptSig"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""}],"id":743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12387:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12387:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"ExpressionStatement","src":"12387:55:0"},{"expression":{"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":750,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"12456:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":751,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"12466:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":752,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12476:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12466:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12456:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":755,"nodeType":"ExpressionStatement","src":"12456:24:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":730,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"12295:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":731,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"12300:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12295:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"initializationExpression":{"assignments":[727],"declarations":[{"constant":false,"id":727,"mutability":"mutable","name":"_i","nameLocation":"12287:2:0","nodeType":"VariableDeclaration","scope":757,"src":"12279:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"12279:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":729,"initialValue":{"hexValue":"30","id":728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12279:14:0"},"loopExpression":{"expression":{"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12308:5:0","subExpression":{"id":733,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"12308:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":735,"nodeType":"ExpressionStatement","src":"12308:5:0"},"nodeType":"ForStatement","src":"12274:217:0"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":758,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12501:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":760,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"12531:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":761,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"12537:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":759,"name":"determineInputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"12508:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12508:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12501:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"12501:44:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":766,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12563:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":767,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"12571:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12563:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e20736372697074536967","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12584:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""},"value":"Bad VarInt in scriptSig"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""}],"id":765,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12555:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12555:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"ExpressionStatement","src":"12555:55:0"},{"expression":{"arguments":[{"id":774,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"12638:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":775,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"12647:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":772,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"12627:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12632:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"12627:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12627:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":687,"id":777,"nodeType":"Return","src":"12620:32:0"}]},"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"11477:359:0","text":"@notice          Extracts the nth input from the vin (0-indexed)\n @dev             Iterates over the vin. If you need to extract several, write a custom function\n @param _vin      The vin as a tightly-packed byte array\n @param _index    The 0-indexed location of the input to extract\n @return          The input as a byte array"},"id":779,"implemented":true,"kind":"function","modifiers":[],"name":"extractInputAtIndex","nameLocation":"11850:19:0","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"_vin","nameLocation":"11883:4:0","nodeType":"VariableDeclaration","scope":779,"src":"11870:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":680,"name":"bytes","nodeType":"ElementaryTypeName","src":"11870:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"_index","nameLocation":"11897:6:0","nodeType":"VariableDeclaration","scope":779,"src":"11889:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":682,"name":"uint256","nodeType":"ElementaryTypeName","src":"11889:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11869:35:0"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"11928:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":685,"name":"bytes","nodeType":"ElementaryTypeName","src":"11928:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11927:14:0"},"scope":2202,"src":"11841:818:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":793,"nodeType":"Block","src":"12959:45:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":787,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"12976:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":789,"indexExpression":{"hexValue":"3336","id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12983:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12976:10:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"00","id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"12990:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a","typeString":"literal_string hex\"00\""},"value":"\u0000"},"src":"12976:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":786,"id":792,"nodeType":"Return","src":"12969:28:0"}]},"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"12665:216:0","text":"@notice          Determines whether an input is legacy\n @dev             False if no scriptSig, otherwise True\n @param _input    The input\n @return          True for legacy, False for witness"},"id":794,"implemented":true,"kind":"function","modifiers":[],"name":"isLegacyInput","nameLocation":"12895:13:0","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"_input","nameLocation":"12922:6:0","nodeType":"VariableDeclaration","scope":794,"src":"12909:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":781,"name":"bytes","nodeType":"ElementaryTypeName","src":"12909:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12908:21:0"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":794,"src":"12953:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":784,"name":"bool","nodeType":"ElementaryTypeName","src":"12953:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12952:6:0"},"scope":2202,"src":"12886:118:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":809,"nodeType":"Block","src":"13337:56:0","statements":[{"expression":{"arguments":[{"id":805,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"13376:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":804,"name":"extractScriptSigLenAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"13354:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256,uint256)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13354:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":803,"id":808,"nodeType":"Return","src":"13347:39:0"}]},"documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"13010:231:0","text":"@notice          Determines the length of a scriptSig in an input\n @dev             Will return 0 if passed a witness input.\n @param _input    The LEGACY input\n @return          The length of the script sig"},"id":810,"implemented":true,"kind":"function","modifiers":[],"name":"extractScriptSigLen","nameLocation":"13255:19:0","nodeType":"FunctionDefinition","parameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"_input","nameLocation":"13288:6:0","nodeType":"VariableDeclaration","scope":810,"src":"13275:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":796,"name":"bytes","nodeType":"ElementaryTypeName","src":"13275:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13274:21:0"},"returnParameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":810,"src":"13319:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"13319:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":810,"src":"13328:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"13328:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13318:18:0"},"scope":2202,"src":"13246:147:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":855,"nodeType":"Block","src":"13891:282:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":822,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"13905:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13912:6:0","memberName":"length","nodeType":"MemberAccess","src":"13905:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3337","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13921:2:0","typeDescriptions":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"},"value":"37"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":825,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"13926:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13921:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13905:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":833,"nodeType":"IfStatement","src":"13901:78:0","trueBody":{"id":832,"nodeType":"Block","src":"13931:48:0","statements":[{"expression":{"components":[{"id":828,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"13953:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13966:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":830,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13952:16:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":821,"id":831,"nodeType":"Return","src":"13945:23:0"}]}},{"assignments":[835],"declarations":[{"constant":false,"id":835,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"13997:14:0","nodeType":"VariableDeclaration","scope":855,"src":"13989:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":834,"name":"uint256","nodeType":"ElementaryTypeName","src":"13989:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":836,"nodeType":"VariableDeclarationStatement","src":"13989:22:0"},{"assignments":[838],"declarations":[{"constant":false,"id":838,"mutability":"mutable","name":"_scriptSigLen","nameLocation":"14029:13:0","nodeType":"VariableDeclaration","scope":855,"src":"14021:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":837,"name":"uint256","nodeType":"ElementaryTypeName","src":"14021:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":839,"nodeType":"VariableDeclarationStatement","src":"14021:21:0"},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":840,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"14053:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":841,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"14069:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":842,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14052:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":844,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"14100:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":845,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"14108:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3336","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14114:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"src":"14108:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":843,"name":"parseVarIntAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"14086:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256,uint256)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14086:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"14052:65:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":850,"nodeType":"ExpressionStatement","src":"14052:65:0"},{"expression":{"components":[{"id":851,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"14136:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":852,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"14152:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":853,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14135:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":821,"id":854,"nodeType":"Return","src":"14128:38:0"}]},"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"13399:381:0","text":"@notice          Determines the length of a scriptSig in an input\n                  starting at the specified position\n @dev             Will return 0 if passed a witness input.\n @param _input    The byte array containing the LEGACY input\n @param _at       The position of the input in the array\n @return          The length of the script sig"},"id":856,"implemented":true,"kind":"function","modifiers":[],"name":"extractScriptSigLenAt","nameLocation":"13794:21:0","nodeType":"FunctionDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":813,"mutability":"mutable","name":"_input","nameLocation":"13829:6:0","nodeType":"VariableDeclaration","scope":856,"src":"13816:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":812,"name":"bytes","nodeType":"ElementaryTypeName","src":"13816:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"_at","nameLocation":"13845:3:0","nodeType":"VariableDeclaration","scope":856,"src":"13837:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"13837:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13815:34:0"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":856,"src":"13873:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"13873:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":856,"src":"13882:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"13882:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13872:18:0"},"scope":2202,"src":"13785:388:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":869,"nodeType":"Block","src":"14514:57:0","statements":[{"expression":{"arguments":[{"id":865,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"14554:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14562:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":864,"name":"determineInputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"14531:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14531:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":863,"id":868,"nodeType":"Return","src":"14524:40:0"}]},"documentation":{"id":857,"nodeType":"StructuredDocumentation","src":"14179:247:0","text":"@notice          Determines the length of an input from its scriptSig\n @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\n @param _input    The input\n @return          The length of the input in bytes"},"id":870,"implemented":true,"kind":"function","modifiers":[],"name":"determineInputLength","nameLocation":"14440:20:0","nodeType":"FunctionDefinition","parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"_input","nameLocation":"14474:6:0","nodeType":"VariableDeclaration","scope":870,"src":"14461:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":858,"name":"bytes","nodeType":"ElementaryTypeName","src":"14461:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14460:21:0"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":870,"src":"14505:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"14505:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14504:9:0"},"scope":2202,"src":"14431:140:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":912,"nodeType":"Block","src":"15078:296:0","statements":[{"assignments":[881],"declarations":[{"constant":false,"id":881,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"15096:14:0","nodeType":"VariableDeclaration","scope":912,"src":"15088:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"15088:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":882,"nodeType":"VariableDeclarationStatement","src":"15088:22:0"},{"assignments":[884],"declarations":[{"constant":false,"id":884,"mutability":"mutable","name":"_scriptSigLen","nameLocation":"15128:13:0","nodeType":"VariableDeclaration","scope":912,"src":"15120:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"15120:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":885,"nodeType":"VariableDeclarationStatement","src":"15120:21:0"},{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":886,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"15152:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":887,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"15168:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":888,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"15151:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":890,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"15207:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":891,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"15215:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":889,"name":"extractScriptSigLenAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"15185:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256,uint256)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15185:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"15151:68:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"ExpressionStatement","src":"15151:68:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":895,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"15233:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":896,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"15251:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15233:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":901,"nodeType":"IfStatement","src":"15229:78:0","trueBody":{"id":900,"nodeType":"Block","src":"15264:43:0","statements":[{"expression":{"id":898,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"15285:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":879,"id":899,"nodeType":"Return","src":"15278:18:0"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"},"id":904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3336","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15324:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15329:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15324:6:0","typeDescriptions":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":905,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"15333:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15324:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":907,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"15350:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15324:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15366:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"15324:43:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":879,"id":911,"nodeType":"Return","src":"15317:50:0"}]},"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"14577:398:0","text":"@notice          Determines the length of an input from its scriptSig,\n                  starting at the specified position\n @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\n @param _input    The byte array containing the input\n @param _at       The position of the input in the array\n @return          The length of the input in bytes"},"id":913,"implemented":true,"kind":"function","modifiers":[],"name":"determineInputLengthAt","nameLocation":"14989:22:0","nodeType":"FunctionDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"_input","nameLocation":"15025:6:0","nodeType":"VariableDeclaration","scope":913,"src":"15012:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":872,"name":"bytes","nodeType":"ElementaryTypeName","src":"15012:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"_at","nameLocation":"15041:3:0","nodeType":"VariableDeclaration","scope":913,"src":"15033:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":874,"name":"uint256","nodeType":"ElementaryTypeName","src":"15033:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15011:34:0"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":913,"src":"15069:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"15069:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15068:9:0"},"scope":2202,"src":"14980:394:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":953,"nodeType":"Block","src":"15697:287:0","statements":[{"assignments":[922],"declarations":[{"constant":false,"id":922,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"15715:14:0","nodeType":"VariableDeclaration","scope":953,"src":"15707:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"15707:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":923,"nodeType":"VariableDeclarationStatement","src":"15707:22:0"},{"assignments":[925],"declarations":[{"constant":false,"id":925,"mutability":"mutable","name":"_scriptSigLen","nameLocation":"15747:13:0","nodeType":"VariableDeclaration","scope":953,"src":"15739:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"15739:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":926,"nodeType":"VariableDeclarationStatement","src":"15739:21:0"},{"expression":{"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":927,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"15771:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":928,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"15787:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":929,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"15770:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":931,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"15824:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":930,"name":"extractScriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"15804:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15804:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"15770:61:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":934,"nodeType":"ExpressionStatement","src":"15770:61:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"15849:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":937,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"15867:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15849:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e20736372697074536967","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15880:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""},"value":"Bad VarInt in scriptSig"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""}],"id":935,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15841:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15841:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"ExpressionStatement","src":"15841:65:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"},"id":946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3336","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15937:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15942:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15937:6:0","typeDescriptions":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":947,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"15946:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15937:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":949,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"15963:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15937:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":942,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"15923:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15930:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"15923:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15923:54:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":920,"id":952,"nodeType":"Return","src":"15916:61:0"}]},"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"15380:227:0","text":"@notice          Extracts the LE sequence bytes from an input\n @dev             Sequence is used for relative time locks\n @param _input    The LEGACY input\n @return          The sequence bytes (LE uint)"},"id":954,"implemented":true,"kind":"function","modifiers":[],"name":"extractSequenceLELegacy","nameLocation":"15621:23:0","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"_input","nameLocation":"15658:6:0","nodeType":"VariableDeclaration","scope":954,"src":"15645:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":915,"name":"bytes","nodeType":"ElementaryTypeName","src":"15645:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15644:21:0"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":954,"src":"15689:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":918,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15689:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15688:8:0"},"scope":2202,"src":"15612:372:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"16307:160:0","statements":[{"assignments":[963],"declarations":[{"constant":false,"id":963,"mutability":"mutable","name":"_leSeqence","nameLocation":"16324:10:0","nodeType":"VariableDeclaration","scope":979,"src":"16317:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":962,"name":"uint32","nodeType":"ElementaryTypeName","src":"16317:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":970,"initialValue":{"arguments":[{"arguments":[{"id":967,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"16368:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":966,"name":"extractSequenceLELegacy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"16344:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory) pure returns (bytes4)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16344:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16337:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":964,"name":"uint32","nodeType":"ElementaryTypeName","src":"16337:6:0","typeDescriptions":{}}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16337:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"16317:59:0"},{"assignments":[972],"declarations":[{"constant":false,"id":972,"mutability":"mutable","name":"_beSequence","nameLocation":"16393:11:0","nodeType":"VariableDeclaration","scope":979,"src":"16386:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":971,"name":"uint32","nodeType":"ElementaryTypeName","src":"16386:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":976,"initialValue":{"arguments":[{"id":974,"name":"_leSeqence","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"16421:10:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":973,"name":"reverseUint32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"16407:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$returns$_t_uint32_$","typeString":"function (uint32) pure returns (uint32)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16407:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"16386:46:0"},{"expression":{"id":977,"name":"_beSequence","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"16449:11:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":961,"id":978,"nodeType":"Return","src":"16442:18:0"}]},"documentation":{"id":955,"nodeType":"StructuredDocumentation","src":"15990:229:0","text":"@notice          Extracts the sequence from the input\n @dev             Sequence is a 4-byte little-endian number\n @param _input    The LEGACY input\n @return          The sequence number (big-endian uint)"},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"extractSequenceLegacy","nameLocation":"16233:21:0","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"_input","nameLocation":"16268:6:0","nodeType":"VariableDeclaration","scope":980,"src":"16255:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":956,"name":"bytes","nodeType":"ElementaryTypeName","src":"16255:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16254:21:0"},"returnParameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":980,"src":"16299:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":959,"name":"uint32","nodeType":"ElementaryTypeName","src":"16299:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"16298:8:0"},"scope":2202,"src":"16224:243:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"16813:285:0","statements":[{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"16831:14:0","nodeType":"VariableDeclaration","scope":1019,"src":"16823:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"16823:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":990,"nodeType":"VariableDeclarationStatement","src":"16823:22:0"},{"assignments":[992],"declarations":[{"constant":false,"id":992,"mutability":"mutable","name":"_scriptSigLen","nameLocation":"16863:13:0","nodeType":"VariableDeclaration","scope":1019,"src":"16855:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"16855:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":993,"nodeType":"VariableDeclarationStatement","src":"16855:21:0"},{"expression":{"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":994,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"16887:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":995,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"16903:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":996,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"16886:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":998,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"16940:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":997,"name":"extractScriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"16920:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16920:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"16886:61:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1001,"nodeType":"ExpressionStatement","src":"16886:61:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1003,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"16965:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1004,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"16983:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16965:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e20736372697074536967","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16996:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""},"value":"Bad VarInt in scriptSig"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a8a4de2c8904c92ac1068c35465c2d5adf89b19d43265f879508348e387f026","typeString":"literal_string \"Bad VarInt in scriptSig\""}],"id":1002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16957:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16957:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"ExpressionStatement","src":"16957:65:0"},{"expression":{"arguments":[{"hexValue":"3336","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17052:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17056:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1013,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"17060:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17056:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1015,"name":"_scriptSigLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"17077:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17056:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1009,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"17039:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17046:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"17039:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17039:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":987,"id":1018,"nodeType":"Return","src":"17032:59:0"}]},"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"16472:252:0","text":"@notice          Extracts the VarInt-prepended scriptSig from the input in a tx\n @dev             Will return hex\"00\" if passed a witness input\n @param _input    The LEGACY input\n @return          The length-prepended scriptSig"},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"extractScriptSig","nameLocation":"16738:16:0","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"_input","nameLocation":"16768:6:0","nodeType":"VariableDeclaration","scope":1020,"src":"16755:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":982,"name":"bytes","nodeType":"ElementaryTypeName","src":"16755:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16754:21:0"},"returnParameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1020,"src":"16799:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":985,"name":"bytes","nodeType":"ElementaryTypeName","src":"16799:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16798:14:0"},"scope":2202,"src":"16729:369:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1033,"nodeType":"Block","src":"17497:41:0","statements":[{"expression":{"arguments":[{"hexValue":"3337","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17528:2:0","typeDescriptions":{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"},"value":"37"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_37_by_1","typeString":"int_const 37"}],"expression":{"id":1028,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"17514:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17521:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"17514:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17514:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1027,"id":1032,"nodeType":"Return","src":"17507:24:0"}]},"documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"17178:228:0","text":"@notice          Extracts the LE sequence bytes from an input\n @dev             Sequence is used for relative time locks\n @param _input    The WITNESS input\n @return          The sequence bytes (LE uint)"},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"extractSequenceLEWitness","nameLocation":"17420:24:0","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"_input","nameLocation":"17458:6:0","nodeType":"VariableDeclaration","scope":1034,"src":"17445:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1022,"name":"bytes","nodeType":"ElementaryTypeName","src":"17445:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17444:21:0"},"returnParameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1034,"src":"17489:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1025,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17489:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17488:8:0"},"scope":2202,"src":"17411:127:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1059,"nodeType":"Block","src":"17871:169:0","statements":[{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"_leSeqence","nameLocation":"17888:10:0","nodeType":"VariableDeclaration","scope":1059,"src":"17881:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1042,"name":"uint32","nodeType":"ElementaryTypeName","src":"17881:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1050,"initialValue":{"arguments":[{"arguments":[{"id":1047,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"17933:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1046,"name":"extractSequenceLEWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"17908:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory) pure returns (bytes4)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17908:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17901:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1044,"name":"uint32","nodeType":"ElementaryTypeName","src":"17901:6:0","typeDescriptions":{}}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"17881:60:0"},{"assignments":[1052],"declarations":[{"constant":false,"id":1052,"mutability":"mutable","name":"_inputeSequence","nameLocation":"17958:15:0","nodeType":"VariableDeclaration","scope":1059,"src":"17951:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1051,"name":"uint32","nodeType":"ElementaryTypeName","src":"17951:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1056,"initialValue":{"arguments":[{"id":1054,"name":"_leSeqence","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"17990:10:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1053,"name":"reverseUint32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"17976:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$returns$_t_uint32_$","typeString":"function (uint32) pure returns (uint32)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17976:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"17951:50:0"},{"expression":{"id":1057,"name":"_inputeSequence","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"18018:15:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1041,"id":1058,"nodeType":"Return","src":"18011:22:0"}]},"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"17544:238:0","text":"@notice          Extracts the sequence from the input in a tx\n @dev             Sequence is a 4-byte little-endian number\n @param _input    The WITNESS input\n @return          The sequence number (big-endian uint)"},"id":1060,"implemented":true,"kind":"function","modifiers":[],"name":"extractSequenceWitness","nameLocation":"17796:22:0","nodeType":"FunctionDefinition","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"_input","nameLocation":"17832:6:0","nodeType":"VariableDeclaration","scope":1060,"src":"17819:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1036,"name":"bytes","nodeType":"ElementaryTypeName","src":"17819:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17818:21:0"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1060,"src":"17863:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1039,"name":"uint32","nodeType":"ElementaryTypeName","src":"17863:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"17862:8:0"},"scope":2202,"src":"17787:253:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1074,"nodeType":"Block","src":"18384:43:0","statements":[{"expression":{"arguments":[{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18414:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"3336","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18417:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"}],"expression":{"id":1068,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"18401:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18408:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"18401:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18401:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1067,"id":1073,"nodeType":"Return","src":"18394:26:0"}]},"documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"18046:250:0","text":"@notice          Extracts the outpoint from the input in a tx\n @dev             32-byte tx id with 4-byte index\n @param _input    The input\n @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)"},"id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"extractOutpoint","nameLocation":"18310:15:0","nodeType":"FunctionDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"_input","nameLocation":"18339:6:0","nodeType":"VariableDeclaration","scope":1075,"src":"18326:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1062,"name":"bytes","nodeType":"ElementaryTypeName","src":"18326:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18325:21:0"},"returnParameters":{"id":1067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1075,"src":"18370:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1065,"name":"bytes","nodeType":"ElementaryTypeName","src":"18370:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18369:14:0"},"scope":2202,"src":"18301:126:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1088,"nodeType":"Block","src":"18712:41:0","statements":[{"expression":{"arguments":[{"hexValue":"30","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18744:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1083,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"18729:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18736:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"18729:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18729:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1082,"id":1087,"nodeType":"Return","src":"18722:24:0"}]},"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"18433:193:0","text":"@notice          Extracts the outpoint tx id from an input\n @dev             32-byte tx id\n @param _input    The input\n @return          The tx id (little-endian bytes)"},"id":1089,"implemented":true,"kind":"function","modifiers":[],"name":"extractInputTxIdLE","nameLocation":"18640:18:0","nodeType":"FunctionDefinition","parameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"_input","nameLocation":"18672:6:0","nodeType":"VariableDeclaration","scope":1089,"src":"18659:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1077,"name":"bytes","nodeType":"ElementaryTypeName","src":"18659:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18658:21:0"},"returnParameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1089,"src":"18703:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18703:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18702:9:0"},"scope":2202,"src":"18631:122:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1104,"nodeType":"Block","src":"19190:43:0","statements":[{"expression":{"arguments":[{"id":1101,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"19222:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1099,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"19207:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19214:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"19207:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19207:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1098,"id":1103,"nodeType":"Return","src":"19200:26:0"}]},"documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"18759:330:0","text":"@notice          Extracts the outpoint tx id from an input\n                  starting at the specified position\n @dev             32-byte tx id\n @param _input    The byte array containing the input\n @param _at       The position of the input\n @return          The tx id (little-endian bytes)"},"id":1105,"implemented":true,"kind":"function","modifiers":[],"name":"extractInputTxIdLeAt","nameLocation":"19103:20:0","nodeType":"FunctionDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"_input","nameLocation":"19137:6:0","nodeType":"VariableDeclaration","scope":1105,"src":"19124:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1091,"name":"bytes","nodeType":"ElementaryTypeName","src":"19124:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"_at","nameLocation":"19153:3:0","nodeType":"VariableDeclaration","scope":1105,"src":"19145:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1093,"name":"uint256","nodeType":"ElementaryTypeName","src":"19145:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19123:34:0"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1105,"src":"19181:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19181:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19180:9:0"},"scope":2202,"src":"19094:139:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"19532:41:0","statements":[{"expression":{"arguments":[{"hexValue":"3332","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19563:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":1113,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"19549:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19556:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"19549:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19549:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1112,"id":1117,"nodeType":"Return","src":"19542:24:0"}]},"documentation":{"id":1106,"nodeType":"StructuredDocumentation","src":"19239:210:0","text":"@notice          Extracts the LE tx input index from the input in a tx\n @dev             4-byte tx index\n @param _input    The input\n @return          The tx index (little-endian bytes)"},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"extractTxIndexLE","nameLocation":"19463:16:0","nodeType":"FunctionDefinition","parameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"_input","nameLocation":"19493:6:0","nodeType":"VariableDeclaration","scope":1119,"src":"19480:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1107,"name":"bytes","nodeType":"ElementaryTypeName","src":"19480:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19479:21:0"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1119,"src":"19524:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1110,"name":"bytes4","nodeType":"ElementaryTypeName","src":"19524:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"19523:8:0"},"scope":2202,"src":"19454:119:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1136,"nodeType":"Block","src":"20024:47:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20055:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1132,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"20060:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20055:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1129,"name":"_input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"20041:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20048:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"20041:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20041:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1128,"id":1135,"nodeType":"Return","src":"20034:30:0"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"19579:347:0","text":"@notice          Extracts the LE tx input index from the input in a tx\n                  starting at the specified position\n @dev             4-byte tx index\n @param _input    The byte array containing the input\n @param _at       The position of the input\n @return          The tx index (little-endian bytes)"},"id":1137,"implemented":true,"kind":"function","modifiers":[],"name":"extractTxIndexLeAt","nameLocation":"19940:18:0","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"_input","nameLocation":"19972:6:0","nodeType":"VariableDeclaration","scope":1137,"src":"19959:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1121,"name":"bytes","nodeType":"ElementaryTypeName","src":"19959:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"_at","nameLocation":"19988:3:0","nodeType":"VariableDeclaration","scope":1137,"src":"19980:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"19980:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19958:34:0"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1137,"src":"20016:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1126,"name":"bytes4","nodeType":"ElementaryTypeName","src":"20016:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"20015:8:0"},"scope":2202,"src":"19931:140:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1150,"nodeType":"Block","src":"20461:59:0","statements":[{"expression":{"arguments":[{"id":1146,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"20502:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20511:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1145,"name":"determineOutputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"20478:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20478:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1144,"id":1149,"nodeType":"Return","src":"20471:42:0"}]},"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"20129:242:0","text":"@notice          Determines the length of an output\n @dev             Works with any properly formatted output\n @param _output   The output\n @return          The length indicated by the prefix, error if invalid length"},"id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"determineOutputLength","nameLocation":"20385:21:0","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"_output","nameLocation":"20420:7:0","nodeType":"VariableDeclaration","scope":1151,"src":"20407:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1139,"name":"bytes","nodeType":"ElementaryTypeName","src":"20407:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20406:22:0"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1151,"src":"20452:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"20452:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20451:9:0"},"scope":2202,"src":"20376:144:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"21011:436:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1161,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"21025:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21033:6:0","memberName":"length","nodeType":"MemberAccess","src":"21025:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"39","id":1163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21042:1:0","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1164,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"21046:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21042:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21025:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1170,"nodeType":"IfStatement","src":"21021:73:0","trueBody":{"id":1169,"nodeType":"Block","src":"21051:43:0","statements":[{"expression":{"id":1167,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"21072:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1160,"id":1168,"nodeType":"Return","src":"21065:18:0"}]}},{"assignments":[1172],"declarations":[{"constant":false,"id":1172,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"21111:14:0","nodeType":"VariableDeclaration","scope":1203,"src":"21103:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"21103:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1173,"nodeType":"VariableDeclarationStatement","src":"21103:22:0"},{"assignments":[1175],"declarations":[{"constant":false,"id":1175,"mutability":"mutable","name":"_scriptPubkeyLength","nameLocation":"21143:19:0","nodeType":"VariableDeclaration","scope":1203,"src":"21135:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"21135:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1176,"nodeType":"VariableDeclarationStatement","src":"21135:27:0"},{"expression":{"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1177,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"21173:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1178,"name":"_scriptPubkeyLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"21189:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1179,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"21172:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1181,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"21226:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21235:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1183,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"21239:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21235:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1180,"name":"parseVarIntAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"21212:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256,uint256)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21212:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"21172:71:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"ExpressionStatement","src":"21172:71:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1188,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"21258:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1189,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"21276:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21258:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1194,"nodeType":"IfStatement","src":"21254:78:0","trueBody":{"id":1193,"nodeType":"Block","src":"21289:43:0","statements":[{"expression":{"id":1191,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"21310:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1160,"id":1192,"nodeType":"Return","src":"21303:18:0"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21396:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21400:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"21396:5:0","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1198,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"21404:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21396:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1200,"name":"_scriptPubkeyLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"21421:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21396:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1160,"id":1202,"nodeType":"Return","src":"21389:51:0"}]},"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"20526:380:0","text":"@notice          Determines the length of an output\n                  starting at the specified position\n @dev             Works with any properly formatted output\n @param _output   The byte array containing the output\n @param _at       The position of the output\n @return          The length indicated by the prefix, error if invalid length"},"id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"determineOutputLengthAt","nameLocation":"20920:23:0","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"_output","nameLocation":"20957:7:0","nodeType":"VariableDeclaration","scope":1204,"src":"20944:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1153,"name":"bytes","nodeType":"ElementaryTypeName","src":"20944:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"_at","nameLocation":"20974:3:0","nodeType":"VariableDeclaration","scope":1204,"src":"20966:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"20966:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20943:35:0"},"returnParameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1204,"src":"21002:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"21002:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21001:9:0"},"scope":2202,"src":"20911:536:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1302,"nodeType":"Block","src":"21915:724:0","statements":[{"assignments":[1215],"declarations":[{"constant":false,"id":1215,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"21933:14:0","nodeType":"VariableDeclaration","scope":1302,"src":"21925:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1214,"name":"uint256","nodeType":"ElementaryTypeName","src":"21925:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1216,"nodeType":"VariableDeclarationStatement","src":"21925:22:0"},{"assignments":[1218],"declarations":[{"constant":false,"id":1218,"mutability":"mutable","name":"_nOuts","nameLocation":"21965:6:0","nodeType":"VariableDeclaration","scope":1302,"src":"21957:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1217,"name":"uint256","nodeType":"ElementaryTypeName","src":"21957:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1219,"nodeType":"VariableDeclarationStatement","src":"21957:14:0"},{"expression":{"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1220,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"21983:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1221,"name":"_nOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"21999:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1222,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"21982:24:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1224,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"22021:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1223,"name":"parseVarInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"22009:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22009:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"21982:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1227,"nodeType":"ExpressionStatement","src":"21982:45:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1229,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"22045:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1230,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"22063:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22045:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52656164206f76657272756e20647572696e6720566172496e742070617273696e67","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22076:36:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_44f1d85595cd9e7bca9d9a2d6049b01f75f753890836287504890b72b66f7afd","typeString":"literal_string \"Read overrun during VarInt parsing\""},"value":"Read overrun during VarInt parsing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_44f1d85595cd9e7bca9d9a2d6049b01f75f753890836287504890b72b66f7afd","typeString":"literal_string \"Read overrun during VarInt parsing\""}],"id":1228,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22037:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22037:76:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1234,"nodeType":"ExpressionStatement","src":"22037:76:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1236,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"22131:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1237,"name":"_nOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"22140:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22131:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"566f75742072656164206f76657272756e","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22148:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e068e1fd8aa77bf358e8fdf7376e327a6c370f4f6d3627d99c298841a0dd1ff4","typeString":"literal_string \"Vout read overrun\""},"value":"Vout read overrun"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e068e1fd8aa77bf358e8fdf7376e327a6c370f4f6d3627d99c298841a0dd1ff4","typeString":"literal_string \"Vout read overrun\""}],"id":1235,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22123:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22123:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1241,"nodeType":"ExpressionStatement","src":"22123:45:0"},{"assignments":[1243],"declarations":[{"constant":false,"id":1243,"mutability":"mutable","name":"_len","nameLocation":"22187:4:0","nodeType":"VariableDeclaration","scope":1302,"src":"22179:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"22179:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1245,"initialValue":{"hexValue":"30","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22194:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"22179:16:0"},{"assignments":[1247],"declarations":[{"constant":false,"id":1247,"mutability":"mutable","name":"_offset","nameLocation":"22213:7:0","nodeType":"VariableDeclaration","scope":1302,"src":"22205:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1246,"name":"uint256","nodeType":"ElementaryTypeName","src":"22205:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1251,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22223:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1249,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"22227:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22223:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22205:36:0"},{"body":{"id":1280,"nodeType":"Block","src":"22293:172:0","statements":[{"expression":{"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1262,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22307:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1264,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"22338:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1265,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"22345:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1263,"name":"determineOutputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"22314:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22314:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22307:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1268,"nodeType":"ExpressionStatement","src":"22307:46:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1270,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22375:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1271,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"22383:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22375:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e207363726970745075626b6579","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22396:28:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_48d2595e6fa64d5f857e2d78dbcd21416ced754565dce896b9a2c1152aba80ab","typeString":"literal_string \"Bad VarInt in scriptPubkey\""},"value":"Bad VarInt in scriptPubkey"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48d2595e6fa64d5f857e2d78dbcd21416ced754565dce896b9a2c1152aba80ab","typeString":"literal_string \"Bad VarInt in scriptPubkey\""}],"id":1269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22367:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22367:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"ExpressionStatement","src":"22367:58:0"},{"expression":{"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1276,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"22439:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1277,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22450:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22439:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1279,"nodeType":"ExpressionStatement","src":"22439:15:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"22273:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1257,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"22278:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22273:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1281,"initializationExpression":{"assignments":[1253],"declarations":[{"constant":false,"id":1253,"mutability":"mutable","name":"_i","nameLocation":"22265:2:0","nodeType":"VariableDeclaration","scope":1281,"src":"22257:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1252,"name":"uint256","nodeType":"ElementaryTypeName","src":"22257:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1255,"initialValue":{"hexValue":"30","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22270:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"22257:14:0"},"loopExpression":{"expression":{"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"22286:5:0","subExpression":{"id":1259,"name":"_i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"22286:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1261,"nodeType":"ExpressionStatement","src":"22286:5:0"},"nodeType":"ForStatement","src":"22252:213:0"},{"expression":{"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1282,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22475:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1284,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"22506:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1285,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"22513:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1283,"name":"determineOutputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"22482:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22482:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22475:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1288,"nodeType":"ExpressionStatement","src":"22475:46:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1290,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22539:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1291,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"22547:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22539:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42616420566172496e7420696e207363726970745075626b6579","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22560:28:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_48d2595e6fa64d5f857e2d78dbcd21416ced754565dce896b9a2c1152aba80ab","typeString":"literal_string \"Bad VarInt in scriptPubkey\""},"value":"Bad VarInt in scriptPubkey"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48d2595e6fa64d5f857e2d78dbcd21416ced754565dce896b9a2c1152aba80ab","typeString":"literal_string \"Bad VarInt in scriptPubkey\""}],"id":1289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22531:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22531:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"ExpressionStatement","src":"22531:58:0"},{"expression":{"arguments":[{"id":1298,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"22618:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1299,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"22627:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1296,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"22606:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22612:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"22606:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22606:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1213,"id":1301,"nodeType":"Return","src":"22599:33:0"}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"21453:354:0","text":"@notice          Extracts the output at a given index in the TxOuts vector\n @dev             Iterates over the vout. If you need to extract multiple, write a custom function\n @param _vout     The _vout to extract from\n @param _index    The 0-indexed location of the output to extract\n @return          The specified output"},"id":1303,"implemented":true,"kind":"function","modifiers":[],"name":"extractOutputAtIndex","nameLocation":"21821:20:0","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"_vout","nameLocation":"21855:5:0","nodeType":"VariableDeclaration","scope":1303,"src":"21842:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1206,"name":"bytes","nodeType":"ElementaryTypeName","src":"21842:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"_index","nameLocation":"21870:6:0","nodeType":"VariableDeclaration","scope":1303,"src":"21862:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1208,"name":"uint256","nodeType":"ElementaryTypeName","src":"21862:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21841:36:0"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1303,"src":"21901:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1211,"name":"bytes","nodeType":"ElementaryTypeName","src":"21901:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21900:14:0"},"scope":2202,"src":"21812:827:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1316,"nodeType":"Block","src":"22951:41:0","statements":[{"expression":{"arguments":[{"hexValue":"30","id":1313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22983:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1311,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"22968:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22976:6:0","memberName":"slice8","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"22968:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes8)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22968:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"functionReturnParameters":1310,"id":1315,"nodeType":"Return","src":"22961:24:0"}]},"documentation":{"id":1304,"nodeType":"StructuredDocumentation","src":"22645:224:0","text":"@notice          Extracts the value bytes from the output in a tx\n @dev             Value is an 8-byte little-endian number\n @param _output   The output\n @return          The output value as LE bytes"},"id":1317,"implemented":true,"kind":"function","modifiers":[],"name":"extractValueLE","nameLocation":"22883:14:0","nodeType":"FunctionDefinition","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"mutability":"mutable","name":"_output","nameLocation":"22911:7:0","nodeType":"VariableDeclaration","scope":1317,"src":"22898:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1305,"name":"bytes","nodeType":"ElementaryTypeName","src":"22898:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22897:22:0"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"22943:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":1308,"name":"bytes8","nodeType":"ElementaryTypeName","src":"22943:6:0","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"}],"src":"22942:8:0"},"scope":2202,"src":"22874:118:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1342,"nodeType":"Block","src":"23284:142:0","statements":[{"assignments":[1326],"declarations":[{"constant":false,"id":1326,"mutability":"mutable","name":"_leValue","nameLocation":"23301:8:0","nodeType":"VariableDeclaration","scope":1342,"src":"23294:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1325,"name":"uint64","nodeType":"ElementaryTypeName","src":"23294:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1333,"initialValue":{"arguments":[{"arguments":[{"id":1330,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"23334:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1329,"name":"extractValueLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"23319:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes8_$","typeString":"function (bytes memory) pure returns (bytes8)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23319:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes8","typeString":"bytes8"}],"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23312:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1327,"name":"uint64","nodeType":"ElementaryTypeName","src":"23312:6:0","typeDescriptions":{}}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23312:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"23294:49:0"},{"assignments":[1335],"declarations":[{"constant":false,"id":1335,"mutability":"mutable","name":"_beValue","nameLocation":"23360:8:0","nodeType":"VariableDeclaration","scope":1342,"src":"23353:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1334,"name":"uint64","nodeType":"ElementaryTypeName","src":"23353:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1339,"initialValue":{"arguments":[{"id":1337,"name":"_leValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"23385:8:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1336,"name":"reverseUint64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"23371:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint64_$returns$_t_uint64_$","typeString":"function (uint64) pure returns (uint64)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23371:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"23353:41:0"},{"expression":{"id":1340,"name":"_beValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"23411:8:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1324,"id":1341,"nodeType":"Return","src":"23404:15:0"}]},"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"22998:206:0","text":"@notice          Extracts the value from the output in a tx\n @dev             Value is an 8-byte little-endian number\n @param _output   The output\n @return          The output value"},"id":1343,"implemented":true,"kind":"function","modifiers":[],"name":"extractValue","nameLocation":"23218:12:0","nodeType":"FunctionDefinition","parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"_output","nameLocation":"23244:7:0","nodeType":"VariableDeclaration","scope":1343,"src":"23231:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1319,"name":"bytes","nodeType":"ElementaryTypeName","src":"23231:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23230:22:0"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1343,"src":"23276:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1322,"name":"uint64","nodeType":"ElementaryTypeName","src":"23276:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"23275:8:0"},"scope":2202,"src":"23209:217:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"23830:138:0","statements":[{"assignments":[1354],"declarations":[{"constant":false,"id":1354,"mutability":"mutable","name":"_leValue","nameLocation":"23847:8:0","nodeType":"VariableDeclaration","scope":1371,"src":"23840:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1353,"name":"uint64","nodeType":"ElementaryTypeName","src":"23840:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1362,"initialValue":{"arguments":[{"arguments":[{"id":1359,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"23880:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1357,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"23865:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23873:6:0","memberName":"slice8","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"23865:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes8_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes8)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23865:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes8","typeString":"bytes8"}],"id":1356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23858:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1355,"name":"uint64","nodeType":"ElementaryTypeName","src":"23858:6:0","typeDescriptions":{}}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23858:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"23840:45:0"},{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"_beValue","nameLocation":"23902:8:0","nodeType":"VariableDeclaration","scope":1371,"src":"23895:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1363,"name":"uint64","nodeType":"ElementaryTypeName","src":"23895:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1368,"initialValue":{"arguments":[{"id":1366,"name":"_leValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"23927:8:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1365,"name":"reverseUint64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"23913:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint64_$returns$_t_uint64_$","typeString":"function (uint64) pure returns (uint64)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23913:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"23895:41:0"},{"expression":{"id":1369,"name":"_beValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"23953:8:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1352,"id":1370,"nodeType":"Return","src":"23946:15:0"}]},"documentation":{"id":1344,"nodeType":"StructuredDocumentation","src":"23432:303:0","text":"@notice          Extracts the value from the output in a tx\n @dev             Value is an 8-byte little-endian number\n @param _output   The byte array containing the output\n @param _at       The starting index of the output in the array\n @return          The output value"},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"extractValueAt","nameLocation":"23749:14:0","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"_output","nameLocation":"23777:7:0","nodeType":"VariableDeclaration","scope":1372,"src":"23764:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1345,"name":"bytes","nodeType":"ElementaryTypeName","src":"23764:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"_at","nameLocation":"23794:3:0","nodeType":"VariableDeclaration","scope":1372,"src":"23786:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"23786:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23763:35:0"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"23822:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1350,"name":"uint64","nodeType":"ElementaryTypeName","src":"23822:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"23821:8:0"},"scope":2202,"src":"23740:228:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1407,"nodeType":"Block","src":"24329:179:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1380,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"24343:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1382,"indexExpression":{"hexValue":"39","id":1381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24351:1:0","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24343:10:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"6a","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"24357:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_b31d742db54d6961c6b346af2c9c4c495eb8aff2ebf6b3699e052d1cef5cf50b","typeString":"literal_string \"j\""},"value":"j"},"src":"24343:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1388,"nodeType":"IfStatement","src":"24339:64:0","trueBody":{"id":1387,"nodeType":"Block","src":"24366:37:0","statements":[{"expression":{"hexValue":"","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"24387:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1379,"id":1386,"nodeType":"Return","src":"24380:12:0"}]}},{"assignments":[1390],"declarations":[{"constant":false,"id":1390,"mutability":"mutable","name":"_dataLen","nameLocation":"24419:8:0","nodeType":"VariableDeclaration","scope":1407,"src":"24412:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1389,"name":"bytes1","nodeType":"ElementaryTypeName","src":"24412:6:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":1394,"initialValue":{"baseExpression":{"id":1391,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"24430:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1393,"indexExpression":{"hexValue":"3130","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24438:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24430:11:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"24412:29:0"},{"expression":{"arguments":[{"hexValue":"3131","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24472:2:0","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},{"arguments":[{"arguments":[{"id":1402,"name":"_dataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"24490:8:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24484:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1400,"name":"uint8","nodeType":"ElementaryTypeName","src":"24484:5:0","typeDescriptions":{}}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24484:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24476:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"24476:7:0","typeDescriptions":{}}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24476:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1395,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"24458:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24466:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"24458:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24458:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1379,"id":1406,"nodeType":"Return","src":"24451:50:0"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"23974:262:0","text":"@notice          Extracts the data from an op return output\n @dev             Returns hex\"\" if no data or not an op return\n @param _output   The output\n @return          Any data contained in the opreturn output, null if not an op return"},"id":1408,"implemented":true,"kind":"function","modifiers":[],"name":"extractOpReturnData","nameLocation":"24250:19:0","nodeType":"FunctionDefinition","parameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"_output","nameLocation":"24283:7:0","nodeType":"VariableDeclaration","scope":1408,"src":"24270:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1374,"name":"bytes","nodeType":"ElementaryTypeName","src":"24270:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24269:22:0"},"returnParameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1408,"src":"24315:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1377,"name":"bytes","nodeType":"ElementaryTypeName","src":"24315:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24314:14:0"},"scope":2202,"src":"24241:267:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1425,"nodeType":"Block","src":"24863:69:0","statements":[{"expression":{"arguments":[{"id":1417,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"24894:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"38","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24903:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1419,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"24906:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24914:6:0","memberName":"length","nodeType":"MemberAccess","src":"24906:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"38","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24923:1:0","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"24906:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1416,"name":"extractHashAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"24880:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24880:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1415,"id":1424,"nodeType":"Return","src":"24873:52:0"}]},"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"24514:264:0","text":"@notice          Extracts the hash from the output script\n @dev             Determines type by the length prefix and validates format\n @param _output   The output\n @return          The hash committed to by the pk_script, or null for errors"},"id":1426,"implemented":true,"kind":"function","modifiers":[],"name":"extractHash","nameLocation":"24792:11:0","nodeType":"FunctionDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"_output","nameLocation":"24817:7:0","nodeType":"VariableDeclaration","scope":1426,"src":"24804:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1410,"name":"bytes","nodeType":"ElementaryTypeName","src":"24804:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24803:22:0"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1426,"src":"24849:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1413,"name":"bytes","nodeType":"ElementaryTypeName","src":"24849:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24848:14:0"},"scope":2202,"src":"24783:149:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1589,"nodeType":"Block","src":"25596:1855:0","statements":[{"assignments":[1439],"declarations":[{"constant":false,"id":1439,"mutability":"mutable","name":"_scriptLen","nameLocation":"25612:10:0","nodeType":"VariableDeclaration","scope":1589,"src":"25606:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1438,"name":"uint8","nodeType":"ElementaryTypeName","src":"25606:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1446,"initialValue":{"arguments":[{"baseExpression":{"id":1442,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"25631:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1444,"indexExpression":{"id":1443,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"25639:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25631:12:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25625:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1440,"name":"uint8","nodeType":"ElementaryTypeName","src":"25625:5:0","typeDescriptions":{}}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25625:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"25606:38:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1447,"name":"_scriptLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"25892:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25905:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25892:14:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1450,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"25910:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25892:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1455,"nodeType":"IfStatement","src":"25888:65:0","trueBody":{"id":1454,"nodeType":"Block","src":"25916:37:0","statements":[{"expression":{"hexValue":"","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"25937:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1453,"nodeType":"Return","src":"25930:12:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":1458,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"25973:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1462,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1459,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"25981:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25987:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25981:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25973:16:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25967:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1456,"name":"uint8","nodeType":"ElementaryTypeName","src":"25967:5:0","typeDescriptions":{}}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25967:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25994:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25967:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1585,"nodeType":"Block","src":"26491:854:0","statements":[{"assignments":[1512],"declarations":[{"constant":false,"id":1512,"mutability":"mutable","name":"_tag","nameLocation":"26512:4:0","nodeType":"VariableDeclaration","scope":1585,"src":"26505:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"},"typeName":{"id":1511,"name":"bytes3","nodeType":"ElementaryTypeName","src":"26505:6:0","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"visibility":"internal"}],"id":1517,"initialValue":{"arguments":[{"id":1515,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26534:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1513,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26519:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26527:6:0","memberName":"slice3","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"26519:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes3_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes3)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26519:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"nodeType":"VariableDeclarationStatement","src":"26505:33:0"},{"condition":{"commonType":{"typeIdentifier":"t_bytes3","typeString":"bytes3"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1518,"name":"_tag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"26577:4:0","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"1976a9","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"26585:11:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e1683aec1a10d43657f3f2c82e683d8e19e8a3f320ce9d3bf22c6ca6ab4cbce6","typeString":"literal_string hex\"1976a9\""}},"src":"26577:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes3","typeString":"bytes3"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"_tag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"27001:4:0","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"17a914","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"27009:11:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a0916ee0b243ee20fb4ce56170744d86b54d7ae03a418a7a12156f40dedcf7d7","typeString":"literal_string hex\"17a914\""}},"src":"27001:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1583,"nodeType":"IfStatement","src":"26997:338:0","trueBody":{"id":1582,"nodeType":"Block","src":"27022:313:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":1560,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"27183:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1566,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"27191:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1562,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"27197:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27191:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27204:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27191:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27183:23:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27177:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1558,"name":"uint8","nodeType":"ElementaryTypeName","src":"27177:5:0","typeDescriptions":{}}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27177:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30783837","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27211:4:0","typeDescriptions":{"typeIdentifier":"t_rational_135_by_1","typeString":"int_const 135"},"value":"0x87"},"src":"27177:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1573,"nodeType":"IfStatement","src":"27173:97:0","trueBody":{"id":1572,"nodeType":"Block","src":"27217:53:0","statements":[{"expression":{"hexValue":"","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"27246:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1571,"nodeType":"Return","src":"27239:12:0"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1576,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"27308:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27314:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"27308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3230","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27317:2:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"id":1574,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"27294:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27302:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"27294:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27294:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1437,"id":1581,"nodeType":"Return","src":"27287:33:0"}]}},"id":1584,"nodeType":"IfStatement","src":"26573:762:0","trueBody":{"id":1554,"nodeType":"Block","src":"26598:393:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":1523,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26760:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1527,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1524,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26768:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26774:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"26768:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26760:16:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26754:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1521,"name":"uint8","nodeType":"ElementaryTypeName","src":"26754:5:0","typeDescriptions":{}}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26754:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30783134","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26781:4:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"0x14"},"src":"26754:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1533,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26824:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1534,"name":"_len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"26830:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26824:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":1536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26837:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26824:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1531,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26809:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26817:6:0","memberName":"slice2","nodeType":"MemberAccess","referencedDeclaration":2410,"src":"26809:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes2_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes2)"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26809:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"88ac","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"26843:9:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b50b2715f5a28d2a7eeb517f17ec797e8536bd425bf31fc4f6bf7ce1e34b77d","typeString":"literal_string hex\"88ac\""}},"src":"26809:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26754:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1545,"nodeType":"IfStatement","src":"26750:157:0","trueBody":{"id":1544,"nodeType":"Block","src":"26854:53:0","statements":[{"expression":{"hexValue":"","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"26883:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1543,"nodeType":"Return","src":"26876:12:0"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26945:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26951:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"26945:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3230","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26954:2:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"id":1546,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26931:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26939:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"26931:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26931:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1437,"id":1553,"nodeType":"Return","src":"26924:33:0"}]}}]},"id":1586,"nodeType":"IfStatement","src":"25963:1382:0","trueBody":{"id":1510,"nodeType":"Block","src":"25997:488:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1466,"name":"_scriptLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"26015:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"32","id":1467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26028:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26015:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1472,"nodeType":"IfStatement","src":"26011:65:0","trueBody":{"id":1471,"nodeType":"Block","src":"26031:45:0","statements":[{"expression":{"hexValue":"","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"26056:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1470,"nodeType":"Return","src":"26049:12:0"}]}},{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"_payloadLen","nameLocation":"26097:11:0","nodeType":"VariableDeclaration","scope":1510,"src":"26089:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"26089:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1483,"initialValue":{"arguments":[{"baseExpression":{"id":1477,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26117:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1481,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1478,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26125:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26131:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26117:16:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26111:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1475,"name":"uint8","nodeType":"ElementaryTypeName","src":"26111:5:0","typeDescriptions":{}}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26111:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"26089:45:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1484,"name":"_payloadLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"26295:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1485,"name":"_scriptLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"26310:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26323:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26310:14:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"26295:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"_payloadLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"26329:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30783230","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26344:4:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"26329:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1492,"name":"_payloadLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"26352:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30783134","id":1493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26367:4:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"0x14"},"src":"26352:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26329:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26328:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26295:77:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1501,"nodeType":"IfStatement","src":"26291:128:0","trueBody":{"id":1500,"nodeType":"Block","src":"26374:45:0","statements":[{"expression":{"hexValue":"","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"26399:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1499,"nodeType":"Return","src":"26392:12:0"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1504,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"26453:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26459:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"26453:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1507,"name":"_payloadLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"26462:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1502,"name":"_output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"26439:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26447:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"26439:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26439:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1437,"id":1509,"nodeType":"Return","src":"26432:42:0"}]}},{"expression":{"hexValue":"","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"27361:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1437,"id":1588,"nodeType":"Return","src":"27354:12:0"}]},"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"24938:514:0","text":"@notice          Extracts the hash from the output script\n @dev             Determines type by the length prefix and validates format\n @param _output   The byte array containing the output\n @param _at       The starting index of the output script in the array\n                  (output start + 8)\n @param _len      The length of the output script\n                  (output length - 8)\n @return          The hash committed to by the pk_script, or null for errors"},"id":1590,"implemented":true,"kind":"function","modifiers":[],"name":"extractHashAt","nameLocation":"25466:13:0","nodeType":"FunctionDefinition","parameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"_output","nameLocation":"25502:7:0","nodeType":"VariableDeclaration","scope":1590,"src":"25489:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1428,"name":"bytes","nodeType":"ElementaryTypeName","src":"25489:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"_at","nameLocation":"25527:3:0","nodeType":"VariableDeclaration","scope":1590,"src":"25519:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"25519:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"_len","nameLocation":"25548:4:0","nodeType":"VariableDeclaration","scope":1590,"src":"25540:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"25540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25479:79:0"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1590,"src":"25582:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1435,"name":"bytes","nodeType":"ElementaryTypeName","src":"25582:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25581:14:0"},"scope":2202,"src":"25457:1994:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1672,"nodeType":"Block","src":"27862:922:0","statements":[{"assignments":[1599],"declarations":[{"constant":false,"id":1599,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"27880:14:0","nodeType":"VariableDeclaration","scope":1672,"src":"27872:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1598,"name":"uint256","nodeType":"ElementaryTypeName","src":"27872:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1600,"nodeType":"VariableDeclarationStatement","src":"27872:22:0"},{"assignments":[1602],"declarations":[{"constant":false,"id":1602,"mutability":"mutable","name":"_nIns","nameLocation":"27912:5:0","nodeType":"VariableDeclaration","scope":1672,"src":"27904:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"27904:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1603,"nodeType":"VariableDeclarationStatement","src":"27904:13:0"},{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1604,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"27929:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1605,"name":"_nIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"27945:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1606,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"27928:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1608,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"27966:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1607,"name":"parseVarInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"27954:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27954:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"27928:43:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1611,"nodeType":"ExpressionStatement","src":"27928:43:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1612,"name":"_nIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"28050:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28059:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"28050:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1615,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"28064:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1616,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"28082:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28064:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"28050:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1622,"nodeType":"IfStatement","src":"28046:86:0","trueBody":{"id":1621,"nodeType":"Block","src":"28095:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"28116:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1597,"id":1620,"nodeType":"Return","src":"28109:12:0"}]}},{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"_offset","nameLocation":"28150:7:0","nodeType":"VariableDeclaration","scope":1672,"src":"28142:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"28142:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1628,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28160:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1626,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"28164:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28160:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28142:36:0"},{"body":{"id":1665,"nodeType":"Block","src":"28225:456:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1639,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"28301:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1640,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"28312:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28317:6:0","memberName":"length","nodeType":"MemberAccess","src":"28312:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28301:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1646,"nodeType":"IfStatement","src":"28297:73:0","trueBody":{"id":1645,"nodeType":"Block","src":"28325:45:0","statements":[{"expression":{"hexValue":"66616c7365","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"28350:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1597,"id":1644,"nodeType":"Return","src":"28343:12:0"}]}},{"assignments":[1648],"declarations":[{"constant":false,"id":1648,"mutability":"mutable","name":"_nextLen","nameLocation":"28453:8:0","nodeType":"VariableDeclaration","scope":1665,"src":"28445:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1647,"name":"uint256","nodeType":"ElementaryTypeName","src":"28445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1653,"initialValue":{"arguments":[{"id":1650,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"28487:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1651,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"28493:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1649,"name":"determineInputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"28464:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28464:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28445:56:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1654,"name":"_nextLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"28519:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1655,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"28531:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28519:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1660,"nodeType":"IfStatement","src":"28515:74:0","trueBody":{"id":1659,"nodeType":"Block","src":"28544:45:0","statements":[{"expression":{"hexValue":"66616c7365","id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"28569:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1597,"id":1658,"nodeType":"Return","src":"28562:12:0"}]}},{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1661,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"28651:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1662,"name":"_nextLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"28662:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28651:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1664,"nodeType":"ExpressionStatement","src":"28651:19:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1633,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"28209:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1634,"name":"_nIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"28213:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28209:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1666,"initializationExpression":{"assignments":[1630],"declarations":[{"constant":false,"id":1630,"mutability":"mutable","name":"i","nameLocation":"28202:1:0","nodeType":"VariableDeclaration","scope":1666,"src":"28194:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"28194:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1632,"initialValue":{"hexValue":"30","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28206:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"28194:13:0"},"loopExpression":{"expression":{"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"28220:3:0","subExpression":{"id":1636,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"28220:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1638,"nodeType":"ExpressionStatement","src":"28220:3:0"},"nodeType":"ForStatement","src":"28189:492:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1667,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"28755:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1668,"name":"_vin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"28766:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28771:6:0","memberName":"length","nodeType":"MemberAccess","src":"28766:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28755:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1597,"id":1671,"nodeType":"Return","src":"28748:29:0"}]},"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"27522:266:0","text":"@notice      Checks that the vin passed up is properly formatted\n @dev         Consider a vin with a valid vout in its scriptsig\n @param _vin  Raw bytes length-prefixed input vector\n @return      True if it represents a validly formatted vin"},"id":1673,"implemented":true,"kind":"function","modifiers":[],"name":"validateVin","nameLocation":"27802:11:0","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1593,"mutability":"mutable","name":"_vin","nameLocation":"27827:4:0","nodeType":"VariableDeclaration","scope":1673,"src":"27814:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1592,"name":"bytes","nodeType":"ElementaryTypeName","src":"27814:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"27813:19:0"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1673,"src":"27856:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1595,"name":"bool","nodeType":"ElementaryTypeName","src":"27856:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"27855:6:0"},"scope":2202,"src":"27793:991:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1755,"nodeType":"Block","src":"29127:933:0","statements":[{"assignments":[1682],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"_varIntDataLen","nameLocation":"29145:14:0","nodeType":"VariableDeclaration","scope":1755,"src":"29137:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"29137:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1683,"nodeType":"VariableDeclarationStatement","src":"29137:22:0"},{"assignments":[1685],"declarations":[{"constant":false,"id":1685,"mutability":"mutable","name":"_nOuts","nameLocation":"29177:6:0","nodeType":"VariableDeclaration","scope":1755,"src":"29169:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1684,"name":"uint256","nodeType":"ElementaryTypeName","src":"29169:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1686,"nodeType":"VariableDeclarationStatement","src":"29169:14:0"},{"expression":{"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1687,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"29195:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1688,"name":"_nOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"29211:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1689,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"29194:24:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1691,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"29233:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1690,"name":"parseVarInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"29221:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256,uint256)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29221:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"29194:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"29194:45:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1695,"name":"_nOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"29319:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29329:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29319:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1698,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"29334:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1699,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"29352:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29334:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"29319:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1705,"nodeType":"IfStatement","src":"29315:87:0","trueBody":{"id":1704,"nodeType":"Block","src":"29365:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"29386:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1680,"id":1703,"nodeType":"Return","src":"29379:12:0"}]}},{"assignments":[1707],"declarations":[{"constant":false,"id":1707,"mutability":"mutable","name":"_offset","nameLocation":"29420:7:0","nodeType":"VariableDeclaration","scope":1755,"src":"29412:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"29412:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1711,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29430:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1709,"name":"_varIntDataLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"29434:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29430:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29412:36:0"},{"body":{"id":1748,"nodeType":"Block","src":"29496:460:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1722,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"29572:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1723,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"29583:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29589:6:0","memberName":"length","nodeType":"MemberAccess","src":"29583:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29572:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1729,"nodeType":"IfStatement","src":"29568:74:0","trueBody":{"id":1728,"nodeType":"Block","src":"29597:45:0","statements":[{"expression":{"hexValue":"66616c7365","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"29622:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1680,"id":1727,"nodeType":"Return","src":"29615:12:0"}]}},{"assignments":[1731],"declarations":[{"constant":false,"id":1731,"mutability":"mutable","name":"_nextLen","nameLocation":"29774:8:0","nodeType":"VariableDeclaration","scope":1748,"src":"29766:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"29766:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1736,"initialValue":{"arguments":[{"id":1733,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"29809:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1734,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"29816:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1732,"name":"determineOutputLengthAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"29785:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29785:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29766:58:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1737,"name":"_nextLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"29842:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1738,"name":"ERR_BAD_ARG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"29854:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29842:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1743,"nodeType":"IfStatement","src":"29838:74:0","trueBody":{"id":1742,"nodeType":"Block","src":"29867:45:0","statements":[{"expression":{"hexValue":"66616c7365","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"29892:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1680,"id":1741,"nodeType":"Return","src":"29885:12:0"}]}},{"expression":{"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1744,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"29926:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1745,"name":"_nextLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"29937:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29926:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1747,"nodeType":"ExpressionStatement","src":"29926:19:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1716,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"29479:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1717,"name":"_nOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"29483:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29479:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1749,"initializationExpression":{"assignments":[1713],"declarations":[{"constant":false,"id":1713,"mutability":"mutable","name":"i","nameLocation":"29472:1:0","nodeType":"VariableDeclaration","scope":1749,"src":"29464:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"29464:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1715,"initialValue":{"hexValue":"30","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29476:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29464:13:0"},"loopExpression":{"expression":{"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29491:3:0","subExpression":{"id":1719,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"29491:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1721,"nodeType":"ExpressionStatement","src":"29491:3:0"},"nodeType":"ForStatement","src":"29459:497:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1750,"name":"_offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"30030:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1751,"name":"_vout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"30041:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30047:6:0","memberName":"length","nodeType":"MemberAccess","src":"30041:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30030:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1680,"id":1754,"nodeType":"Return","src":"30023:30:0"}]},"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"28790:261:0","text":"@notice      Checks that the vout passed up is properly formatted\n @dev         Consider a vout with a valid scriptpubkey\n @param _vout Raw bytes length-prefixed output vector\n @return      True if it represents a validly formatted vout"},"id":1756,"implemented":true,"kind":"function","modifiers":[],"name":"validateVout","nameLocation":"29065:12:0","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1676,"mutability":"mutable","name":"_vout","nameLocation":"29091:5:0","nodeType":"VariableDeclaration","scope":1756,"src":"29078:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1675,"name":"bytes","nodeType":"ElementaryTypeName","src":"29078:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"29077:20:0"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1756,"src":"29121:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1678,"name":"bool","nodeType":"ElementaryTypeName","src":"29121:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"29120:6:0"},"scope":2202,"src":"29056:1004:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1769,"nodeType":"Block","src":"30477:43:0","statements":[{"expression":{"arguments":[{"hexValue":"3336","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30510:2:0","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"36"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"}],"expression":{"id":1764,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"30494:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30502:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"30494:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30494:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1763,"id":1768,"nodeType":"Return","src":"30487:26:0"}]},"documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"30138:251:0","text":"@notice          Extracts the transaction merkle root from a block header\n @dev             Use verifyHash256Merkle to verify proofs with this root\n @param _header   The header\n @return          The merkle root (little-endian)"},"id":1770,"implemented":true,"kind":"function","modifiers":[],"name":"extractMerkleRootLE","nameLocation":"30403:19:0","nodeType":"FunctionDefinition","parameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"_header","nameLocation":"30436:7:0","nodeType":"VariableDeclaration","scope":1770,"src":"30423:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1758,"name":"bytes","nodeType":"ElementaryTypeName","src":"30423:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"30422:22:0"},"returnParameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1770,"src":"30468:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30468:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"30467:9:0"},"scope":2202,"src":"30394:126:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1783,"nodeType":"Block","src":"30851:51:0","statements":[{"expression":{"arguments":[{"id":1779,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"30884:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30893:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1778,"name":"extractTargetAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"30868:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes memory,uint256) pure returns (uint256)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30868:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1777,"id":1782,"nodeType":"Return","src":"30861:34:0"}]},"documentation":{"id":1771,"nodeType":"StructuredDocumentation","src":"30526:243:0","text":"@notice          Extracts the target from a block header\n @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n @param _header   The header\n @return          The target threshold"},"id":1784,"implemented":true,"kind":"function","modifiers":[],"name":"extractTarget","nameLocation":"30783:13:0","nodeType":"FunctionDefinition","parameters":{"id":1774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1773,"mutability":"mutable","name":"_header","nameLocation":"30810:7:0","nodeType":"VariableDeclaration","scope":1784,"src":"30797:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1772,"name":"bytes","nodeType":"ElementaryTypeName","src":"30797:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"30796:22:0"},"returnParameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1784,"src":"30842:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1775,"name":"uint256","nodeType":"ElementaryTypeName","src":"30842:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30841:9:0"},"scope":2202,"src":"30774:128:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1839,"nodeType":"Block","src":"31317:241:0","statements":[{"assignments":[1795],"declarations":[{"constant":false,"id":1795,"mutability":"mutable","name":"_m","nameLocation":"31334:2:0","nodeType":"VariableDeclaration","scope":1839,"src":"31327:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1794,"name":"uint24","nodeType":"ElementaryTypeName","src":"31327:6:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":1805,"initialValue":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3732","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31361:2:0","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1801,"name":"at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"31366:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31361:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1798,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"31346:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31354:6:0","memberName":"slice3","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"31346:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes3_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes3)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31346:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes3","typeString":"bytes3"}],"id":1797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31339:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":1796,"name":"uint24","nodeType":"ElementaryTypeName","src":"31339:6:0","typeDescriptions":{}}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31339:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"VariableDeclarationStatement","src":"31327:43:0"},{"assignments":[1807],"declarations":[{"constant":false,"id":1807,"mutability":"mutable","name":"_e","nameLocation":"31386:2:0","nodeType":"VariableDeclaration","scope":1839,"src":"31380:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1806,"name":"uint8","nodeType":"ElementaryTypeName","src":"31380:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1816,"initialValue":{"arguments":[{"baseExpression":{"id":1810,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"31397:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1814,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3735","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31405:2:0","typeDescriptions":{"typeIdentifier":"t_rational_75_by_1","typeString":"int_const 75"},"value":"75"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1812,"name":"at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"31410:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31405:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31397:16:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31391:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1808,"name":"uint8","nodeType":"ElementaryTypeName","src":"31391:5:0","typeDescriptions":{}}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31391:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"31380:34:0"},{"assignments":[1818],"declarations":[{"constant":false,"id":1818,"mutability":"mutable","name":"_mantissa","nameLocation":"31432:9:0","nodeType":"VariableDeclaration","scope":1839,"src":"31424:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1817,"name":"uint256","nodeType":"ElementaryTypeName","src":"31424:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1825,"initialValue":{"arguments":[{"arguments":[{"id":1822,"name":"_m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"31466:2:0","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":1821,"name":"reverseUint24","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"31452:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint24_$returns$_t_uint24_$","typeString":"function (uint24) pure returns (uint24)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31452:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31444:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"31444:7:0","typeDescriptions":{}}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31444:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31424:46:0"},{"assignments":[1827],"declarations":[{"constant":false,"id":1827,"mutability":"mutable","name":"_exponent","nameLocation":"31485:9:0","nodeType":"VariableDeclaration","scope":1839,"src":"31480:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint","nodeType":"ElementaryTypeName","src":"31480:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1831,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1828,"name":"_e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"31497:2:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31502:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"31497:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"31480:23:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1832,"name":"_mantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"31521:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31534:3:0","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1834,"name":"_exponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"31541:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31534:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1836,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31533:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31521:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1793,"id":1838,"nodeType":"Return","src":"31514:37:0"}]},"documentation":{"id":1785,"nodeType":"StructuredDocumentation","src":"30908:313:0","text":"@notice          Extracts the target from a block header\n @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n @param _header   The array containing the header\n @param at        The start of the header\n @return          The target threshold"},"id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"extractTargetAt","nameLocation":"31235:15:0","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"_header","nameLocation":"31264:7:0","nodeType":"VariableDeclaration","scope":1840,"src":"31251:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1786,"name":"bytes","nodeType":"ElementaryTypeName","src":"31251:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1789,"mutability":"mutable","name":"at","nameLocation":"31281:2:0","nodeType":"VariableDeclaration","scope":1840,"src":"31273:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1788,"name":"uint256","nodeType":"ElementaryTypeName","src":"31273:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31250:34:0"},"returnParameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"31308:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1791,"name":"uint256","nodeType":"ElementaryTypeName","src":"31308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31307:9:0"},"scope":2202,"src":"31226:332:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1853,"nodeType":"Block","src":"32016:100:0","statements":[{"expression":{"arguments":[{"id":1850,"name":"_target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"32101:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1848,"name":"DIFF1_TARGET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"32084:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32097:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"32084:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32084:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1847,"id":1852,"nodeType":"Return","src":"32077:32:0"}]},"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"31564:369:0","text":"@notice          Calculate difficulty from the difficulty 1 target and current target\n @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\n @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\n @param _target   The current target\n @return          The block difficulty (bdiff)"},"id":1854,"implemented":true,"kind":"function","modifiers":[],"name":"calculateDifficulty","nameLocation":"31947:19:0","nodeType":"FunctionDefinition","parameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"_target","nameLocation":"31975:7:0","nodeType":"VariableDeclaration","scope":1854,"src":"31967:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint256","nodeType":"ElementaryTypeName","src":"31967:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31966:17:0"},"returnParameters":{"id":1847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1854,"src":"32007:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1845,"name":"uint256","nodeType":"ElementaryTypeName","src":"32007:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32006:9:0"},"scope":2202,"src":"31938:178:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1867,"nodeType":"Block","src":"32457:42:0","statements":[{"expression":{"arguments":[{"hexValue":"34","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32490:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":1862,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"32474:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32482:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"32474:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32474:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1861,"id":1866,"nodeType":"Return","src":"32467:25:0"}]},"documentation":{"id":1855,"nodeType":"StructuredDocumentation","src":"32122:248:0","text":"@notice          Extracts the previous block's hash from a block header\n @dev             Block headers do NOT include block number :(\n @param _header   The header\n @return          The previous block's hash (little-endian)"},"id":1868,"implemented":true,"kind":"function","modifiers":[],"name":"extractPrevBlockLE","nameLocation":"32384:18:0","nodeType":"FunctionDefinition","parameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"_header","nameLocation":"32416:7:0","nodeType":"VariableDeclaration","scope":1868,"src":"32403:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1856,"name":"bytes","nodeType":"ElementaryTypeName","src":"32403:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"32402:22:0"},"returnParameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1868,"src":"32448:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"32448:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"32447:9:0"},"scope":2202,"src":"32375:124:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1885,"nodeType":"Block","src":"32946:47:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32979:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1881,"name":"at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"32983:2:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32979:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1878,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"32963:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32971:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"32963:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32963:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1877,"id":1884,"nodeType":"Return","src":"32956:30:0"}]},"documentation":{"id":1869,"nodeType":"StructuredDocumentation","src":"32505:318:0","text":"@notice          Extracts the previous block's hash from a block header\n @dev             Block headers do NOT include block number :(\n @param _header   The array containing the header\n @param at        The start of the header\n @return          The previous block's hash (little-endian)"},"id":1886,"implemented":true,"kind":"function","modifiers":[],"name":"extractPrevBlockLEAt","nameLocation":"32837:20:0","nodeType":"FunctionDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"_header","nameLocation":"32880:7:0","nodeType":"VariableDeclaration","scope":1886,"src":"32867:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1870,"name":"bytes","nodeType":"ElementaryTypeName","src":"32867:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"at","nameLocation":"32905:2:0","nodeType":"VariableDeclaration","scope":1886,"src":"32897:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"32897:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32857:56:0"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1886,"src":"32937:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"32937:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"32936:9:0"},"scope":2202,"src":"32828:165:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1899,"nodeType":"Block","src":"33296:42:0","statements":[{"expression":{"arguments":[{"hexValue":"3638","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33328:2:0","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"68"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"}],"expression":{"id":1894,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"33313:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"33321:6:0","memberName":"slice4","nodeType":"MemberAccess","referencedDeclaration":2372,"src":"33313:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes4_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes4)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33313:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1893,"id":1898,"nodeType":"Return","src":"33306:25:0"}]},"documentation":{"id":1887,"nodeType":"StructuredDocumentation","src":"32999:211:0","text":"@notice          Extracts the timestamp from a block header\n @dev             Time is not 100% reliable\n @param _header   The header\n @return          The timestamp (little-endian bytes)"},"id":1900,"implemented":true,"kind":"function","modifiers":[],"name":"extractTimestampLE","nameLocation":"33224:18:0","nodeType":"FunctionDefinition","parameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"_header","nameLocation":"33256:7:0","nodeType":"VariableDeclaration","scope":1900,"src":"33243:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1888,"name":"bytes","nodeType":"ElementaryTypeName","src":"33243:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33242:22:0"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1900,"src":"33288:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1891,"name":"bytes4","nodeType":"ElementaryTypeName","src":"33288:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"33287:8:0"},"scope":2202,"src":"33215:123:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1917,"nodeType":"Block","src":"33624:74:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1912,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"33681:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1911,"name":"extractTimestampLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"33662:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory) pure returns (bytes4)"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33662:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33655:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1909,"name":"uint32","nodeType":"ElementaryTypeName","src":"33655:6:0","typeDescriptions":{}}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33655:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1908,"name":"reverseUint32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"33641:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$returns$_t_uint32_$","typeString":"function (uint32) pure returns (uint32)"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33641:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1907,"id":1916,"nodeType":"Return","src":"33634:57:0"}]},"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"33344:196:0","text":"@notice          Extracts the timestamp from a block header\n @dev             Time is not 100% reliable\n @param _header   The header\n @return          The timestamp (uint)"},"id":1918,"implemented":true,"kind":"function","modifiers":[],"name":"extractTimestamp","nameLocation":"33554:16:0","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"_header","nameLocation":"33584:7:0","nodeType":"VariableDeclaration","scope":1918,"src":"33571:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1902,"name":"bytes","nodeType":"ElementaryTypeName","src":"33571:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33570:22:0"},"returnParameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"33616:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1905,"name":"uint32","nodeType":"ElementaryTypeName","src":"33616:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"33615:8:0"},"scope":2202,"src":"33545:153:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"34003:67:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":1928,"name":"_header","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"34054:7:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1927,"name":"extractTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"34040:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34040:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1926,"name":"calculateDifficulty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"34020:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34020:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1925,"id":1931,"nodeType":"Return","src":"34013:50:0"}]},"documentation":{"id":1919,"nodeType":"StructuredDocumentation","src":"33704:213:0","text":"@notice          Extracts the expected difficulty from a block header\n @dev             Does NOT verify the work\n @param _header   The header\n @return          The difficulty as an integer"},"id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"extractDifficulty","nameLocation":"33931:17:0","nodeType":"FunctionDefinition","parameters":{"id":1922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"_header","nameLocation":"33962:7:0","nodeType":"VariableDeclaration","scope":1933,"src":"33949:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1920,"name":"bytes","nodeType":"ElementaryTypeName","src":"33949:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33948:22:0"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"33994:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"33994:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33993:9:0"},"scope":2202,"src":"33922:148:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1951,"nodeType":"Block","src":"34400:61:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":1946,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"34446:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1947,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"34450:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1944,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"34429:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34433:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"34429:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34429:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1943,"name":"hash256View","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"34417:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) view returns (bytes32)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34417:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1942,"id":1950,"nodeType":"Return","src":"34410:44:0"}]},"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"34076:225:0","text":"@notice          Concatenates and hashes two inputs for merkle proving\n @param _a        The first hash\n @param _b        The second hash\n @return          The double-sha256 of the concatenated hashes"},"id":1952,"implemented":true,"kind":"function","modifiers":[],"name":"_hash256MerkleStep","nameLocation":"34315:18:0","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"_a","nameLocation":"34347:2:0","nodeType":"VariableDeclaration","scope":1952,"src":"34334:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1935,"name":"bytes","nodeType":"ElementaryTypeName","src":"34334:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1938,"mutability":"mutable","name":"_b","nameLocation":"34364:2:0","nodeType":"VariableDeclaration","scope":1952,"src":"34351:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1937,"name":"bytes","nodeType":"ElementaryTypeName","src":"34351:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"34333:34:0"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1952,"src":"34391:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"34391:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"34390:9:0"},"scope":2202,"src":"34306:155:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1967,"nodeType":"Block","src":"34781:43:0","statements":[{"expression":{"arguments":[{"id":1963,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"34810:2:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1964,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"34814:2:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1962,"name":"hash256Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"34798:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34798:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1961,"id":1966,"nodeType":"Return","src":"34791:26:0"}]},"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"34467:225:0","text":"@notice          Concatenates and hashes two inputs for merkle proving\n @param _a        The first hash\n @param _b        The second hash\n @return          The double-sha256 of the concatenated hashes"},"id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"_hash256MerkleStep","nameLocation":"34706:18:0","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"_a","nameLocation":"34733:2:0","nodeType":"VariableDeclaration","scope":1968,"src":"34725:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"34725:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"_b","nameLocation":"34745:2:0","nodeType":"VariableDeclaration","scope":1968,"src":"34737:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"34737:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"34724:24:0"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"34772:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"34772:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"34771:9:0"},"scope":2202,"src":"34697:127:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2039,"nodeType":"Block","src":"35259:587:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1978,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35313:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35320:6:0","memberName":"length","nodeType":"MemberAccess","src":"35313:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35329:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"35313:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35335:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"35313:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1987,"nodeType":"IfStatement","src":"35309:66:0","trueBody":{"id":1986,"nodeType":"Block","src":"35338:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"35359:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1977,"id":1985,"nodeType":"Return","src":"35352:12:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1988,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35438:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35445:6:0","memberName":"length","nodeType":"MemberAccess","src":"35438:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35455:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"35438:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1995,"nodeType":"IfStatement","src":"35434:61:0","trueBody":{"id":1994,"nodeType":"Block","src":"35459:36:0","statements":[{"expression":{"hexValue":"74727565","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"35480:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1977,"id":1993,"nodeType":"Return","src":"35473:11:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1996,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35539:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35546:6:0","memberName":"length","nodeType":"MemberAccess","src":"35539:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3634","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35556:2:0","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"35539:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2003,"nodeType":"IfStatement","src":"35535:62:0","trueBody":{"id":2002,"nodeType":"Block","src":"35560:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"35581:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1977,"id":2001,"nodeType":"Return","src":"35574:12:0"}]}},{"assignments":[2005],"declarations":[{"constant":false,"id":2005,"mutability":"mutable","name":"_root","nameLocation":"35615:5:0","nodeType":"VariableDeclaration","scope":2039,"src":"35607:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35607:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2013,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2008,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35638:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35645:6:0","memberName":"length","nodeType":"MemberAccess","src":"35638:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3332","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35654:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"35638:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2006,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35623:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35630:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"35623:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35623:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"35607:50:0"},{"assignments":[2015],"declarations":[{"constant":false,"id":2015,"mutability":"mutable","name":"_current","nameLocation":"35675:8:0","nodeType":"VariableDeclaration","scope":2039,"src":"35667:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35667:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2020,"initialValue":{"arguments":[{"hexValue":"30","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35701:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2016,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35686:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35693:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"35686:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35686:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"35667:36:0"},{"assignments":[2022],"declarations":[{"constant":false,"id":2022,"mutability":"mutable","name":"_tree","nameLocation":"35726:5:0","nodeType":"VariableDeclaration","scope":2039,"src":"35713:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2021,"name":"bytes","nodeType":"ElementaryTypeName","src":"35713:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2031,"initialValue":{"arguments":[{"hexValue":"3332","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35747:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2026,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35751:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35758:6:0","memberName":"length","nodeType":"MemberAccess","src":"35751:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3634","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35767:2:0","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"35751:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2023,"name":"_proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"35734:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"35741:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"35734:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35734:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"35713:57:0"},{"expression":{"arguments":[{"id":2033,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"35808:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2034,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"35818:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2035,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"35825:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2036,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"35832:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2032,"name":"verifyHash256Merkle","nodeType":"Identifier","overloadedDeclarations":[2040,2133],"referencedDeclaration":2133,"src":"35788:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,bytes memory,bytes32,uint256) view returns (bool)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35788:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1977,"id":2038,"nodeType":"Return","src":"35781:58:0"}]},"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"34831:331:0","text":"@notice          Verifies a Bitcoin-style merkle tree\n @dev             Leaves are 0-indexed. Inefficient version.\n @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\n @param _index    The index of the leaf\n @return          true if the proof is valid, else false"},"id":2040,"implemented":true,"kind":"function","modifiers":[],"name":"verifyHash256Merkle","nameLocation":"35176:19:0","nodeType":"FunctionDefinition","parameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1971,"mutability":"mutable","name":"_proof","nameLocation":"35209:6:0","nodeType":"VariableDeclaration","scope":2040,"src":"35196:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1970,"name":"bytes","nodeType":"ElementaryTypeName","src":"35196:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1973,"mutability":"mutable","name":"_index","nameLocation":"35222:6:0","nodeType":"VariableDeclaration","scope":2040,"src":"35217:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint","nodeType":"ElementaryTypeName","src":"35217:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35195:34:0"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2040,"src":"35253:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1975,"name":"bool","nodeType":"ElementaryTypeName","src":"35253:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"35252:6:0"},"scope":2202,"src":"35167:679:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2132,"nodeType":"Block","src":"36498:670:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2054,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"36552:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"36558:6:0","memberName":"length","nodeType":"MemberAccess","src":"36552:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":2056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36567:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"36552:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36573:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36552:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2063,"nodeType":"IfStatement","src":"36548:65:0","trueBody":{"id":2062,"nodeType":"Block","src":"36576:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"36597:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2053,"id":2061,"nodeType":"Return","src":"36590:12:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2064,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"36657:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"36663:6:0","memberName":"length","nodeType":"MemberAccess","src":"36657:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36673:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36657:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2071,"nodeType":"IfStatement","src":"36653:60:0","trueBody":{"id":2070,"nodeType":"Block","src":"36676:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"36697:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2053,"id":2069,"nodeType":"Return","src":"36690:12:0"}]}},{"assignments":[2073],"declarations":[{"constant":false,"id":2073,"mutability":"mutable","name":"_idx","nameLocation":"36728:4:0","nodeType":"VariableDeclaration","scope":2132,"src":"36723:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2072,"name":"uint","nodeType":"ElementaryTypeName","src":"36723:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2075,"initialValue":{"id":2074,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"36735:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"36723:18:0"},{"assignments":[2077],"declarations":[{"constant":false,"id":2077,"mutability":"mutable","name":"_current","nameLocation":"36759:8:0","nodeType":"VariableDeclaration","scope":2132,"src":"36751:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2076,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36751:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2079,"initialValue":{"id":2078,"name":"_leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"36770:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"36751:24:0"},{"body":{"id":2126,"nodeType":"Block","src":"36869:259:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"_idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"36887:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36894:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"36887:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36899:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"36887:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2118,"nodeType":"Block","src":"36998:90:0","statements":[{"expression":{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2108,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"37016:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2110,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"37046:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":2113,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"37070:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2111,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"37056:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"37062:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"37056:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"37056:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2109,"name":"_hash256MerkleStep","nodeType":"Identifier","overloadedDeclarations":[1952,1968],"referencedDeclaration":1968,"src":"37027:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"37027:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"37016:57:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2117,"nodeType":"ExpressionStatement","src":"37016:57:0"}]},"id":2119,"nodeType":"IfStatement","src":"36883:205:0","trueBody":{"id":2107,"nodeType":"Block","src":"36902:90:0","statements":[{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2097,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"36920:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2101,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"36964:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2099,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"36950:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"36956:7:0","memberName":"slice32","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"36950:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36950:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2103,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"36968:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2098,"name":"_hash256MerkleStep","nodeType":"Identifier","overloadedDeclarations":[1952,1968],"referencedDeclaration":1968,"src":"36931:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36931:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"36920:57:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2106,"nodeType":"ExpressionStatement","src":"36920:57:0"}]}},{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2120,"name":"_idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"37101:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2121,"name":"_idx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"37108:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37116:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"37108:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37101:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2125,"nodeType":"ExpressionStatement","src":"37101:16:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2084,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"36842:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2085,"name":"_tree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"36846:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"36852:6:0","memberName":"length","nodeType":"MemberAccess","src":"36846:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36842:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2127,"initializationExpression":{"assignments":[2081],"declarations":[{"constant":false,"id":2081,"mutability":"mutable","name":"i","nameLocation":"36835:1:0","nodeType":"VariableDeclaration","scope":2127,"src":"36830:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint","nodeType":"ElementaryTypeName","src":"36830:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2083,"initialValue":{"hexValue":"30","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36839:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"36830:10:0"},"loopExpression":{"expression":{"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"36860:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36865:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"36860:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2091,"nodeType":"ExpressionStatement","src":"36860:7:0"},"nodeType":"ForStatement","src":"36825:303:0"},{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"_current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"37144:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2129,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"37156:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"37144:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2053,"id":2131,"nodeType":"Return","src":"37137:24:0"}]},"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"35852:482:0","text":"@notice          Verifies a Bitcoin-style merkle tree\n @dev             Leaves are 0-indexed. Efficient version.\n @param _leaf     The leaf of the proof. LE sha256 hash.\n @param _tree     The intermediate nodes in the proof.\n                  Tightly packed LE sha256 hashes.\n @param _root     The root of the proof. LE sha256 hash.\n @param _index    The index of the leaf\n @return          true if the proof is valid, else false"},"id":2133,"implemented":true,"kind":"function","modifiers":[],"name":"verifyHash256Merkle","nameLocation":"36348:19:0","nodeType":"FunctionDefinition","parameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"_leaf","nameLocation":"36385:5:0","nodeType":"VariableDeclaration","scope":2133,"src":"36377:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2042,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36377:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"_tree","nameLocation":"36413:5:0","nodeType":"VariableDeclaration","scope":2133,"src":"36400:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2044,"name":"bytes","nodeType":"ElementaryTypeName","src":"36400:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"_root","nameLocation":"36436:5:0","nodeType":"VariableDeclaration","scope":2133,"src":"36428:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36428:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2049,"mutability":"mutable","name":"_index","nameLocation":"36456:6:0","nodeType":"VariableDeclaration","scope":2133,"src":"36451:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint","nodeType":"ElementaryTypeName","src":"36451:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"36367:101:0"},"returnParameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2133,"src":"36492:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2051,"name":"bool","nodeType":"ElementaryTypeName","src":"36492:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"36491:6:0"},"scope":2202,"src":"36339:829:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2200,"nodeType":"Block","src":"38109:755:0","statements":[{"assignments":[2146],"declarations":[{"constant":false,"id":2146,"mutability":"mutable","name":"_elapsedTime","nameLocation":"38127:12:0","nodeType":"VariableDeclaration","scope":2200,"src":"38119:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"38119:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2151,"initialValue":{"arguments":[{"id":2149,"name":"_firstTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"38163:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2147,"name":"_secondTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"38142:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38159:3:0","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":2636,"src":"38142:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38142:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38119:60:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"_elapsedTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"38263:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"hexValue":"34","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38298:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":2153,"name":"RETARGET_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"38278:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38294:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"38278:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38263:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2166,"nodeType":"IfStatement","src":"38259:105:0","trueBody":{"id":2165,"nodeType":"Block","src":"38302:62:0","statements":[{"expression":{"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"_elapsedTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"38316:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"34","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38351:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":2159,"name":"RETARGET_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"38331:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38347:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"38331:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38331:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38316:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2164,"nodeType":"ExpressionStatement","src":"38316:37:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2167,"name":"_elapsedTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"38377:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"hexValue":"34","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38412:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":2168,"name":"RETARGET_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"38392:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38408:3:0","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"38392:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38392:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38377:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2181,"nodeType":"IfStatement","src":"38373:105:0","trueBody":{"id":2180,"nodeType":"Block","src":"38416:62:0","statements":[{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"_elapsedTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"38430:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"34","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38465:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":2174,"name":"RETARGET_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"38445:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38461:3:0","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"38445:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38445:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38430:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2179,"nodeType":"ExpressionStatement","src":"38430:37:0"}]}},{"assignments":[2183],"declarations":[{"constant":false,"id":2183,"mutability":"mutable","name":"_adjusted","nameLocation":"38743:9:0","nodeType":"VariableDeclaration","scope":2200,"src":"38735:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2182,"name":"uint256","nodeType":"ElementaryTypeName","src":"38735:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2191,"initialValue":{"arguments":[{"id":2189,"name":"_elapsedTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"38786:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"3635353336","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38775:5:0","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"65536"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}],"expression":{"id":2184,"name":"_previousTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"38755:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38771:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"38755:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38755:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38782:3:0","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"38755:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38755:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"38735:64:0"},{"expression":{"arguments":[{"hexValue":"3635353336","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38851:5:0","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"65536"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}],"expression":{"arguments":[{"id":2194,"name":"RETARGET_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"38830:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2192,"name":"_adjusted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"38816:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38826:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"38816:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38816:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"38847:3:0","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"38816:34:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38816:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2144,"id":2199,"nodeType":"Return","src":"38809:48:0"}]},"documentation":{"id":2134,"nodeType":"StructuredDocumentation","src":"37485:454:0","text":"@notice                 performs the bitcoin difficulty retarget\n @dev                    implements the Bitcoin algorithm precisely\n @param _previousTarget  the target of the previous period\n @param _firstTimestamp  the timestamp of the first block in the difficulty period\n @param _secondTimestamp the timestamp of the last block in the difficulty period\n @return                 the new period's target threshold"},"id":2201,"implemented":true,"kind":"function","modifiers":[],"name":"retargetAlgorithm","nameLocation":"37953:17:0","nodeType":"FunctionDefinition","parameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"_previousTarget","nameLocation":"37988:15:0","nodeType":"VariableDeclaration","scope":2201,"src":"37980:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"37980:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"_firstTimestamp","nameLocation":"38021:15:0","nodeType":"VariableDeclaration","scope":2201,"src":"38013:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"38013:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2140,"mutability":"mutable","name":"_secondTimestamp","nameLocation":"38054:16:0","nodeType":"VariableDeclaration","scope":2201,"src":"38046:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2139,"name":"uint256","nodeType":"ElementaryTypeName","src":"38046:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"37970:106:0"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2201,"src":"38100:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"38100:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38099:9:0"},"scope":2202,"src":"37944:920:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2203,"src":"175:38691:0","usedErrors":[]}],"src":"0:38867:0"},"id":0},"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol":{"ast":{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol","exportedSymbols":{"BytesLib":[2561]},"id":2562,"nodeType":"SourceUnit","nodes":[{"id":2204,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"0:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"BytesLib","contractDependencies":[],"contractKind":"library","documentation":{"id":2205,"nodeType":"StructuredDocumentation","src":"1317:40:1","text":"@author https://github.com/GNSPS *"},"fullyImplemented":true,"id":2561,"linearizedBaseContracts":[2561],"name":"BytesLib","nameLocation":"1367:8:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":2220,"nodeType":"Block","src":"1484:2807:1","statements":[{"assignments":[2215],"declarations":[{"constant":false,"id":2215,"mutability":"mutable","name":"tempBytes","nameLocation":"1507:9:1","nodeType":"VariableDeclaration","scope":2220,"src":"1494:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2214,"name":"bytes","nodeType":"ElementaryTypeName","src":"1494:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2216,"nodeType":"VariableDeclarationStatement","src":"1494:22:1"},{"AST":{"nodeType":"YulBlock","src":"1536:2722:1","statements":[{"nodeType":"YulAssignment","src":"1680:24:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1699:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1693:5:1"},"nodeType":"YulFunctionCall","src":"1693:11:1"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1680:9:1"}]},{"nodeType":"YulVariableDeclaration","src":"1836:30:1","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"1856:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1850:5:1"},"nodeType":"YulFunctionCall","src":"1850:16:1"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1840:6:1","type":""}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1886:9:1"},{"name":"length","nodeType":"YulIdentifier","src":"1897:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:1"},"nodeType":"YulFunctionCall","src":"1879:25:1"},"nodeType":"YulExpressionStatement","src":"1879:25:1"},{"nodeType":"YulVariableDeclaration","src":"2114:30:1","value":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2128:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2139:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2124:3:1"},"nodeType":"YulFunctionCall","src":"2124:20:1"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"2118:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2269:26:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2284:2:1"},{"name":"length","nodeType":"YulIdentifier","src":"2288:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2280:3:1"},"nodeType":"YulFunctionCall","src":"2280:15:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"2273:3:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"2672:162:1","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2806:2:1"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2816:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2810:5:1"},"nodeType":"YulFunctionCall","src":"2810:9:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2799:6:1"},"nodeType":"YulFunctionCall","src":"2799:21:1"},"nodeType":"YulExpressionStatement","src":"2799:21:1"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2505:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"2509:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2502:2:1"},"nodeType":"YulFunctionCall","src":"2502:11:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2514:157:1","statements":[{"nodeType":"YulAssignment","src":"2602:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2612:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"2616:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2608:3:1"},"nodeType":"YulFunctionCall","src":"2608:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2602:2:1"}]},{"nodeType":"YulAssignment","src":"2638:19:1","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2648:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"2652:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2644:3:1"},"nodeType":"YulFunctionCall","src":"2644:13:1"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2638:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"2313:188:1","statements":[{"nodeType":"YulVariableDeclaration","src":"2457:30:1","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"2471:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2482:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2467:3:1"},"nodeType":"YulFunctionCall","src":"2467:20:1"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2461:2:1","type":""}]}]},"src":"2309:525:1"},{"nodeType":"YulAssignment","src":"3035:27:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"3051:10:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3045:5:1"},"nodeType":"YulFunctionCall","src":"3045:17:1"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3035:6:1"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3082:9:1"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3097:6:1"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3111:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3105:5:1"},"nodeType":"YulFunctionCall","src":"3105:16:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3093:3:1"},"nodeType":"YulFunctionCall","src":"3093:29:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3075:6:1"},"nodeType":"YulFunctionCall","src":"3075:48:1"},"nodeType":"YulExpressionStatement","src":"3075:48:1"},{"nodeType":"YulAssignment","src":"3261:9:1","value":{"name":"end","nodeType":"YulIdentifier","src":"3267:3:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"3261:2:1"}]},{"nodeType":"YulAssignment","src":"3397:22:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"3408:2:1"},{"name":"length","nodeType":"YulIdentifier","src":"3412:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3404:3:1"},"nodeType":"YulFunctionCall","src":"3404:15:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3397:3:1"}]},{"body":{"nodeType":"YulBlock","src":"3601:53:1","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"3626:2:1"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"3636:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3630:5:1"},"nodeType":"YulFunctionCall","src":"3630:9:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3619:6:1"},"nodeType":"YulFunctionCall","src":"3619:21:1"},"nodeType":"YulExpressionStatement","src":"3619:21:1"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"3504:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"3508:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3501:2:1"},"nodeType":"YulFunctionCall","src":"3501:11:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3513:87:1","statements":[{"nodeType":"YulAssignment","src":"3531:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"3541:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"3545:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3537:3:1"},"nodeType":"YulFunctionCall","src":"3537:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"3531:2:1"}]},{"nodeType":"YulAssignment","src":"3567:19:1","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"3577:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"3581:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3573:3:1"},"nodeType":"YulFunctionCall","src":"3573:13:1"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"3567:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"3437:63:1","statements":[{"nodeType":"YulVariableDeclaration","src":"3455:31:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"3469:10:1"},{"kind":"number","nodeType":"YulLiteral","src":"3481:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3465:3:1"},"nodeType":"YulFunctionCall","src":"3465:21:1"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"3459:2:1","type":""}]}]},"src":"3433:221:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4086:4:1","type":"","value":"0x40"},{"arguments":[{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"4121:3:1"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4137:6:1"},{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"4151:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4145:5:1"},"nodeType":"YulFunctionCall","src":"4145:16:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:1"},"nodeType":"YulFunctionCall","src":"4133:29:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4126:6:1"},"nodeType":"YulFunctionCall","src":"4126:37:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:1"},"nodeType":"YulFunctionCall","src":"4117:47:1"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:1","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4113:3:1"},"nodeType":"YulFunctionCall","src":"4113:56:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4191:2:1","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4187:3:1"},"nodeType":"YulFunctionCall","src":"4187:7:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4092:3:1"},"nodeType":"YulFunctionCall","src":"4092:155:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4079:6:1"},"nodeType":"YulFunctionCall","src":"4079:169:1"},"nodeType":"YulExpressionStatement","src":"4079:169:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2209,"isOffset":false,"isSlot":false,"src":"3051:10:1","valueSize":1},{"declaration":2209,"isOffset":false,"isSlot":false,"src":"3469:10:1","valueSize":1},{"declaration":2207,"isOffset":false,"isSlot":false,"src":"1856:9:1","valueSize":1},{"declaration":2207,"isOffset":false,"isSlot":false,"src":"2471:9:1","valueSize":1},{"declaration":2207,"isOffset":false,"isSlot":false,"src":"4151:9:1","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"1680:9:1","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"1886:9:1","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"2128:9:1","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"3082:9:1","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"3111:9:1","valueSize":1}],"id":2217,"nodeType":"InlineAssembly","src":"1527:2731:1"},{"expression":{"id":2218,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"4275:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2213,"id":2219,"nodeType":"Return","src":"4268:16:1"}]},"id":2221,"implemented":true,"kind":"function","modifiers":[],"name":"concat","nameLocation":"1391:6:1","nodeType":"FunctionDefinition","parameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2207,"mutability":"mutable","name":"_preBytes","nameLocation":"1411:9:1","nodeType":"VariableDeclaration","scope":2221,"src":"1398:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2206,"name":"bytes","nodeType":"ElementaryTypeName","src":"1398:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"_postBytes","nameLocation":"1435:10:1","nodeType":"VariableDeclaration","scope":2221,"src":"1422:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2208,"name":"bytes","nodeType":"ElementaryTypeName","src":"1422:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1397:49:1"},"returnParameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2221,"src":"1470:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2211,"name":"bytes","nodeType":"ElementaryTypeName","src":"1470:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1469:14:1"},"scope":2561,"src":"1382:2909:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2229,"nodeType":"Block","src":"4379:5959:1","statements":[{"AST":{"nodeType":"YulBlock","src":"4398:5934:1","statements":[{"nodeType":"YulVariableDeclaration","src":"4621:34:1","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"4640:14:1"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4634:5:1"},"nodeType":"YulFunctionCall","src":"4634:21:1"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"4625:5:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5148:76:1","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"5171:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5186:5:1","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"5204:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"5211:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5200:3:1"},"nodeType":"YulFunctionCall","src":"5200:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5193:6:1"},"nodeType":"YulFunctionCall","src":"5193:21:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5182:3:1"},"nodeType":"YulFunctionCall","src":"5182:33:1"},{"kind":"number","nodeType":"YulLiteral","src":"5217:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5178:3:1"},"nodeType":"YulFunctionCall","src":"5178:41:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5167:3:1"},"nodeType":"YulFunctionCall","src":"5167:53:1"},{"kind":"number","nodeType":"YulLiteral","src":"5222:1:1","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5163:3:1"},"nodeType":"YulFunctionCall","src":"5163:61:1"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"5152:7:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5237:32:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"5258:10:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5252:5:1"},"nodeType":"YulFunctionCall","src":"5252:17:1"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"5241:7:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5282:38:1","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"5303:7:1"},{"name":"mlength","nodeType":"YulIdentifier","src":"5312:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5299:3:1"},"nodeType":"YulFunctionCall","src":"5299:21:1"},"variables":[{"name":"newlength","nodeType":"YulTypedName","src":"5286:9:1","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"5653:1437:1","statements":[{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"5934:14:1"},{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"6246:5:1"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"6464:10:1"},{"kind":"number","nodeType":"YulLiteral","src":"6476:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6460:3:1"},"nodeType":"YulFunctionCall","src":"6460:21:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6454:5:1"},"nodeType":"YulFunctionCall","src":"6454:28:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6591:5:1","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6602:2:1","type":"","value":"32"},{"name":"mlength","nodeType":"YulIdentifier","src":"6606:7:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6598:3:1"},"nodeType":"YulFunctionCall","src":"6598:16:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"6587:3:1"},"nodeType":"YulFunctionCall","src":"6587:28:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6347:3:1"},"nodeType":"YulFunctionCall","src":"6347:294:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6806:5:1","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6817:2:1","type":"","value":"32"},{"name":"newlength","nodeType":"YulIdentifier","src":"6821:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6813:3:1"},"nodeType":"YulFunctionCall","src":"6813:18:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"6802:3:1"},"nodeType":"YulFunctionCall","src":"6802:30:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6310:3:1"},"nodeType":"YulFunctionCall","src":"6310:548:1"},{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"6999:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"7008:1:1","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6995:3:1"},"nodeType":"YulFunctionCall","src":"6995:15:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6277:3:1"},"nodeType":"YulFunctionCall","src":"6277:759:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6077:3:1"},"nodeType":"YulFunctionCall","src":"6077:981:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5906:6:1"},"nodeType":"YulFunctionCall","src":"5906:1170:1"},"nodeType":"YulExpressionStatement","src":"5906:1170:1"}]},"nodeType":"YulCase","src":"5646:1444:1","value":{"kind":"number","nodeType":"YulLiteral","src":"5651:1:1","type":"","value":"2"}},{"body":{"nodeType":"YulBlock","src":"7110:1927:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7319:3:1","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"7324:14:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7312:6:1"},"nodeType":"YulFunctionCall","src":"7312:27:1"},"nodeType":"YulExpressionStatement","src":"7312:27:1"},{"nodeType":"YulVariableDeclaration","src":"7356:53:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7380:3:1","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"7385:4:1","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7370:9:1"},"nodeType":"YulFunctionCall","src":"7370:20:1"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"7396:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"7405:2:1","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7392:3:1"},"nodeType":"YulFunctionCall","src":"7392:16:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7366:3:1"},"nodeType":"YulFunctionCall","src":"7366:43:1"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"7360:2:1","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"7469:14:1"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"7493:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"7504:1:1","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7489:3:1"},"nodeType":"YulFunctionCall","src":"7489:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"7508:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7485:3:1"},"nodeType":"YulFunctionCall","src":"7485:25:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7462:6:1"},"nodeType":"YulFunctionCall","src":"7462:49:1"},"nodeType":"YulExpressionStatement","src":"7462:49:1"},{"nodeType":"YulVariableDeclaration","src":"8099:30:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8117:2:1","type":"","value":"32"},{"name":"slength","nodeType":"YulIdentifier","src":"8121:7:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8113:3:1"},"nodeType":"YulFunctionCall","src":"8113:16:1"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"8103:6:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8146:33:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8160:10:1"},{"name":"submod","nodeType":"YulIdentifier","src":"8172:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8156:3:1"},"nodeType":"YulFunctionCall","src":"8156:23:1"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"8150:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8196:35:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8211:10:1"},{"name":"mlength","nodeType":"YulIdentifier","src":"8223:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8207:3:1"},"nodeType":"YulFunctionCall","src":"8207:24:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"8200:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8248:38:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8268:5:1","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"8275:6:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8264:3:1"},"nodeType":"YulFunctionCall","src":"8264:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"8284:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8260:3:1"},"nodeType":"YulFunctionCall","src":"8260:26:1"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"8252:4:1","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8332:2:1"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"8418:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"8453:66:1","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8385:3:1"},"nodeType":"YulFunctionCall","src":"8385:156:1"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8573:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8567:5:1"},"nodeType":"YulFunctionCall","src":"8567:9:1"},{"name":"mask","nodeType":"YulIdentifier","src":"8578:4:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8563:3:1"},"nodeType":"YulFunctionCall","src":"8563:20:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8356:3:1"},"nodeType":"YulFunctionCall","src":"8356:249:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8304:6:1"},"nodeType":"YulFunctionCall","src":"8304:319:1"},"nodeType":"YulExpressionStatement","src":"8304:319:1"},{"body":{"nodeType":"YulBlock","src":"8851:61:1","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8880:2:1"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8890:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8884:5:1"},"nodeType":"YulFunctionCall","src":"8884:9:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8873:6:1"},"nodeType":"YulFunctionCall","src":"8873:21:1"},"nodeType":"YulExpressionStatement","src":"8873:21:1"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8745:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"8749:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8742:2:1"},"nodeType":"YulFunctionCall","src":"8742:11:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8754:96:1","statements":[{"nodeType":"YulAssignment","src":"8776:16:1","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8786:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"8790:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8782:3:1"},"nodeType":"YulFunctionCall","src":"8782:10:1"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8776:2:1"}]},{"nodeType":"YulAssignment","src":"8813:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8823:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"8827:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8819:3:1"},"nodeType":"YulFunctionCall","src":"8819:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8813:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"8645:96:1","statements":[{"nodeType":"YulAssignment","src":"8667:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8677:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"8681:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8673:3:1"},"nodeType":"YulFunctionCall","src":"8673:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"8667:2:1"}]},{"nodeType":"YulAssignment","src":"8707:16:1","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8717:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"8721:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8713:3:1"},"nodeType":"YulFunctionCall","src":"8713:10:1"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"8707:2:1"}]}]},"src":"8641:271:1"},{"nodeType":"YulAssignment","src":"8930:32:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8942:5:1","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8953:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"8957:3:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8949:3:1"},"nodeType":"YulFunctionCall","src":"8949:12:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8938:3:1"},"nodeType":"YulFunctionCall","src":"8938:24:1"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"8930:4:1"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8987:2:1"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9005:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8999:5:1"},"nodeType":"YulFunctionCall","src":"8999:9:1"},{"name":"mask","nodeType":"YulIdentifier","src":"9010:4:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8995:3:1"},"nodeType":"YulFunctionCall","src":"8995:20:1"},{"name":"mask","nodeType":"YulIdentifier","src":"9017:4:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8991:3:1"},"nodeType":"YulFunctionCall","src":"8991:31:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8980:6:1"},"nodeType":"YulFunctionCall","src":"8980:43:1"},"nodeType":"YulExpressionStatement","src":"8980:43:1"}]},"nodeType":"YulCase","src":"7103:1934:1","value":{"kind":"number","nodeType":"YulLiteral","src":"7108:1:1","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"9058:1264:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9155:3:1","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"9160:14:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9148:6:1"},"nodeType":"YulFunctionCall","src":"9148:27:1"},"nodeType":"YulExpressionStatement","src":"9148:27:1"},{"nodeType":"YulVariableDeclaration","src":"9268:53:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9292:3:1","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"9297:4:1","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9282:9:1"},"nodeType":"YulFunctionCall","src":"9282:20:1"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"9308:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"9317:2:1","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9304:3:1"},"nodeType":"YulFunctionCall","src":"9304:16:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9278:3:1"},"nodeType":"YulFunctionCall","src":"9278:43:1"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"9272:2:1","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"9381:14:1"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"9405:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"9416:1:1","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9401:3:1"},"nodeType":"YulFunctionCall","src":"9401:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"9420:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9397:3:1"},"nodeType":"YulFunctionCall","src":"9397:25:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9374:6:1"},"nodeType":"YulFunctionCall","src":"9374:49:1"},"nodeType":"YulExpressionStatement","src":"9374:49:1"},{"nodeType":"YulVariableDeclaration","src":"9550:34:1","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"9572:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"9581:2:1","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"9568:3:1"},"nodeType":"YulFunctionCall","src":"9568:16:1"},"variables":[{"name":"slengthmod","nodeType":"YulTypedName","src":"9554:10:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9601:34:1","value":{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"9623:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"9632:2:1","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"9619:3:1"},"nodeType":"YulFunctionCall","src":"9619:16:1"},"variables":[{"name":"mlengthmod","nodeType":"YulTypedName","src":"9605:10:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9652:33:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9670:2:1","type":"","value":"32"},{"name":"slengthmod","nodeType":"YulIdentifier","src":"9674:10:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9666:3:1"},"nodeType":"YulFunctionCall","src":"9666:19:1"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"9656:6:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9702:33:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"9716:10:1"},{"name":"submod","nodeType":"YulIdentifier","src":"9728:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9712:3:1"},"nodeType":"YulFunctionCall","src":"9712:23:1"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"9706:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9752:35:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"9767:10:1"},{"name":"mlength","nodeType":"YulIdentifier","src":"9779:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9763:3:1"},"nodeType":"YulFunctionCall","src":"9763:24:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"9756:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9804:38:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9824:5:1","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"9831:6:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"9820:3:1"},"nodeType":"YulFunctionCall","src":"9820:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"9840:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9816:3:1"},"nodeType":"YulFunctionCall","src":"9816:26:1"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"9808:4:1","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9867:2:1"},{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9881:2:1"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"9875:5:1"},"nodeType":"YulFunctionCall","src":"9875:9:1"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9896:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9890:5:1"},"nodeType":"YulFunctionCall","src":"9890:9:1"},{"name":"mask","nodeType":"YulIdentifier","src":"9901:4:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9886:3:1"},"nodeType":"YulFunctionCall","src":"9886:20:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9871:3:1"},"nodeType":"YulFunctionCall","src":"9871:36:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9860:6:1"},"nodeType":"YulFunctionCall","src":"9860:48:1"},"nodeType":"YulExpressionStatement","src":"9860:48:1"},{"body":{"nodeType":"YulBlock","src":"10136:61:1","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"10165:2:1"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10175:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10169:5:1"},"nodeType":"YulFunctionCall","src":"10169:9:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10158:6:1"},"nodeType":"YulFunctionCall","src":"10158:21:1"},"nodeType":"YulExpressionStatement","src":"10158:21:1"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10030:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"10034:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10027:2:1"},"nodeType":"YulFunctionCall","src":"10027:11:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10039:96:1","statements":[{"nodeType":"YulAssignment","src":"10061:16:1","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"10071:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10075:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10067:3:1"},"nodeType":"YulFunctionCall","src":"10067:10:1"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"10061:2:1"}]},{"nodeType":"YulAssignment","src":"10098:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10108:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10112:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10104:3:1"},"nodeType":"YulFunctionCall","src":"10104:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"10098:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"9930:96:1","statements":[{"nodeType":"YulAssignment","src":"9952:16:1","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9962:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"9966:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9958:3:1"},"nodeType":"YulFunctionCall","src":"9958:10:1"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"9952:2:1"}]},{"nodeType":"YulAssignment","src":"9989:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9999:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10003:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9995:3:1"},"nodeType":"YulFunctionCall","src":"9995:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"9989:2:1"}]}]},"src":"9926:271:1"},{"nodeType":"YulAssignment","src":"10215:32:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10227:5:1","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10238:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"10242:3:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10234:3:1"},"nodeType":"YulFunctionCall","src":"10234:12:1"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"10223:3:1"},"nodeType":"YulFunctionCall","src":"10223:24:1"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"10215:4:1"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"10272:2:1"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"10290:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10284:5:1"},"nodeType":"YulFunctionCall","src":"10284:9:1"},{"name":"mask","nodeType":"YulIdentifier","src":"10295:4:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10280:3:1"},"nodeType":"YulFunctionCall","src":"10280:20:1"},{"name":"mask","nodeType":"YulIdentifier","src":"10302:4:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10276:3:1"},"nodeType":"YulFunctionCall","src":"10276:31:1"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10265:6:1"},"nodeType":"YulFunctionCall","src":"10265:43:1"},"nodeType":"YulExpressionStatement","src":"10265:43:1"}]},"nodeType":"YulCase","src":"9050:1272:1","value":"default"}],"expression":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"5601:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"5610:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5598:2:1"},"nodeType":"YulFunctionCall","src":"5598:15:1"},{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"5618:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5629:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5615:2:1"},"nodeType":"YulFunctionCall","src":"5615:17:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5594:3:1"},"nodeType":"YulFunctionCall","src":"5594:39:1"},"nodeType":"YulSwitch","src":"5587:4735:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2225,"isOffset":false,"isSlot":false,"src":"5258:10:1","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"6464:10:1","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"8160:10:1","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"8211:10:1","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"9716:10:1","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"9767:10:1","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"4640:14:1","suffix":"slot","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"5934:14:1","suffix":"slot","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"7324:14:1","suffix":"slot","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"7469:14:1","suffix":"slot","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"9160:14:1","suffix":"slot","valueSize":1},{"declaration":2223,"isOffset":false,"isSlot":true,"src":"9381:14:1","suffix":"slot","valueSize":1}],"id":2228,"nodeType":"InlineAssembly","src":"4389:5943:1"}]},"id":2230,"implemented":true,"kind":"function","modifiers":[],"name":"concatStorage","nameLocation":"4306:13:1","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"_preBytes","nameLocation":"4334:9:1","nodeType":"VariableDeclaration","scope":2230,"src":"4320:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2222,"name":"bytes","nodeType":"ElementaryTypeName","src":"4320:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"_postBytes","nameLocation":"4358:10:1","nodeType":"VariableDeclaration","scope":2230,"src":"4345:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2224,"name":"bytes","nodeType":"ElementaryTypeName","src":"4345:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4319:50:1"},"returnParameters":{"id":2227,"nodeType":"ParameterList","parameters":[],"src":"4379:0:1"},"scope":2561,"src":"4297:6041:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2267,"nodeType":"Block","src":"10449:819:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"10463:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10474:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10463:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2247,"nodeType":"IfStatement","src":"10459:55:1","trueBody":{"id":2246,"nodeType":"Block","src":"10477:37:1","statements":[{"expression":{"hexValue":"","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"10498:5:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2240,"id":2245,"nodeType":"Return","src":"10491:12:1"}]}},{"assignments":[2249],"declarations":[{"constant":false,"id":2249,"mutability":"mutable","name":"_end","nameLocation":"10528:4:1","nodeType":"VariableDeclaration","scope":2267,"src":"10523:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint","nodeType":"ElementaryTypeName","src":"10523:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2253,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"10535:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2251,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"10544:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10535:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10523:28:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2255,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"10569:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2256,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"10576:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10569:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2258,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"10586:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10593:6:1","memberName":"length","nodeType":"MemberAccess","src":"10586:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2260,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"10603:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10586:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10569:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c696365206f7574206f6620626f756e6473","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10609:21:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""},"value":"Slice out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""}],"id":2254,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10561:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10561:70:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2265,"nodeType":"ExpressionStatement","src":"10561:70:1"},{"AST":{"nodeType":"YulBlock","src":"10651:611:1","statements":[{"nodeType":"YulAssignment","src":"10755:18:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10768:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10762:5:1"},"nodeType":"YulFunctionCall","src":"10762:11:1"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"10755:3:1"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10793:4:1","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"res","nodeType":"YulIdentifier","src":"10807:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"10812:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10803:3:1"},"nodeType":"YulFunctionCall","src":"10803:12:1"},{"name":"_length","nodeType":"YulIdentifier","src":"10817:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10799:3:1"},"nodeType":"YulFunctionCall","src":"10799:26:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10786:6:1"},"nodeType":"YulFunctionCall","src":"10786:40:1"},"nodeType":"YulExpressionStatement","src":"10786:40:1"},{"expression":{"arguments":[{"name":"res","nodeType":"YulIdentifier","src":"10846:3:1"},{"name":"_length","nodeType":"YulIdentifier","src":"10851:7:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10839:6:1"},"nodeType":"YulFunctionCall","src":"10839:20:1"},"nodeType":"YulExpressionStatement","src":"10839:20:1"},{"nodeType":"YulVariableDeclaration","src":"10945:41:1","value":{"arguments":[{"name":"res","nodeType":"YulIdentifier","src":"10961:3:1"},{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"10970:6:1"},{"name":"_start","nodeType":"YulIdentifier","src":"10978:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10966:3:1"},"nodeType":"YulFunctionCall","src":"10966:19:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10957:3:1"},"nodeType":"YulFunctionCall","src":"10957:29:1"},"variables":[{"name":"diff","nodeType":"YulTypedName","src":"10949:4:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"11186:66:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11215:3:1"},{"name":"diff","nodeType":"YulIdentifier","src":"11220:4:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11211:3:1"},"nodeType":"YulFunctionCall","src":"11211:14:1"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11233:3:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11227:5:1"},"nodeType":"YulFunctionCall","src":"11227:10:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11204:6:1"},"nodeType":"YulFunctionCall","src":"11204:34:1"},"nodeType":"YulExpressionStatement","src":"11204:34:1"}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11124:3:1"},{"name":"end","nodeType":"YulIdentifier","src":"11129:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11121:2:1"},"nodeType":"YulFunctionCall","src":"11121:12:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11134:51:1","statements":[{"nodeType":"YulAssignment","src":"11152:19:1","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11163:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"11168:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11159:3:1"},"nodeType":"YulFunctionCall","src":"11159:12:1"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"11152:3:1"}]}]},"pre":{"nodeType":"YulBlock","src":"11004:116:1","statements":[{"nodeType":"YulVariableDeclaration","src":"11022:39:1","value":{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"11041:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11037:3:1"},"nodeType":"YulFunctionCall","src":"11037:15:1"},{"name":"_start","nodeType":"YulIdentifier","src":"11054:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11033:3:1"},"nodeType":"YulFunctionCall","src":"11033:28:1"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"11026:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11078:28:1","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11093:3:1"},{"name":"_length","nodeType":"YulIdentifier","src":"11098:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11089:3:1"},"nodeType":"YulFunctionCall","src":"11089:17:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"11082:3:1","type":""}]}]},"src":"11000:252:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2232,"isOffset":false,"isSlot":false,"src":"10970:6:1","valueSize":1},{"declaration":2232,"isOffset":false,"isSlot":false,"src":"11041:6:1","valueSize":1},{"declaration":2236,"isOffset":false,"isSlot":false,"src":"10817:7:1","valueSize":1},{"declaration":2236,"isOffset":false,"isSlot":false,"src":"10851:7:1","valueSize":1},{"declaration":2236,"isOffset":false,"isSlot":false,"src":"11098:7:1","valueSize":1},{"declaration":2234,"isOffset":false,"isSlot":false,"src":"10978:6:1","valueSize":1},{"declaration":2234,"isOffset":false,"isSlot":false,"src":"11054:6:1","valueSize":1},{"declaration":2239,"isOffset":false,"isSlot":false,"src":"10755:3:1","valueSize":1},{"declaration":2239,"isOffset":false,"isSlot":false,"src":"10807:3:1","valueSize":1},{"declaration":2239,"isOffset":false,"isSlot":false,"src":"10846:3:1","valueSize":1},{"declaration":2239,"isOffset":false,"isSlot":false,"src":"10961:3:1","valueSize":1}],"id":2266,"nodeType":"InlineAssembly","src":"10642:620:1"}]},"id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"10353:5:1","nodeType":"FunctionDefinition","parameters":{"id":2237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"_bytes","nameLocation":"10372:6:1","nodeType":"VariableDeclaration","scope":2268,"src":"10359:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2231,"name":"bytes","nodeType":"ElementaryTypeName","src":"10359:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2234,"mutability":"mutable","name":"_start","nameLocation":"10385:6:1","nodeType":"VariableDeclaration","scope":2268,"src":"10380:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2233,"name":"uint","nodeType":"ElementaryTypeName","src":"10380:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2236,"mutability":"mutable","name":"_length","nameLocation":"10398:7:1","nodeType":"VariableDeclaration","scope":2268,"src":"10393:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint","nodeType":"ElementaryTypeName","src":"10393:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10358:48:1"},"returnParameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"res","nameLocation":"10444:3:1","nodeType":"VariableDeclaration","scope":2268,"src":"10431:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2238,"name":"bytes","nodeType":"ElementaryTypeName","src":"10431:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10430:18:1"},"scope":2561,"src":"10344:924:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2302,"nodeType":"Block","src":"11772:524:1","statements":[{"assignments":[2279],"declarations":[{"constant":false,"id":2279,"mutability":"mutable","name":"_length","nameLocation":"11787:7:1","nodeType":"VariableDeclaration","scope":2302,"src":"11782:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2278,"name":"uint","nodeType":"ElementaryTypeName","src":"11782:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2282,"initialValue":{"expression":{"id":2280,"name":"_dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"11797:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11803:6:1","memberName":"length","nodeType":"MemberAccess","src":"11797:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11782:27:1"},{"assignments":[2284],"declarations":[{"constant":false,"id":2284,"mutability":"mutable","name":"_end","nameLocation":"11824:4:1","nodeType":"VariableDeclaration","scope":2302,"src":"11819:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2283,"name":"uint","nodeType":"ElementaryTypeName","src":"11819:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2288,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2285,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"11831:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2286,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"11840:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11831:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11819:28:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2290,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"11865:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2291,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"11872:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11865:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2293,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"11882:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11889:6:1","memberName":"length","nodeType":"MemberAccess","src":"11882:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2295,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"11899:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11882:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11865:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c696365206f7574206f6620626f756e6473","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11905:21:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""},"value":"Slice out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""}],"id":2289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11857:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11857:70:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2300,"nodeType":"ExpressionStatement","src":"11857:70:1"},{"AST":{"nodeType":"YulBlock","src":"11947:343:1","statements":[{"body":{"nodeType":"YulBlock","src":"12225:55:1","statements":[{"expression":{"arguments":[{"name":"res","nodeType":"YulIdentifier","src":"12250:3:1"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12261:3:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12255:5:1"},"nodeType":"YulFunctionCall","src":"12255:10:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12243:6:1"},"nodeType":"YulFunctionCall","src":"12243:23:1"},"nodeType":"YulExpressionStatement","src":"12243:23:1"}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12127:3:1"},{"name":"end","nodeType":"YulIdentifier","src":"12132:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12124:2:1"},"nodeType":"YulFunctionCall","src":"12124:12:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12137:87:1","statements":[{"nodeType":"YulAssignment","src":"12155:19:1","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12166:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"12171:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12162:3:1"},"nodeType":"YulFunctionCall","src":"12162:12:1"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"12155:3:1"}]},{"nodeType":"YulAssignment","src":"12191:19:1","value":{"arguments":[{"name":"res","nodeType":"YulIdentifier","src":"12202:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"12207:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:1"},"nodeType":"YulFunctionCall","src":"12198:12:1"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"12191:3:1"}]}]},"pre":{"nodeType":"YulBlock","src":"11965:158:1","statements":[{"nodeType":"YulVariableDeclaration","src":"11983:39:1","value":{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12002:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"12010:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11998:3:1"},"nodeType":"YulFunctionCall","src":"11998:15:1"},{"name":"_start","nodeType":"YulIdentifier","src":"12015:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11994:3:1"},"nodeType":"YulFunctionCall","src":"11994:28:1"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"11987:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12039:25:1","value":{"arguments":[{"name":"_dest","nodeType":"YulIdentifier","src":"12054:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"12061:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12050:3:1"},"nodeType":"YulFunctionCall","src":"12050:14:1"},"variables":[{"name":"res","nodeType":"YulTypedName","src":"12043:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12081:28:1","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12096:3:1"},{"name":"_length","nodeType":"YulIdentifier","src":"12101:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12092:3:1"},"nodeType":"YulFunctionCall","src":"12092:17:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"12085:3:1","type":""}]}]},"src":"11961:319:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2271,"isOffset":false,"isSlot":false,"src":"12002:6:1","valueSize":1},{"declaration":2273,"isOffset":false,"isSlot":false,"src":"12054:5:1","valueSize":1},{"declaration":2279,"isOffset":false,"isSlot":false,"src":"12101:7:1","valueSize":1},{"declaration":2275,"isOffset":false,"isSlot":false,"src":"12015:6:1","valueSize":1}],"id":2301,"nodeType":"InlineAssembly","src":"11938:352:1"}]},"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"11274:373:1","text":"@notice Take a slice of the byte array, overwriting the destination.\n The length of the slice will equal the length of the destination array.\n @dev Make sure the destination array has afterspace if required.\n @param _bytes The source array\n @param _dest The destination array.\n @param _start The location to start in the source array."},"id":2303,"implemented":true,"kind":"function","modifiers":[],"name":"sliceInPlace","nameLocation":"11661:12:1","nodeType":"FunctionDefinition","parameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"_bytes","nameLocation":"11696:6:1","nodeType":"VariableDeclaration","scope":2303,"src":"11683:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2270,"name":"bytes","nodeType":"ElementaryTypeName","src":"11683:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2273,"mutability":"mutable","name":"_dest","nameLocation":"11725:5:1","nodeType":"VariableDeclaration","scope":2303,"src":"11712:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2272,"name":"bytes","nodeType":"ElementaryTypeName","src":"11712:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"_start","nameLocation":"11745:6:1","nodeType":"VariableDeclaration","scope":2303,"src":"11740:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2274,"name":"uint","nodeType":"ElementaryTypeName","src":"11740:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11673:84:1"},"returnParameters":{"id":2277,"nodeType":"ParameterList","parameters":[],"src":"11772:0:1"},"scope":2561,"src":"11652:644:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2314,"nodeType":"Block","src":"12504:91:1","statements":[{"AST":{"nodeType":"YulBlock","src":"12523:66:1","statements":[{"nodeType":"YulAssignment","src":"12537:42:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12558:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"12566:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12554:3:1"},"nodeType":"YulFunctionCall","src":"12554:15:1"},{"name":"_start","nodeType":"YulIdentifier","src":"12571:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12550:3:1"},"nodeType":"YulFunctionCall","src":"12550:28:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12544:5:1"},"nodeType":"YulFunctionCall","src":"12544:35:1"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"12537:3:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2306,"isOffset":false,"isSlot":false,"src":"12558:6:1","valueSize":1},{"declaration":2308,"isOffset":false,"isSlot":false,"src":"12571:6:1","valueSize":1},{"declaration":2311,"isOffset":false,"isSlot":false,"src":"12537:3:1","valueSize":1}],"id":2313,"nodeType":"InlineAssembly","src":"12514:75:1"}]},"documentation":{"id":2304,"nodeType":"StructuredDocumentation","src":"12352:60:1","text":"@notice take a 32-byte slice from the specified position"},"id":2315,"implemented":true,"kind":"function","modifiers":[],"name":"slice32","nameLocation":"12426:7:1","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2306,"mutability":"mutable","name":"_bytes","nameLocation":"12447:6:1","nodeType":"VariableDeclaration","scope":2315,"src":"12434:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2305,"name":"bytes","nodeType":"ElementaryTypeName","src":"12434:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2308,"mutability":"mutable","name":"_start","nameLocation":"12460:6:1","nodeType":"VariableDeclaration","scope":2315,"src":"12455:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2307,"name":"uint","nodeType":"ElementaryTypeName","src":"12455:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12433:34:1"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"res","nameLocation":"12499:3:1","nodeType":"VariableDeclaration","scope":2315,"src":"12491:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12491:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12490:13:1"},"scope":2561,"src":"12417:178:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2333,"nodeType":"Block","src":"12749:56:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2328,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12782:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2329,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"12790:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2327,"name":"slice32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"12774:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12774:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12766:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":2325,"name":"bytes20","nodeType":"ElementaryTypeName","src":"12766:7:1","typeDescriptions":{}}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12766:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"functionReturnParameters":2324,"id":2332,"nodeType":"Return","src":"12759:39:1"}]},"documentation":{"id":2316,"nodeType":"StructuredDocumentation","src":"12601:60:1","text":"@notice take a 20-byte slice from the specified position"},"id":2334,"implemented":true,"kind":"function","modifiers":[],"name":"slice20","nameLocation":"12675:7:1","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2318,"mutability":"mutable","name":"_bytes","nameLocation":"12696:6:1","nodeType":"VariableDeclaration","scope":2334,"src":"12683:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2317,"name":"bytes","nodeType":"ElementaryTypeName","src":"12683:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2320,"mutability":"mutable","name":"_start","nameLocation":"12709:6:1","nodeType":"VariableDeclaration","scope":2334,"src":"12704:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2319,"name":"uint","nodeType":"ElementaryTypeName","src":"12704:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12682:34:1"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2334,"src":"12740:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":2322,"name":"bytes20","nodeType":"ElementaryTypeName","src":"12740:7:1","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"12739:9:1"},"scope":2561,"src":"12666:139:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2352,"nodeType":"Block","src":"12956:55:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2347,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"12988:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2348,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"12996:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2346,"name":"slice32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"12980:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12980:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12973:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes8_$","typeString":"type(bytes8)"},"typeName":{"id":2344,"name":"bytes8","nodeType":"ElementaryTypeName","src":"12973:6:1","typeDescriptions":{}}},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12973:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"functionReturnParameters":2343,"id":2351,"nodeType":"Return","src":"12966:38:1"}]},"documentation":{"id":2335,"nodeType":"StructuredDocumentation","src":"12811:59:1","text":"@notice take a 8-byte slice from the specified position"},"id":2353,"implemented":true,"kind":"function","modifiers":[],"name":"slice8","nameLocation":"12884:6:1","nodeType":"FunctionDefinition","parameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"_bytes","nameLocation":"12904:6:1","nodeType":"VariableDeclaration","scope":2353,"src":"12891:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2336,"name":"bytes","nodeType":"ElementaryTypeName","src":"12891:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2339,"mutability":"mutable","name":"_start","nameLocation":"12917:6:1","nodeType":"VariableDeclaration","scope":2353,"src":"12912:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2338,"name":"uint","nodeType":"ElementaryTypeName","src":"12912:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12890:34:1"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2353,"src":"12948:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":2341,"name":"bytes8","nodeType":"ElementaryTypeName","src":"12948:6:1","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"}],"src":"12947:8:1"},"scope":2561,"src":"12875:136:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2371,"nodeType":"Block","src":"13162:55:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2366,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"13194:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2367,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"13202:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2365,"name":"slice32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"13186:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13186:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13179:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2363,"name":"bytes4","nodeType":"ElementaryTypeName","src":"13179:6:1","typeDescriptions":{}}},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13179:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2362,"id":2370,"nodeType":"Return","src":"13172:38:1"}]},"documentation":{"id":2354,"nodeType":"StructuredDocumentation","src":"13017:59:1","text":"@notice take a 4-byte slice from the specified position"},"id":2372,"implemented":true,"kind":"function","modifiers":[],"name":"slice4","nameLocation":"13090:6:1","nodeType":"FunctionDefinition","parameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2356,"mutability":"mutable","name":"_bytes","nameLocation":"13110:6:1","nodeType":"VariableDeclaration","scope":2372,"src":"13097:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2355,"name":"bytes","nodeType":"ElementaryTypeName","src":"13097:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2358,"mutability":"mutable","name":"_start","nameLocation":"13123:6:1","nodeType":"VariableDeclaration","scope":2372,"src":"13118:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint","nodeType":"ElementaryTypeName","src":"13118:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13096:34:1"},"returnParameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2372,"src":"13154:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2360,"name":"bytes4","nodeType":"ElementaryTypeName","src":"13154:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"13153:8:1"},"scope":2561,"src":"13081:136:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2390,"nodeType":"Block","src":"13368:55:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2385,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2375,"src":"13400:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2386,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"13408:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2384,"name":"slice32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"13392:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13392:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13385:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes3_$","typeString":"type(bytes3)"},"typeName":{"id":2382,"name":"bytes3","nodeType":"ElementaryTypeName","src":"13385:6:1","typeDescriptions":{}}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13385:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"functionReturnParameters":2381,"id":2389,"nodeType":"Return","src":"13378:38:1"}]},"documentation":{"id":2373,"nodeType":"StructuredDocumentation","src":"13223:59:1","text":"@notice take a 3-byte slice from the specified position"},"id":2391,"implemented":true,"kind":"function","modifiers":[],"name":"slice3","nameLocation":"13296:6:1","nodeType":"FunctionDefinition","parameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2375,"mutability":"mutable","name":"_bytes","nameLocation":"13316:6:1","nodeType":"VariableDeclaration","scope":2391,"src":"13303:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2374,"name":"bytes","nodeType":"ElementaryTypeName","src":"13303:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2377,"mutability":"mutable","name":"_start","nameLocation":"13329:6:1","nodeType":"VariableDeclaration","scope":2391,"src":"13324:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint","nodeType":"ElementaryTypeName","src":"13324:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13302:34:1"},"returnParameters":{"id":2381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2391,"src":"13360:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"},"typeName":{"id":2379,"name":"bytes3","nodeType":"ElementaryTypeName","src":"13360:6:1","typeDescriptions":{"typeIdentifier":"t_bytes3","typeString":"bytes3"}},"visibility":"internal"}],"src":"13359:8:1"},"scope":2561,"src":"13287:136:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2409,"nodeType":"Block","src":"13574:55:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2404,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"13606:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2405,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"13614:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2403,"name":"slice32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"13598:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13598:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13591:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":2401,"name":"bytes2","nodeType":"ElementaryTypeName","src":"13591:6:1","typeDescriptions":{}}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13591:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"functionReturnParameters":2400,"id":2408,"nodeType":"Return","src":"13584:38:1"}]},"documentation":{"id":2392,"nodeType":"StructuredDocumentation","src":"13429:59:1","text":"@notice take a 2-byte slice from the specified position"},"id":2410,"implemented":true,"kind":"function","modifiers":[],"name":"slice2","nameLocation":"13502:6:1","nodeType":"FunctionDefinition","parameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"_bytes","nameLocation":"13522:6:1","nodeType":"VariableDeclaration","scope":2410,"src":"13509:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2393,"name":"bytes","nodeType":"ElementaryTypeName","src":"13509:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2396,"mutability":"mutable","name":"_start","nameLocation":"13535:6:1","nodeType":"VariableDeclaration","scope":2410,"src":"13530:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2395,"name":"uint","nodeType":"ElementaryTypeName","src":"13530:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13508:34:1"},"returnParameters":{"id":2400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2410,"src":"13566:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"typeName":{"id":2398,"name":"bytes2","nodeType":"ElementaryTypeName","src":"13566:6:1","typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"visibility":"internal"}],"src":"13565:8:1"},"scope":2561,"src":"13493:136:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"13721:336:1","statements":[{"assignments":[2420],"declarations":[{"constant":false,"id":2420,"mutability":"mutable","name":"_totalLen","nameLocation":"13736:9:1","nodeType":"VariableDeclaration","scope":2443,"src":"13731:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint","nodeType":"ElementaryTypeName","src":"13731:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2424,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"13748:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13757:2:1","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"13748:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13731:28:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2426,"name":"_totalLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"13777:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2427,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"13789:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13777:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2429,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"13799:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13806:6:1","memberName":"length","nodeType":"MemberAccess","src":"13799:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2431,"name":"_totalLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"13816:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13799:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13777:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320636f6e76657273696f6e206f7574206f6620626f756e64732e","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13827:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3181add2f98e784f646c1ef936b3a8c6a87d5ec668aceb489a343dc808291b79","typeString":"literal_string \"Address conversion out of bounds.\""},"value":"Address conversion out of bounds."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3181add2f98e784f646c1ef936b3a8c6a87d5ec668aceb489a343dc808291b79","typeString":"literal_string \"Address conversion out of bounds.\""}],"id":2425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13769:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13769:94:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"ExpressionStatement","src":"13769:94:1"},{"assignments":[2438],"declarations":[{"constant":false,"id":2438,"mutability":"mutable","name":"tempAddress","nameLocation":"13881:11:1","nodeType":"VariableDeclaration","scope":2443,"src":"13873:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2437,"name":"address","nodeType":"ElementaryTypeName","src":"13873:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2439,"nodeType":"VariableDeclarationStatement","src":"13873:19:1"},{"AST":{"nodeType":"YulBlock","src":"13912:110:1","statements":[{"nodeType":"YulAssignment","src":"13926:86:1","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13959:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"13967:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13955:3:1"},"nodeType":"YulFunctionCall","src":"13955:17:1"},{"name":"_start","nodeType":"YulIdentifier","src":"13974:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13951:3:1"},"nodeType":"YulFunctionCall","src":"13951:30:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13945:5:1"},"nodeType":"YulFunctionCall","src":"13945:37:1"},{"kind":"number","nodeType":"YulLiteral","src":"13984:27:1","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13941:3:1"},"nodeType":"YulFunctionCall","src":"13941:71:1"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"13926:11:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2412,"isOffset":false,"isSlot":false,"src":"13959:6:1","valueSize":1},{"declaration":2414,"isOffset":false,"isSlot":false,"src":"13974:6:1","valueSize":1},{"declaration":2438,"isOffset":false,"isSlot":false,"src":"13926:11:1","valueSize":1}],"id":2440,"nodeType":"InlineAssembly","src":"13903:119:1"},{"expression":{"id":2441,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"14039:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2418,"id":2442,"nodeType":"Return","src":"14032:18:1"}]},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nameLocation":"13644:9:1","nodeType":"FunctionDefinition","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"_bytes","nameLocation":"13667:6:1","nodeType":"VariableDeclaration","scope":2444,"src":"13654:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2411,"name":"bytes","nodeType":"ElementaryTypeName","src":"13654:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2414,"mutability":"mutable","name":"_start","nameLocation":"13680:6:1","nodeType":"VariableDeclaration","scope":2444,"src":"13675:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2413,"name":"uint","nodeType":"ElementaryTypeName","src":"13675:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13653:34:1"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"13712:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2416,"name":"address","nodeType":"ElementaryTypeName","src":"13712:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13711:9:1"},"scope":2561,"src":"13635:422:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2477,"nodeType":"Block","src":"14146:290:1","statements":[{"assignments":[2454],"declarations":[{"constant":false,"id":2454,"mutability":"mutable","name":"_totalLen","nameLocation":"14161:9:1","nodeType":"VariableDeclaration","scope":2477,"src":"14156:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint","nodeType":"ElementaryTypeName","src":"14156:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2458,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2455,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"14173:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14182:2:1","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14173:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14156:28:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2460,"name":"_totalLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"14202:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2461,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"14214:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14202:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2463,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"14224:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14231:6:1","memberName":"length","nodeType":"MemberAccess","src":"14224:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2465,"name":"_totalLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"14241:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14224:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14202:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55696e7420636f6e76657273696f6e206f7574206f6620626f756e64732e","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14252:32:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a652cf2416458d88f5f21292c53d59bfaf053b0555363202b6264b9a63dface","typeString":"literal_string \"Uint conversion out of bounds.\""},"value":"Uint conversion out of bounds."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a652cf2416458d88f5f21292c53d59bfaf053b0555363202b6264b9a63dface","typeString":"literal_string \"Uint conversion out of bounds.\""}],"id":2459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14194:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14194:91:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2470,"nodeType":"ExpressionStatement","src":"14194:91:1"},{"assignments":[2472],"declarations":[{"constant":false,"id":2472,"mutability":"mutable","name":"tempUint","nameLocation":"14303:8:1","nodeType":"VariableDeclaration","scope":2477,"src":"14295:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2471,"name":"uint256","nodeType":"ElementaryTypeName","src":"14295:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2473,"nodeType":"VariableDeclarationStatement","src":"14295:16:1"},{"AST":{"nodeType":"YulBlock","src":"14331:73:1","statements":[{"nodeType":"YulAssignment","src":"14345:49:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14371:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"14379:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14367:3:1"},"nodeType":"YulFunctionCall","src":"14367:17:1"},{"name":"_start","nodeType":"YulIdentifier","src":"14386:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14363:3:1"},"nodeType":"YulFunctionCall","src":"14363:30:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14357:5:1"},"nodeType":"YulFunctionCall","src":"14357:37:1"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14345:8:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2446,"isOffset":false,"isSlot":false,"src":"14371:6:1","valueSize":1},{"declaration":2448,"isOffset":false,"isSlot":false,"src":"14386:6:1","valueSize":1},{"declaration":2472,"isOffset":false,"isSlot":false,"src":"14345:8:1","valueSize":1}],"id":2474,"nodeType":"InlineAssembly","src":"14322:82:1"},{"expression":{"id":2475,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"14421:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2452,"id":2476,"nodeType":"Return","src":"14414:15:1"}]},"id":2478,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"14072:6:1","nodeType":"FunctionDefinition","parameters":{"id":2449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"_bytes","nameLocation":"14092:6:1","nodeType":"VariableDeclaration","scope":2478,"src":"14079:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2445,"name":"bytes","nodeType":"ElementaryTypeName","src":"14079:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"_start","nameLocation":"14105:6:1","nodeType":"VariableDeclaration","scope":2478,"src":"14100:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint","nodeType":"ElementaryTypeName","src":"14100:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14078:34:1"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2478,"src":"14137:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"14137:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14136:9:1"},"scope":2561,"src":"14063:373:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2494,"nodeType":"Block","src":"14535:1328:1","statements":[{"assignments":[2488],"declarations":[{"constant":false,"id":2488,"mutability":"mutable","name":"success","nameLocation":"14550:7:1","nodeType":"VariableDeclaration","scope":2494,"src":"14545:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2487,"name":"bool","nodeType":"ElementaryTypeName","src":"14545:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2490,"initialValue":{"hexValue":"74727565","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14560:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"14545:19:1"},{"AST":{"nodeType":"YulBlock","src":"14584:1248:1","statements":[{"nodeType":"YulVariableDeclaration","src":"14598:30:1","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"14618:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14612:5:1"},"nodeType":"YulFunctionCall","src":"14612:16:1"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14602:6:1","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"14761:966:1","statements":[{"nodeType":"YulVariableDeclaration","src":"14990:11:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15000:1:1","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"14994:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15019:30:1","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15033:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"15044:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15029:3:1"},"nodeType":"YulFunctionCall","src":"15029:20:1"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"15023:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15066:26:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15081:2:1"},{"name":"length","nodeType":"YulIdentifier","src":"15085:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15077:3:1"},"nodeType":"YulFunctionCall","src":"15077:15:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"15070:3:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"15429:284:1","statements":[{"body":{"nodeType":"YulBlock","src":"15565:130:1","statements":[{"nodeType":"YulAssignment","src":"15629:12:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15640:1:1","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"15629:7:1"}]},{"nodeType":"YulAssignment","src":"15666:7:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15672:1:1","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"15666:2:1"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15548:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15542:5:1"},"nodeType":"YulFunctionCall","src":"15542:9:1"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15559:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15553:5:1"},"nodeType":"YulFunctionCall","src":"15553:9:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15539:2:1"},"nodeType":"YulFunctionCall","src":"15539:24:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15532:6:1"},"nodeType":"YulFunctionCall","src":"15532:32:1"},"nodeType":"YulIf","src":"15529:166:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15311:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"15315:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15308:2:1"},"nodeType":"YulFunctionCall","src":"15308:11:1"},{"name":"cb","nodeType":"YulIdentifier","src":"15321:2:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15304:3:1"},"nodeType":"YulFunctionCall","src":"15304:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"15326:1:1","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15301:2:1"},"nodeType":"YulFunctionCall","src":"15301:27:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15329:99:1","statements":[{"nodeType":"YulAssignment","src":"15351:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15361:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"15365:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15357:3:1"},"nodeType":"YulFunctionCall","src":"15357:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"15351:2:1"}]},{"nodeType":"YulAssignment","src":"15391:19:1","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"15401:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"15405:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15397:3:1"},"nodeType":"YulFunctionCall","src":"15397:13:1"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"15391:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"15114:186:1","statements":[{"nodeType":"YulVariableDeclaration","src":"15136:31:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"15150:10:1"},{"kind":"number","nodeType":"YulLiteral","src":"15162:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15146:3:1"},"nodeType":"YulFunctionCall","src":"15146:21:1"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"15140:2:1","type":""}]}]},"src":"15110:603:1"}]},"nodeType":"YulCase","src":"14754:973:1","value":{"kind":"number","nodeType":"YulLiteral","src":"14759:1:1","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"15748:74:1","statements":[{"nodeType":"YulAssignment","src":"15796:12:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15807:1:1","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"15796:7:1"}]}]},"nodeType":"YulCase","src":"15740:82:1","value":"default"}],"expression":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14715:6:1"},{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"14729:10:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14723:5:1"},"nodeType":"YulFunctionCall","src":"14723:17:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14712:2:1"},"nodeType":"YulFunctionCall","src":"14712:29:1"},"nodeType":"YulSwitch","src":"14705:1117:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2482,"isOffset":false,"isSlot":false,"src":"14729:10:1","valueSize":1},{"declaration":2482,"isOffset":false,"isSlot":false,"src":"15150:10:1","valueSize":1},{"declaration":2480,"isOffset":false,"isSlot":false,"src":"14618:9:1","valueSize":1},{"declaration":2480,"isOffset":false,"isSlot":false,"src":"15033:9:1","valueSize":1},{"declaration":2488,"isOffset":false,"isSlot":false,"src":"15629:7:1","valueSize":1},{"declaration":2488,"isOffset":false,"isSlot":false,"src":"15796:7:1","valueSize":1}],"id":2491,"nodeType":"InlineAssembly","src":"14575:1257:1"},{"expression":{"id":2492,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"15849:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2486,"id":2493,"nodeType":"Return","src":"15842:14:1"}]},"id":2495,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"14451:5:1","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"_preBytes","nameLocation":"14470:9:1","nodeType":"VariableDeclaration","scope":2495,"src":"14457:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2479,"name":"bytes","nodeType":"ElementaryTypeName","src":"14457:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2482,"mutability":"mutable","name":"_postBytes","nameLocation":"14494:10:1","nodeType":"VariableDeclaration","scope":2495,"src":"14481:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2481,"name":"bytes","nodeType":"ElementaryTypeName","src":"14481:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14456:49:1"},"returnParameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2495,"src":"14529:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2484,"name":"bool","nodeType":"ElementaryTypeName","src":"14529:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14528:6:1"},"scope":2561,"src":"14442:1421:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2511,"nodeType":"Block","src":"15970:2556:1","statements":[{"assignments":[2505],"declarations":[{"constant":false,"id":2505,"mutability":"mutable","name":"success","nameLocation":"15985:7:1","nodeType":"VariableDeclaration","scope":2511,"src":"15980:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2504,"name":"bool","nodeType":"ElementaryTypeName","src":"15980:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2507,"initialValue":{"hexValue":"74727565","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15995:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"15980:19:1"},{"AST":{"nodeType":"YulBlock","src":"16019:2476:1","statements":[{"nodeType":"YulVariableDeclaration","src":"16078:34:1","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"16097:14:1"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16091:5:1"},"nodeType":"YulFunctionCall","src":"16091:21:1"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"16082:5:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16203:76:1","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16226:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16241:5:1","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16259:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"16266:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16255:3:1"},"nodeType":"YulFunctionCall","src":"16255:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16248:6:1"},"nodeType":"YulFunctionCall","src":"16248:21:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16237:3:1"},"nodeType":"YulFunctionCall","src":"16237:33:1"},{"kind":"number","nodeType":"YulLiteral","src":"16272:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16233:3:1"},"nodeType":"YulFunctionCall","src":"16233:41:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16222:3:1"},"nodeType":"YulFunctionCall","src":"16222:53:1"},{"kind":"number","nodeType":"YulLiteral","src":"16277:1:1","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16218:3:1"},"nodeType":"YulFunctionCall","src":"16218:61:1"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"16207:7:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16292:32:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"16313:10:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16307:5:1"},"nodeType":"YulFunctionCall","src":"16307:17:1"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"16296:7:1","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16448:1942:1","statements":[{"body":{"nodeType":"YulBlock","src":"16759:1617:1","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"16831:340:1","statements":[{"nodeType":"YulAssignment","src":"16924:38:1","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"16941:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"16948:5:1","type":"","value":"0x100"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16937:3:1"},"nodeType":"YulFunctionCall","src":"16937:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"16956:5:1","type":"","value":"0x100"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16933:3:1"},"nodeType":"YulFunctionCall","src":"16933:29:1"},"variableNames":[{"name":"fslot","nodeType":"YulIdentifier","src":"16924:5:1"}]},{"body":{"nodeType":"YulBlock","src":"17039:110:1","statements":[{"nodeType":"YulAssignment","src":"17111:12:1","value":{"kind":"number","nodeType":"YulLiteral","src":"17122:1:1","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"17111:7:1"}]}]},"condition":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17001:5:1"},{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17018:10:1"},{"kind":"number","nodeType":"YulLiteral","src":"17030:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17014:3:1"},"nodeType":"YulFunctionCall","src":"17014:21:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17008:5:1"},"nodeType":"YulFunctionCall","src":"17008:28:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16998:2:1"},"nodeType":"YulFunctionCall","src":"16998:39:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16991:6:1"},"nodeType":"YulFunctionCall","src":"16991:47:1"},"nodeType":"YulIf","src":"16988:161:1"}]},"nodeType":"YulCase","src":"16824:347:1","value":{"kind":"number","nodeType":"YulLiteral","src":"16829:1:1","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"17200:1158:1","statements":[{"nodeType":"YulVariableDeclaration","src":"17469:11:1","value":{"kind":"number","nodeType":"YulLiteral","src":"17479:1:1","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"17473:2:1","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17593:3:1","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"17598:14:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17586:6:1"},"nodeType":"YulFunctionCall","src":"17586:27:1"},"nodeType":"YulExpressionStatement","src":"17586:27:1"},{"nodeType":"YulVariableDeclaration","src":"17638:30:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17658:3:1","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"17663:4:1","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17648:9:1"},"nodeType":"YulFunctionCall","src":"17648:20:1"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"17642:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17694:31:1","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17708:10:1"},{"kind":"number","nodeType":"YulLiteral","src":"17720:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17704:3:1"},"nodeType":"YulFunctionCall","src":"17704:21:1"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"17698:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17750:27:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"17765:2:1"},{"name":"mlength","nodeType":"YulIdentifier","src":"17769:7:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17761:3:1"},"nodeType":"YulFunctionCall","src":"17761:16:1"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"17754:3:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"18082:254:1","statements":[{"body":{"nodeType":"YulBlock","src":"18148:162:1","statements":[{"nodeType":"YulAssignment","src":"18228:12:1","value":{"kind":"number","nodeType":"YulLiteral","src":"18239:1:1","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18228:7:1"}]},{"nodeType":"YulAssignment","src":"18273:7:1","value":{"kind":"number","nodeType":"YulLiteral","src":"18279:1:1","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"18273:2:1"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18131:2:1"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18125:5:1"},"nodeType":"YulFunctionCall","src":"18125:9:1"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18142:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18136:5:1"},"nodeType":"YulFunctionCall","src":"18136:9:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18122:2:1"},"nodeType":"YulFunctionCall","src":"18122:24:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18115:6:1"},"nodeType":"YulFunctionCall","src":"18115:32:1"},"nodeType":"YulIf","src":"18112:198:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"17943:2:1"},{"name":"end","nodeType":"YulIdentifier","src":"17947:3:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17940:2:1"},"nodeType":"YulFunctionCall","src":"17940:11:1"},{"name":"cb","nodeType":"YulIdentifier","src":"17953:2:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17936:3:1"},"nodeType":"YulFunctionCall","src":"17936:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"17958:1:1","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17933:2:1"},"nodeType":"YulFunctionCall","src":"17933:27:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17961:120:1","statements":[{"nodeType":"YulAssignment","src":"17991:16:1","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18001:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"18005:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17997:3:1"},"nodeType":"YulFunctionCall","src":"17997:10:1"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"17991:2:1"}]},{"nodeType":"YulAssignment","src":"18036:19:1","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18046:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"18050:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18042:3:1"},"nodeType":"YulFunctionCall","src":"18042:13:1"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"18036:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"17930:2:1","statements":[]},"src":"17926:410:1"}]},"nodeType":"YulCase","src":"17192:1166:1","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16791:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"16800:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16788:2:1"},"nodeType":"YulFunctionCall","src":"16788:15:1"},"nodeType":"YulSwitch","src":"16781:1577:1"}]},"condition":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16749:7:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16742:6:1"},"nodeType":"YulFunctionCall","src":"16742:15:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16735:6:1"},"nodeType":"YulFunctionCall","src":"16735:23:1"},"nodeType":"YulIf","src":"16732:1644:1"}]},"nodeType":"YulCase","src":"16441:1949:1","value":{"kind":"number","nodeType":"YulLiteral","src":"16446:1:1","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18411:74:1","statements":[{"nodeType":"YulAssignment","src":"18459:12:1","value":{"kind":"number","nodeType":"YulLiteral","src":"18470:1:1","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18459:7:1"}]}]},"nodeType":"YulCase","src":"18403:82:1","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"16411:7:1"},{"name":"mlength","nodeType":"YulIdentifier","src":"16420:7:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16408:2:1"},"nodeType":"YulFunctionCall","src":"16408:20:1"},"nodeType":"YulSwitch","src":"16401:2084:1"}]},"evmVersion":"london","externalReferences":[{"declaration":2499,"isOffset":false,"isSlot":false,"src":"16313:10:1","valueSize":1},{"declaration":2499,"isOffset":false,"isSlot":false,"src":"17018:10:1","valueSize":1},{"declaration":2499,"isOffset":false,"isSlot":false,"src":"17708:10:1","valueSize":1},{"declaration":2497,"isOffset":false,"isSlot":true,"src":"16097:14:1","suffix":"slot","valueSize":1},{"declaration":2497,"isOffset":false,"isSlot":true,"src":"17598:14:1","suffix":"slot","valueSize":1},{"declaration":2505,"isOffset":false,"isSlot":false,"src":"17111:7:1","valueSize":1},{"declaration":2505,"isOffset":false,"isSlot":false,"src":"18228:7:1","valueSize":1},{"declaration":2505,"isOffset":false,"isSlot":false,"src":"18459:7:1","valueSize":1}],"id":2508,"nodeType":"InlineAssembly","src":"16010:2485:1"},{"expression":{"id":2509,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"18512:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2503,"id":2510,"nodeType":"Return","src":"18505:14:1"}]},"id":2512,"implemented":true,"kind":"function","modifiers":[],"name":"equalStorage","nameLocation":"15878:12:1","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"_preBytes","nameLocation":"15905:9:1","nodeType":"VariableDeclaration","scope":2512,"src":"15891:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2496,"name":"bytes","nodeType":"ElementaryTypeName","src":"15891:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"_postBytes","nameLocation":"15929:10:1","nodeType":"VariableDeclaration","scope":2512,"src":"15916:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2498,"name":"bytes","nodeType":"ElementaryTypeName","src":"15916:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15890:50:1"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2512,"src":"15964:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2501,"name":"bool","nodeType":"ElementaryTypeName","src":"15964:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15963:6:1"},"scope":2561,"src":"15869:2657:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2528,"nodeType":"Block","src":"18612:152:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2519,"name":"_source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"18626:7:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18634:6:1","memberName":"length","nodeType":"MemberAccess","src":"18626:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18644:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18626:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2526,"nodeType":"IfStatement","src":"18622:60:1","trueBody":{"id":2525,"nodeType":"Block","src":"18647:35:1","statements":[{"expression":{"hexValue":"307830","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18668:3:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"},"functionReturnParameters":2518,"id":2524,"nodeType":"Return","src":"18661:10:1"}]}},{"AST":{"nodeType":"YulBlock","src":"18701:57:1","statements":[{"nodeType":"YulAssignment","src":"18715:33:1","value":{"arguments":[{"arguments":[{"name":"_source","nodeType":"YulIdentifier","src":"18735:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"18744:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18731:3:1"},"nodeType":"YulFunctionCall","src":"18731:16:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18725:5:1"},"nodeType":"YulFunctionCall","src":"18725:23:1"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18715:6:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2514,"isOffset":false,"isSlot":false,"src":"18735:7:1","valueSize":1},{"declaration":2517,"isOffset":false,"isSlot":false,"src":"18715:6:1","valueSize":1}],"id":2527,"nodeType":"InlineAssembly","src":"18692:66:1"}]},"id":2529,"implemented":true,"kind":"function","modifiers":[],"name":"toBytes32","nameLocation":"18541:9:1","nodeType":"FunctionDefinition","parameters":{"id":2515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"_source","nameLocation":"18564:7:1","nodeType":"VariableDeclaration","scope":2529,"src":"18551:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2513,"name":"bytes","nodeType":"ElementaryTypeName","src":"18551:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18550:22:1"},"returnParameters":{"id":2518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"result","nameLocation":"18604:6:1","nodeType":"VariableDeclaration","scope":2529,"src":"18596:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18596:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18595:16:1"},"scope":2561,"src":"18532:232:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2559,"nodeType":"Block","src":"18881:226:1","statements":[{"assignments":[2541],"declarations":[{"constant":false,"id":2541,"mutability":"mutable","name":"_end","nameLocation":"18896:4:1","nodeType":"VariableDeclaration","scope":2559,"src":"18891:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2540,"name":"uint","nodeType":"ElementaryTypeName","src":"18891:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2545,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"18903:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2543,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"18912:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18903:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18891:28:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2547,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"18937:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2548,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"18944:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18937:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2550,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"18954:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18961:6:1","memberName":"length","nodeType":"MemberAccess","src":"18954:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2552,"name":"_end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"18971:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18954:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18937:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536c696365206f7574206f6620626f756e6473","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18977:21:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""},"value":"Slice out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1c269d7eab972b2fd4d87a15c317e920493e7eea923de7e48c0ebcb7f611fa9","typeString":"literal_string \"Slice out of bounds\""}],"id":2546,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18929:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18929:70:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2557,"nodeType":"ExpressionStatement","src":"18929:70:1"},{"AST":{"nodeType":"YulBlock","src":"19019:82:1","statements":[{"nodeType":"YulAssignment","src":"19033:58:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"19061:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"19069:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19057:3:1"},"nodeType":"YulFunctionCall","src":"19057:15:1"},{"name":"_start","nodeType":"YulIdentifier","src":"19074:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19053:3:1"},"nodeType":"YulFunctionCall","src":"19053:28:1"},{"name":"_length","nodeType":"YulIdentifier","src":"19083:7:1"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19043:9:1"},"nodeType":"YulFunctionCall","src":"19043:48:1"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"19033:6:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2531,"isOffset":false,"isSlot":false,"src":"19061:6:1","valueSize":1},{"declaration":2535,"isOffset":false,"isSlot":false,"src":"19083:7:1","valueSize":1},{"declaration":2533,"isOffset":false,"isSlot":false,"src":"19074:6:1","valueSize":1},{"declaration":2538,"isOffset":false,"isSlot":false,"src":"19033:6:1","valueSize":1}],"id":2558,"nodeType":"InlineAssembly","src":"19010:91:1"}]},"id":2560,"implemented":true,"kind":"function","modifiers":[],"name":"keccak256Slice","nameLocation":"18779:14:1","nodeType":"FunctionDefinition","parameters":{"id":2536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"_bytes","nameLocation":"18807:6:1","nodeType":"VariableDeclaration","scope":2560,"src":"18794:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2530,"name":"bytes","nodeType":"ElementaryTypeName","src":"18794:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"_start","nameLocation":"18820:6:1","nodeType":"VariableDeclaration","scope":2560,"src":"18815:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint","nodeType":"ElementaryTypeName","src":"18815:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"_length","nameLocation":"18833:7:1","nodeType":"VariableDeclaration","scope":2560,"src":"18828:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2534,"name":"uint","nodeType":"ElementaryTypeName","src":"18828:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18793:48:1"},"returnParameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"result","nameLocation":"18873:6:1","nodeType":"VariableDeclaration","scope":2560,"src":"18865:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18865:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18864:16:1"},"scope":2561,"src":"18770:337:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2562,"src":"1359:17750:1","usedErrors":[]}],"src":"0:19110:1"},"id":1},"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol":{"ast":{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol","exportedSymbols":{"SafeMath":[2663]},"id":2664,"nodeType":"SourceUnit","nodes":[{"id":2563,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"0:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2564,"nodeType":"StructuredDocumentation","src":"1130:89:2","text":" @title SafeMath\n @dev Math operations with safety checks that throw on error"},"fullyImplemented":true,"id":2663,"linearizedBaseContracts":[2663],"name":"SafeMath","nameLocation":"1228:8:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":2598,"nodeType":"Block","src":"1387:385:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1618:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1624:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1618:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2580,"nodeType":"IfStatement","src":"1614:46:2","trueBody":{"id":2579,"nodeType":"Block","src":"1627:33:2","statements":[{"expression":{"hexValue":"30","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1648:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2573,"id":2578,"nodeType":"Return","src":"1641:8:2"}]}},{"expression":{"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2581,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"1670:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1674:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2583,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"1679:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1674:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1670:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2586,"nodeType":"ExpressionStatement","src":"1670:11:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"1699:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2589,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1703:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1699:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2591,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"1709:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1699:12:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f766572666c6f7720647572696e67206d756c7469706c69636174696f6e2e","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1713:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba0a2bc64fde93da03b25da14ae6ac8bd2ee8b9e52463015842b4eeadd2272fd","typeString":"literal_string \"Overflow during multiplication.\""},"value":"Overflow during multiplication."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba0a2bc64fde93da03b25da14ae6ac8bd2ee8b9e52463015842b4eeadd2272fd","typeString":"literal_string \"Overflow during multiplication.\""}],"id":2587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1691:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2595,"nodeType":"ExpressionStatement","src":"1691:56:2"},{"expression":{"id":2596,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"1764:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2573,"id":2597,"nodeType":"Return","src":"1757:8:2"}]},"documentation":{"id":2565,"nodeType":"StructuredDocumentation","src":"1244:67:2","text":" @dev Multiplies two numbers, throws on overflow."},"id":2599,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"1325:3:2","nodeType":"FunctionDefinition","parameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2567,"mutability":"mutable","name":"_a","nameLocation":"1337:2:2","nodeType":"VariableDeclaration","scope":2599,"src":"1329:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"1329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2569,"mutability":"mutable","name":"_b","nameLocation":"1349:2:2","nodeType":"VariableDeclaration","scope":2599,"src":"1341:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1328:24:2"},"returnParameters":{"id":2573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2572,"mutability":"mutable","name":"c","nameLocation":"1384:1:2","nodeType":"VariableDeclaration","scope":2599,"src":"1376:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2571,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1375:11:2"},"scope":2663,"src":"1316:456:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2613,"nodeType":"Block","src":"1933:232:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2609,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"2151:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2610,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"2156:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2151:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2608,"id":2612,"nodeType":"Return","src":"2144:14:2"}]},"documentation":{"id":2600,"nodeType":"StructuredDocumentation","src":"1778:81:2","text":" @dev Integer division of two numbers, truncating the quotient."},"id":2614,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"1873:3:2","nodeType":"FunctionDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2602,"mutability":"mutable","name":"_a","nameLocation":"1885:2:2","nodeType":"VariableDeclaration","scope":2614,"src":"1877:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"1877:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"_b","nameLocation":"1897:2:2","nodeType":"VariableDeclaration","scope":2614,"src":"1889:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1889:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1876:24:2"},"returnParameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2614,"src":"1924:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1923:9:2"},"scope":2663,"src":"1864:301:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2635,"nodeType":"Block","src":"2356:91:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2625,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"2374:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2626,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"2380:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2374:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e646572666c6f7720647572696e67207375627472616374696f6e2e","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2384:31:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_3f07ec8ec696bed525128e54888c3199e6c1842c68393ede0d46ce9e0c636998","typeString":"literal_string \"Underflow during subtraction.\""},"value":"Underflow during subtraction."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3f07ec8ec696bed525128e54888c3199e6c1842c68393ede0d46ce9e0c636998","typeString":"literal_string \"Underflow during subtraction.\""}],"id":2624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2366:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2366:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2630,"nodeType":"ExpressionStatement","src":"2366:50:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"2433:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2632,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"2438:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2433:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2623,"id":2634,"nodeType":"Return","src":"2426:14:2"}]},"documentation":{"id":2615,"nodeType":"StructuredDocumentation","src":"2171:111:2","text":" @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend)."},"id":2636,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"2296:3:2","nodeType":"FunctionDefinition","parameters":{"id":2620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2617,"mutability":"mutable","name":"_a","nameLocation":"2308:2:2","nodeType":"VariableDeclaration","scope":2636,"src":"2300:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"2300:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"_b","nameLocation":"2320:2:2","nodeType":"VariableDeclaration","scope":2636,"src":"2312:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"2312:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2299:24:2"},"returnParameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2636,"src":"2347:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"2347:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2346:9:2"},"scope":2663,"src":"2287:160:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2661,"nodeType":"Block","src":"2590:101:2","statements":[{"expression":{"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2646,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"2600:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2647,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"2604:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2648,"name":"_b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"2609:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2604:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2600:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2651,"nodeType":"ExpressionStatement","src":"2600:11:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2653,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"2629:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2654,"name":"_a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"2634:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2629:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f766572666c6f7720647572696e67206164646974696f6e2e","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2638:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d421e0463b1281311e0cc27f6e2ed63272137dbcd06f02e8ae9d697a2979f8e3","typeString":"literal_string \"Overflow during addition.\""},"value":"Overflow during addition."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d421e0463b1281311e0cc27f6e2ed63272137dbcd06f02e8ae9d697a2979f8e3","typeString":"literal_string \"Overflow during addition.\""}],"id":2652,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2621:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2621:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2658,"nodeType":"ExpressionStatement","src":"2621:45:2"},{"expression":{"id":2659,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"2683:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2645,"id":2660,"nodeType":"Return","src":"2676:8:2"}]},"documentation":{"id":2637,"nodeType":"StructuredDocumentation","src":"2453:61:2","text":" @dev Adds two numbers, throws on overflow."},"id":2662,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2528:3:2","nodeType":"FunctionDefinition","parameters":{"id":2642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"_a","nameLocation":"2540:2:2","nodeType":"VariableDeclaration","scope":2662,"src":"2532:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2532:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"_b","nameLocation":"2552:2:2","nodeType":"VariableDeclaration","scope":2662,"src":"2544:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2544:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2531:24:2"},"returnParameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"c","nameLocation":"2587:1:2","nodeType":"VariableDeclaration","scope":2662,"src":"2579:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"2579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2578:11:2"},"scope":2663,"src":"2519:172:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2664,"src":"1220:1473:2","usedErrors":[]}],"src":"0:2694:2"},"id":2},"@keep-network/random-beacon/contracts/Reimbursable.sol":{"ast":{"absolutePath":"@keep-network/random-beacon/contracts/Reimbursable.sol","exportedSymbols":{"Context":[4380],"Ownable":[4285],"ReentrancyGuard":[4350],"Reimbursable":[2723],"ReimbursementPool":[2999]},"id":2724,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2665,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"1903:23:3"},{"absolutePath":"@keep-network/random-beacon/contracts/ReimbursementPool.sol","file":"./ReimbursementPool.sol","id":2666,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2724,"sourceUnit":3000,"src":"1928:33:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Reimbursable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2723,"linearizedBaseContracts":[2723],"name":"Reimbursable","nameLocation":"1981:12:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"c09975cd","id":2669,"mutability":"mutable","name":"reimbursementPool","nameLocation":"2150:17:3","nodeType":"VariableDeclaration","scope":2723,"src":"2125:42:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"},"typeName":{"id":2668,"nodeType":"UserDefinedTypeName","pathNode":{"id":2667,"name":"ReimbursementPool","nameLocations":["2125:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":2999,"src":"2125:17:3"},"referencedDeclaration":2999,"src":"2125:17:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"visibility":"public"},{"constant":false,"id":2673,"mutability":"mutable","name":"__gap","nameLocation":"2462:5:3","nodeType":"VariableDeclaration","scope":2723,"src":"2442:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"2442:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2672,"length":{"hexValue":"3439","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2450:2:3","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2442:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"},{"anonymous":false,"eventSelector":"0e2d2343d31b085b7c4e56d1c8a6ec79f7ab07460386f1c9a1756239fe2533ac","id":2677,"name":"ReimbursementPoolUpdated","nameLocation":"2480:24:3","nodeType":"EventDefinition","parameters":{"id":2676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"indexed":false,"mutability":"mutable","name":"newReimbursementPool","nameLocation":"2513:20:3","nodeType":"VariableDeclaration","scope":2677,"src":"2505:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"2505:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2504:30:3"},"src":"2474:61:3"},{"body":{"id":2697,"nodeType":"Block","src":"2579:122:3","statements":[{"assignments":[2682],"declarations":[{"constant":false,"id":2682,"mutability":"mutable","name":"gasStart","nameLocation":"2597:8:3","nodeType":"VariableDeclaration","scope":2697,"src":"2589:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2681,"name":"uint256","nodeType":"ElementaryTypeName","src":"2589:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2685,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2683,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"2608:7:3","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2608:9:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2589:28:3"},{"id":2686,"nodeType":"PlaceholderStatement","src":"2627:1:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"gasStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"2663:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2691,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"2674:7:3","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:9:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2663:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2694,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"2685:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2687,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2638:17:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2656:6:3","memberName":"refund","nodeType":"MemberAccess","referencedDeclaration":2858,"src":"2638:24:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) external"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2638:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2696,"nodeType":"ExpressionStatement","src":"2638:56:3"}]},"id":2698,"name":"refundable","nameLocation":"2550:10:3","nodeType":"ModifierDefinition","parameters":{"id":2680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2679,"mutability":"mutable","name":"receiver","nameLocation":"2569:8:3","nodeType":"VariableDeclaration","scope":2698,"src":"2561:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2678,"name":"address","nodeType":"ElementaryTypeName","src":"2561:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2560:18:3"},"src":"2541:160:3","virtual":false,"visibility":"internal"},{"body":{"id":2701,"nodeType":"Block","src":"2748:18:3","statements":[{"id":2700,"nodeType":"PlaceholderStatement","src":"2758:1:3"}]},"id":2702,"name":"onlyReimbursableAdmin","nameLocation":"2716:21:3","nodeType":"ModifierDefinition","parameters":{"id":2699,"nodeType":"ParameterList","parameters":[],"src":"2737:2:3"},"src":"2707:59:3","virtual":true,"visibility":"internal"},{"body":{"id":2721,"nodeType":"Block","src":"2894:124:3","statements":[{"eventCall":{"arguments":[{"arguments":[{"id":2713,"name":"_reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"2942:18:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}],"id":2712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2934:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2711,"name":"address","nodeType":"ElementaryTypeName","src":"2934:7:3","typeDescriptions":{}}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2934:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2710,"name":"ReimbursementPoolUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2909:24:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2716,"nodeType":"EmitStatement","src":"2904:58:3"},{"expression":{"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2717,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2973:17:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2718,"name":"_reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"2993:18:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"src":"2973:38:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":2720,"nodeType":"ExpressionStatement","src":"2973:38:3"}]},"functionSelector":"7b35b4e6","id":2722,"implemented":true,"kind":"function","modifiers":[{"id":2708,"kind":"modifierInvocation","modifierName":{"id":2707,"name":"onlyReimbursableAdmin","nameLocations":["2868:21:3"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"2868:21:3"},"nodeType":"ModifierInvocation","src":"2868:21:3"}],"name":"updateReimbursementPool","nameLocation":"2781:23:3","nodeType":"FunctionDefinition","parameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"_reimbursementPool","nameLocation":"2823:18:3","nodeType":"VariableDeclaration","scope":2722,"src":"2805:36:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"},"typeName":{"id":2704,"nodeType":"UserDefinedTypeName","pathNode":{"id":2703,"name":"ReimbursementPool","nameLocations":["2805:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":2999,"src":"2805:17:3"},"referencedDeclaration":2999,"src":"2805:17:3","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"visibility":"internal"}],"src":"2804:38:3"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[],"src":"2894:0:3"},"scope":2723,"src":"2772:246:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2724,"src":"1963:1057:3","usedErrors":[]}],"src":"1903:1118:3"},"id":3},"@keep-network/random-beacon/contracts/ReimbursementPool.sol":{"ast":{"absolutePath":"@keep-network/random-beacon/contracts/ReimbursementPool.sol","exportedSymbols":{"Context":[4380],"Ownable":[4285],"ReentrancyGuard":[4350],"ReimbursementPool":[2999]},"id":3000,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2725,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"1903:23:4"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2726,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3000,"sourceUnit":4286,"src":"1928:52:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":2727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3000,"sourceUnit":4351,"src":"1981:62:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2728,"name":"Ownable","nameLocations":["2075:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4285,"src":"2075:7:4"},"id":2729,"nodeType":"InheritanceSpecifier","src":"2075:7:4"},{"baseName":{"id":2730,"name":"ReentrancyGuard","nameLocations":["2084:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":4350,"src":"2084:15:4"},"id":2731,"nodeType":"InheritanceSpecifier","src":"2084:15:4"}],"canonicalName":"ReimbursementPool","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2999,"linearizedBaseContracts":[2999,4350,4285,4380],"name":"ReimbursementPool","nameLocation":"2054:17:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":2732,"nodeType":"StructuredDocumentation","src":"2106:149:4","text":"@notice Authorized contracts that can interact with the reimbursment pool.\n         Authorization can be granted and removed by the owner."},"functionSelector":"fe9fbb80","id":2736,"mutability":"mutable","name":"isAuthorized","nameLocation":"2292:12:4","nodeType":"VariableDeclaration","scope":2999,"src":"2260:44:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2735,"keyType":{"id":2733,"name":"address","nodeType":"ElementaryTypeName","src":"2268:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2260:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2734,"name":"bool","nodeType":"ElementaryTypeName","src":"2279:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2737,"nodeType":"StructuredDocumentation","src":"2311:118:4","text":"@notice Static gas includes:\n         - cost of the refund function\n         - base transaction cost"},"functionSelector":"e25b5345","id":2739,"mutability":"mutable","name":"staticGas","nameLocation":"2449:9:4","nodeType":"VariableDeclaration","scope":2999,"src":"2434:24:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"2434:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2740,"nodeType":"StructuredDocumentation","src":"2465:128:4","text":"@notice Max gas price used to reimburse a transaction submitter. Protects\n         against malicious operator-miners."},"functionSelector":"3de39c11","id":2742,"mutability":"mutable","name":"maxGasPrice","nameLocation":"2613:11:4","nodeType":"VariableDeclaration","scope":2999,"src":"2598:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"2598:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"eventSelector":"a86b6e9a406df021f05f513a796a1d5bea0bd3e18fe1d3f6082a3cccfc898d14","id":2746,"name":"StaticGasUpdated","nameLocation":"2637:16:4","nodeType":"EventDefinition","parameters":{"id":2745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2744,"indexed":false,"mutability":"mutable","name":"newStaticGas","nameLocation":"2662:12:4","nodeType":"VariableDeclaration","scope":2746,"src":"2654:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2743,"name":"uint256","nodeType":"ElementaryTypeName","src":"2654:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2653:22:4"},"src":"2631:45:4"},{"anonymous":false,"eventSelector":"a7a07f821dfdfca8e4baa9ccc4bbe7b782baac5946918bd19f1c9c761db41410","id":2750,"name":"MaxGasPriceUpdated","nameLocation":"2688:18:4","nodeType":"EventDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"indexed":false,"mutability":"mutable","name":"newMaxGasPrice","nameLocation":"2715:14:4","nodeType":"VariableDeclaration","scope":2750,"src":"2707:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"2707:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2706:24:4"},"src":"2682:49:4"},{"anonymous":false,"eventSelector":"d955712c3ae4c3c40451db84ea0c4531c61cc0ea75c13fe9168ae0e07d71e050","id":2756,"name":"SendingEtherFailed","nameLocation":"2743:18:4","nodeType":"EventDefinition","parameters":{"id":2755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2752,"indexed":false,"mutability":"mutable","name":"refundAmount","nameLocation":"2770:12:4","nodeType":"VariableDeclaration","scope":2756,"src":"2762:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"2762:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2754,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"2792:8:4","nodeType":"VariableDeclaration","scope":2756,"src":"2784:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2753,"name":"address","nodeType":"ElementaryTypeName","src":"2784:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2761:40:4"},"src":"2737:65:4"},{"anonymous":false,"eventSelector":"2c74592fddad593c2c4403101ce9b30930711ab87571268ddd1e1989ee1d7917","id":2760,"name":"AuthorizedContract","nameLocation":"2814:18:4","nodeType":"EventDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"indexed":false,"mutability":"mutable","name":"thirdPartyContract","nameLocation":"2841:18:4","nodeType":"VariableDeclaration","scope":2760,"src":"2833:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2757,"name":"address","nodeType":"ElementaryTypeName","src":"2833:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2832:28:4"},"src":"2808:53:4"},{"anonymous":false,"eventSelector":"e195aa139c7c69ba98f719c94aecd784e12fabc0789ef81335150078bc087317","id":2764,"name":"UnauthorizedContract","nameLocation":"2873:20:4","nodeType":"EventDefinition","parameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2762,"indexed":false,"mutability":"mutable","name":"thirdPartyContract","nameLocation":"2902:18:4","nodeType":"VariableDeclaration","scope":2764,"src":"2894:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2761,"name":"address","nodeType":"ElementaryTypeName","src":"2894:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2893:28:4"},"src":"2867:55:4"},{"anonymous":false,"eventSelector":"6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea","id":2770,"name":"FundsWithdrawn","nameLocation":"2934:14:4","nodeType":"EventDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"indexed":false,"mutability":"mutable","name":"withdrawnAmount","nameLocation":"2957:15:4","nodeType":"VariableDeclaration","scope":2770,"src":"2949:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"2949:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2768,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"2982:8:4","nodeType":"VariableDeclaration","scope":2770,"src":"2974:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2767,"name":"address","nodeType":"ElementaryTypeName","src":"2974:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2948:43:4"},"src":"2928:64:4"},{"body":{"id":2785,"nodeType":"Block","src":"3052:75:4","statements":[{"expression":{"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2777,"name":"staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"3062:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2778,"name":"_staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"3074:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3062:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ExpressionStatement","src":"3062:22:4"},{"expression":{"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2781,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"3094:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2782,"name":"_maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"3108:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3094:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2784,"nodeType":"ExpressionStatement","src":"3094:26:4"}]},"id":2786,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2772,"mutability":"mutable","name":"_staticGas","nameLocation":"3018:10:4","nodeType":"VariableDeclaration","scope":2786,"src":"3010:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"3010:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2774,"mutability":"mutable","name":"_maxGasPrice","nameLocation":"3038:12:4","nodeType":"VariableDeclaration","scope":2786,"src":"3030:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2773,"name":"uint256","nodeType":"ElementaryTypeName","src":"3030:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3009:42:4"},"returnParameters":{"id":2776,"nodeType":"ParameterList","parameters":[],"src":"3052:0:4"},"scope":2999,"src":"2998:129:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2790,"nodeType":"Block","src":"3188:2:4","statements":[]},"documentation":{"id":2787,"nodeType":"StructuredDocumentation","src":"3133:23:4","text":"@notice Receive ETH"},"id":2791,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[],"src":"3168:2:4"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[],"src":"3188:0:4"},"scope":2999,"src":"3161:29:4","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":2857,"nodeType":"Block","src":"4041:770:4","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2802,"name":"isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"4072:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2805,"indexExpression":{"expression":{"id":2803,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4085:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4089:6:4","memberName":"sender","nodeType":"MemberAccess","src":"4085:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4072:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e7472616374206973206e6f7420617574686f72697a656420666f72206120726566756e64","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4110:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13","typeString":"literal_string \"Contract is not authorized for a refund\""},"value":"Contract is not authorized for a refund"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13","typeString":"literal_string \"Contract is not authorized for a refund\""}],"id":2801,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4051:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4051:110:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2808,"nodeType":"ExpressionStatement","src":"4051:110:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2810,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"4179:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4199:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4191:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2811,"name":"address","nodeType":"ElementaryTypeName","src":"4191:7:4","typeDescriptions":{}}},"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4179:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636569766572277320616464726573732063616e6e6f74206265207a65726f","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4203:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","typeString":"literal_string \"Receiver's address cannot be zero\""},"value":"Receiver's address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","typeString":"literal_string \"Receiver's address cannot be zero\""}],"id":2809,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4171:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4171:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2818,"nodeType":"ExpressionStatement","src":"4171:68:4"},{"assignments":[2820],"declarations":[{"constant":false,"id":2820,"mutability":"mutable","name":"gasPrice","nameLocation":"4258:8:4","nodeType":"VariableDeclaration","scope":2857,"src":"4250:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"4250:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2829,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2821,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"4269:2:4","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4272:8:4","memberName":"gasprice","nodeType":"MemberAccess","src":"4269:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2823,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"4283:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4269:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2827,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"4335:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4269:77:4","trueExpression":{"expression":{"id":2825,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"4309:2:4","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4312:8:4","memberName":"gasprice","nodeType":"MemberAccess","src":"4309:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4250:96:4"},{"assignments":[2831],"declarations":[{"constant":false,"id":2831,"mutability":"mutable","name":"refundAmount","nameLocation":"4365:12:4","nodeType":"VariableDeclaration","scope":2857,"src":"4357:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"4357:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2838,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2832,"name":"gasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"4381:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2833,"name":"staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"4392:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4381:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2835,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4380:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2836,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"4405:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4380:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4357:56:4"},{"assignments":[2840,null],"declarations":[{"constant":false,"id":2840,"mutability":"mutable","name":"sent","nameLocation":"4554:4:4","nodeType":"VariableDeclaration","scope":2857,"src":"4549:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2839,"name":"bool","nodeType":"ElementaryTypeName","src":"4549:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2847,"initialValue":{"arguments":[{"hexValue":"","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4599:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2841,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"4564:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4573:4:4","memberName":"call","nodeType":"MemberAccess","src":"4564:13:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2843,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"4585:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4564:34:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4564:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4548:54:4"},{"condition":{"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4667:5:4","subExpression":{"id":2848,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"4668:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2856,"nodeType":"IfStatement","src":"4663:142:4","trueBody":{"id":2855,"nodeType":"Block","src":"4674:131:4","statements":[{"eventCall":{"arguments":[{"id":2851,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"4771:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2852,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"4785:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2850,"name":"SendingEtherFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"4752:18:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4752:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2854,"nodeType":"EmitStatement","src":"4747:47:4"}]}}]},"documentation":{"id":2792,"nodeType":"StructuredDocumentation","src":"3196:766:4","text":"@notice Refunds ETH to a spender for executing specific transactions.\n @dev Ignoring the result of sending ETH to a receiver is made on purpose.\n      For EOA receiving ETH should always work. If a receiver is a smart\n      contract, then we do not want to fail a transaction, because in some\n      cases the refund is done at the very end of multiple calls where all\n      the previous calls were already paid off. It is a receiver's smart\n      contract resposibility to make sure it can receive ETH.\n @dev Only authorized contracts are allowed calling this function.\n @param gasSpent Gas spent on a transaction that needs to be reimbursed.\n @param receiver Address where the reimbursment is sent."},"functionSelector":"7ad226dc","id":2858,"implemented":true,"kind":"function","modifiers":[{"id":2799,"kind":"modifierInvocation","modifierName":{"id":2798,"name":"nonReentrant","nameLocations":["4028:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":4315,"src":"4028:12:4"},"nodeType":"ModifierInvocation","src":"4028:12:4"}],"name":"refund","nameLocation":"3976:6:4","nodeType":"FunctionDefinition","parameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"mutability":"mutable","name":"gasSpent","nameLocation":"3991:8:4","nodeType":"VariableDeclaration","scope":2858,"src":"3983:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2793,"name":"uint256","nodeType":"ElementaryTypeName","src":"3983:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2796,"mutability":"mutable","name":"receiver","nameLocation":"4009:8:4","nodeType":"VariableDeclaration","scope":2858,"src":"4001:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3982:36:4"},"returnParameters":{"id":2800,"nodeType":"ParameterList","parameters":[],"src":"4041:0:4"},"scope":2999,"src":"3967:844:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2876,"nodeType":"Block","src":"5057:92:4","statements":[{"expression":{"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2866,"name":"isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"5067:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2868,"indexExpression":{"id":2867,"name":"_contract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"5080:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5067:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5093:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5067:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2871,"nodeType":"ExpressionStatement","src":"5067:30:4"},{"eventCall":{"arguments":[{"id":2873,"name":"_contract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"5132:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2872,"name":"AuthorizedContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"5113:18:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2875,"nodeType":"EmitStatement","src":"5108:34:4"}]},"documentation":{"id":2859,"nodeType":"StructuredDocumentation","src":"4817:178:4","text":"@notice Authorize a contract that can interact with this reimbursment pool.\n         Can be authorized by the owner only.\n @param _contract Authorized contract."},"functionSelector":"b6a5d7de","id":2877,"implemented":true,"kind":"function","modifiers":[{"id":2864,"kind":"modifierInvocation","modifierName":{"id":2863,"name":"onlyOwner","nameLocations":["5047:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"5047:9:4"},"nodeType":"ModifierInvocation","src":"5047:9:4"}],"name":"authorize","nameLocation":"5009:9:4","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"_contract","nameLocation":"5027:9:4","nodeType":"VariableDeclaration","scope":2877,"src":"5019:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2860,"name":"address","nodeType":"ElementaryTypeName","src":"5019:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5018:19:4"},"returnParameters":{"id":2865,"nodeType":"ParameterList","parameters":[],"src":"5057:0:4"},"scope":2999,"src":"5000:149:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2894,"nodeType":"Block","src":"5442:94:4","statements":[{"expression":{"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5452:30:4","subExpression":{"baseExpression":{"id":2885,"name":"isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"5459:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2887,"indexExpression":{"id":2886,"name":"_contract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"5472:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5459:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2889,"nodeType":"ExpressionStatement","src":"5452:30:4"},{"eventCall":{"arguments":[{"id":2891,"name":"_contract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"5519:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2890,"name":"UnauthorizedContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"5498:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2893,"nodeType":"EmitStatement","src":"5493:36:4"}]},"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"5155:223:4","text":"@notice Unauthorize a contract that was previously authorized to interact\n         with this reimbursment pool. Can be unauthorized by the\n         owner only.\n @param _contract Authorized contract."},"functionSelector":"f0b37c04","id":2895,"implemented":true,"kind":"function","modifiers":[{"id":2883,"kind":"modifierInvocation","modifierName":{"id":2882,"name":"onlyOwner","nameLocations":["5432:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"5432:9:4"},"nodeType":"ModifierInvocation","src":"5432:9:4"}],"name":"unauthorize","nameLocation":"5392:11:4","nodeType":"FunctionDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2880,"mutability":"mutable","name":"_contract","nameLocation":"5412:9:4","nodeType":"VariableDeclaration","scope":2895,"src":"5404:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2879,"name":"address","nodeType":"ElementaryTypeName","src":"5404:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5403:19:4"},"returnParameters":{"id":2884,"nodeType":"ParameterList","parameters":[],"src":"5442:0:4"},"scope":2999,"src":"5383:153:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2911,"nodeType":"Block","src":"5763:83:4","statements":[{"expression":{"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2903,"name":"staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"5773:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2904,"name":"_staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"5785:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5773:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2906,"nodeType":"ExpressionStatement","src":"5773:22:4"},{"eventCall":{"arguments":[{"id":2908,"name":"_staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"5828:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2907,"name":"StaticGasUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"5811:16:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5811:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2910,"nodeType":"EmitStatement","src":"5806:33:4"}]},"documentation":{"id":2896,"nodeType":"StructuredDocumentation","src":"5542:155:4","text":"@notice Setting a static gas cost for executing a transaction. Can be set\n         by the owner only.\n @param _staticGas Static gas cost."},"functionSelector":"3e217404","id":2912,"implemented":true,"kind":"function","modifiers":[{"id":2901,"kind":"modifierInvocation","modifierName":{"id":2900,"name":"onlyOwner","nameLocations":["5753:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"5753:9:4"},"nodeType":"ModifierInvocation","src":"5753:9:4"}],"name":"setStaticGas","nameLocation":"5711:12:4","nodeType":"FunctionDefinition","parameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2898,"mutability":"mutable","name":"_staticGas","nameLocation":"5732:10:4","nodeType":"VariableDeclaration","scope":2912,"src":"5724:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"5724:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5723:20:4"},"returnParameters":{"id":2902,"nodeType":"ParameterList","parameters":[],"src":"5763:0:4"},"scope":2999,"src":"5702:144:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2928,"nodeType":"Block","src":"6096:91:4","statements":[{"expression":{"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2920,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"6106:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2921,"name":"_maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6120:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6106:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2923,"nodeType":"ExpressionStatement","src":"6106:26:4"},{"eventCall":{"arguments":[{"id":2925,"name":"_maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6167:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2924,"name":"MaxGasPriceUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"6148:18:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6148:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2927,"nodeType":"EmitStatement","src":"6143:37:4"}]},"documentation":{"id":2913,"nodeType":"StructuredDocumentation","src":"5852:174:4","text":"@notice Setting a max gas price for transactions. Can be set by the\n         owner only.\n @param _maxGasPrice Max gas price used to reimburse tx submitters."},"functionSelector":"d2fa635e","id":2929,"implemented":true,"kind":"function","modifiers":[{"id":2918,"kind":"modifierInvocation","modifierName":{"id":2917,"name":"onlyOwner","nameLocations":["6086:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"6086:9:4"},"nodeType":"ModifierInvocation","src":"6086:9:4"}],"name":"setMaxGasPrice","nameLocation":"6040:14:4","nodeType":"FunctionDefinition","parameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"_maxGasPrice","nameLocation":"6063:12:4","nodeType":"VariableDeclaration","scope":2929,"src":"6055:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"6055:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6054:22:4"},"returnParameters":{"id":2919,"nodeType":"ParameterList","parameters":[],"src":"6096:0:4"},"scope":2999,"src":"6031:156:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2946,"nodeType":"Block","src":"6435:58:4","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2940,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6462:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}],"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6454:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"6454:7:4","typeDescriptions":{}}},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6454:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6468:7:4","memberName":"balance","nodeType":"MemberAccess","src":"6454:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2943,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"6477:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2937,"name":"withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"6445:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6445:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2945,"nodeType":"ExpressionStatement","src":"6445:41:4"}]},"documentation":{"id":2930,"nodeType":"StructuredDocumentation","src":"6193:179:4","text":"@notice Withdraws all ETH from this pool which are sent to a given\n         address. Can be set by the owner only.\n @param receiver An address where ETH is sent."},"functionSelector":"fa09e630","id":2947,"implemented":true,"kind":"function","modifiers":[{"id":2935,"kind":"modifierInvocation","modifierName":{"id":2934,"name":"onlyOwner","nameLocations":["6425:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"6425:9:4"},"nodeType":"ModifierInvocation","src":"6425:9:4"}],"name":"withdrawAll","nameLocation":"6386:11:4","nodeType":"FunctionDefinition","parameters":{"id":2933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"receiver","nameLocation":"6406:8:4","nodeType":"VariableDeclaration","scope":2947,"src":"6398:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2931,"name":"address","nodeType":"ElementaryTypeName","src":"6398:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6397:18:4"},"returnParameters":{"id":2936,"nodeType":"ParameterList","parameters":[],"src":"6435:0:4"},"scope":2999,"src":"6377:116:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2997,"nodeType":"Block","src":"6811:527:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2960,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6850:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}],"id":2959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6842:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2958,"name":"address","nodeType":"ElementaryTypeName","src":"6842:7:4","typeDescriptions":{}}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6856:7:4","memberName":"balance","nodeType":"MemberAccess","src":"6842:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2963,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"6867:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6842:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420636f6e74726163742062616c616e6365","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6887:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749","typeString":"literal_string \"Insufficient contract balance\""},"value":"Insufficient contract balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749","typeString":"literal_string \"Insufficient contract balance\""}],"id":2957,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6821:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6821:107:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2967,"nodeType":"ExpressionStatement","src":"6821:107:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2969,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"6946:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6966:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6958:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"6958:7:4","typeDescriptions":{}}},"id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6958:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6946:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636569766572277320616464726573732063616e6e6f74206265207a65726f","id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6970:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","typeString":"literal_string \"Receiver's address cannot be zero\""},"value":"Receiver's address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","typeString":"literal_string \"Receiver's address cannot be zero\""}],"id":2968,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6938:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6938:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2977,"nodeType":"ExpressionStatement","src":"6938:68:4"},{"eventCall":{"arguments":[{"id":2979,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7037:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2980,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"7045:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2978,"name":"FundsWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"7022:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7022:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2982,"nodeType":"EmitStatement","src":"7017:37:4"},{"assignments":[2984,null],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"sent","nameLocation":"7191:4:4","nodeType":"VariableDeclaration","scope":2997,"src":"7186:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2983,"name":"bool","nodeType":"ElementaryTypeName","src":"7186:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2991,"initialValue":{"arguments":[{"hexValue":"","id":2989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7230:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2985,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"7201:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7210:4:4","memberName":"call","nodeType":"MemberAccess","src":"7201:13:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2987,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7222:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"7201:28:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7201:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7185:48:4"},{"expression":{"arguments":[{"id":2993,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"7302:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7308:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":2992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7294:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7294:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2996,"nodeType":"ExpressionStatement","src":"7294:37:4"}]},"documentation":{"id":2948,"nodeType":"StructuredDocumentation","src":"6499:238:4","text":"@notice Withdraws ETH amount from this pool which are sent to a given\n         address. Can be set by the owner only.\n @param amount Amount to withdraw from the pool.\n @param receiver An address where ETH is sent."},"functionSelector":"00f714ce","id":2998,"implemented":true,"kind":"function","modifiers":[{"id":2955,"kind":"modifierInvocation","modifierName":{"id":2954,"name":"onlyOwner","nameLocations":["6801:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"6801:9:4"},"nodeType":"ModifierInvocation","src":"6801:9:4"}],"name":"withdraw","nameLocation":"6751:8:4","nodeType":"FunctionDefinition","parameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2950,"mutability":"mutable","name":"amount","nameLocation":"6768:6:4","nodeType":"VariableDeclaration","scope":2998,"src":"6760:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"6760:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"receiver","nameLocation":"6784:8:4","nodeType":"VariableDeclaration","scope":2998,"src":"6776:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2951,"name":"address","nodeType":"ElementaryTypeName","src":"6776:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6759:34:4"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[],"src":"6811:0:4"},"scope":2999,"src":"6742:596:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3000,"src":"2045:5295:4","usedErrors":[]}],"src":"1903:5438:4"},"id":4},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[4172],"Initializable":[3301],"OwnableUpgradeable":[3132]},"id":3133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3001,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3002,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3133,"sourceUnit":4173,"src":"127:41:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3004,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3133,"sourceUnit":3302,"src":"169:63:5","symbolAliases":[{"foreign":{"id":3003,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"177:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3006,"name":"Initializable","nameLocations":["769:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":3301,"src":"769:13:5"},"id":3007,"nodeType":"InheritanceSpecifier","src":"769:13:5"},{"baseName":{"id":3008,"name":"ContextUpgradeable","nameLocations":["784:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":4172,"src":"784:18:5"},"id":3009,"nodeType":"InheritanceSpecifier","src":"784:18:5"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"234:494:5","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":3132,"linearizedBaseContracts":[3132,4172,3301],"name":"OwnableUpgradeable","nameLocation":"747:18:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3011,"mutability":"mutable","name":"_owner","nameLocation":"825:6:5","nodeType":"VariableDeclaration","scope":3132,"src":"809:22:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3010,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":3017,"name":"OwnershipTransferred","nameLocation":"844:20:5","nodeType":"EventDefinition","parameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3013,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"881:13:5","nodeType":"VariableDeclaration","scope":3017,"src":"865:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3012,"name":"address","nodeType":"ElementaryTypeName","src":"865:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3015,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"912:8:5","nodeType":"VariableDeclaration","scope":3017,"src":"896:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3014,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"864:57:5"},"src":"838:84:5"},{"body":{"id":3026,"nodeType":"Block","src":"1076:43:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3023,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"1086:24:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1086:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3025,"nodeType":"ExpressionStatement","src":"1086:26:5"}]},"documentation":{"id":3018,"nodeType":"StructuredDocumentation","src":"928:91:5","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":3027,"implemented":true,"kind":"function","modifiers":[{"id":3021,"kind":"modifierInvocation","modifierName":{"id":3020,"name":"onlyInitializing","nameLocations":["1059:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"1059:16:5"},"nodeType":"ModifierInvocation","src":"1059:16:5"}],"name":"__Ownable_init","nameLocation":"1033:14:5","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[],"src":"1047:2:5"},"returnParameters":{"id":3022,"nodeType":"ParameterList","parameters":[],"src":"1076:0:5"},"scope":3132,"src":"1024:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3037,"nodeType":"Block","src":"1187:49:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3033,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4149,"src":"1216:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3032,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"1197:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3036,"nodeType":"ExpressionStatement","src":"1197:32:5"}]},"id":3038,"implemented":true,"kind":"function","modifiers":[{"id":3030,"kind":"modifierInvocation","modifierName":{"id":3029,"name":"onlyInitializing","nameLocations":["1170:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"1170:16:5"},"nodeType":"ModifierInvocation","src":"1170:16:5"}],"name":"__Ownable_init_unchained","nameLocation":"1134:24:5","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[],"src":"1158:2:5"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[],"src":"1187:0:5"},"scope":3132,"src":"1125:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3045,"nodeType":"Block","src":"1345:41:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3041,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"1355:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3043,"nodeType":"ExpressionStatement","src":"1355:13:5"},{"id":3044,"nodeType":"PlaceholderStatement","src":"1378:1:5"}]},"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"1242:77:5","text":" @dev Throws if called by any account other than the owner."},"id":3046,"name":"onlyOwner","nameLocation":"1333:9:5","nodeType":"ModifierDefinition","parameters":{"id":3040,"nodeType":"ParameterList","parameters":[],"src":"1342:2:5"},"src":"1324:62:5","virtual":false,"visibility":"internal"},{"body":{"id":3054,"nodeType":"Block","src":"1517:30:5","statements":[{"expression":{"id":3052,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1534:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3051,"id":3053,"nodeType":"Return","src":"1527:13:5"}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"1392:65:5","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":3055,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1471:5:5","nodeType":"FunctionDefinition","parameters":{"id":3048,"nodeType":"ParameterList","parameters":[],"src":"1476:2:5"},"returnParameters":{"id":3051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3055,"src":"1508:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1507:9:5"},"scope":3132,"src":"1462:85:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3068,"nodeType":"Block","src":"1665:85:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3060,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1683:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:7:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3062,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4149,"src":"1694:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1683:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1708:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":3059,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1675:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"ExpressionStatement","src":"1675:68:5"}]},"documentation":{"id":3056,"nodeType":"StructuredDocumentation","src":"1553:62:5","text":" @dev Throws if the sender is not the owner."},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1629:11:5","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[],"src":"1640:2:5"},"returnParameters":{"id":3058,"nodeType":"ParameterList","parameters":[],"src":"1665:0:5"},"scope":3132,"src":"1620:130:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3082,"nodeType":"Block","src":"2139:47:5","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2168:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3076,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:5","typeDescriptions":{}}},"id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3075,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"2149:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2149:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3081,"nodeType":"ExpressionStatement","src":"2149:30:5"}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"1756:324:5","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":3083,"implemented":true,"kind":"function","modifiers":[{"id":3073,"kind":"modifierInvocation","modifierName":{"id":3072,"name":"onlyOwner","nameLocations":["2129:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"2129:9:5"},"nodeType":"ModifierInvocation","src":"2129:9:5"}],"name":"renounceOwnership","nameLocation":"2094:17:5","nodeType":"FunctionDefinition","parameters":{"id":3071,"nodeType":"ParameterList","parameters":[],"src":"2111:2:5"},"returnParameters":{"id":3074,"nodeType":"ParameterList","parameters":[],"src":"2139:0:5"},"scope":3132,"src":"2085:101:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3105,"nodeType":"Block","src":"2405:128:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3092,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"2423:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2435:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3093,"name":"address","nodeType":"ElementaryTypeName","src":"2435:7:5","typeDescriptions":{}}},"id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2435:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2423:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2447:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":3091,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2415:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3100,"nodeType":"ExpressionStatement","src":"2415:73:5"},{"expression":{"arguments":[{"id":3102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"2517:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3101,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"2498:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3104,"nodeType":"ExpressionStatement","src":"2498:28:5"}]},"documentation":{"id":3084,"nodeType":"StructuredDocumentation","src":"2192:138:5","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":3106,"implemented":true,"kind":"function","modifiers":[{"id":3089,"kind":"modifierInvocation","modifierName":{"id":3088,"name":"onlyOwner","nameLocations":["2395:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"2395:9:5"},"nodeType":"ModifierInvocation","src":"2395:9:5"}],"name":"transferOwnership","nameLocation":"2344:17:5","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3086,"mutability":"mutable","name":"newOwner","nameLocation":"2370:8:5","nodeType":"VariableDeclaration","scope":3106,"src":"2362:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3085,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2361:18:5"},"returnParameters":{"id":3090,"nodeType":"ParameterList","parameters":[],"src":"2405:0:5"},"scope":3132,"src":"2335:198:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3125,"nodeType":"Block","src":"2750:124:5","statements":[{"assignments":[3113],"declarations":[{"constant":false,"id":3113,"mutability":"mutable","name":"oldOwner","nameLocation":"2768:8:5","nodeType":"VariableDeclaration","scope":3125,"src":"2760:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3112,"name":"address","nodeType":"ElementaryTypeName","src":"2760:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3115,"initialValue":{"id":3114,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2779:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2760:25:5"},{"expression":{"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3116,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2795:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3117,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"2804:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2795:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3119,"nodeType":"ExpressionStatement","src":"2795:17:5"},{"eventCall":{"arguments":[{"id":3121,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"2848:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"2858:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3120,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"2827:20:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3124,"nodeType":"EmitStatement","src":"2822:45:5"}]},"documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"2539:143:5","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":3126,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2696:18:5","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"newOwner","nameLocation":"2723:8:5","nodeType":"VariableDeclaration","scope":3126,"src":"2715:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3108,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2714:18:5"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[],"src":"2750:0:5"},"scope":3132,"src":"2687:187:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3127,"nodeType":"StructuredDocumentation","src":"2880:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3131,"mutability":"mutable","name":"__gap","nameLocation":"3159:5:5","nodeType":"VariableDeclaration","scope":3132,"src":"3139:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":3128,"name":"uint256","nodeType":"ElementaryTypeName","src":"3139:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3130,"length":{"hexValue":"3439","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:2:5","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3139:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":3133,"src":"729:2438:5","usedErrors":[]}],"src":"102:3066:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[4121],"Initializable":[3301]},"id":3302,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3134,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":3135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3302,"sourceUnit":4122,"src":"138:44:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3136,"nodeType":"StructuredDocumentation","src":"184:2209:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":3301,"linearizedBaseContracts":[3301],"name":"Initializable","nameLocation":"2412:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":3137,"nodeType":"StructuredDocumentation","src":"2432:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":3139,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:6","nodeType":"VariableDeclaration","scope":3301,"src":"2546:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3138,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":3140,"nodeType":"StructuredDocumentation","src":"2579:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":3142,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:6","nodeType":"VariableDeclaration","scope":3301,"src":"2675:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3141,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":3143,"nodeType":"StructuredDocumentation","src":"2708:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":3147,"name":"Initialized","nameLocation":"2809:11:6","nodeType":"EventDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3145,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:6","nodeType":"VariableDeclaration","scope":3147,"src":"2821:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3144,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:6"},"src":"2803:33:6"},{"body":{"id":3202,"nodeType":"Block","src":"3269:483:6","statements":[{"assignments":[3151],"declarations":[{"constant":false,"id":3151,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:6","nodeType":"VariableDeclaration","scope":3202,"src":"3279:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3150,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3154,"initialValue":{"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:6","subExpression":{"id":3152,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"3302:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3156,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3347:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3365:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3161,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:6","subExpression":{"arguments":[{"arguments":[{"id":3166,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$3301","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$3301","typeString":"contract Initializable"}],"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:6","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3162,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"3388:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$4121_$","typeString":"type(library AddressUpgradeable)"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3809,"src":"3388:29:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3170,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3436:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":3155,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3178,"nodeType":"ExpressionStatement","src":"3325:201:6"},{"expression":{"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3179,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3536:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3182,"nodeType":"ExpressionStatement","src":"3536:16:6"},{"condition":{"id":3183,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3566:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3189,"nodeType":"IfStatement","src":"3562:65:6","trueBody":{"id":3188,"nodeType":"Block","src":"3582:45:6","statements":[{"expression":{"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3184,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"3596:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"ExpressionStatement","src":"3596:20:6"}]}},{"id":3190,"nodeType":"PlaceholderStatement","src":"3636:1:6"},{"condition":{"id":3191,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3651:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3201,"nodeType":"IfStatement","src":"3647:99:6","trueBody":{"id":3200,"nodeType":"Block","src":"3667:79:6","statements":[{"expression":{"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3192,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"3681:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3195,"nodeType":"ExpressionStatement","src":"3681:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3196,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"3721:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3199,"nodeType":"EmitStatement","src":"3716:19:6"}]}}]},"documentation":{"id":3148,"nodeType":"StructuredDocumentation","src":"2842:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":3203,"name":"initializer","nameLocation":"3255:11:6","nodeType":"ModifierDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[],"src":"3266:2:6"},"src":"3246:506:6","virtual":false,"visibility":"internal"},{"body":{"id":3235,"nodeType":"Block","src":"4863:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:6","subExpression":{"id":3209,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"4882:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3211,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"4899:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3212,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"4914:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":3208,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3217,"nodeType":"ExpressionStatement","src":"4873:99:6"},{"expression":{"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3218,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"4982:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3219,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"4997:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3221,"nodeType":"ExpressionStatement","src":"4982:22:6"},{"expression":{"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3222,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"5014:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3225,"nodeType":"ExpressionStatement","src":"5014:20:6"},{"id":3226,"nodeType":"PlaceholderStatement","src":"5044:1:6"},{"expression":{"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3227,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"5055:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3230,"nodeType":"ExpressionStatement","src":"5055:21:6"},{"eventCall":{"arguments":[{"id":3232,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"5103:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3231,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"5091:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3234,"nodeType":"EmitStatement","src":"5086:25:6"}]},"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"3758:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":3236,"name":"reinitializer","nameLocation":"4834:13:6","nodeType":"ModifierDefinition","parameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"version","nameLocation":"4854:7:6","nodeType":"VariableDeclaration","scope":3236,"src":"4848:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3205,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:6"},"src":"4825:293:6","virtual":false,"visibility":"internal"},{"body":{"id":3245,"nodeType":"Block","src":"5356:97:6","statements":[{"expression":{"arguments":[{"id":3240,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"5374:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":3239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3243,"nodeType":"ExpressionStatement","src":"5366:69:6"},{"id":3244,"nodeType":"PlaceholderStatement","src":"5445:1:6"}]},"documentation":{"id":3237,"nodeType":"StructuredDocumentation","src":"5124:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":3246,"name":"onlyInitializing","nameLocation":"5337:16:6","nodeType":"ModifierDefinition","parameters":{"id":3238,"nodeType":"ParameterList","parameters":[],"src":"5353:2:6"},"src":"5328:125:6","virtual":false,"visibility":"internal"},{"body":{"id":3281,"nodeType":"Block","src":"5988:231:6","statements":[{"expression":{"arguments":[{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:6","subExpression":{"id":3251,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"6007:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":3250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3255,"nodeType":"ExpressionStatement","src":"5998:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"6078:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":3259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3258,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3257,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:6","memberName":"max","nodeType":"MemberAccess","src":"6094:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3280,"nodeType":"IfStatement","src":"6074:139:6","trueBody":{"id":3279,"nodeType":"Block","src":"6111:102:6","statements":[{"expression":{"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3263,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"6125:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":3266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3265,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3264,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:6","memberName":"max","nodeType":"MemberAccess","src":"6140:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3270,"nodeType":"ExpressionStatement","src":"6125:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":3274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3273,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3272,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:6","memberName":"max","nodeType":"MemberAccess","src":"6186:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3271,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"6174:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3278,"nodeType":"EmitStatement","src":"6169:33:6"}]}}]},"documentation":{"id":3247,"nodeType":"StructuredDocumentation","src":"5459:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":3282,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:6","nodeType":"FunctionDefinition","parameters":{"id":3248,"nodeType":"ParameterList","parameters":[],"src":"5968:2:6"},"returnParameters":{"id":3249,"nodeType":"ParameterList","parameters":[],"src":"5988:0:6"},"scope":3301,"src":"5939:280:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3290,"nodeType":"Block","src":"6393:36:6","statements":[{"expression":{"id":3288,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"6410:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3287,"id":3289,"nodeType":"Return","src":"6403:19:6"}]},"documentation":{"id":3283,"nodeType":"StructuredDocumentation","src":"6225:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":3291,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:6","nodeType":"FunctionDefinition","parameters":{"id":3284,"nodeType":"ParameterList","parameters":[],"src":"6360:2:6"},"returnParameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3291,"src":"6386:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3285,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:6"},"scope":3301,"src":"6329:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3299,"nodeType":"Block","src":"6601:37:6","statements":[{"expression":{"id":3297,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"6618:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3296,"id":3298,"nodeType":"Return","src":"6611:20:6"}]},"documentation":{"id":3292,"nodeType":"StructuredDocumentation","src":"6435:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":3300,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:6","nodeType":"FunctionDefinition","parameters":{"id":3293,"nodeType":"ParameterList","parameters":[],"src":"6569:2:6"},"returnParameters":{"id":3296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3300,"src":"6595:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3294,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:6"},"scope":3301,"src":"6545:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3302,"src":"2394:4246:6","usedErrors":[]}],"src":"113:6528:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[3379]},"id":3380,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3303,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"131:70:7","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3379,"linearizedBaseContracts":[3379],"name":"IERC20Upgradeable","nameLocation":"212:17:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3305,"nodeType":"StructuredDocumentation","src":"236:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3313,"name":"Transfer","nameLocation":"405:8:7","nodeType":"EventDefinition","parameters":{"id":3312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3307,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:7","nodeType":"VariableDeclaration","scope":3313,"src":"414:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3306,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3309,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:7","nodeType":"VariableDeclaration","scope":3313,"src":"436:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3308,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3311,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:7","nodeType":"VariableDeclaration","scope":3313,"src":"456:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3310,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:7"},"src":"399:72:7"},{"anonymous":false,"documentation":{"id":3314,"nodeType":"StructuredDocumentation","src":"477:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3322,"name":"Approval","nameLocation":"636:8:7","nodeType":"EventDefinition","parameters":{"id":3321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3316,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:7","nodeType":"VariableDeclaration","scope":3322,"src":"645:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3315,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3318,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:7","nodeType":"VariableDeclaration","scope":3322,"src":"668:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3317,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3320,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:7","nodeType":"VariableDeclaration","scope":3322,"src":"693:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3319,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:7"},"src":"630:78:7"},{"documentation":{"id":3323,"nodeType":"StructuredDocumentation","src":"714:66:7","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3328,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:7","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[],"src":"805:2:7"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3328,"src":"831:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3325,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:7"},"scope":3379,"src":"785:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3329,"nodeType":"StructuredDocumentation","src":"846:72:7","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3336,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:7","nodeType":"FunctionDefinition","parameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"account","nameLocation":"950:7:7","nodeType":"VariableDeclaration","scope":3336,"src":"942:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3330,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:7"},"returnParameters":{"id":3335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3336,"src":"982:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:7"},"scope":3379,"src":"923:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3337,"nodeType":"StructuredDocumentation","src":"997:202:7","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3346,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:7","nodeType":"FunctionDefinition","parameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3339,"mutability":"mutable","name":"to","nameLocation":"1230:2:7","nodeType":"VariableDeclaration","scope":3346,"src":"1222:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3338,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3341,"mutability":"mutable","name":"amount","nameLocation":"1242:6:7","nodeType":"VariableDeclaration","scope":3346,"src":"1234:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3340,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:7"},"returnParameters":{"id":3345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3346,"src":"1268:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3343,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:7"},"scope":3379,"src":"1204:70:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3347,"nodeType":"StructuredDocumentation","src":"1280:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3356,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:7","nodeType":"FunctionDefinition","parameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3349,"mutability":"mutable","name":"owner","nameLocation":"1576:5:7","nodeType":"VariableDeclaration","scope":3356,"src":"1568:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3348,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3351,"mutability":"mutable","name":"spender","nameLocation":"1591:7:7","nodeType":"VariableDeclaration","scope":3356,"src":"1583:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3350,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:7"},"returnParameters":{"id":3355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3356,"src":"1623:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:7"},"scope":3379,"src":"1549:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3357,"nodeType":"StructuredDocumentation","src":"1638:642:7","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3366,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:7","nodeType":"FunctionDefinition","parameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3359,"mutability":"mutable","name":"spender","nameLocation":"2310:7:7","nodeType":"VariableDeclaration","scope":3366,"src":"2302:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3358,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3361,"mutability":"mutable","name":"amount","nameLocation":"2327:6:7","nodeType":"VariableDeclaration","scope":3366,"src":"2319:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:7"},"returnParameters":{"id":3365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3366,"src":"2353:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3363,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:7"},"scope":3379,"src":"2285:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3367,"nodeType":"StructuredDocumentation","src":"2365:287:7","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3378,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:7","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"from","nameLocation":"2687:4:7","nodeType":"VariableDeclaration","scope":3378,"src":"2679:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"to","nameLocation":"2701:2:7","nodeType":"VariableDeclaration","scope":3378,"src":"2693:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"amount","nameLocation":"2713:6:7","nodeType":"VariableDeclaration","scope":3378,"src":"2705:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:7"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3378,"src":"2739:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3375,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:7"},"scope":3379,"src":"2657:88:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3380,"src":"202:2545:7","usedErrors":[]}],"src":"106:2642:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[3415]},"id":3416,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3381,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3382,"nodeType":"StructuredDocumentation","src":"148:1963:8","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":3415,"linearizedBaseContracts":[3415],"name":"IERC20PermitUpgradeable","nameLocation":"2122:23:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3383,"nodeType":"StructuredDocumentation","src":"2152:850:8","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":3400,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3016:6:8","nodeType":"FunctionDefinition","parameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3385,"mutability":"mutable","name":"owner","nameLocation":"3040:5:8","nodeType":"VariableDeclaration","scope":3400,"src":"3032:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3384,"name":"address","nodeType":"ElementaryTypeName","src":"3032:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3387,"mutability":"mutable","name":"spender","nameLocation":"3063:7:8","nodeType":"VariableDeclaration","scope":3400,"src":"3055:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3386,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3389,"mutability":"mutable","name":"value","nameLocation":"3088:5:8","nodeType":"VariableDeclaration","scope":3400,"src":"3080:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3388,"name":"uint256","nodeType":"ElementaryTypeName","src":"3080:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3391,"mutability":"mutable","name":"deadline","nameLocation":"3111:8:8","nodeType":"VariableDeclaration","scope":3400,"src":"3103:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3390,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"v","nameLocation":"3135:1:8","nodeType":"VariableDeclaration","scope":3400,"src":"3129:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3392,"name":"uint8","nodeType":"ElementaryTypeName","src":"3129:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3395,"mutability":"mutable","name":"r","nameLocation":"3154:1:8","nodeType":"VariableDeclaration","scope":3400,"src":"3146:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3146:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3397,"mutability":"mutable","name":"s","nameLocation":"3173:1:8","nodeType":"VariableDeclaration","scope":3400,"src":"3165:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3165:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3022:158:8"},"returnParameters":{"id":3399,"nodeType":"ParameterList","parameters":[],"src":"3189:0:8"},"scope":3415,"src":"3007:183:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3401,"nodeType":"StructuredDocumentation","src":"3196:294:8","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":3408,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3504:6:8","nodeType":"FunctionDefinition","parameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"owner","nameLocation":"3519:5:8","nodeType":"VariableDeclaration","scope":3408,"src":"3511:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3402,"name":"address","nodeType":"ElementaryTypeName","src":"3511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3510:15:8"},"returnParameters":{"id":3407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3408,"src":"3549:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3405,"name":"uint256","nodeType":"ElementaryTypeName","src":"3549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3548:9:8"},"scope":3415,"src":"3495:63:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3409,"nodeType":"StructuredDocumentation","src":"3564:128:8","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":3414,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3759:16:8","nodeType":"FunctionDefinition","parameters":{"id":3410,"nodeType":"ParameterList","parameters":[],"src":"3775:2:8"},"returnParameters":{"id":3413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3414,"src":"3801:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3801:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3800:9:8"},"scope":3415,"src":"3750:60:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3416,"src":"2112:1700:8","usedErrors":[]}],"src":"123:3690:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[4121],"IERC20PermitUpgradeable":[3415],"IERC20Upgradeable":[3379],"SafeERC20Upgradeable":[3791]},"id":3792,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3417,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":3418,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3792,"sourceUnit":3380,"src":"140:34:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":3419,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3792,"sourceUnit":3416,"src":"175:51:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":3420,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3792,"sourceUnit":4122,"src":"227:47:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"276:457:9","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3791,"linearizedBaseContracts":[3791],"name":"SafeERC20Upgradeable","nameLocation":"742:20:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3424,"libraryName":{"id":3422,"name":"AddressUpgradeable","nameLocations":["775:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":4121,"src":"775:18:9"},"nodeType":"UsingForDirective","src":"769:37:9","typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":3447,"nodeType":"Block","src":"1079:103:9","statements":[{"expression":{"arguments":[{"id":3436,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"1109:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3439,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"1139:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:9","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3346,"src":"1139:14:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:9","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3442,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"1164:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"1168:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3437,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3435,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"1089:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3446,"nodeType":"ExpressionStatement","src":"1089:86:9"}]},"documentation":{"id":3425,"nodeType":"StructuredDocumentation","src":"812:179:9","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3448,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:9","nodeType":"FunctionDefinition","parameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3428,"mutability":"mutable","name":"token","nameLocation":"1036:5:9","nodeType":"VariableDeclaration","scope":3448,"src":"1018:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3427,"nodeType":"UserDefinedTypeName","pathNode":{"id":3426,"name":"IERC20Upgradeable","nameLocations":["1018:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"1018:17:9"},"referencedDeclaration":3379,"src":"1018:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"to","nameLocation":"1051:2:9","nodeType":"VariableDeclaration","scope":3448,"src":"1043:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3429,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3432,"mutability":"mutable","name":"value","nameLocation":"1063:5:9","nodeType":"VariableDeclaration","scope":3448,"src":"1055:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:9"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[],"src":"1079:0:9"},"scope":3791,"src":"996:186:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3474,"nodeType":"Block","src":"1522:113:9","statements":[{"expression":{"arguments":[{"id":3462,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3452,"src":"1552:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3465,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3452,"src":"1582:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:9","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3378,"src":"1582:18:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:9","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3468,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1611:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3469,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"1617:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"1621:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3463,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3461,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"1532:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3473,"nodeType":"ExpressionStatement","src":"1532:96:9"}]},"documentation":{"id":3449,"nodeType":"StructuredDocumentation","src":"1188:228:9","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":3475,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:9","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"token","nameLocation":"1465:5:9","nodeType":"VariableDeclaration","scope":3475,"src":"1447:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3451,"nodeType":"UserDefinedTypeName","pathNode":{"id":3450,"name":"IERC20Upgradeable","nameLocations":["1447:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"1447:17:9"},"referencedDeclaration":3379,"src":"1447:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"from","nameLocation":"1480:4:9","nodeType":"VariableDeclaration","scope":3475,"src":"1472:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3453,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"to","nameLocation":"1494:2:9","nodeType":"VariableDeclaration","scope":3475,"src":"1486:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3455,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"value","nameLocation":"1506:5:9","nodeType":"VariableDeclaration","scope":3475,"src":"1498:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:9"},"returnParameters":{"id":3460,"nodeType":"ParameterList","parameters":[],"src":"1522:0:9"},"scope":3791,"src":"1421:214:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3518,"nodeType":"Block","src":"1982:497:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"2231:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3495,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}],"id":3494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3493,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:9","typeDescriptions":{}}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3497,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"2278:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3491,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2247:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:9","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3356,"src":"2247:15:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":3486,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3505,"nodeType":"ExpressionStatement","src":"2209:163:9"},{"expression":{"arguments":[{"id":3507,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2402:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3510,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"2432:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:9","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"2432:13:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:9","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3513,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"2456:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"2465:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3508,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3506,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"2382:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3517,"nodeType":"ExpressionStatement","src":"2382:90:9"}]},"documentation":{"id":3476,"nodeType":"StructuredDocumentation","src":"1641:249:9","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":3519,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:9","nodeType":"FunctionDefinition","parameters":{"id":3484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"token","nameLocation":"1934:5:9","nodeType":"VariableDeclaration","scope":3519,"src":"1916:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3478,"nodeType":"UserDefinedTypeName","pathNode":{"id":3477,"name":"IERC20Upgradeable","nameLocations":["1916:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"1916:17:9"},"referencedDeclaration":3379,"src":"1916:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3481,"mutability":"mutable","name":"spender","nameLocation":"1949:7:9","nodeType":"VariableDeclaration","scope":3519,"src":"1941:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3480,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3483,"mutability":"mutable","name":"value","nameLocation":"1966:5:9","nodeType":"VariableDeclaration","scope":3519,"src":"1958:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:9"},"returnParameters":{"id":3485,"nodeType":"ParameterList","parameters":[],"src":"1982:0:9"},"scope":3791,"src":"1895:584:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3555,"nodeType":"Block","src":"2767:194:9","statements":[{"assignments":[3531],"declarations":[{"constant":false,"id":3531,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:9","nodeType":"VariableDeclaration","scope":3555,"src":"2777:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3530,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3540,"initialValue":{"arguments":[{"arguments":[{"id":3536,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}],"id":3535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3534,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:9","typeDescriptions":{}}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3538,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"2831:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3532,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"2800:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:9","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3356,"src":"2800:15:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:9"},{"expression":{"arguments":[{"id":3542,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"2869:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"2899:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:9","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"2899:13:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:9","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3548,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"2923:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3549,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3531,"src":"2932:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"2947:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3543,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3541,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"2849:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3554,"nodeType":"ExpressionStatement","src":"2849:105:9"}]},"documentation":{"id":3520,"nodeType":"StructuredDocumentation","src":"2485:180:9","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3556,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:9","nodeType":"FunctionDefinition","parameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"token","nameLocation":"2719:5:9","nodeType":"VariableDeclaration","scope":3556,"src":"2701:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3522,"nodeType":"UserDefinedTypeName","pathNode":{"id":3521,"name":"IERC20Upgradeable","nameLocations":["2701:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"2701:17:9"},"referencedDeclaration":3379,"src":"2701:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3525,"mutability":"mutable","name":"spender","nameLocation":"2734:7:9","nodeType":"VariableDeclaration","scope":3556,"src":"2726:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3524,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"value","nameLocation":"2751:5:9","nodeType":"VariableDeclaration","scope":3556,"src":"2743:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:9"},"returnParameters":{"id":3529,"nodeType":"ParameterList","parameters":[],"src":"2767:0:9"},"scope":3791,"src":"2670:291:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3600,"nodeType":"Block","src":"3249:321:9","statements":[{"id":3599,"nodeType":"UncheckedBlock","src":"3259:305:9","statements":[{"assignments":[3568],"declarations":[{"constant":false,"id":3568,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:9","nodeType":"VariableDeclaration","scope":3599,"src":"3283:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3577,"initialValue":{"arguments":[{"arguments":[{"id":3573,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$3791","typeString":"library SafeERC20Upgradeable"}],"id":3572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3571,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:9","typeDescriptions":{}}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3575,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"3337:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3569,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"3306:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:9","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3356,"src":"3306:15:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3579,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"3367:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"3383:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3584,"nodeType":"ExpressionStatement","src":"3359:75:9"},{"expression":{"arguments":[{"id":3586,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"3468:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3589,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"3498:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:9","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"3498:13:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:9","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3592,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"3522:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3593,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"3531:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"3546:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3587,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3585,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"3448:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3598,"nodeType":"ExpressionStatement","src":"3448:105:9"}]}]},"documentation":{"id":3557,"nodeType":"StructuredDocumentation","src":"2967:180:9","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3601,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:9","nodeType":"FunctionDefinition","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"token","nameLocation":"3201:5:9","nodeType":"VariableDeclaration","scope":3601,"src":"3183:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3559,"nodeType":"UserDefinedTypeName","pathNode":{"id":3558,"name":"IERC20Upgradeable","nameLocations":["3183:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"3183:17:9"},"referencedDeclaration":3379,"src":"3183:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"spender","nameLocation":"3216:7:9","nodeType":"VariableDeclaration","scope":3601,"src":"3208:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"value","nameLocation":"3233:5:9","nodeType":"VariableDeclaration","scope":3601,"src":"3225:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3563,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:9"},"returnParameters":{"id":3566,"nodeType":"ParameterList","parameters":[],"src":"3249:0:9"},"scope":3791,"src":"3152:418:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3647,"nodeType":"Block","src":"3977:333:9","statements":[{"assignments":[3613],"declarations":[{"constant":false,"id":3613,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:9","nodeType":"VariableDeclaration","scope":3647,"src":"3987:25:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3612,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3622,"initialValue":{"arguments":[{"expression":{"expression":{"id":3616,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4038:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:9","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"4038:13:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:9","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3619,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"4062:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"4071:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3614,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:9"},{"condition":{"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:9","subExpression":{"arguments":[{"id":3624,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4117:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"id":3625,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"4124:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3623,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"4093:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3646,"nodeType":"IfStatement","src":"4088:216:9","trueBody":{"id":3645,"nodeType":"Block","src":"4139:165:9","statements":[{"expression":{"arguments":[{"id":3629,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4173:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":3632,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4203:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:9","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3366,"src":"4203:13:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:9","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3635,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"4227:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3630,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:9","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3628,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"4153:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3639,"nodeType":"ExpressionStatement","src":"4153:86:9"},{"expression":{"arguments":[{"id":3641,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4273:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},{"id":3642,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"4280:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3640,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"4253:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3644,"nodeType":"ExpressionStatement","src":"4253:40:9"}]}}]},"documentation":{"id":3602,"nodeType":"StructuredDocumentation","src":"3576:308:9","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":3648,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:9","nodeType":"FunctionDefinition","parameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3605,"mutability":"mutable","name":"token","nameLocation":"3929:5:9","nodeType":"VariableDeclaration","scope":3648,"src":"3911:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3604,"nodeType":"UserDefinedTypeName","pathNode":{"id":3603,"name":"IERC20Upgradeable","nameLocations":["3911:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"3911:17:9"},"referencedDeclaration":3379,"src":"3911:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3607,"mutability":"mutable","name":"spender","nameLocation":"3944:7:9","nodeType":"VariableDeclaration","scope":3648,"src":"3936:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3606,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3609,"mutability":"mutable","name":"value","nameLocation":"3961:5:9","nodeType":"VariableDeclaration","scope":3648,"src":"3953:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3608,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:9"},"returnParameters":{"id":3611,"nodeType":"ParameterList","parameters":[],"src":"3977:0:9"},"scope":3791,"src":"3889:421:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3704,"nodeType":"Block","src":"4688:257:9","statements":[{"assignments":[3670],"declarations":[{"constant":false,"id":3670,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:9","nodeType":"VariableDeclaration","scope":3704,"src":"4698:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3675,"initialValue":{"arguments":[{"id":3673,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"4733:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3671,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"4720:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$3415","typeString":"contract IERC20PermitUpgradeable"}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:9","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3408,"src":"4720:12:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:9"},{"expression":{"arguments":[{"id":3679,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"4762:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3680,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"4769:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"4778:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3682,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"4785:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3683,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"4795:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3684,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"4798:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3685,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"4801:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3676,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"4749:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$3415","typeString":"contract IERC20PermitUpgradeable"}},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:9","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":3400,"src":"4749:12:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"4749:54:9"},{"assignments":[3689],"declarations":[{"constant":false,"id":3689,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:9","nodeType":"VariableDeclaration","scope":3704,"src":"4813:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3694,"initialValue":{"arguments":[{"id":3692,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"4847:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3690,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"4834:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$3415","typeString":"contract IERC20PermitUpgradeable"}},"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:9","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3408,"src":"4834:12:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"4871:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3697,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"4885:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":3695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3703,"nodeType":"ExpressionStatement","src":"4863:75:9"}]},"documentation":{"id":3649,"nodeType":"StructuredDocumentation","src":"4316:141:9","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":3705,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:9","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"mutability":"mutable","name":"token","nameLocation":"4515:5:9","nodeType":"VariableDeclaration","scope":3705,"src":"4491:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$3415","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":3651,"nodeType":"UserDefinedTypeName","pathNode":{"id":3650,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:9"],"nodeType":"IdentifierPath","referencedDeclaration":3415,"src":"4491:23:9"},"referencedDeclaration":3415,"src":"4491:23:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$3415","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":3654,"mutability":"mutable","name":"owner","nameLocation":"4538:5:9","nodeType":"VariableDeclaration","scope":3705,"src":"4530:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3653,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3656,"mutability":"mutable","name":"spender","nameLocation":"4561:7:9","nodeType":"VariableDeclaration","scope":3705,"src":"4553:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3658,"mutability":"mutable","name":"value","nameLocation":"4586:5:9","nodeType":"VariableDeclaration","scope":3705,"src":"4578:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3657,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3660,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:9","nodeType":"VariableDeclaration","scope":3705,"src":"4601:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3659,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"v","nameLocation":"4633:1:9","nodeType":"VariableDeclaration","scope":3705,"src":"4627:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3661,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3664,"mutability":"mutable","name":"r","nameLocation":"4652:1:9","nodeType":"VariableDeclaration","scope":3705,"src":"4644:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"s","nameLocation":"4671:1:9","nodeType":"VariableDeclaration","scope":3705,"src":"4663:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:9"},"returnParameters":{"id":3668,"nodeType":"ParameterList","parameters":[],"src":"4688:0:9"},"scope":3791,"src":"4462:483:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3741,"nodeType":"Block","src":"5409:572:9","statements":[{"assignments":[3715],"declarations":[{"constant":false,"id":3715,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:9","nodeType":"VariableDeclaration","scope":3741,"src":"5758:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3714,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3724,"initialValue":{"arguments":[{"id":3721,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"5812:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3718,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"5792:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}],"id":3717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3716,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:9","typeDescriptions":{}}},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:9","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3881,"src":"5784:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3726,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"5871:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:9","memberName":"length","nodeType":"MemberAccess","src":"5871:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3732,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"5908:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3733,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:9","typeDescriptions":{}}}],"id":3735,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3730,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:9","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3725,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3740,"nodeType":"ExpressionStatement","src":"5863:111:9"}]},"documentation":{"id":3706,"nodeType":"StructuredDocumentation","src":"4951:372:9","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3742,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:9","nodeType":"FunctionDefinition","parameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"token","nameLocation":"5375:5:9","nodeType":"VariableDeclaration","scope":3742,"src":"5357:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3708,"nodeType":"UserDefinedTypeName","pathNode":{"id":3707,"name":"IERC20Upgradeable","nameLocations":["5357:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"5357:17:9"},"referencedDeclaration":3379,"src":"5357:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3711,"mutability":"mutable","name":"data","nameLocation":"5395:4:9","nodeType":"VariableDeclaration","scope":3742,"src":"5382:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3710,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:9"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[],"src":"5409:0:9"},"scope":3791,"src":"5328:653:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3789,"nodeType":"Block","src":"6582:516:9","statements":[{"assignments":[3754,3756],"declarations":[{"constant":false,"id":3754,"mutability":"mutable","name":"success","nameLocation":"6883:7:9","nodeType":"VariableDeclaration","scope":3789,"src":"6878:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3753,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3756,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:9","nodeType":"VariableDeclaration","scope":3789,"src":"6892:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3755,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3764,"initialValue":{"arguments":[{"id":3762,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"6939:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3759,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"6927:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}],"id":3758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3757,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:9","typeDescriptions":{}}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:9","memberName":"call","nodeType":"MemberAccess","src":"6919:19:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:9"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3765,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"6973:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3766,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"6985:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:9","memberName":"length","nodeType":"MemberAccess","src":"6985:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3772,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"7022:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3773,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:9","typeDescriptions":{}}}],"id":3775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3770,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:9","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:9","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3778,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":3784,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"7084:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}],"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:9","typeDescriptions":{}}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3780,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"7046:18:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$4121_$","typeString":"type(library AddressUpgradeable)"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:9","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3809,"src":"7046:29:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3752,"id":3788,"nodeType":"Return","src":"6954:137:9"}]},"documentation":{"id":3743,"nodeType":"StructuredDocumentation","src":"5987:490:9","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":3790,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:9","nodeType":"FunctionDefinition","parameters":{"id":3749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3746,"mutability":"mutable","name":"token","nameLocation":"6533:5:9","nodeType":"VariableDeclaration","scope":3790,"src":"6515:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":3745,"nodeType":"UserDefinedTypeName","pathNode":{"id":3744,"name":"IERC20Upgradeable","nameLocations":["6515:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"6515:17:9"},"referencedDeclaration":3379,"src":"6515:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":3748,"mutability":"mutable","name":"data","nameLocation":"6553:4:9","nodeType":"VariableDeclaration","scope":3790,"src":"6540:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3747,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:9"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3790,"src":"6576:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3750,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:9"},"scope":3791,"src":"6482:616:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3792,"src":"734:6366:9","usedErrors":[]}],"src":"115:6986:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[4121]},"id":4122,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3793,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"126:67:10","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4121,"linearizedBaseContracts":[4121],"name":"AddressUpgradeable","nameLocation":"202:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":3808,"nodeType":"Block","src":"1489:254:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3802,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"1713:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:10","memberName":"code","nodeType":"MemberAccess","src":"1713:12:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:10","memberName":"length","nodeType":"MemberAccess","src":"1713:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3801,"id":3807,"nodeType":"Return","src":"1706:30:10"}]},"documentation":{"id":3795,"nodeType":"StructuredDocumentation","src":"227:1191:10","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3809,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:10","nodeType":"FunctionDefinition","parameters":{"id":3798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3797,"mutability":"mutable","name":"account","nameLocation":"1451:7:10","nodeType":"VariableDeclaration","scope":3809,"src":"1443:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3796,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:10"},"returnParameters":{"id":3801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3809,"src":"1483:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3799,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:10"},"scope":4121,"src":"1423:320:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3842,"nodeType":"Block","src":"2729:241:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3820,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$4121","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$4121","typeString":"library AddressUpgradeable"}],"id":3819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3818,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:10","typeDescriptions":{}}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:10","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3823,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2772:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3827,"nodeType":"ExpressionStatement","src":"2739:73:10"},{"assignments":[3829,null],"declarations":[{"constant":false,"id":3829,"mutability":"mutable","name":"success","nameLocation":"2829:7:10","nodeType":"VariableDeclaration","scope":3842,"src":"2824:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3828,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3836,"initialValue":{"arguments":[{"hexValue":"","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3830,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"2842:9:10","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:10","memberName":"call","nodeType":"MemberAccess","src":"2842:14:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3832,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2864:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:10"},{"expression":{"arguments":[{"id":3838,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"2893:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3841,"nodeType":"ExpressionStatement","src":"2885:78:10"}]},"documentation":{"id":3810,"nodeType":"StructuredDocumentation","src":"1749:904:10","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3843,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:10","nodeType":"FunctionDefinition","parameters":{"id":3815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3812,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:10","nodeType":"VariableDeclaration","scope":3843,"src":"2677:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3811,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:10","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3814,"mutability":"mutable","name":"amount","nameLocation":"2712:6:10","nodeType":"VariableDeclaration","scope":3843,"src":"2704:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:10"},"returnParameters":{"id":3816,"nodeType":"ParameterList","parameters":[],"src":"2729:0:10"},"scope":4121,"src":"2658:312:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3860,"nodeType":"Block","src":"3801:96:10","statements":[{"expression":{"arguments":[{"id":3854,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3846,"src":"3840:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3855,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3848,"src":"3848:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3853,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3901,3945],"referencedDeclaration":3945,"src":"3818:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3852,"id":3859,"nodeType":"Return","src":"3811:79:10"}]},"documentation":{"id":3844,"nodeType":"StructuredDocumentation","src":"2976:731:10","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3861,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:10","nodeType":"FunctionDefinition","parameters":{"id":3849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3846,"mutability":"mutable","name":"target","nameLocation":"3742:6:10","nodeType":"VariableDeclaration","scope":3861,"src":"3734:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3845,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3848,"mutability":"mutable","name":"data","nameLocation":"3763:4:10","nodeType":"VariableDeclaration","scope":3861,"src":"3750:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3847,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:10"},"returnParameters":{"id":3852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3861,"src":"3787:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3850,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:10"},"scope":4121,"src":"3712:185:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3880,"nodeType":"Block","src":"4266:76:10","statements":[{"expression":{"arguments":[{"id":3874,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"4305:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3875,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"4313:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3877,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"4322:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3873,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3901,3945],"referencedDeclaration":3945,"src":"4283:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3872,"id":3879,"nodeType":"Return","src":"4276:59:10"}]},"documentation":{"id":3862,"nodeType":"StructuredDocumentation","src":"3903:211:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3881,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:10","nodeType":"FunctionDefinition","parameters":{"id":3869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3864,"mutability":"mutable","name":"target","nameLocation":"4158:6:10","nodeType":"VariableDeclaration","scope":3881,"src":"4150:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3863,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3866,"mutability":"mutable","name":"data","nameLocation":"4187:4:10","nodeType":"VariableDeclaration","scope":3881,"src":"4174:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3865,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3868,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:10","nodeType":"VariableDeclaration","scope":3881,"src":"4201:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3867,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:10"},"returnParameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3881,"src":"4252:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3870,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:10"},"scope":4121,"src":"4119:223:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3900,"nodeType":"Block","src":"4817:111:10","statements":[{"expression":{"arguments":[{"id":3894,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4856:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3895,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"4864:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"4870:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3893,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3901,3945],"referencedDeclaration":3945,"src":"4834:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3892,"id":3899,"nodeType":"Return","src":"4827:94:10"}]},"documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"4348:351:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3901,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:10","nodeType":"FunctionDefinition","parameters":{"id":3889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"target","nameLocation":"4743:6:10","nodeType":"VariableDeclaration","scope":3901,"src":"4735:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3883,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3886,"mutability":"mutable","name":"data","nameLocation":"4764:4:10","nodeType":"VariableDeclaration","scope":3901,"src":"4751:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3885,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3888,"mutability":"mutable","name":"value","nameLocation":"4778:5:10","nodeType":"VariableDeclaration","scope":3901,"src":"4770:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:10"},"returnParameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3901,"src":"4803:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3890,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:10"},"scope":4121,"src":"4704:224:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3944,"nodeType":"Block","src":"5355:267:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3918,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$4121","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$4121","typeString":"library AddressUpgradeable"}],"id":3917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3916,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:10","typeDescriptions":{}}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:10","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"5398:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3915,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3925,"nodeType":"ExpressionStatement","src":"5365:81:10"},{"assignments":[3927,3929],"declarations":[{"constant":false,"id":3927,"mutability":"mutable","name":"success","nameLocation":"5462:7:10","nodeType":"VariableDeclaration","scope":3944,"src":"5457:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3926,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3929,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:10","nodeType":"VariableDeclaration","scope":3944,"src":"5471:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3928,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3936,"initialValue":{"arguments":[{"id":3934,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"5524:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3930,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"5498:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:10","memberName":"call","nodeType":"MemberAccess","src":"5498:11:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"5517:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:10"},{"expression":{"arguments":[{"id":3938,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"5573:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3939,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"5581:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3940,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"5590:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3941,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"5602:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3937,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"5546:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3914,"id":3943,"nodeType":"Return","src":"5539:76:10"}]},"documentation":{"id":3902,"nodeType":"StructuredDocumentation","src":"4934:237:10","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3945,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:10","nodeType":"FunctionDefinition","parameters":{"id":3911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"target","nameLocation":"5224:6:10","nodeType":"VariableDeclaration","scope":3945,"src":"5216:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"data","nameLocation":"5253:4:10","nodeType":"VariableDeclaration","scope":3945,"src":"5240:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3905,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"value","nameLocation":"5275:5:10","nodeType":"VariableDeclaration","scope":3945,"src":"5267:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:10","nodeType":"VariableDeclaration","scope":3945,"src":"5290:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3909,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:10"},"returnParameters":{"id":3914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3945,"src":"5341:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3912,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:10"},"scope":4121,"src":"5176:446:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3961,"nodeType":"Block","src":"5899:97:10","statements":[{"expression":{"arguments":[{"id":3956,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"5935:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3957,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"5943:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3955,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3962,3991],"referencedDeclaration":3991,"src":"5916:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3954,"id":3960,"nodeType":"Return","src":"5909:80:10"}]},"documentation":{"id":3946,"nodeType":"StructuredDocumentation","src":"5628:166:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3962,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:10","nodeType":"FunctionDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"target","nameLocation":"5835:6:10","nodeType":"VariableDeclaration","scope":3962,"src":"5827:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"data","nameLocation":"5856:4:10","nodeType":"VariableDeclaration","scope":3962,"src":"5843:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3949,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:10"},"returnParameters":{"id":3954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3962,"src":"5885:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3952,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:10"},"scope":4121,"src":"5799:197:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3990,"nodeType":"Block","src":"6338:168:10","statements":[{"assignments":[3975,3977],"declarations":[{"constant":false,"id":3975,"mutability":"mutable","name":"success","nameLocation":"6354:7:10","nodeType":"VariableDeclaration","scope":3990,"src":"6349:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3974,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:10","nodeType":"VariableDeclaration","scope":3990,"src":"6363:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3976,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3982,"initialValue":{"arguments":[{"id":3980,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"6408:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3978,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"6390:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:10","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:10","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:10"},{"expression":{"arguments":[{"id":3984,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"6457:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3985,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"6465:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3986,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"6474:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3987,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"6486:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3983,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"6430:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3973,"id":3989,"nodeType":"Return","src":"6423:76:10"}]},"documentation":{"id":3963,"nodeType":"StructuredDocumentation","src":"6002:173:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3991,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:10","nodeType":"FunctionDefinition","parameters":{"id":3970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3965,"mutability":"mutable","name":"target","nameLocation":"6225:6:10","nodeType":"VariableDeclaration","scope":3991,"src":"6217:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3964,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3967,"mutability":"mutable","name":"data","nameLocation":"6254:4:10","nodeType":"VariableDeclaration","scope":3991,"src":"6241:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3966,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3969,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:10","nodeType":"VariableDeclaration","scope":3991,"src":"6268:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3968,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:10"},"returnParameters":{"id":3973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3991,"src":"6324:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3971,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:10"},"scope":4121,"src":"6180:326:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4007,"nodeType":"Block","src":"6782:101:10","statements":[{"expression":{"arguments":[{"id":4002,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"6820:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4003,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6828:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":4004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":4001,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[4008,4037],"referencedDeclaration":4037,"src":"6799:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4000,"id":4006,"nodeType":"Return","src":"6792:84:10"}]},"documentation":{"id":3992,"nodeType":"StructuredDocumentation","src":"6512:168:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4008,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:10","nodeType":"FunctionDefinition","parameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3994,"mutability":"mutable","name":"target","nameLocation":"6723:6:10","nodeType":"VariableDeclaration","scope":4008,"src":"6715:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3993,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3996,"mutability":"mutable","name":"data","nameLocation":"6744:4:10","nodeType":"VariableDeclaration","scope":4008,"src":"6731:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3995,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:10"},"returnParameters":{"id":4000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4008,"src":"6768:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3998,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:10"},"scope":4121,"src":"6685:198:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4036,"nodeType":"Block","src":"7224:170:10","statements":[{"assignments":[4021,4023],"declarations":[{"constant":false,"id":4021,"mutability":"mutable","name":"success","nameLocation":"7240:7:10","nodeType":"VariableDeclaration","scope":4036,"src":"7235:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4020,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4023,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:10","nodeType":"VariableDeclaration","scope":4036,"src":"7249:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4022,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4028,"initialValue":{"arguments":[{"id":4026,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"7296:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4024,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"7276:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:10","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:10","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:10"},{"expression":{"arguments":[{"id":4030,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"7345:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4031,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"7353:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4032,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4023,"src":"7362:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4033,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"7374:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4029,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"7318:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4019,"id":4035,"nodeType":"Return","src":"7311:76:10"}]},"documentation":{"id":4009,"nodeType":"StructuredDocumentation","src":"6889:175:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4037,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:10","nodeType":"FunctionDefinition","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"target","nameLocation":"7116:6:10","nodeType":"VariableDeclaration","scope":4037,"src":"7108:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4010,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4013,"mutability":"mutable","name":"data","nameLocation":"7145:4:10","nodeType":"VariableDeclaration","scope":4037,"src":"7132:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4012,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4015,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:10","nodeType":"VariableDeclaration","scope":4037,"src":"7159:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4014,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:10"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4037,"src":"7210:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4017,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:10"},"scope":4121,"src":"7069:325:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4075,"nodeType":"Block","src":"7876:434:10","statements":[{"condition":{"id":4051,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"7890:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4073,"nodeType":"Block","src":"8246:58:10","statements":[{"expression":{"arguments":[{"id":4069,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"8268:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4070,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4046,"src":"8280:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4068,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"8260:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4072,"nodeType":"ExpressionStatement","src":"8260:33:10"}]},"id":4074,"nodeType":"IfStatement","src":"7886:418:10","trueBody":{"id":4067,"nodeType":"Block","src":"7899:341:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4052,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"7917:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:10","memberName":"length","nodeType":"MemberAccess","src":"7917:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4064,"nodeType":"IfStatement","src":"7913:286:10","trueBody":{"id":4063,"nodeType":"Block","src":"7941:258:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":4058,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"8143:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4057,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"8132:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":4056,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4062,"nodeType":"ExpressionStatement","src":"8124:60:10"}]}},{"expression":{"id":4065,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"8219:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4050,"id":4066,"nodeType":"Return","src":"8212:17:10"}]}}]},"documentation":{"id":4038,"nodeType":"StructuredDocumentation","src":"7400:277:10","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":4076,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:10","nodeType":"FunctionDefinition","parameters":{"id":4047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4040,"mutability":"mutable","name":"target","nameLocation":"7735:6:10","nodeType":"VariableDeclaration","scope":4076,"src":"7727:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4039,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4042,"mutability":"mutable","name":"success","nameLocation":"7756:7:10","nodeType":"VariableDeclaration","scope":4076,"src":"7751:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4041,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4044,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:10","nodeType":"VariableDeclaration","scope":4076,"src":"7773:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4043,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4046,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:10","nodeType":"VariableDeclaration","scope":4076,"src":"7806:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4045,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:10"},"returnParameters":{"id":4050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4076,"src":"7862:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4048,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:10"},"scope":4121,"src":"7682:628:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4099,"nodeType":"Block","src":"8691:135:10","statements":[{"condition":{"id":4088,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"8705:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4097,"nodeType":"Block","src":"8762:58:10","statements":[{"expression":{"arguments":[{"id":4093,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"8784:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4094,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"8796:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4092,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4120,"src":"8776:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4096,"nodeType":"ExpressionStatement","src":"8776:33:10"}]},"id":4098,"nodeType":"IfStatement","src":"8701:119:10","trueBody":{"id":4091,"nodeType":"Block","src":"8714:42:10","statements":[{"expression":{"id":4089,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"8735:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4087,"id":4090,"nodeType":"Return","src":"8728:17:10"}]}}]},"documentation":{"id":4077,"nodeType":"StructuredDocumentation","src":"8316:210:10","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":4100,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:10","nodeType":"FunctionDefinition","parameters":{"id":4084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4079,"mutability":"mutable","name":"success","nameLocation":"8571:7:10","nodeType":"VariableDeclaration","scope":4100,"src":"8566:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4078,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4081,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:10","nodeType":"VariableDeclaration","scope":4100,"src":"8588:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4080,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4083,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:10","nodeType":"VariableDeclaration","scope":4100,"src":"8621:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4082,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:10"},"returnParameters":{"id":4087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4100,"src":"8677:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4085,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:10"},"scope":4121,"src":"8531:295:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4119,"nodeType":"Block","src":"8915:457:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4107,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"8991:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:10","memberName":"length","nodeType":"MemberAccess","src":"8991:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4117,"nodeType":"Block","src":"9321:45:10","statements":[{"expression":{"arguments":[{"id":4114,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"9342:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4113,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4116,"nodeType":"ExpressionStatement","src":"9335:20:10"}]},"id":4118,"nodeType":"IfStatement","src":"8987:379:10","trueBody":{"id":4112,"nodeType":"Block","src":"9014:301:10","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:10","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:10","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:10"},"nodeType":"YulFunctionCall","src":"9213:17:10"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:10","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:10","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:10"},"nodeType":"YulFunctionCall","src":"9254:19:10"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:10"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:10"},"nodeType":"YulFunctionCall","src":"9247:44:10"},"nodeType":"YulExpressionStatement","src":"9247:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4102,"isOffset":false,"isSlot":false,"src":"9219:10:10","valueSize":1},{"declaration":4102,"isOffset":false,"isSlot":false,"src":"9262:10:10","valueSize":1}],"id":4111,"nodeType":"InlineAssembly","src":"9163:142:10"}]}}]},"id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:10","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:10","nodeType":"VariableDeclaration","scope":4120,"src":"8849:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4101,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:10","nodeType":"VariableDeclaration","scope":4120,"src":"8874:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4103,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:10"},"returnParameters":{"id":4106,"nodeType":"ParameterList","parameters":[],"src":"8915:0:10"},"scope":4121,"src":"8832:540:10","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4122,"src":"194:9180:10","usedErrors":[]}],"src":"101:9274:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[4172],"Initializable":[3301]},"id":4173,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4123,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":4125,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4173,"sourceUnit":3302,"src":"125:63:11","symbolAliases":[{"foreign":{"id":4124,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"133:13:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4127,"name":"Initializable","nameLocations":["727:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":3301,"src":"727:13:11"},"id":4128,"nodeType":"InheritanceSpecifier","src":"727:13:11"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4126,"nodeType":"StructuredDocumentation","src":"190:496:11","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4172,"linearizedBaseContracts":[4172,3301],"name":"ContextUpgradeable","nameLocation":"705:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":4133,"nodeType":"Block","src":"799:7:11","statements":[]},"id":4134,"implemented":true,"kind":"function","modifiers":[{"id":4131,"kind":"modifierInvocation","modifierName":{"id":4130,"name":"onlyInitializing","nameLocations":["782:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"782:16:11"},"nodeType":"ModifierInvocation","src":"782:16:11"}],"name":"__Context_init","nameLocation":"756:14:11","nodeType":"FunctionDefinition","parameters":{"id":4129,"nodeType":"ParameterList","parameters":[],"src":"770:2:11"},"returnParameters":{"id":4132,"nodeType":"ParameterList","parameters":[],"src":"799:0:11"},"scope":4172,"src":"747:59:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4139,"nodeType":"Block","src":"874:7:11","statements":[]},"id":4140,"implemented":true,"kind":"function","modifiers":[{"id":4137,"kind":"modifierInvocation","modifierName":{"id":4136,"name":"onlyInitializing","nameLocations":["857:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"857:16:11"},"nodeType":"ModifierInvocation","src":"857:16:11"}],"name":"__Context_init_unchained","nameLocation":"821:24:11","nodeType":"FunctionDefinition","parameters":{"id":4135,"nodeType":"ParameterList","parameters":[],"src":"845:2:11"},"returnParameters":{"id":4138,"nodeType":"ParameterList","parameters":[],"src":"874:0:11"},"scope":4172,"src":"812:69:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4148,"nodeType":"Block","src":"948:34:11","statements":[{"expression":{"expression":{"id":4145,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"969:6:11","memberName":"sender","nodeType":"MemberAccess","src":"965:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4144,"id":4147,"nodeType":"Return","src":"958:17:11"}]},"id":4149,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:11","nodeType":"FunctionDefinition","parameters":{"id":4141,"nodeType":"ParameterList","parameters":[],"src":"905:2:11"},"returnParameters":{"id":4144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4149,"src":"939:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4142,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:11"},"scope":4172,"src":"886:96:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4157,"nodeType":"Block","src":"1055:32:11","statements":[{"expression":{"expression":{"id":4154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:4:11","memberName":"data","nodeType":"MemberAccess","src":"1072:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4153,"id":4156,"nodeType":"Return","src":"1065:15:11"}]},"id":4158,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:11","nodeType":"FunctionDefinition","parameters":{"id":4150,"nodeType":"ParameterList","parameters":[],"src":"1005:2:11"},"returnParameters":{"id":4153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4158,"src":"1039:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4151,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:11"},"scope":4172,"src":"988:99:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4165,"nodeType":"Block","src":"1165:25:11","statements":[{"expression":{"hexValue":"30","id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4162,"id":4164,"nodeType":"Return","src":"1175:8:11"}]},"id":4166,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:11","nodeType":"FunctionDefinition","parameters":{"id":4159,"nodeType":"ParameterList","parameters":[],"src":"1122:2:11"},"returnParameters":{"id":4162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4166,"src":"1156:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:11"},"scope":4172,"src":"1093:97:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":4167,"nodeType":"StructuredDocumentation","src":"1196:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":4171,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:11","nodeType":"VariableDeclaration","scope":4172,"src":"1455:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":4168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4170,"length":{"hexValue":"3530","id":4169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":4173,"src":"687:796:11","usedErrors":[]}],"src":"101:1383:11"},"id":11},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[4380],"Ownable":[4285]},"id":4286,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4174,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":4175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4286,"sourceUnit":4381,"src":"127:30:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4177,"name":"Context","nameLocations":["683:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":4380,"src":"683:7:12"},"id":4178,"nodeType":"InheritanceSpecifier","src":"683:7:12"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"159:494:12","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":4285,"linearizedBaseContracts":[4285,4380],"name":"Ownable","nameLocation":"672:7:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4180,"mutability":"mutable","name":"_owner","nameLocation":"713:6:12","nodeType":"VariableDeclaration","scope":4285,"src":"697:22:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4179,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":4186,"name":"OwnershipTransferred","nameLocation":"732:20:12","nodeType":"EventDefinition","parameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4182,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:12","nodeType":"VariableDeclaration","scope":4186,"src":"753:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4181,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4184,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:12","nodeType":"VariableDeclaration","scope":4186,"src":"784:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4183,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:12"},"src":"726:84:12"},{"body":{"id":4195,"nodeType":"Block","src":"926:49:12","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4191,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4362,"src":"955:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4190,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"936:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4194,"nodeType":"ExpressionStatement","src":"936:32:12"}]},"documentation":{"id":4187,"nodeType":"StructuredDocumentation","src":"816:91:12","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":4196,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4188,"nodeType":"ParameterList","parameters":[],"src":"923:2:12"},"returnParameters":{"id":4189,"nodeType":"ParameterList","parameters":[],"src":"926:0:12"},"scope":4285,"src":"912:63:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4203,"nodeType":"Block","src":"1084:41:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4199,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"1094:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4201,"nodeType":"ExpressionStatement","src":"1094:13:12"},{"id":4202,"nodeType":"PlaceholderStatement","src":"1117:1:12"}]},"documentation":{"id":4197,"nodeType":"StructuredDocumentation","src":"981:77:12","text":" @dev Throws if called by any account other than the owner."},"id":4204,"name":"onlyOwner","nameLocation":"1072:9:12","nodeType":"ModifierDefinition","parameters":{"id":4198,"nodeType":"ParameterList","parameters":[],"src":"1081:2:12"},"src":"1063:62:12","virtual":false,"visibility":"internal"},{"body":{"id":4212,"nodeType":"Block","src":"1256:30:12","statements":[{"expression":{"id":4210,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"1273:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4209,"id":4211,"nodeType":"Return","src":"1266:13:12"}]},"documentation":{"id":4205,"nodeType":"StructuredDocumentation","src":"1131:65:12","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":4213,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:12","nodeType":"FunctionDefinition","parameters":{"id":4206,"nodeType":"ParameterList","parameters":[],"src":"1215:2:12"},"returnParameters":{"id":4209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4213,"src":"1247:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4207,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:12"},"scope":4285,"src":"1201:85:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4226,"nodeType":"Block","src":"1404:85:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4218,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4213,"src":"1422:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4362,"src":"1433:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":4223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":4217,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4225,"nodeType":"ExpressionStatement","src":"1414:68:12"}]},"documentation":{"id":4214,"nodeType":"StructuredDocumentation","src":"1292:62:12","text":" @dev Throws if the sender is not the owner."},"id":4227,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:12","nodeType":"FunctionDefinition","parameters":{"id":4215,"nodeType":"ParameterList","parameters":[],"src":"1379:2:12"},"returnParameters":{"id":4216,"nodeType":"ParameterList","parameters":[],"src":"1404:0:12"},"scope":4285,"src":"1359:130:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4240,"nodeType":"Block","src":"1878:47:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4234,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:12","typeDescriptions":{}}},"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4233,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"1888:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4239,"nodeType":"ExpressionStatement","src":"1888:30:12"}]},"documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"1495:324:12","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":4241,"implemented":true,"kind":"function","modifiers":[{"id":4231,"kind":"modifierInvocation","modifierName":{"id":4230,"name":"onlyOwner","nameLocations":["1868:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"1868:9:12"},"nodeType":"ModifierInvocation","src":"1868:9:12"}],"name":"renounceOwnership","nameLocation":"1833:17:12","nodeType":"FunctionDefinition","parameters":{"id":4229,"nodeType":"ParameterList","parameters":[],"src":"1850:2:12"},"returnParameters":{"id":4232,"nodeType":"ParameterList","parameters":[],"src":"1878:0:12"},"scope":4285,"src":"1824:101:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":4263,"nodeType":"Block","src":"2144:128:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"2162:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4251,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:12","typeDescriptions":{}}},"id":4254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":4249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4258,"nodeType":"ExpressionStatement","src":"2154:73:12"},{"expression":{"arguments":[{"id":4260,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"2256:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4259,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"2237:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4262,"nodeType":"ExpressionStatement","src":"2237:28:12"}]},"documentation":{"id":4242,"nodeType":"StructuredDocumentation","src":"1931:138:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":4264,"implemented":true,"kind":"function","modifiers":[{"id":4247,"kind":"modifierInvocation","modifierName":{"id":4246,"name":"onlyOwner","nameLocations":["2134:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":4204,"src":"2134:9:12"},"nodeType":"ModifierInvocation","src":"2134:9:12"}],"name":"transferOwnership","nameLocation":"2083:17:12","nodeType":"FunctionDefinition","parameters":{"id":4245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4244,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:12","nodeType":"VariableDeclaration","scope":4264,"src":"2101:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4243,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:12"},"returnParameters":{"id":4248,"nodeType":"ParameterList","parameters":[],"src":"2144:0:12"},"scope":4285,"src":"2074:198:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":4283,"nodeType":"Block","src":"2489:124:12","statements":[{"assignments":[4271],"declarations":[{"constant":false,"id":4271,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:12","nodeType":"VariableDeclaration","scope":4283,"src":"2499:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4270,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4273,"initialValue":{"id":4272,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"2518:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:12"},{"expression":{"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4274,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"2534:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"2543:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4277,"nodeType":"ExpressionStatement","src":"2534:17:12"},{"eventCall":{"arguments":[{"id":4279,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"2587:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"2597:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4278,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"2566:20:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4282,"nodeType":"EmitStatement","src":"2561:45:12"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"2278:143:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":4284,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:12","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:12","nodeType":"VariableDeclaration","scope":4284,"src":"2454:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4266,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:12"},"returnParameters":{"id":4269,"nodeType":"ParameterList","parameters":[],"src":"2489:0:12"},"scope":4285,"src":"2426:187:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4286,"src":"654:1961:12","usedErrors":[]}],"src":"102:2514:12"},"id":12},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[4350]},"id":4351,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4287,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:13"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":4288,"nodeType":"StructuredDocumentation","src":"137:750:13","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":4350,"linearizedBaseContracts":[4350],"name":"ReentrancyGuard","nameLocation":"906:15:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4291,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:13","nodeType":"VariableDeclaration","scope":4350,"src":"1676:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4289,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":4294,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:13","nodeType":"VariableDeclaration","scope":4350,"src":"1723:37:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4292,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":4296,"mutability":"mutable","name":"_status","nameLocation":"1783:7:13","nodeType":"VariableDeclaration","scope":4350,"src":"1767:23:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":4303,"nodeType":"Block","src":"1811:39:13","statements":[{"expression":{"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4299,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"1821:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4300,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"1831:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4302,"nodeType":"ExpressionStatement","src":"1821:22:13"}]},"id":4304,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4297,"nodeType":"ParameterList","parameters":[],"src":"1808:2:13"},"returnParameters":{"id":4298,"nodeType":"ParameterList","parameters":[],"src":"1811:0:13"},"scope":4350,"src":"1797:53:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4314,"nodeType":"Block","src":"2251:79:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4307,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"2261:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4309,"nodeType":"ExpressionStatement","src":"2261:21:13"},{"id":4310,"nodeType":"PlaceholderStatement","src":"2292:1:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4311,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"2303:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4313,"nodeType":"ExpressionStatement","src":"2303:20:13"}]},"documentation":{"id":4305,"nodeType":"StructuredDocumentation","src":"1856:366:13","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":4315,"name":"nonReentrant","nameLocation":"2236:12:13","nodeType":"ModifierDefinition","parameters":{"id":4306,"nodeType":"ParameterList","parameters":[],"src":"2248:2:13"},"src":"2227:103:13","virtual":false,"visibility":"internal"},{"body":{"id":4329,"nodeType":"Block","src":"2375:248:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4319,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2468:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4320,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2479:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":4318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2460:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4324,"nodeType":"ExpressionStatement","src":"2460:63:13"},{"expression":{"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4325,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2598:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4326,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2608:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4328,"nodeType":"ExpressionStatement","src":"2598:18:13"}]},"id":4330,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:13","nodeType":"FunctionDefinition","parameters":{"id":4316,"nodeType":"ParameterList","parameters":[],"src":"2364:2:13"},"returnParameters":{"id":4317,"nodeType":"ParameterList","parameters":[],"src":"2375:0:13"},"scope":4350,"src":"2336:287:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4337,"nodeType":"Block","src":"2667:171:13","statements":[{"expression":{"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4333,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"2809:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4334,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"2819:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4336,"nodeType":"ExpressionStatement","src":"2809:22:13"}]},"id":4338,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:13","nodeType":"FunctionDefinition","parameters":{"id":4331,"nodeType":"ParameterList","parameters":[],"src":"2656:2:13"},"returnParameters":{"id":4332,"nodeType":"ParameterList","parameters":[],"src":"2667:0:13"},"scope":4350,"src":"2629:209:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4348,"nodeType":"Block","src":"3081:43:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4344,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"3098:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4345,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"3109:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3098:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4343,"id":4347,"nodeType":"Return","src":"3091:26:13"}]},"documentation":{"id":4339,"nodeType":"StructuredDocumentation","src":"2844:168:13","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":4349,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3026:23:13","nodeType":"FunctionDefinition","parameters":{"id":4340,"nodeType":"ParameterList","parameters":[],"src":"3049:2:13"},"returnParameters":{"id":4343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4349,"src":"3075:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4341,"name":"bool","nodeType":"ElementaryTypeName","src":"3075:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3074:6:13"},"scope":4350,"src":"3017:107:13","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4351,"src":"888:2238:13","usedErrors":[]}],"src":"112:3015:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4380]},"id":4381,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4352,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4353,"nodeType":"StructuredDocumentation","src":"126:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4380,"linearizedBaseContracts":[4380],"name":"Context","nameLocation":"641:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":4361,"nodeType":"Block","src":"717:34:14","statements":[{"expression":{"expression":{"id":4358,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:14","memberName":"sender","nodeType":"MemberAccess","src":"734:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4357,"id":4360,"nodeType":"Return","src":"727:17:14"}]},"id":4362,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:14","nodeType":"FunctionDefinition","parameters":{"id":4354,"nodeType":"ParameterList","parameters":[],"src":"674:2:14"},"returnParameters":{"id":4357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4362,"src":"708:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4355,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:14"},"scope":4380,"src":"655:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4370,"nodeType":"Block","src":"824:32:14","statements":[{"expression":{"expression":{"id":4367,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:14","memberName":"data","nodeType":"MemberAccess","src":"841:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4366,"id":4369,"nodeType":"Return","src":"834:15:14"}]},"id":4371,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:14","nodeType":"FunctionDefinition","parameters":{"id":4363,"nodeType":"ParameterList","parameters":[],"src":"774:2:14"},"returnParameters":{"id":4366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4371,"src":"808:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4364,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:14"},"scope":4380,"src":"757:99:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4378,"nodeType":"Block","src":"934:25:14","statements":[{"expression":{"hexValue":"30","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4375,"id":4377,"nodeType":"Return","src":"944:8:14"}]},"id":4379,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:14","nodeType":"FunctionDefinition","parameters":{"id":4372,"nodeType":"ParameterList","parameters":[],"src":"891:2:14"},"returnParameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4379,"src":"925:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4373,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:14"},"scope":4380,"src":"862:97:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4381,"src":"623:338:14","usedErrors":[]}],"src":"101:861:14"},"id":14},"contracts/integrator/AbstractTBTCDepositor.sol":{"ast":{"absolutePath":"contracts/integrator/AbstractTBTCDepositor.sol","exportedSymbols":{"AbstractTBTCDepositor":[4719],"BTCUtils":[2202],"IBridge":[4795],"IBridgeTypes":[4760],"ITBTCVault":[4821]},"id":4720,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4382,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"971:23:15"},{"absolutePath":"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol","file":"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol","id":4384,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4720,"sourceUnit":2203,"src":"996:78:15","symbolAliases":[{"foreign":{"id":4383,"name":"BTCUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"1004:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/integrator/IBridge.sol","file":"./IBridge.sol","id":4385,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4720,"sourceUnit":4796,"src":"1076:23:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/integrator/ITBTCVault.sol","file":"./ITBTCVault.sol","id":4386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4720,"sourceUnit":4822,"src":"1100:26:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"AbstractTBTCDepositor","contractDependencies":[],"contractKind":"contract","documentation":{"id":4387,"nodeType":"StructuredDocumentation","src":"1128:2305:15","text":"@title Abstract AbstractTBTCDepositor contract.\n @notice This abstract contract is meant to facilitate integration of protocols\n         aiming to use tBTC as an underlying Bitcoin bridge.\n         Such an integrator is supposed to:\n         - Create a child contract inheriting from this abstract contract\n         - Call the `__AbstractTBTCDepositor_initialize` initializer function\n         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their\n           business logic in order to initialize and finalize deposits.\n @dev Example usage:\n      ```\n      // Example upgradeable integrator contract.\n      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {\n          /// @custom:oz-upgrades-unsafe-allow constructor\n          constructor() {\n              // Prevents the contract from being initialized again.\n              _disableInitializers();\n          }\n          function initialize(\n              address _bridge,\n              address _tbtcVault\n          ) external initializer {\n              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);\n          }\n          function startProcess(\n              IBridgeTypes.BitcoinTxInfo calldata fundingTx,\n              IBridgeTypes.DepositRevealInfo calldata reveal\n          ) external {\n              // Embed necessary context as extra data.\n              bytes32 extraData = ...;\n              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(\n                  fundingTx,\n                  reveal,\n                  extraData\n              );\n              // Use the depositKey to track the process.\n          }\n          function finalizeProcess(uint256 depositKey) external {\n              // Ensure the function cannot be called for the same deposit\n              // twice.\n              (\n                  uint256 initialDepositAmount,\n                  uint256 tbtcAmount,\n                  bytes32 extraData\n              ) = _finalizeDeposit(depositKey);\n              // Do something with the minted TBTC using context\n              // embedded in the extraData.\n          }\n      }"},"fullyImplemented":true,"id":4719,"linearizedBaseContracts":[4719],"name":"AbstractTBTCDepositor","nameLocation":"3451:21:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4390,"libraryName":{"id":4388,"name":"BTCUtils","nameLocations":["3485:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2202,"src":"3485:8:15"},"nodeType":"UsingForDirective","src":"3479:25:15","typeName":{"id":4389,"name":"bytes","nodeType":"ElementaryTypeName","src":"3498:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"documentation":{"id":4391,"nodeType":"StructuredDocumentation","src":"3510:62:15","text":"@notice Multiplier to convert satoshi to TBTC token units."},"functionSelector":"c7ba0347","id":4396,"mutability":"constant","name":"SATOSHI_MULTIPLIER","nameLocation":"3601:18:15","nodeType":"VariableDeclaration","scope":4719,"src":"3577:51:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4392,"name":"uint256","nodeType":"ElementaryTypeName","src":"3577:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"id":4395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3622:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3130","id":4394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3626:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"3622:6:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"}},"visibility":"public"},{"constant":false,"documentation":{"id":4397,"nodeType":"StructuredDocumentation","src":"3635:36:15","text":"@notice Bridge contract address."},"functionSelector":"e78cea92","id":4400,"mutability":"mutable","name":"bridge","nameLocation":"3691:6:15","nodeType":"VariableDeclaration","scope":4719,"src":"3676:21:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"},"typeName":{"id":4399,"nodeType":"UserDefinedTypeName","pathNode":{"id":4398,"name":"IBridge","nameLocations":["3676:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":4795,"src":"3676:7:15"},"referencedDeclaration":4795,"src":"3676:7:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"visibility":"public"},{"constant":false,"documentation":{"id":4401,"nodeType":"StructuredDocumentation","src":"3703:39:15","text":"@notice TBTCVault contract address."},"functionSelector":"0f36403a","id":4404,"mutability":"mutable","name":"tbtcVault","nameLocation":"3765:9:15","nodeType":"VariableDeclaration","scope":4719,"src":"3747:27:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"},"typeName":{"id":4403,"nodeType":"UserDefinedTypeName","pathNode":{"id":4402,"name":"ITBTCVault","nameLocations":["3747:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":4821,"src":"3747:10:15"},"referencedDeclaration":4821,"src":"3747:10:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"visibility":"public"},{"constant":false,"id":4408,"mutability":"mutable","name":"__gap","nameLocation":"4260:5:15","nodeType":"VariableDeclaration","scope":4719,"src":"4240:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":4405,"name":"uint256","nodeType":"ElementaryTypeName","src":"4240:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4407,"length":{"hexValue":"3437","id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4248:2:15","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"4240:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"},{"body":{"id":4471,"nodeType":"Block","src":"4537:403:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4419,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"4576:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}],"id":4418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4568:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4417,"name":"address","nodeType":"ElementaryTypeName","src":"4568:7:15","typeDescriptions":{}}},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4595:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4587:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4421,"name":"address","nodeType":"ElementaryTypeName","src":"4587:7:15","typeDescriptions":{}}},"id":4424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4587:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4568:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4428,"name":"tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"4609:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}],"id":4427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4601:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4426,"name":"address","nodeType":"ElementaryTypeName","src":"4601:7:15","typeDescriptions":{}}},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4601:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4631:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4623:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4430,"name":"address","nodeType":"ElementaryTypeName","src":"4623:7:15","typeDescriptions":{}}},"id":4433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4623:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4601:32:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4568:65:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4162737472616374544254434465706f7369746f7220616c726561647920696e697469616c697a6564","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4647:43:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506","typeString":"literal_string \"AbstractTBTCDepositor already initialized\""},"value":"AbstractTBTCDepositor already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506","typeString":"literal_string \"AbstractTBTCDepositor already initialized\""}],"id":4416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4547:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4547:153:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4438,"nodeType":"ExpressionStatement","src":"4547:153:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4440,"name":"_bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"4719:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4738:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4730:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4441,"name":"address","nodeType":"ElementaryTypeName","src":"4730:7:15","typeDescriptions":{}}},"id":4444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4730:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4719:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"42726964676520616464726573732063616e6e6f74206265207a65726f","id":4446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4742:31:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4","typeString":"literal_string \"Bridge address cannot be zero\""},"value":"Bridge address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4","typeString":"literal_string \"Bridge address cannot be zero\""}],"id":4439,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4711:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4711:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4448,"nodeType":"ExpressionStatement","src":"4711:63:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4450,"name":"_tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"4792:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4814:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4806:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4451,"name":"address","nodeType":"ElementaryTypeName","src":"4806:7:15","typeDescriptions":{}}},"id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4792:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"544254435661756c7420616464726573732063616e6e6f74206265207a65726f","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4818:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4","typeString":"literal_string \"TBTCVault address cannot be zero\""},"value":"TBTCVault address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4","typeString":"literal_string \"TBTCVault address cannot be zero\""}],"id":4449,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4784:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4458,"nodeType":"ExpressionStatement","src":"4784:69:15"},{"expression":{"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4459,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"4864:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4461,"name":"_bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"4881:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4460,"name":"IBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4795,"src":"4873:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBridge_$4795_$","typeString":"type(contract IBridge)"}},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"src":"4864:25:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4464,"nodeType":"ExpressionStatement","src":"4864:25:15"},{"expression":{"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4465,"name":"tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"4899:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4467,"name":"_tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"4922:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4466,"name":"ITBTCVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"4911:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITBTCVault_$4821_$","typeString":"type(contract ITBTCVault)"}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4911:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"src":"4899:34:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"id":4470,"nodeType":"ExpressionStatement","src":"4899:34:15"}]},"documentation":{"id":4409,"nodeType":"StructuredDocumentation","src":"4272:105:15","text":"@notice Initializes the contract. MUST BE CALLED from the child\n         contract initializer."},"id":4472,"implemented":true,"kind":"function","modifiers":[],"name":"__AbstractTBTCDepositor_initialize","nameLocation":"4434:34:15","nodeType":"FunctionDefinition","parameters":{"id":4414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4411,"mutability":"mutable","name":"_bridge","nameLocation":"4486:7:15","nodeType":"VariableDeclaration","scope":4472,"src":"4478:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4410,"name":"address","nodeType":"ElementaryTypeName","src":"4478:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4413,"mutability":"mutable","name":"_tbtcVault","nameLocation":"4511:10:15","nodeType":"VariableDeclaration","scope":4472,"src":"4503:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4412,"name":"address","nodeType":"ElementaryTypeName","src":"4503:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4468:59:15"},"returnParameters":{"id":4415,"nodeType":"ParameterList","parameters":[],"src":"4537:0:15"},"scope":4719,"src":"4425:515:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4527,"nodeType":"Block","src":"6270:679:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4489,"name":"reveal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"6288:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo memory"}},"id":4490,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6295:5:15","memberName":"vault","nodeType":"MemberAccess","referencedDeclaration":4743,"src":"6288:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":4493,"name":"tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"6312:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}],"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6304:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4491,"name":"address","nodeType":"ElementaryTypeName","src":"6304:7:15","typeDescriptions":{}}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6304:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6288:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5661756c742061646472657373206d69736d61746368","id":4496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6324:24:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45","typeString":"literal_string \"Vault address mismatch\""},"value":"Vault address mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45","typeString":"literal_string \"Vault address mismatch\""}],"id":4488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6280:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6280:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4498,"nodeType":"ExpressionStatement","src":"6280:69:15"},{"expression":{"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4499,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6360:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":4502,"name":"fundingTx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"6431:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}],"id":4501,"name":"_calculateBitcoinTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"6407:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_BitcoinTxInfo_$4731_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct IBridgeTypes.BitcoinTxInfo memory) view returns (bytes32)"}},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6407:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4504,"name":"reveal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"6455:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo memory"}},"id":4505,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6462:18:15","memberName":"fundingOutputIndex","nodeType":"MemberAccess","referencedDeclaration":4733,"src":"6455:25:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":4500,"name":"_calculateDepositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"6373:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint32) pure returns (uint256)"}},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:117:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6360:130:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4508,"nodeType":"ExpressionStatement","src":"6360:130:15"},{"expression":{"arguments":[{"id":4512,"name":"fundingTx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"6800:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}},{"id":4513,"name":"reveal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"6811:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo memory"}},{"id":4514,"name":"extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"6819:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"},{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4509,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"6766:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6773:26:15","memberName":"revealDepositWithExtraData","nodeType":"MemberAccess","referencedDeclaration":4773,"src":"6766:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_BitcoinTxInfo_$4731_memory_ptr_$_t_struct$_DepositRevealInfo_$4744_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (struct IBridgeTypes.BitcoinTxInfo memory,struct IBridgeTypes.DepositRevealInfo memory,bytes32) external"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4516,"nodeType":"ExpressionStatement","src":"6766:63:15"},{"expression":{"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4517,"name":"initialDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4486,"src":"6840:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4520,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6891:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4518,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"6875:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6882:8:15","memberName":"deposits","nodeType":"MemberAccess","referencedDeclaration":4782,"src":"6875:15:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_struct$_DepositRequest_$4759_memory_ptr_$","typeString":"function (uint256) view external returns (struct IBridgeTypes.DepositRequest memory)"}},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6875:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4522,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6903:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4748,"src":"6875:34:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4523,"name":"SATOSHI_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"6924:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6875:67:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6840:102:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4526,"nodeType":"ExpressionStatement","src":"6840:102:15"}]},"documentation":{"id":4473,"nodeType":"StructuredDocumentation","src":"4946:1040:15","text":"@notice Initializes a deposit by revealing it to the Bridge.\n @param fundingTx Bitcoin funding transaction data, see `IBridgeTypes.BitcoinTxInfo`.\n @param reveal Deposit reveal data, see `IBridgeTypes.DepositRevealInfo` struct.\n @param extraData 32-byte deposit extra data.\n @return depositKey Deposit key computed as\n         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\n         key can be used to refer to the deposit in the Bridge and\n         TBTCVault contracts.\n @return initialDepositAmount Amount of funding transaction deposit. In\n         TBTC token decimals precision.\n @dev Requirements:\n      - The revealed vault address must match the TBTCVault address,\n      - All requirements from {Bridge#revealDepositWithExtraData}\n        function must be met.\n @dev This function doesn't validate if a deposit has been initialized before,\n      as the Bridge won't allow the same deposit to be revealed twice."},"id":4528,"implemented":true,"kind":"function","modifiers":[],"name":"_initializeDeposit","nameLocation":"6043:18:15","nodeType":"FunctionDefinition","parameters":{"id":4482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4476,"mutability":"mutable","name":"fundingTx","nameLocation":"6105:9:15","nodeType":"VariableDeclaration","scope":4528,"src":"6071:43:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":4475,"nodeType":"UserDefinedTypeName","pathNode":{"id":4474,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["6071:12:15","6084:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"6071:26:15"},"referencedDeclaration":4731,"src":"6071:26:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"},{"constant":false,"id":4479,"mutability":"mutable","name":"reveal","nameLocation":"6162:6:15","nodeType":"VariableDeclaration","scope":4528,"src":"6124:44:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"},"typeName":{"id":4478,"nodeType":"UserDefinedTypeName","pathNode":{"id":4477,"name":"IBridgeTypes.DepositRevealInfo","nameLocations":["6124:12:15","6137:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":4744,"src":"6124:30:15"},"referencedDeclaration":4744,"src":"6124:30:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_storage_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"}},"visibility":"internal"},{"constant":false,"id":4481,"mutability":"mutable","name":"extraData","nameLocation":"6186:9:15","nodeType":"VariableDeclaration","scope":4528,"src":"6178:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6178:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6061:140:15"},"returnParameters":{"id":4487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"depositKey","nameLocation":"6228:10:15","nodeType":"VariableDeclaration","scope":4528,"src":"6220:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4483,"name":"uint256","nodeType":"ElementaryTypeName","src":"6220:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4486,"mutability":"mutable","name":"initialDepositAmount","nameLocation":"6248:20:15","nodeType":"VariableDeclaration","scope":4528,"src":"6240:28:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4485,"name":"uint256","nodeType":"ElementaryTypeName","src":"6240:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6219:50:15"},"scope":4719,"src":"6034:915:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4598,"nodeType":"Block","src":"8425:608:15","statements":[{"assignments":[4544],"declarations":[{"constant":false,"id":4544,"mutability":"mutable","name":"deposit","nameLocation":"8470:7:15","nodeType":"VariableDeclaration","scope":4598,"src":"8435:42:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest"},"typeName":{"id":4543,"nodeType":"UserDefinedTypeName","pathNode":{"id":4542,"name":"IBridgeTypes.DepositRequest","nameLocations":["8435:12:15","8448:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":4759,"src":"8435:27:15"},"referencedDeclaration":4759,"src":"8435:27:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_storage_ptr","typeString":"struct IBridgeTypes.DepositRequest"}},"visibility":"internal"}],"id":4549,"initialValue":{"arguments":[{"id":4547,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8509:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4545,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"8480:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8487:8:15","memberName":"deposits","nodeType":"MemberAccess","referencedDeclaration":4782,"src":"8480:15:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_struct$_DepositRequest_$4759_memory_ptr_$","typeString":"function (uint256) view external returns (struct IBridgeTypes.DepositRequest memory)"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8480:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"nodeType":"VariableDeclarationStatement","src":"8435:94:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4551,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8547:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8555:10:15","memberName":"revealedAt","nodeType":"MemberAccess","referencedDeclaration":4750,"src":"8547:18:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8569:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8547:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f736974206e6f7420696e697469616c697a6564","id":4555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8572:25:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68","typeString":"literal_string \"Deposit not initialized\""},"value":"Deposit not initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68","typeString":"literal_string \"Deposit not initialized\""}],"id":4550,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8539:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8539:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4557,"nodeType":"ExpressionStatement","src":"8539:59:15"},{"assignments":[null,4559],"declarations":[null,{"constant":false,"id":4559,"mutability":"mutable","name":"finalizedAt","nameLocation":"8619:11:15","nodeType":"VariableDeclaration","scope":4598,"src":"8612:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4558,"name":"uint64","nodeType":"ElementaryTypeName","src":"8612:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":4564,"initialValue":{"arguments":[{"id":4562,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"8683:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4560,"name":"tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"8634:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8644:25:15","memberName":"optimisticMintingRequests","nodeType":"MemberAccess","referencedDeclaration":4808,"src":"8634:35:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint64_$_t_uint64_$","typeString":"function (uint256) external returns (uint64,uint64)"}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8634:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint64_$","typeString":"tuple(uint64,uint64)"}},"nodeType":"VariableDeclarationStatement","src":"8609:94:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4566,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8735:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8743:7:15","memberName":"sweptAt","nodeType":"MemberAccess","referencedDeclaration":4756,"src":"8735:15:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8754:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8735:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4570,"name":"finalizedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"8759:11:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8774:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8759:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8735:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f736974206e6f742066696e616c697a65642062792074686520627269646765","id":4574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8789:37:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac","typeString":"literal_string \"Deposit not finalized by the bridge\""},"value":"Deposit not finalized by the bridge"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac","typeString":"literal_string \"Deposit not finalized by the bridge\""}],"id":4565,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8714:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8714:122:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4576,"nodeType":"ExpressionStatement","src":"8714:122:15"},{"expression":{"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4577,"name":"initialDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8847:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4578,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8870:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8878:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4748,"src":"8870:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4580,"name":"SATOSHI_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"8887:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8870:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8847:58:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4583,"nodeType":"ExpressionStatement","src":"8847:58:15"},{"expression":{"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4584,"name":"tbtcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"8916:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4586,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8950:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8958:6:15","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4748,"src":"8950:14:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"expression":{"id":4588,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"8966:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4589,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8974:11:15","memberName":"treasuryFee","nodeType":"MemberAccess","referencedDeclaration":4754,"src":"8966:19:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":4585,"name":"_calculateTbtcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"8929:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_uint64_$returns$_t_uint256_$","typeString":"function (uint64,uint64) view returns (uint256)"}},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8929:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8916:70:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4592,"nodeType":"ExpressionStatement","src":"8916:70:15"},{"expression":{"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4593,"name":"extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4538,"src":"8997:9:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4594,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"9009:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest memory"}},"id":4595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9017:9:15","memberName":"extraData","nodeType":"MemberAccess","referencedDeclaration":4758,"src":"9009:17:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8997:29:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4597,"nodeType":"ExpressionStatement","src":"8997:29:15"}]},"documentation":{"id":4529,"nodeType":"StructuredDocumentation","src":"6955:1223:15","text":"@notice Finalizes a deposit by calculating the amount of TBTC minted\n         for the deposit.\n @param depositKey Deposit key identifying the deposit.\n @return initialDepositAmount Amount of funding transaction deposit. In\n         TBTC token decimals precision.\n @return tbtcAmount Approximate amount of TBTC minted for the deposit. In\n         TBTC token decimals precision.\n @return extraData 32-byte deposit extra data.\n @dev Requirements:\n      - The deposit must be initialized but not finalized\n        (in the context of this contract) yet.\n      - The deposit must be finalized on the Bridge side. That means the\n        deposit must be either swept or optimistically minted.\n @dev THIS FUNCTION DOESN'T VALIDATE IF A DEPOSIT HAS BEEN FINALIZED BEFORE,\n      IT IS A RESPONSIBILITY OF THE IMPLEMENTING CONTRACT TO ENSURE THIS\n      FUNCTION WON'T BE CALLED TWICE FOR THE SAME DEPOSIT.\n @dev IMPORTANT NOTE: The tbtcAmount returned by this function is an\n      approximation. See documentation of the `calculateTbtcAmount`\n      responsible for calculating this value for more details."},"id":4599,"implemented":true,"kind":"function","modifiers":[],"name":"_finalizeDeposit","nameLocation":"8235:16:15","nodeType":"FunctionDefinition","parameters":{"id":4532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4531,"mutability":"mutable","name":"depositKey","nameLocation":"8260:10:15","nodeType":"VariableDeclaration","scope":4599,"src":"8252:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4530,"name":"uint256","nodeType":"ElementaryTypeName","src":"8252:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8251:20:15"},"returnParameters":{"id":4539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4534,"mutability":"mutable","name":"initialDepositAmount","nameLocation":"8327:20:15","nodeType":"VariableDeclaration","scope":4599,"src":"8319:28:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4533,"name":"uint256","nodeType":"ElementaryTypeName","src":"8319:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4536,"mutability":"mutable","name":"tbtcAmount","nameLocation":"8369:10:15","nodeType":"VariableDeclaration","scope":4599,"src":"8361:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4535,"name":"uint256","nodeType":"ElementaryTypeName","src":"8361:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4538,"mutability":"mutable","name":"extraData","nameLocation":"8401:9:15","nodeType":"VariableDeclaration","scope":4599,"src":"8393:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8393:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8305:115:15"},"scope":4719,"src":"8226:807:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4654,"nodeType":"Block","src":"11239:773:15","statements":[{"assignments":[4610],"declarations":[{"constant":false,"id":4610,"mutability":"mutable","name":"amountSubTreasury","nameLocation":"11402:17:15","nodeType":"VariableDeclaration","scope":4654,"src":"11394:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4609,"name":"uint256","nodeType":"ElementaryTypeName","src":"11394:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4617,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4611,"name":"depositAmountSat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"11423:16:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4612,"name":"depositTreasuryFeeSat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4604,"src":"11442:21:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"11423:40:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":4614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11422:42:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4615,"name":"SATOSHI_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"11479:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:75:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11394:103:15"},{"assignments":[4619],"declarations":[{"constant":false,"id":4619,"mutability":"mutable","name":"omFeeDivisor","nameLocation":"11516:12:15","nodeType":"VariableDeclaration","scope":4654,"src":"11508:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4618,"name":"uint256","nodeType":"ElementaryTypeName","src":"11508:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4623,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4620,"name":"tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"11531:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11541:27:15","memberName":"optimisticMintingFeeDivisor","nodeType":"MemberAccess","referencedDeclaration":4814,"src":"11531:37:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint32_$","typeString":"function () view external returns (uint32)"}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11531:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"11508:62:15"},{"assignments":[4625],"declarations":[{"constant":false,"id":4625,"mutability":"mutable","name":"omFee","nameLocation":"11588:5:15","nodeType":"VariableDeclaration","scope":4654,"src":"11580:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4624,"name":"uint256","nodeType":"ElementaryTypeName","src":"11580:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4635,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4626,"name":"omFeeDivisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"11596:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11611:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11596:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11676:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11596:81:15","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4629,"name":"amountSubTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"11628:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4630,"name":"omFeeDivisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"11648:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11628:32:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11627:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11580:97:15"},{"assignments":[null,null,4637,null],"declarations":[null,null,{"constant":false,"id":4637,"mutability":"mutable","name":"depositTxMaxFee","nameLocation":"11839:15:15","nodeType":"VariableDeclaration","scope":4654,"src":"11832:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4636,"name":"uint64","nodeType":"ElementaryTypeName","src":"11832:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},null],"id":4641,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4638,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"11860:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11867:17:15","memberName":"depositParameters","nodeType":"MemberAccess","referencedDeclaration":4794,"src":"11860:24:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint32_$","typeString":"function () view external returns (uint64,uint64,uint64,uint32)"}},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11860:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint32_$","typeString":"tuple(uint64,uint64,uint64,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"11827:59:15"},{"assignments":[4643],"declarations":[{"constant":false,"id":4643,"mutability":"mutable","name":"txMaxFee","nameLocation":"11904:8:15","nodeType":"VariableDeclaration","scope":4654,"src":"11896:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4642,"name":"uint256","nodeType":"ElementaryTypeName","src":"11896:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4647,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4644,"name":"depositTxMaxFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"11915:15:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4645,"name":"SATOSHI_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"11933:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11915:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11896:55:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4648,"name":"amountSubTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"11969:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4649,"name":"omFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"11989:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11969:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4651,"name":"txMaxFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"11997:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11969:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4608,"id":4653,"nodeType":"Return","src":"11962:43:15"}]},"documentation":{"id":4600,"nodeType":"StructuredDocumentation","src":"9039:2005:15","text":"@notice Calculates the amount of TBTC minted for the deposit.\n @param depositAmountSat Deposit amount in satoshi (1e8 precision).\n        This is the actual amount deposited by the deposit creator, i.e.\n        the gross amount the Bridge's fees are cut from.\n @param depositTreasuryFeeSat Deposit treasury fee in satoshi (1e8 precision).\n        This is an accurate value of the treasury fee that was actually\n        cut upon minting.\n @return tbtcAmount Approximate amount of TBTC minted for the deposit.\n @dev IMPORTANT NOTE: The tbtcAmount returned by this function may\n      not correspond to the actual amount of TBTC minted for the deposit.\n      Although the treasury fee cut upon minting is known precisely,\n      this is not the case for the optimistic minting fee and the Bitcoin\n      transaction fee. To overcome that problem, this function just takes\n      the current maximum allowed values of both fees, at the moment of deposit\n      finalization. For the great majority of the deposits, such an\n      algorithm will return a tbtcAmount slightly lesser than the\n      actual amount of TBTC minted for the deposit. This will cause\n      some TBTC to be left in the contract and ensure there is enough\n      liquidity to finalize the deposit. However, in some rare cases,\n      where the actual values of those fees change between the deposit\n      minting and finalization, the tbtcAmount returned by this function\n      may be greater than the actual amount of TBTC minted for the deposit.\n      If this happens and the reserve coming from previous deposits\n      leftovers does not provide enough liquidity, the deposit will have\n      to wait for finalization until the reserve is refilled by subsequent\n      deposits or a manual top-up. The integrator is responsible for\n      handling such cases."},"id":4655,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateTbtcAmount","nameLocation":"11101:20:15","nodeType":"FunctionDefinition","parameters":{"id":4605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4602,"mutability":"mutable","name":"depositAmountSat","nameLocation":"11138:16:15","nodeType":"VariableDeclaration","scope":4655,"src":"11131:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4601,"name":"uint64","nodeType":"ElementaryTypeName","src":"11131:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4604,"mutability":"mutable","name":"depositTreasuryFeeSat","nameLocation":"11171:21:15","nodeType":"VariableDeclaration","scope":4655,"src":"11164:28:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4603,"name":"uint64","nodeType":"ElementaryTypeName","src":"11164:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11121:77:15"},"returnParameters":{"id":4608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4655,"src":"11230:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4606,"name":"uint256","nodeType":"ElementaryTypeName","src":"11230:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11229:9:15"},"scope":4719,"src":"11092:920:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4676,"nodeType":"Block","src":"12669:137:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4670,"name":"fundingTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"12750:13:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4671,"name":"fundingOutputIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"12765:18:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":4668,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12733:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12737:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"12733:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12733:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4667,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"12723:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12723:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12698:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4665,"name":"uint256","nodeType":"ElementaryTypeName","src":"12698:7:15","typeDescriptions":{}}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12698:101:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4664,"id":4675,"nodeType":"Return","src":"12679:120:15"}]},"documentation":{"id":4656,"nodeType":"StructuredDocumentation","src":"12018:469:15","text":"@notice Calculates the deposit key for the given funding transaction\n         hash and funding output index.\n @param fundingTxHash Funding transaction hash.\n @param fundingOutputIndex Funding output index.\n @return depositKey Deposit key computed as\n         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\n         key can be used to refer to the deposit in the Bridge and\n         TBTCVault contracts."},"id":4677,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateDepositKey","nameLocation":"12544:20:15","nodeType":"FunctionDefinition","parameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4658,"mutability":"mutable","name":"fundingTxHash","nameLocation":"12582:13:15","nodeType":"VariableDeclaration","scope":4677,"src":"12574:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12574:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4660,"mutability":"mutable","name":"fundingOutputIndex","nameLocation":"12612:18:15","nodeType":"VariableDeclaration","scope":4677,"src":"12605:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4659,"name":"uint32","nodeType":"ElementaryTypeName","src":"12605:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12564:72:15"},"returnParameters":{"id":4664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4677,"src":"12660:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4662,"name":"uint256","nodeType":"ElementaryTypeName","src":"12660:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12659:9:15"},"scope":4719,"src":"12535:271:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4700,"nodeType":"Block","src":"13240:272:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4688,"name":"txInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"13324:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}},"id":4689,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13331:7:15","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":4724,"src":"13324:14:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"expression":{"id":4690,"name":"txInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"13360:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}},"id":4691,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13367:11:15","memberName":"inputVector","nodeType":"MemberAccess","referencedDeclaration":4726,"src":"13360:18:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":4692,"name":"txInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"13400:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}},"id":4693,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13407:12:15","memberName":"outputVector","nodeType":"MemberAccess","referencedDeclaration":4728,"src":"13400:19:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":4694,"name":"txInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"13441:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo memory"}},"id":4695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13448:8:15","memberName":"locktime","nodeType":"MemberAccess","referencedDeclaration":4730,"src":"13441:15:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4686,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"13269:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13290:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"13269:33:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13269:205:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13492:11:15","memberName":"hash256View","nodeType":"MemberAccess","referencedDeclaration":652,"src":"13269:234:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bytes32)"}},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13269:236:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4685,"id":4699,"nodeType":"Return","src":"13250:255:15"}]},"documentation":{"id":4678,"nodeType":"StructuredDocumentation","src":"12812:245:15","text":"@notice Calculates the Bitcoin transaction hash for the given Bitcoin\n         transaction data.\n @param txInfo Bitcoin transaction data, see `IBridgeTypes.BitcoinTxInfo` struct.\n @return txHash Bitcoin transaction hash."},"id":4701,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateBitcoinTxHash","nameLocation":"13114:23:15","nodeType":"FunctionDefinition","parameters":{"id":4682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4681,"mutability":"mutable","name":"txInfo","nameLocation":"13172:6:15","nodeType":"VariableDeclaration","scope":4701,"src":"13138:40:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":4680,"nodeType":"UserDefinedTypeName","pathNode":{"id":4679,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["13138:12:15","13151:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"13138:26:15"},"referencedDeclaration":4731,"src":"13138:26:15","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"}],"src":"13137:42:15"},"returnParameters":{"id":4685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4701,"src":"13227:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13227:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13226:9:15"},"scope":4719,"src":"13105:407:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4717,"nodeType":"Block","src":"13744:323:15","statements":[{"assignments":[4708,null,null,null],"declarations":[{"constant":false,"id":4708,"mutability":"mutable","name":"bridgeDepositDustThresholdSat","nameLocation":"13835:29:15","nodeType":"VariableDeclaration","scope":4717,"src":"13828:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4707,"name":"uint64","nodeType":"ElementaryTypeName","src":"13828:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},null,null,null],"id":4712,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4709,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4400,"src":"13874:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBridge_$4795","typeString":"contract IBridge"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13894:17:15","memberName":"depositParameters","nodeType":"MemberAccess","referencedDeclaration":4794,"src":"13874:37:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint32_$","typeString":"function () view external returns (uint64,uint64,uint64,uint32)"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13874:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint64_$_t_uint64_$_t_uint32_$","typeString":"tuple(uint64,uint64,uint64,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"13827:86:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4713,"name":"bridgeDepositDustThresholdSat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"14010:29:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4714,"name":"SATOSHI_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"14042:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14010:50:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4706,"id":4716,"nodeType":"Return","src":"14003:57:15"}]},"documentation":{"id":4702,"nodeType":"StructuredDocumentation","src":"13518:117:15","text":"@notice Returns minimum deposit amount.\n @return Minimum deposit amount. In TBTC token decimals precision."},"id":4718,"implemented":true,"kind":"function","modifiers":[],"name":"_minDepositAmount","nameLocation":"13692:17:15","nodeType":"FunctionDefinition","parameters":{"id":4703,"nodeType":"ParameterList","parameters":[],"src":"13709:2:15"},"returnParameters":{"id":4706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4718,"src":"13735:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4704,"name":"uint256","nodeType":"ElementaryTypeName","src":"13735:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13734:9:15"},"scope":4719,"src":"13683:384:15","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4720,"src":"3433:10636:15","usedErrors":[]}],"src":"971:13099:15"},"id":15},"contracts/integrator/IBridge.sol":{"ast":{"absolutePath":"contracts/integrator/IBridge.sol","exportedSymbols":{"IBridge":[4795],"IBridgeTypes":[4760]},"id":4796,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4721,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"971:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IBridgeTypes","contractDependencies":[],"contractKind":"library","documentation":{"id":4722,"nodeType":"StructuredDocumentation","src":"996:363:16","text":"@notice Namespace which groups all types relevant to the IBridge interface.\n @dev This is a mirror of the real types used in the Bridge contract.\n      This way, the `integrator` subpackage does not need to import\n      anything from the `bridge` subpackage and explicitly depend on it.\n      This simplifies the dependency graph for integrators."},"fullyImplemented":true,"id":4760,"linearizedBaseContracts":[4760],"name":"IBridgeTypes","nameLocation":"1367:12:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IBridgeTypes.BitcoinTxInfo","id":4731,"members":[{"constant":false,"id":4724,"mutability":"mutable","name":"version","nameLocation":"1467:7:16","nodeType":"VariableDeclaration","scope":4731,"src":"1460:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4723,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1460:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":4726,"mutability":"mutable","name":"inputVector","nameLocation":"1490:11:16","nodeType":"VariableDeclaration","scope":4731,"src":"1484:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4725,"name":"bytes","nodeType":"ElementaryTypeName","src":"1484:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4728,"mutability":"mutable","name":"outputVector","nameLocation":"1517:12:16","nodeType":"VariableDeclaration","scope":4731,"src":"1511:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4727,"name":"bytes","nodeType":"ElementaryTypeName","src":"1511:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4730,"mutability":"mutable","name":"locktime","nameLocation":"1546:8:16","nodeType":"VariableDeclaration","scope":4731,"src":"1539:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4729,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1539:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"name":"BitcoinTxInfo","nameLocation":"1436:13:16","nodeType":"StructDefinition","scope":4760,"src":"1429:132:16","visibility":"public"},{"canonicalName":"IBridgeTypes.DepositRevealInfo","id":4744,"members":[{"constant":false,"id":4733,"mutability":"mutable","name":"fundingOutputIndex","nameLocation":"1663:18:16","nodeType":"VariableDeclaration","scope":4744,"src":"1656:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4732,"name":"uint32","nodeType":"ElementaryTypeName","src":"1656:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4735,"mutability":"mutable","name":"blindingFactor","nameLocation":"1698:14:16","nodeType":"VariableDeclaration","scope":4744,"src":"1691:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4734,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1691:6:16","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4737,"mutability":"mutable","name":"walletPubKeyHash","nameLocation":"1730:16:16","nodeType":"VariableDeclaration","scope":4744,"src":"1722:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":4736,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1722:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"},{"constant":false,"id":4739,"mutability":"mutable","name":"refundPubKeyHash","nameLocation":"1764:16:16","nodeType":"VariableDeclaration","scope":4744,"src":"1756:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":4738,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1756:7:16","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"},{"constant":false,"id":4741,"mutability":"mutable","name":"refundLocktime","nameLocation":"1797:14:16","nodeType":"VariableDeclaration","scope":4744,"src":"1790:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4740,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1790:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":4743,"mutability":"mutable","name":"vault","nameLocation":"1829:5:16","nodeType":"VariableDeclaration","scope":4744,"src":"1821:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4742,"name":"address","nodeType":"ElementaryTypeName","src":"1821:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DepositRevealInfo","nameLocation":"1628:17:16","nodeType":"StructDefinition","scope":4760,"src":"1621:220:16","visibility":"public"},{"canonicalName":"IBridgeTypes.DepositRequest","id":4759,"members":[{"constant":false,"id":4746,"mutability":"mutable","name":"depositor","nameLocation":"1938:9:16","nodeType":"VariableDeclaration","scope":4759,"src":"1930:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4745,"name":"address","nodeType":"ElementaryTypeName","src":"1930:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4748,"mutability":"mutable","name":"amount","nameLocation":"1964:6:16","nodeType":"VariableDeclaration","scope":4759,"src":"1957:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4747,"name":"uint64","nodeType":"ElementaryTypeName","src":"1957:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4750,"mutability":"mutable","name":"revealedAt","nameLocation":"1987:10:16","nodeType":"VariableDeclaration","scope":4759,"src":"1980:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4749,"name":"uint32","nodeType":"ElementaryTypeName","src":"1980:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4752,"mutability":"mutable","name":"vault","nameLocation":"2015:5:16","nodeType":"VariableDeclaration","scope":4759,"src":"2007:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4751,"name":"address","nodeType":"ElementaryTypeName","src":"2007:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"treasuryFee","nameLocation":"2037:11:16","nodeType":"VariableDeclaration","scope":4759,"src":"2030:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4753,"name":"uint64","nodeType":"ElementaryTypeName","src":"2030:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4756,"mutability":"mutable","name":"sweptAt","nameLocation":"2065:7:16","nodeType":"VariableDeclaration","scope":4759,"src":"2058:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4755,"name":"uint32","nodeType":"ElementaryTypeName","src":"2058:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4758,"mutability":"mutable","name":"extraData","nameLocation":"2090:9:16","nodeType":"VariableDeclaration","scope":4759,"src":"2082:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2082:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"DepositRequest","nameLocation":"1905:14:16","nodeType":"StructDefinition","scope":4760,"src":"1898:208:16","visibility":"public"}],"scope":4796,"src":"1359:749:16","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IBridge","contractDependencies":[],"contractKind":"interface","documentation":{"id":4761,"nodeType":"StructuredDocumentation","src":"2110:77:16","text":"@notice Interface of the Bridge contract.\n @dev See bridge/Bridge.sol"},"fullyImplemented":false,"id":4795,"linearizedBaseContracts":[4795],"name":"IBridge","nameLocation":"2197:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4762,"nodeType":"StructuredDocumentation","src":"2211:48:16","text":"@dev See {Bridge#revealDepositWithExtraData}"},"functionSelector":"86f01439","id":4773,"implemented":false,"kind":"function","modifiers":[],"name":"revealDepositWithExtraData","nameLocation":"2273:26:16","nodeType":"FunctionDefinition","parameters":{"id":4771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"fundingTx","nameLocation":"2345:9:16","nodeType":"VariableDeclaration","scope":4773,"src":"2309:45:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":4764,"nodeType":"UserDefinedTypeName","pathNode":{"id":4763,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["2309:12:16","2322:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"2309:26:16"},"referencedDeclaration":4731,"src":"2309:26:16","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"},{"constant":false,"id":4768,"mutability":"mutable","name":"reveal","nameLocation":"2404:6:16","nodeType":"VariableDeclaration","scope":4773,"src":"2364:46:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"},"typeName":{"id":4767,"nodeType":"UserDefinedTypeName","pathNode":{"id":4766,"name":"IBridgeTypes.DepositRevealInfo","nameLocations":["2364:12:16","2377:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":4744,"src":"2364:30:16"},"referencedDeclaration":4744,"src":"2364:30:16","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_storage_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"}},"visibility":"internal"},{"constant":false,"id":4770,"mutability":"mutable","name":"extraData","nameLocation":"2428:9:16","nodeType":"VariableDeclaration","scope":4773,"src":"2420:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4769,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2420:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2299:144:16"},"returnParameters":{"id":4772,"nodeType":"ParameterList","parameters":[],"src":"2452:0:16"},"scope":4795,"src":"2264:189:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4774,"nodeType":"StructuredDocumentation","src":"2459:30:16","text":"@dev See {Bridge#deposits}"},"functionSelector":"b02c43d0","id":4782,"implemented":false,"kind":"function","modifiers":[],"name":"deposits","nameLocation":"2503:8:16","nodeType":"FunctionDefinition","parameters":{"id":4777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4776,"mutability":"mutable","name":"depositKey","nameLocation":"2520:10:16","nodeType":"VariableDeclaration","scope":4782,"src":"2512:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"2512:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2511:20:16"},"returnParameters":{"id":4781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4782,"src":"2579:34:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_memory_ptr","typeString":"struct IBridgeTypes.DepositRequest"},"typeName":{"id":4779,"nodeType":"UserDefinedTypeName","pathNode":{"id":4778,"name":"IBridgeTypes.DepositRequest","nameLocations":["2579:12:16","2592:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":4759,"src":"2579:27:16"},"referencedDeclaration":4759,"src":"2579:27:16","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRequest_$4759_storage_ptr","typeString":"struct IBridgeTypes.DepositRequest"}},"visibility":"internal"}],"src":"2578:36:16"},"scope":4795,"src":"2494:121:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4783,"nodeType":"StructuredDocumentation","src":"2621:39:16","text":"@dev See {Bridge#depositParameters}"},"functionSelector":"c42b64d0","id":4794,"implemented":false,"kind":"function","modifiers":[],"name":"depositParameters","nameLocation":"2674:17:16","nodeType":"FunctionDefinition","parameters":{"id":4784,"nodeType":"ParameterList","parameters":[],"src":"2691:2:16"},"returnParameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4786,"mutability":"mutable","name":"depositDustThreshold","nameLocation":"2761:20:16","nodeType":"VariableDeclaration","scope":4794,"src":"2754:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4785,"name":"uint64","nodeType":"ElementaryTypeName","src":"2754:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4788,"mutability":"mutable","name":"depositTreasuryFeeDivisor","nameLocation":"2802:25:16","nodeType":"VariableDeclaration","scope":4794,"src":"2795:32:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4787,"name":"uint64","nodeType":"ElementaryTypeName","src":"2795:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4790,"mutability":"mutable","name":"depositTxMaxFee","nameLocation":"2848:15:16","nodeType":"VariableDeclaration","scope":4794,"src":"2841:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4789,"name":"uint64","nodeType":"ElementaryTypeName","src":"2841:6:16","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4792,"mutability":"mutable","name":"depositRevealAheadPeriod","nameLocation":"2884:24:16","nodeType":"VariableDeclaration","scope":4794,"src":"2877:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4791,"name":"uint32","nodeType":"ElementaryTypeName","src":"2877:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2740:178:16"},"scope":4795,"src":"2665:254:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4796,"src":"2187:734:16","usedErrors":[]}],"src":"971:1951:16"},"id":16},"contracts/integrator/ITBTCVault.sol":{"ast":{"absolutePath":"contracts/integrator/ITBTCVault.sol","exportedSymbols":{"ITBTCVault":[4821]},"id":4822,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4797,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"971:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"ITBTCVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":4798,"nodeType":"StructuredDocumentation","src":"996:82:17","text":"@notice Interface of the TBTCVault contract.\n @dev See vault/TBTCVault.sol"},"fullyImplemented":false,"id":4821,"linearizedBaseContracts":[4821],"name":"ITBTCVault","nameLocation":"1088:10:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4799,"nodeType":"StructuredDocumentation","src":"1105:50:17","text":"@dev See {TBTCVault#optimisticMintingRequests}"},"functionSelector":"6c626aa4","id":4808,"implemented":false,"kind":"function","modifiers":[],"name":"optimisticMintingRequests","nameLocation":"1169:25:17","nodeType":"FunctionDefinition","parameters":{"id":4802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4801,"mutability":"mutable","name":"depositKey","nameLocation":"1203:10:17","nodeType":"VariableDeclaration","scope":4808,"src":"1195:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1195:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1194:20:17"},"returnParameters":{"id":4807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4804,"mutability":"mutable","name":"requestedAt","nameLocation":"1256:11:17","nodeType":"VariableDeclaration","scope":4808,"src":"1249:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4803,"name":"uint64","nodeType":"ElementaryTypeName","src":"1249:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4806,"mutability":"mutable","name":"finalizedAt","nameLocation":"1276:11:17","nodeType":"VariableDeclaration","scope":4808,"src":"1269:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4805,"name":"uint64","nodeType":"ElementaryTypeName","src":"1269:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1248:40:17"},"scope":4821,"src":"1160:129:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4809,"nodeType":"StructuredDocumentation","src":"1295:52:17","text":"@dev See {TBTCVault#optimisticMintingFeeDivisor}"},"functionSelector":"09b53f51","id":4814,"implemented":false,"kind":"function","modifiers":[],"name":"optimisticMintingFeeDivisor","nameLocation":"1361:27:17","nodeType":"FunctionDefinition","parameters":{"id":4810,"nodeType":"ParameterList","parameters":[],"src":"1388:2:17"},"returnParameters":{"id":4813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4814,"src":"1414:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4811,"name":"uint32","nodeType":"ElementaryTypeName","src":"1414:6:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1413:8:17"},"scope":4821,"src":"1352:70:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4815,"nodeType":"StructuredDocumentation","src":"1428:34:17","text":"@dev See {TBTCVault#tbtcToken}"},"functionSelector":"e5d3d714","id":4820,"implemented":false,"kind":"function","modifiers":[],"name":"tbtcToken","nameLocation":"1476:9:17","nodeType":"FunctionDefinition","parameters":{"id":4816,"nodeType":"ParameterList","parameters":[],"src":"1485:2:17"},"returnParameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4820,"src":"1511:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4817,"name":"address","nodeType":"ElementaryTypeName","src":"1511:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1510:9:17"},"scope":4821,"src":"1467:53:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4822,"src":"1078:444:17","usedErrors":[]}],"src":"971:552:17"},"id":17},"contracts/l2/L1BitcoinDepositor.sol":{"ast":{"absolutePath":"contracts/l2/L1BitcoinDepositor.sol","exportedSymbols":{"AbstractTBTCDepositor":[4719],"AddressUpgradeable":[4121],"BTCUtils":[2202],"Context":[4380],"ContextUpgradeable":[4172],"IBridge":[4795],"IBridgeTypes":[4760],"IERC20PermitUpgradeable":[3415],"IERC20Upgradeable":[3379],"ITBTCVault":[4821],"IWormhole":[5888],"IWormholeReceiver":[5945],"IWormholeRelayer":[5928],"IWormholeTokenBridge":[6013],"Initializable":[3301],"L1BitcoinDepositor":[5645],"Ownable":[4285],"OwnableUpgradeable":[3132],"ReentrancyGuard":[4350],"Reimbursable":[2723],"ReimbursementPool":[2999],"SafeERC20Upgradeable":[3791],"WormholeTypes":[5874],"WormholeUtils":[6078]},"id":5646,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4823,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"971:23:18"},{"absolutePath":"@keep-network/random-beacon/contracts/Reimbursable.sol","file":"@keep-network/random-beacon/contracts/Reimbursable.sol","id":4824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":2724,"src":"996:64:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":4825,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":3380,"src":"1061:79:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":3792,"src":"1141:88:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4827,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":3133,"src":"1230:75:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/integrator/AbstractTBTCDepositor.sol","file":"../integrator/AbstractTBTCDepositor.sol","id":4828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":4720,"src":"1307:49:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/integrator/IBridge.sol","file":"../integrator/IBridge.sol","id":4829,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":4796,"src":"1357:35:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/integrator/ITBTCVault.sol","file":"../integrator/ITBTCVault.sol","id":4830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":4822,"src":"1393:38:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/l2/Wormhole.sol","file":"./Wormhole.sol","id":4831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":6079,"src":"1432:24:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4833,"name":"Initializable","nameLocations":["4440:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3301,"src":"4440:13:18"},"id":4834,"nodeType":"InheritanceSpecifier","src":"4440:13:18"},{"baseName":{"id":4835,"name":"AbstractTBTCDepositor","nameLocations":["4459:21:18"],"nodeType":"IdentifierPath","referencedDeclaration":4719,"src":"4459:21:18"},"id":4836,"nodeType":"InheritanceSpecifier","src":"4459:21:18"},{"baseName":{"id":4837,"name":"OwnableUpgradeable","nameLocations":["4486:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":3132,"src":"4486:18:18"},"id":4838,"nodeType":"InheritanceSpecifier","src":"4486:18:18"},{"baseName":{"id":4839,"name":"Reimbursable","nameLocations":["4510:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":2723,"src":"4510:12:18"},"id":4840,"nodeType":"InheritanceSpecifier","src":"4510:12:18"}],"canonicalName":"L1BitcoinDepositor","contractDependencies":[],"contractKind":"contract","documentation":{"id":4832,"nodeType":"StructuredDocumentation","src":"1458:2947:18","text":"@title L1BitcoinDepositor\n @notice This contract is part of the direct bridging mechanism allowing\n         users to obtain ERC20 TBTC on supported L2 chains, without the need\n         to interact with the L1 tBTC ledger chain where minting occurs.\n         `L1BitcoinDepositor` is deployed on the L1 chain and interacts with\n         their L2 counterpart, the `L2BitcoinDepositor`, deployed on the given\n         L2 chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor` pair is\n         responsible for a specific L2 chain.\n         The outline of the direct bridging mechanism is as follows:\n         1. An L2 user issues a Bitcoin funding transaction to a P2(W)SH\n            deposit address that embeds the `L1BitcoinDepositor` contract\n            and L2 user addresses. The `L1BitcoinDepositor` contract serves\n            as the actual depositor on the L1 chain while the L2 user\n            address is set as the deposit owner who will receive the\n            minted ERC20 TBTC.\n         2. The data about the Bitcoin funding transaction and deposit\n            address are passed to the relayer. In the first iteration of\n            the direct bridging mechanism, this is achieved using an\n            on-chain event emitted by the `L2BitcoinDepositor` contract.\n            Further iterations assumes those data are passed off-chain, e.g.\n            through a REST API exposed by the relayer.\n         3. The relayer uses the data to initialize a deposit on the L1\n            chain by calling the `initializeDeposit` function of the\n            `L1BitcoinDepositor` contract. The `initializeDeposit` function\n            reveals the deposit to the tBTC Bridge so minting of ERC20 L1 TBTC\n            can occur.\n         4. Once minting is complete, the `L1BitcoinDepositor` contract\n            receives minted ERC20 L1 TBTC. The relayer then calls the\n            `finalizeDeposit` function of the `L1BitcoinDepositor` contract\n            to transfer the minted ERC20 L1 TBTC to the L2 user address. This\n            is achieved using the Wormhole protocol. First, the `finalizeDeposit`\n            function initiates a Wormhole token transfer that locks the ERC20\n            L1 TBTC within the Wormhole Token Bridge contract and assigns\n            Wormhole-wrapped L2 TBTC to the corresponding `L2WormholeGateway`\n            contract. Then, `finalizeDeposit` notifies the `L2BitcoinDepositor`\n            contract by sending a Wormhole message containing the VAA\n            of the Wormhole token transfer. The `L2BitcoinDepositor` contract\n            receives the Wormhole message, and calls the `L2WormholeGateway`\n            contract that redeems Wormhole-wrapped L2 TBTC from the Wormhole\n            Token Bridge and uses it to mint canonical L2 TBTC to the L2 user\n            address."},"fullyImplemented":true,"id":5645,"linearizedBaseContracts":[5645,2723,3132,4172,4719,3301],"name":"L1BitcoinDepositor","nameLocation":"4414:18:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4844,"libraryName":{"id":4841,"name":"SafeERC20Upgradeable","nameLocations":["4535:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":3791,"src":"4535:20:18"},"nodeType":"UsingForDirective","src":"4529:49:18","typeName":{"id":4843,"nodeType":"UserDefinedTypeName","pathNode":{"id":4842,"name":"IERC20Upgradeable","nameLocations":["4560:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"4560:17:18"},"referencedDeclaration":3379,"src":"4560:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}}},{"canonicalName":"L1BitcoinDepositor.DepositState","id":4848,"members":[{"id":4845,"name":"Unknown","nameLocation":"5083:7:18","nodeType":"EnumValue","src":"5083:7:18"},{"id":4846,"name":"Initialized","nameLocation":"5100:11:18","nodeType":"EnumValue","src":"5100:11:18"},{"id":4847,"name":"Finalized","nameLocation":"5121:9:18","nodeType":"EnumValue","src":"5121:9:18"}],"name":"DepositState","nameLocation":"5060:12:18","nodeType":"EnumDefinition","src":"5055:81:18"},{"canonicalName":"L1BitcoinDepositor.GasReimbursement","id":4855,"members":[{"constant":false,"id":4851,"mutability":"mutable","name":"receiver","nameLocation":"5330:8:18","nodeType":"VariableDeclaration","scope":4855,"src":"5322:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4850,"name":"address","nodeType":"ElementaryTypeName","src":"5322:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4854,"mutability":"mutable","name":"gasSpent","nameLocation":"5423:8:18","nodeType":"VariableDeclaration","scope":4855,"src":"5416:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4853,"name":"uint96","nodeType":"ElementaryTypeName","src":"5416:6:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"GasReimbursement","nameLocation":"5219:16:18","nodeType":"StructDefinition","scope":5645,"src":"5212:226:18","visibility":"public"},{"constant":false,"documentation":{"id":4856,"nodeType":"StructuredDocumentation","src":"5444:180:18","text":"@notice Holds the deposit state, keyed by the deposit key calculated for\n         the individual deposit during the call to `initializeDeposit`\n         function."},"functionSelector":"b02c43d0","id":4861,"mutability":"mutable","name":"deposits","nameLocation":"5669:8:18","nodeType":"VariableDeclaration","scope":5645,"src":"5629:48:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"},"typeName":{"id":4860,"keyType":{"id":4857,"name":"uint256","nodeType":"ElementaryTypeName","src":"5637:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"5629:32:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"},"valueType":{"id":4859,"nodeType":"UserDefinedTypeName","pathNode":{"id":4858,"name":"DepositState","nameLocations":["5648:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":4848,"src":"5648:12:18"},"referencedDeclaration":4848,"src":"5648:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}}},"visibility":"public"},{"constant":false,"documentation":{"id":4862,"nodeType":"StructuredDocumentation","src":"5683:41:18","text":"@notice ERC20 L1 TBTC token contract."},"functionSelector":"e5d3d714","id":4865,"mutability":"mutable","name":"tbtcToken","nameLocation":"5754:9:18","nodeType":"VariableDeclaration","scope":5645,"src":"5729:34:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4864,"nodeType":"UserDefinedTypeName","pathNode":{"id":4863,"name":"IERC20Upgradeable","nameLocations":["5729:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3379,"src":"5729:17:18"},"referencedDeclaration":3379,"src":"5729:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"visibility":"public"},{"constant":false,"documentation":{"id":4866,"nodeType":"StructuredDocumentation","src":"5769:43:18","text":"@notice `Wormhole` core contract on L1."},"functionSelector":"84acd1bb","id":4869,"mutability":"mutable","name":"wormhole","nameLocation":"5834:8:18","nodeType":"VariableDeclaration","scope":5645,"src":"5817:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"},"typeName":{"id":4868,"nodeType":"UserDefinedTypeName","pathNode":{"id":4867,"name":"IWormhole","nameLocations":["5817:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":5888,"src":"5817:9:18"},"referencedDeclaration":5888,"src":"5817:9:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"visibility":"public"},{"constant":false,"documentation":{"id":4870,"nodeType":"StructuredDocumentation","src":"5848:45:18","text":"@notice `WormholeRelayer` contract on L1."},"functionSelector":"da25b725","id":4873,"mutability":"mutable","name":"wormholeRelayer","nameLocation":"5922:15:18","nodeType":"VariableDeclaration","scope":5645,"src":"5898:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"},"typeName":{"id":4872,"nodeType":"UserDefinedTypeName","pathNode":{"id":4871,"name":"IWormholeRelayer","nameLocations":["5898:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":5928,"src":"5898:16:18"},"referencedDeclaration":5928,"src":"5898:16:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"visibility":"public"},{"constant":false,"documentation":{"id":4874,"nodeType":"StructuredDocumentation","src":"5943:50:18","text":"@notice Wormhole `TokenBridge` contract on L1."},"functionSelector":"f11df69d","id":4877,"mutability":"mutable","name":"wormholeTokenBridge","nameLocation":"6026:19:18","nodeType":"VariableDeclaration","scope":5645,"src":"5998:47:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"},"typeName":{"id":4876,"nodeType":"UserDefinedTypeName","pathNode":{"id":4875,"name":"IWormholeTokenBridge","nameLocations":["5998:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":6013,"src":"5998:20:18"},"referencedDeclaration":6013,"src":"5998:20:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}},"visibility":"public"},{"constant":false,"documentation":{"id":4878,"nodeType":"StructuredDocumentation","src":"6051:76:18","text":"@notice tBTC `L2WormholeGateway` contract on the corresponding L2 chain."},"functionSelector":"aa82e33b","id":4880,"mutability":"mutable","name":"l2WormholeGateway","nameLocation":"6147:17:18","nodeType":"VariableDeclaration","scope":5645,"src":"6132:32:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4879,"name":"address","nodeType":"ElementaryTypeName","src":"6132:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":4881,"nodeType":"StructuredDocumentation","src":"6170:60:18","text":"@notice Wormhole chain ID of the corresponding L2 chain."},"functionSelector":"d6ae3cd5","id":4883,"mutability":"mutable","name":"l2ChainId","nameLocation":"6249:9:18","nodeType":"VariableDeclaration","scope":5645,"src":"6235:23:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4882,"name":"uint16","nodeType":"ElementaryTypeName","src":"6235:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"public"},{"constant":false,"documentation":{"id":4884,"nodeType":"StructuredDocumentation","src":"6264:77:18","text":"@notice tBTC `L2BitcoinDepositor` contract on the corresponding L2 chain."},"functionSelector":"c81ef168","id":4886,"mutability":"mutable","name":"l2BitcoinDepositor","nameLocation":"6361:18:18","nodeType":"VariableDeclaration","scope":5645,"src":"6346:33:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4885,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":4887,"nodeType":"StructuredDocumentation","src":"6385:332:18","text":"@notice Gas limit necessary to execute the L2 part of the deposit\n         finalization. This value is used to calculate the payment for\n         the Wormhole Relayer that is responsible to execute the\n         deposit finalization on the corresponding L2 chain. Can be\n         updated by the owner."},"functionSelector":"71546831","id":4889,"mutability":"mutable","name":"l2FinalizeDepositGasLimit","nameLocation":"6737:25:18","nodeType":"VariableDeclaration","scope":5645,"src":"6722:40:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4888,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":4890,"nodeType":"StructuredDocumentation","src":"6768:581:18","text":"@notice Holds deferred gas reimbursements for deposit initialization\n         (indexed by deposit key). Reimbursement for deposit\n         initialization is paid out upon deposit finalization. This is\n         because the tBTC Bridge accepts all (even invalid) deposits but\n         mints ERC20 TBTC only for the valid ones. Paying out the\n         reimbursement directly upon initialization would make the\n         reimbursement pool vulnerable to malicious actors that could\n         drain it by initializing invalid deposits."},"functionSelector":"7c9e9ffb","id":4895,"mutability":"mutable","name":"gasReimbursements","nameLocation":"7398:17:18","nodeType":"VariableDeclaration","scope":5645,"src":"7354:61:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_GasReimbursement_$4855_storage_$","typeString":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement)"},"typeName":{"id":4894,"keyType":{"id":4891,"name":"uint256","nodeType":"ElementaryTypeName","src":"7362:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"7354:36:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_GasReimbursement_$4855_storage_$","typeString":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement)"},"valueType":{"id":4893,"nodeType":"UserDefinedTypeName","pathNode":{"id":4892,"name":"GasReimbursement","nameLocations":["7373:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":4855,"src":"7373:16:18"},"referencedDeclaration":4855,"src":"7373:16:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement"}}},"visibility":"public"},{"constant":false,"documentation":{"id":4896,"nodeType":"StructuredDocumentation","src":"7421:168:18","text":"@notice Gas that is meant to balance the overall cost of deposit initialization.\n         Can be updated by the owner based on the current market conditions."},"functionSelector":"27ce36c6","id":4898,"mutability":"mutable","name":"initializeDepositGasOffset","nameLocation":"7609:26:18","nodeType":"VariableDeclaration","scope":5645,"src":"7594:41:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4897,"name":"uint256","nodeType":"ElementaryTypeName","src":"7594:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":4899,"nodeType":"StructuredDocumentation","src":"7641:166:18","text":"@notice Gas that is meant to balance the overall cost of deposit finalization.\n         Can be updated by the owner based on the current market conditions."},"functionSelector":"0fa1ba44","id":4901,"mutability":"mutable","name":"finalizeDepositGasOffset","nameLocation":"7827:24:18","nodeType":"VariableDeclaration","scope":5645,"src":"7812:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4900,"name":"uint256","nodeType":"ElementaryTypeName","src":"7812:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":4902,"nodeType":"StructuredDocumentation","src":"7857:207:18","text":"@notice Set of addresses that are authorized to receive gas reimbursements\n         for deposit initialization and finalization. The authorization is\n         granted by the contract owner."},"functionSelector":"66b58a01","id":4906,"mutability":"mutable","name":"reimbursementAuthorizations","nameLocation":"8101:27:18","nodeType":"VariableDeclaration","scope":5645,"src":"8069:59:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4905,"keyType":{"id":4903,"name":"address","nodeType":"ElementaryTypeName","src":"8077:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"8069:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":4904,"name":"bool","nodeType":"ElementaryTypeName","src":"8088:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"04870363995d5b750bccca9d95e57044d630524aec2ef09ebdb820ac11d866b4","id":4914,"name":"DepositInitialized","nameLocation":"8141:18:18","nodeType":"EventDefinition","parameters":{"id":4913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4908,"indexed":true,"mutability":"mutable","name":"depositKey","nameLocation":"8185:10:18","nodeType":"VariableDeclaration","scope":4914,"src":"8169:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4907,"name":"uint256","nodeType":"ElementaryTypeName","src":"8169:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4910,"indexed":true,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"8221:14:18","nodeType":"VariableDeclaration","scope":4914,"src":"8205:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4909,"name":"address","nodeType":"ElementaryTypeName","src":"8205:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4912,"indexed":true,"mutability":"mutable","name":"l1Sender","nameLocation":"8261:8:18","nodeType":"VariableDeclaration","scope":4914,"src":"8245:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4911,"name":"address","nodeType":"ElementaryTypeName","src":"8245:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8159:116:18"},"src":"8135:141:18"},{"anonymous":false,"eventSelector":"94d36bc0d9bf5adbd2dec8bd125b7bf12eecc6e5539fc8f2bd57a831d9995af7","id":4926,"name":"DepositFinalized","nameLocation":"8288:16:18","nodeType":"EventDefinition","parameters":{"id":4925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4916,"indexed":true,"mutability":"mutable","name":"depositKey","nameLocation":"8330:10:18","nodeType":"VariableDeclaration","scope":4926,"src":"8314:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4915,"name":"uint256","nodeType":"ElementaryTypeName","src":"8314:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4918,"indexed":true,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"8366:14:18","nodeType":"VariableDeclaration","scope":4926,"src":"8350:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4917,"name":"address","nodeType":"ElementaryTypeName","src":"8350:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4920,"indexed":true,"mutability":"mutable","name":"l1Sender","nameLocation":"8406:8:18","nodeType":"VariableDeclaration","scope":4926,"src":"8390:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"8390:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4922,"indexed":false,"mutability":"mutable","name":"initialAmount","nameLocation":"8432:13:18","nodeType":"VariableDeclaration","scope":4926,"src":"8424:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4921,"name":"uint256","nodeType":"ElementaryTypeName","src":"8424:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4924,"indexed":false,"mutability":"mutable","name":"tbtcAmount","nameLocation":"8463:10:18","nodeType":"VariableDeclaration","scope":4926,"src":"8455:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4923,"name":"uint256","nodeType":"ElementaryTypeName","src":"8455:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8304:175:18"},"src":"8282:198:18"},{"anonymous":false,"eventSelector":"6ed5a3ddedc64e149e68b8bbc09d35489452528ae70487ee4f8832837c5c0105","id":4930,"name":"L2FinalizeDepositGasLimitUpdated","nameLocation":"8492:32:18","nodeType":"EventDefinition","parameters":{"id":4929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4928,"indexed":false,"mutability":"mutable","name":"l2FinalizeDepositGasLimit","nameLocation":"8533:25:18","nodeType":"VariableDeclaration","scope":4930,"src":"8525:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4927,"name":"uint256","nodeType":"ElementaryTypeName","src":"8525:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8524:35:18"},"src":"8486:74:18"},{"anonymous":false,"eventSelector":"b8df1fba472926f296225c210e366f62b21fec23b8e1b6b0a375724798ca9c0a","id":4936,"name":"GasOffsetParametersUpdated","nameLocation":"8572:26:18","nodeType":"EventDefinition","parameters":{"id":4935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4932,"indexed":false,"mutability":"mutable","name":"initializeDepositGasOffset","nameLocation":"8616:26:18","nodeType":"VariableDeclaration","scope":4936,"src":"8608:34:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4931,"name":"uint256","nodeType":"ElementaryTypeName","src":"8608:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4934,"indexed":false,"mutability":"mutable","name":"finalizeDepositGasOffset","nameLocation":"8660:24:18","nodeType":"VariableDeclaration","scope":4936,"src":"8652:32:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4933,"name":"uint256","nodeType":"ElementaryTypeName","src":"8652:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8598:92:18"},"src":"8566:125:18"},{"anonymous":false,"eventSelector":"1fff4aae494aaedff71ff8b04de50a56543bb83ce05b033c3fb4a93e065c05fc","id":4942,"name":"ReimbursementAuthorizationUpdated","nameLocation":"8703:33:18","nodeType":"EventDefinition","parameters":{"id":4941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"indexed":true,"mutability":"mutable","name":"_address","nameLocation":"8762:8:18","nodeType":"VariableDeclaration","scope":4942,"src":"8746:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4937,"name":"address","nodeType":"ElementaryTypeName","src":"8746:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4940,"indexed":false,"mutability":"mutable","name":"authorization","nameLocation":"8785:13:18","nodeType":"VariableDeclaration","scope":4942,"src":"8780:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4939,"name":"bool","nodeType":"ElementaryTypeName","src":"8780:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8736:68:18"},"src":"8697:108:18"},{"baseModifiers":[2702],"body":{"id":4956,"nodeType":"Block","src":"9007:85:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4947,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9025:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9029:6:18","memberName":"sender","nodeType":"MemberAccess","src":"9025:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4949,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"9039:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9039:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9025:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420746865206f776e6572","id":4952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9048:25:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33","typeString":"literal_string \"Caller is not the owner\""},"value":"Caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33","typeString":"literal_string \"Caller is not the owner\""}],"id":4946,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9017:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9017:57:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4954,"nodeType":"ExpressionStatement","src":"9017:57:18"},{"id":4955,"nodeType":"PlaceholderStatement","src":"9084:1:18"}]},"documentation":{"id":4943,"nodeType":"StructuredDocumentation","src":"8811:149:18","text":"@dev This modifier comes from the `Reimbursable` base contract and\n      must be overridden to protect the `updateReimbursementPool` call."},"id":4957,"name":"onlyReimbursableAdmin","nameLocation":"8974:21:18","nodeType":"ModifierDefinition","overrides":{"id":4945,"nodeType":"OverrideSpecifier","overrides":[],"src":"8998:8:18"},"parameters":{"id":4944,"nodeType":"ParameterList","parameters":[],"src":"8995:2:18"},"src":"8965:127:18","virtual":false,"visibility":"internal"},{"body":{"id":4964,"nodeType":"Block","src":"9165:39:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4961,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"9175:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9175:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4963,"nodeType":"ExpressionStatement","src":"9175:22:18"}]},"documentation":{"id":4958,"nodeType":"StructuredDocumentation","src":"9098:48:18","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":4965,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4959,"nodeType":"ParameterList","parameters":[],"src":"9162:2:18"},"returnParameters":{"id":4960,"nodeType":"ParameterList","parameters":[],"src":"9165:0:18"},"scope":5645,"src":"9151:53:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5080,"nodeType":"Block","src":"9476:1089:18","statements":[{"expression":{"arguments":[{"id":4985,"name":"_tbtcBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"9521:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4986,"name":"_tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"9534:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4984,"name":"__AbstractTBTCDepositor_initialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"9486:34:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9486:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4988,"nodeType":"ExpressionStatement","src":"9486:59:18"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4989,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"9555:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9555:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4991,"nodeType":"ExpressionStatement","src":"9555:16:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4993,"name":"_wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"9590:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9611:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9603:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4994,"name":"address","nodeType":"ElementaryTypeName","src":"9603:7:18","typeDescriptions":{}}},"id":4997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9603:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9590:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576f726d686f6c6520616464726573732063616e6e6f74206265207a65726f","id":4999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9615:33:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9","typeString":"literal_string \"Wormhole address cannot be zero\""},"value":"Wormhole address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9","typeString":"literal_string \"Wormhole address cannot be zero\""}],"id":4992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9582:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9582:67:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5001,"nodeType":"ExpressionStatement","src":"9582:67:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5003,"name":"_wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"9680:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9708:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9700:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5004,"name":"address","nodeType":"ElementaryTypeName","src":"9700:7:18","typeDescriptions":{}}},"id":5007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9700:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9680:30:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576f726d686f6c6552656c6179657220616464726573732063616e6e6f74206265207a65726f","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9724:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","typeString":"literal_string \"WormholeRelayer address cannot be zero\""},"value":"WormholeRelayer address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","typeString":"literal_string \"WormholeRelayer address cannot be zero\""}],"id":5002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9659:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9659:115:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5011,"nodeType":"ExpressionStatement","src":"9659:115:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5013,"name":"_wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"9805:20:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9837:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9829:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5014,"name":"address","nodeType":"ElementaryTypeName","src":"9829:7:18","typeDescriptions":{}}},"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9829:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9805:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576f726d686f6c65546f6b656e42726964676520616464726573732063616e6e6f74206265207a65726f","id":5019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9853:44:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9","typeString":"literal_string \"WormholeTokenBridge address cannot be zero\""},"value":"WormholeTokenBridge address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9","typeString":"literal_string \"WormholeTokenBridge address cannot be zero\""}],"id":5012,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9784:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9784:123:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5021,"nodeType":"ExpressionStatement","src":"9784:123:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5023,"name":"_l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"9938:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9968:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9960:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5024,"name":"address","nodeType":"ElementaryTypeName","src":"9960:7:18","typeDescriptions":{}}},"id":5027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9960:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9938:32:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c32576f726d686f6c654761746577617920616464726573732063616e6e6f74206265207a65726f","id":5029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9984:42:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","typeString":"literal_string \"L2WormholeGateway address cannot be zero\""},"value":"L2WormholeGateway address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","typeString":"literal_string \"L2WormholeGateway address cannot be zero\""}],"id":5022,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9917:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9917:119:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5031,"nodeType":"ExpressionStatement","src":"9917:119:18"},{"expression":{"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5032,"name":"tbtcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"10047:9:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5035,"name":"_tbtcVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"10088:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5034,"name":"ITBTCVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"10077:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITBTCVault_$4821_$","typeString":"type(contract ITBTCVault)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10077:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITBTCVault_$4821","typeString":"contract ITBTCVault"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10100:9:18","memberName":"tbtcToken","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"10077:32:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10077:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5033,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"10059:17:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$3379_$","typeString":"type(contract IERC20Upgradeable)"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10059:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"src":"10047:65:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":5041,"nodeType":"ExpressionStatement","src":"10047:65:18"},{"expression":{"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5042,"name":"wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"10122:8:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5044,"name":"_wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"10143:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5043,"name":"IWormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"10133:9:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWormhole_$5888_$","typeString":"type(contract IWormhole)"}},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10133:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"src":"10122:31:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"id":5047,"nodeType":"ExpressionStatement","src":"10122:31:18"},{"expression":{"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5048,"name":"wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"10163:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5050,"name":"_wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"10198:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5049,"name":"IWormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5928,"src":"10181:16:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWormholeRelayer_$5928_$","typeString":"type(contract IWormholeRelayer)"}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10181:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"src":"10163:52:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"id":5053,"nodeType":"ExpressionStatement","src":"10163:52:18"},{"expression":{"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5054,"name":"wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"10225:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5056,"name":"_wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"10268:20:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5055,"name":"IWormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6013,"src":"10247:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWormholeTokenBridge_$6013_$","typeString":"type(contract IWormholeTokenBridge)"}},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10247:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}},"src":"10225:64:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}},"id":5059,"nodeType":"ExpressionStatement","src":"10225:64:18"},{"expression":{"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5060,"name":"l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"10355:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5061,"name":"_l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"10375:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10355:38:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5063,"nodeType":"ExpressionStatement","src":"10355:38:18"},{"expression":{"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5064,"name":"l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"10403:9:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5065,"name":"_l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4979,"src":"10415:10:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"10403:22:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5067,"nodeType":"ExpressionStatement","src":"10403:22:18"},{"expression":{"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5068,"name":"l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"10435:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3530305f303030","id":5069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10463:7:18","typeDescriptions":{"typeIdentifier":"t_rational_500000_by_1","typeString":"int_const 500000"},"value":"500_000"},"src":"10435:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5071,"nodeType":"ExpressionStatement","src":"10435:35:18"},{"expression":{"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5072,"name":"initializeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"10480:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"36305f303030","id":5073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:6:18","typeDescriptions":{"typeIdentifier":"t_rational_60000_by_1","typeString":"int_const 60000"},"value":"60_000"},"src":"10480:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5075,"nodeType":"ExpressionStatement","src":"10480:35:18"},{"expression":{"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5076,"name":"finalizeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4901,"src":"10525:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"32305f303030","id":5077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10552:6:18","typeDescriptions":{"typeIdentifier":"t_rational_20000_by_1","typeString":"int_const 20000"},"value":"20_000"},"src":"10525:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5079,"nodeType":"ExpressionStatement","src":"10525:33:18"}]},"functionSelector":"71c654ee","id":5081,"implemented":true,"kind":"function","modifiers":[{"id":4982,"kind":"modifierInvocation","modifierName":{"id":4981,"name":"initializer","nameLocations":["9464:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3203,"src":"9464:11:18"},"nodeType":"ModifierInvocation","src":"9464:11:18"}],"name":"initialize","nameLocation":"9219:10:18","nodeType":"FunctionDefinition","parameters":{"id":4980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4967,"mutability":"mutable","name":"_tbtcBridge","nameLocation":"9247:11:18","nodeType":"VariableDeclaration","scope":5081,"src":"9239:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4966,"name":"address","nodeType":"ElementaryTypeName","src":"9239:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4969,"mutability":"mutable","name":"_tbtcVault","nameLocation":"9276:10:18","nodeType":"VariableDeclaration","scope":5081,"src":"9268:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4968,"name":"address","nodeType":"ElementaryTypeName","src":"9268:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4971,"mutability":"mutable","name":"_wormhole","nameLocation":"9304:9:18","nodeType":"VariableDeclaration","scope":5081,"src":"9296:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4970,"name":"address","nodeType":"ElementaryTypeName","src":"9296:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4973,"mutability":"mutable","name":"_wormholeRelayer","nameLocation":"9331:16:18","nodeType":"VariableDeclaration","scope":5081,"src":"9323:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4972,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4975,"mutability":"mutable","name":"_wormholeTokenBridge","nameLocation":"9365:20:18","nodeType":"VariableDeclaration","scope":5081,"src":"9357:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4974,"name":"address","nodeType":"ElementaryTypeName","src":"9357:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4977,"mutability":"mutable","name":"_l2WormholeGateway","nameLocation":"9403:18:18","nodeType":"VariableDeclaration","scope":5081,"src":"9395:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4976,"name":"address","nodeType":"ElementaryTypeName","src":"9395:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4979,"mutability":"mutable","name":"_l2ChainId","nameLocation":"9438:10:18","nodeType":"VariableDeclaration","scope":5081,"src":"9431:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4978,"name":"uint16","nodeType":"ElementaryTypeName","src":"9431:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"9229:225:18"},"returnParameters":{"id":4983,"nodeType":"ParameterList","parameters":[],"src":"9476:0:18"},"scope":5645,"src":"9210:1355:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5113,"nodeType":"Block","src":"11238:304:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5090,"name":"l2BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"11269:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11299:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11291:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5091,"name":"address","nodeType":"ElementaryTypeName","src":"11291:7:18","typeDescriptions":{}}},"id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11291:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11269:32:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c3220426974636f696e204465706f7369746f7220616c726561647920736574","id":5096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11315:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c","typeString":"literal_string \"L2 Bitcoin Depositor already set\""},"value":"L2 Bitcoin Depositor already set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c","typeString":"literal_string \"L2 Bitcoin Depositor already set\""}],"id":5089,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11248:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11248:111:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5098,"nodeType":"ExpressionStatement","src":"11248:111:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5100,"name":"_l2BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"11390:19:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11421:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11413:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5101,"name":"address","nodeType":"ElementaryTypeName","src":"11413:7:18","typeDescriptions":{}}},"id":5104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11413:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11390:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c3220426974636f696e204465706f7369746f72206d757374206e6f7420626520307830","id":5106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11437:38:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627","typeString":"literal_string \"L2 Bitcoin Depositor must not be 0x0\""},"value":"L2 Bitcoin Depositor must not be 0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627","typeString":"literal_string \"L2 Bitcoin Depositor must not be 0x0\""}],"id":5099,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11369:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11369:116:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5108,"nodeType":"ExpressionStatement","src":"11369:116:18"},{"expression":{"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5109,"name":"l2BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"11495:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5110,"name":"_l2BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"11516:19:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11495:40:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5112,"nodeType":"ExpressionStatement","src":"11495:40:18"}]},"documentation":{"id":5082,"nodeType":"StructuredDocumentation","src":"10571:560:18","text":"@notice Sets the address of the `L2BitcoinDepositor` contract on the\n         corresponding L2 chain. This function solves the chicken-and-egg\n         problem of setting the `L2BitcoinDepositor` contract address\n         on the `L1BitcoinDepositor` contract and vice versa.\n @param _l2BitcoinDepositor Address of the `L2BitcoinDepositor` contract.\n @dev Requirements:\n      - Can be called only by the contract owner,\n      - The address must not be set yet,\n      - The new address must not be 0x0."},"functionSelector":"0515f0c1","id":5114,"implemented":true,"kind":"function","modifiers":[{"id":5087,"kind":"modifierInvocation","modifierName":{"id":5086,"name":"onlyOwner","nameLocations":["11224:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"11224:9:18"},"nodeType":"ModifierInvocation","src":"11224:9:18"}],"name":"attachL2BitcoinDepositor","nameLocation":"11145:24:18","nodeType":"FunctionDefinition","parameters":{"id":5085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5084,"mutability":"mutable","name":"_l2BitcoinDepositor","nameLocation":"11178:19:18","nodeType":"VariableDeclaration","scope":5114,"src":"11170:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5083,"name":"address","nodeType":"ElementaryTypeName","src":"11170:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11169:29:18"},"returnParameters":{"id":5088,"nodeType":"ParameterList","parameters":[],"src":"11238:0:18"},"scope":5645,"src":"11136:406:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5130,"nodeType":"Block","src":"11921:146:18","statements":[{"expression":{"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5122,"name":"l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"11931:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5123,"name":"_l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5117,"src":"11959:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11931:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5125,"nodeType":"ExpressionStatement","src":"11931:54:18"},{"eventCall":{"arguments":[{"id":5127,"name":"_l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5117,"src":"12033:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5126,"name":"L2FinalizeDepositGasLimitUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"12000:32:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12000:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5129,"nodeType":"EmitStatement","src":"11995:65:18"}]},"documentation":{"id":5115,"nodeType":"StructuredDocumentation","src":"11548:252:18","text":"@notice Updates the gas limit necessary to execute the L2 part of the\n         deposit finalization.\n @param _l2FinalizeDepositGasLimit New gas limit.\n @dev Requirements:\n      - Can be called only by the contract owner."},"functionSelector":"1159bef0","id":5131,"implemented":true,"kind":"function","modifiers":[{"id":5120,"kind":"modifierInvocation","modifierName":{"id":5119,"name":"onlyOwner","nameLocations":["11907:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"11907:9:18"},"nodeType":"ModifierInvocation","src":"11907:9:18"}],"name":"updateL2FinalizeDepositGasLimit","nameLocation":"11814:31:18","nodeType":"FunctionDefinition","parameters":{"id":5118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5117,"mutability":"mutable","name":"_l2FinalizeDepositGasLimit","nameLocation":"11854:26:18","nodeType":"VariableDeclaration","scope":5131,"src":"11846:34:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5116,"name":"uint256","nodeType":"ElementaryTypeName","src":"11846:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11845:36:18"},"returnParameters":{"id":5121,"nodeType":"ParameterList","parameters":[],"src":"11921:0:18"},"scope":5645,"src":"11805:262:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5154,"nodeType":"Block","src":"12555:267:18","statements":[{"expression":{"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5141,"name":"initializeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"12565:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5142,"name":"_initializeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"12594:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12565:56:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5144,"nodeType":"ExpressionStatement","src":"12565:56:18"},{"expression":{"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5145,"name":"finalizeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4901,"src":"12631:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5146,"name":"_finalizeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"12658:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12631:52:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5148,"nodeType":"ExpressionStatement","src":"12631:52:18"},{"eventCall":{"arguments":[{"id":5150,"name":"_initializeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"12739:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5151,"name":"_finalizeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"12780:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5149,"name":"GasOffsetParametersUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"12699:26:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:116:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5153,"nodeType":"EmitStatement","src":"12694:121:18"}]},"documentation":{"id":5132,"nodeType":"StructuredDocumentation","src":"12073:329:18","text":"@notice Updates the values of gas offset parameters.\n @dev Can be called only by the contract owner. The caller is responsible\n      for validating parameters.\n @param _initializeDepositGasOffset New initialize deposit gas offset.\n @param _finalizeDepositGasOffset New finalize deposit gas offset."},"functionSelector":"9e0e4e2f","id":5155,"implemented":true,"kind":"function","modifiers":[{"id":5139,"kind":"modifierInvocation","modifierName":{"id":5138,"name":"onlyOwner","nameLocations":["12545:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"12545:9:18"},"nodeType":"ModifierInvocation","src":"12545:9:18"}],"name":"updateGasOffsetParameters","nameLocation":"12416:25:18","nodeType":"FunctionDefinition","parameters":{"id":5137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5134,"mutability":"mutable","name":"_initializeDepositGasOffset","nameLocation":"12459:27:18","nodeType":"VariableDeclaration","scope":5155,"src":"12451:35:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5133,"name":"uint256","nodeType":"ElementaryTypeName","src":"12451:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5136,"mutability":"mutable","name":"_finalizeDepositGasOffset","nameLocation":"12504:25:18","nodeType":"VariableDeclaration","scope":5155,"src":"12496:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5135,"name":"uint256","nodeType":"ElementaryTypeName","src":"12496:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12441:94:18"},"returnParameters":{"id":5140,"nodeType":"ParameterList","parameters":[],"src":"12555:0:18"},"scope":5645,"src":"12407:415:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5176,"nodeType":"Block","src":"13232:143:18","statements":[{"eventCall":{"arguments":[{"id":5166,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"13281:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5167,"name":"authorization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"13291:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5165,"name":"ReimbursementAuthorizationUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"13247:33:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13247:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5169,"nodeType":"EmitStatement","src":"13242:63:18"},{"expression":{"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5170,"name":"reimbursementAuthorizations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"13315:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5172,"indexExpression":{"id":5171,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"13343:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13315:37:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5173,"name":"authorization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"13355:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13315:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5175,"nodeType":"ExpressionStatement","src":"13315:53:18"}]},"documentation":{"id":5156,"nodeType":"StructuredDocumentation","src":"12828:278:18","text":"@notice Updates the reimbursement authorization for the given address.\n @param _address Address to update the authorization for.\n @param authorization New authorization status.\n @dev Requirements:\n      - Can be called only by the contract owner."},"functionSelector":"60ec23dd","id":5177,"implemented":true,"kind":"function","modifiers":[{"id":5163,"kind":"modifierInvocation","modifierName":{"id":5162,"name":"onlyOwner","nameLocations":["13222:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"13222:9:18"},"nodeType":"ModifierInvocation","src":"13222:9:18"}],"name":"updateReimbursementAuthorization","nameLocation":"13120:32:18","nodeType":"FunctionDefinition","parameters":{"id":5161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5158,"mutability":"mutable","name":"_address","nameLocation":"13170:8:18","nodeType":"VariableDeclaration","scope":5177,"src":"13162:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5157,"name":"address","nodeType":"ElementaryTypeName","src":"13162:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5160,"mutability":"mutable","name":"authorization","nameLocation":"13193:13:18","nodeType":"VariableDeclaration","scope":5177,"src":"13188:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5159,"name":"bool","nodeType":"ElementaryTypeName","src":"13188:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13152:60:18"},"returnParameters":{"id":5164,"nodeType":"ParameterList","parameters":[],"src":"13232:0:18"},"scope":5645,"src":"13111:264:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5292,"nodeType":"Block","src":"17013:2802:18","statements":[{"assignments":[5190],"declarations":[{"constant":false,"id":5190,"mutability":"mutable","name":"gasStart","nameLocation":"17031:8:18","nodeType":"VariableDeclaration","scope":5292,"src":"17023:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5189,"name":"uint256","nodeType":"ElementaryTypeName","src":"17023:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5193,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5191,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"17042:7:18","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17042:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17023:28:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5195,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"17083:14:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17109:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17101:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5196,"name":"address","nodeType":"ElementaryTypeName","src":"17101:7:18","typeDescriptions":{}}},"id":5199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17101:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17083:28:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c32206465706f736974206f776e6572206d757374206e6f7420626520307830","id":5201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17125:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542","typeString":"literal_string \"L2 deposit owner must not be 0x0\""},"value":"L2 deposit owner must not be 0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542","typeString":"literal_string \"L2 deposit owner must not be 0x0\""}],"id":5194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17062:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17062:107:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5203,"nodeType":"ExpressionStatement","src":"17062:107:18"},{"assignments":[5205],"declarations":[{"constant":false,"id":5205,"mutability":"mutable","name":"extraData","nameLocation":"17309:9:18","nodeType":"VariableDeclaration","scope":5292,"src":"17301:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5204,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17301:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5210,"initialValue":{"arguments":[{"id":5208,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"17353:14:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5206,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"17321:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17335:17:18","memberName":"toWormholeAddress","nodeType":"MemberAccess","referencedDeclaration":6034,"src":"17321:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17321:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"17301:67:18"},{"assignments":[5212,null],"declarations":[{"constant":false,"id":5212,"mutability":"mutable","name":"depositKey","nameLocation":"17898:10:18","nodeType":"VariableDeclaration","scope":5292,"src":"17890:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5211,"name":"uint256","nodeType":"ElementaryTypeName","src":"17890:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":5218,"initialValue":{"arguments":[{"id":5214,"name":"fundingTx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"17946:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo calldata"}},{"id":5215,"name":"reveal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5184,"src":"17969:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo calldata"}},{"id":5216,"name":"extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"17989:9:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo calldata"},{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5213,"name":"_initializeDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"17914:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitcoinTxInfo_$4731_memory_ptr_$_t_struct$_DepositRevealInfo_$4744_memory_ptr_$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct IBridgeTypes.BitcoinTxInfo memory,struct IBridgeTypes.DepositRevealInfo memory,bytes32) returns (uint256,uint256)"}},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17914:94:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"17889:119:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5220,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"18040:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"}},"id":5222,"indexExpression":{"id":5221,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"18049:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18040:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5223,"name":"DepositState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"18064:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DepositState_$4848_$","typeString":"type(enum L1BitcoinDepositor.DepositState)"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18077:7:18","memberName":"Unknown","nodeType":"MemberAccess","referencedDeclaration":4845,"src":"18064:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"src":"18040:44:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57726f6e67206465706f736974207374617465","id":5226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18098:21:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","typeString":"literal_string \"Wrong deposit state\""},"value":"Wrong deposit state"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","typeString":"literal_string \"Wrong deposit state\""}],"id":5219,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18019:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18019:110:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5228,"nodeType":"ExpressionStatement","src":"18019:110:18"},{"expression":{"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5229,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"18195:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"}},"id":5231,"indexExpression":{"id":5230,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"18204:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18195:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5232,"name":"DepositState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"18218:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DepositState_$4848_$","typeString":"type(enum L1BitcoinDepositor.DepositState)"}},"id":5233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18231:11:18","memberName":"Initialized","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"18218:24:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"src":"18195:47:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"id":5235,"nodeType":"ExpressionStatement","src":"18195:47:18"},{"eventCall":{"arguments":[{"id":5237,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"18332:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5238,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"18344:14:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5239,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18360:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18364:6:18","memberName":"sender","nodeType":"MemberAccess","src":"18360:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5236,"name":"DepositInitialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"18313:18:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,address,address)"}},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18313:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5242,"nodeType":"EmitStatement","src":"18308:63:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5245,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"18559:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}],"id":5244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18551:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5243,"name":"address","nodeType":"ElementaryTypeName","src":"18551:7:18","typeDescriptions":{}}},"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18551:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18589:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18581:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5247,"name":"address","nodeType":"ElementaryTypeName","src":"18581:7:18","typeDescriptions":{}}},"id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18581:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18551:40:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"baseExpression":{"id":5252,"name":"reimbursementAuthorizations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"18607:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5255,"indexExpression":{"expression":{"id":5253,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18635:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18639:6:18","memberName":"sender","nodeType":"MemberAccess","src":"18635:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18607:39:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18551:95:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5291,"nodeType":"IfStatement","src":"18534:1275:18","trueBody":{"id":5290,"nodeType":"Block","src":"18657:1152:18","statements":[{"assignments":[5258],"declarations":[{"constant":false,"id":5258,"mutability":"mutable","name":"gasSpent","nameLocation":"18679:8:18","nodeType":"VariableDeclaration","scope":5290,"src":"18671:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5257,"name":"uint256","nodeType":"ElementaryTypeName","src":"18671:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5266,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5259,"name":"gasStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"18691:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5260,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"18702:7:18","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18702:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18691:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5263,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18690:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5264,"name":"initializeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"18731:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18690:67:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18671:86:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5267,"name":"gasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"18992:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19008:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":5269,"name":"uint96","nodeType":"ElementaryTypeName","src":"19008:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":5268,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"19003:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19003:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":5272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19016:3:18","memberName":"max","nodeType":"MemberAccess","src":"19003:16:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"18992:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5276,"nodeType":"IfStatement","src":"18988:72:18","trueBody":{"id":5275,"nodeType":"Block","src":"19021:39:18","statements":[{"functionReturnParameters":5188,"id":5274,"nodeType":"Return","src":"19039:7:18"}]}},{"expression":{"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5277,"name":"gasReimbursements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"19652:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_GasReimbursement_$4855_storage_$","typeString":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement storage ref)"}},"id":5279,"indexExpression":{"id":5278,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"19670:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19652:29:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage","typeString":"struct L1BitcoinDepositor.GasReimbursement storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5281,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19729:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19733:6:18","memberName":"sender","nodeType":"MemberAccess","src":"19729:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5285,"name":"gasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"19774:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19767:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":5283,"name":"uint96","nodeType":"ElementaryTypeName","src":"19767:6:18","typeDescriptions":{}}},"id":5286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19767:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":5280,"name":"GasReimbursement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4855,"src":"19684:16:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_GasReimbursement_$4855_storage_ptr_$","typeString":"type(struct L1BitcoinDepositor.GasReimbursement storage pointer)"}},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["19719:8:18","19757:8:18"],"names":["receiver","gasSpent"],"nodeType":"FunctionCall","src":"19684:114:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_memory_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement memory"}},"src":"19652:146:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage","typeString":"struct L1BitcoinDepositor.GasReimbursement storage ref"}},"id":5289,"nodeType":"ExpressionStatement","src":"19652:146:18"}]}}]},"documentation":{"id":5178,"nodeType":"StructuredDocumentation","src":"13381:3442:18","text":"@notice Initializes the deposit process on L1 by revealing the deposit\n         data (funding transaction and components of the P2(W)SH deposit\n         address) to the tBTC Bridge. Once tBTC minting is completed,\n         this call should be followed by a call to `finalizeDeposit`.\n         Callers of `initializeDeposit` are eligible for a gas refund\n         that is paid out upon deposit finalization (only if the\n         reimbursement pool is attached and the given caller is\n         authorized for refunds).\n         The Bitcoin funding transaction must transfer funds to a P2(W)SH\n         deposit address whose underlying script is built from the\n         following components:\n         <depositor-address> DROP\n         <depositor-extra-data> DROP\n         <blinding-factor> DROP\n         DUP HASH160 <signingGroupPubkeyHash> EQUAL\n         IF\n           CHECKSIG\n         ELSE\n           DUP HASH160 <refundPubkeyHash> EQUALVERIFY\n           <locktime> CHECKLOCKTIMEVERIFY DROP\n           CHECKSIG\n         ENDIF\n         Where:\n         <depositor-address> 20-byte L1 address of the\n         `L1BitcoinDepositor` contract.\n         <depositor-extra-data> L2 deposit owner address in the Wormhole\n         format, i.e. 32-byte value left-padded with 0.\n         <blinding-factor> 8-byte deposit blinding factor, as used in the\n         tBTC bridge.\n         <signingGroupPubkeyHash> The compressed Bitcoin public key (33\n         bytes and 02 or 03 prefix) of the deposit's wallet hashed in the\n         HASH160 Bitcoin opcode style. This must point to the active tBTC\n         bridge wallet.\n         <refundPubkeyHash> The compressed Bitcoin public key (33 bytes\n         and 02 or 03 prefix) that can be used to make the deposit refund\n         after the tBTC bridge refund locktime passed. Hashed in the\n         HASH160 Bitcoin opcode style. This is needed only as a security\n         measure protecting the user in case tBTC bridge completely stops\n         functioning.\n         <locktime> The Bitcoin script refund locktime (4-byte LE),\n         according to tBTC bridge rules.\n         Please consult tBTC `Bridge.revealDepositWithExtraData` function\n         documentation for more information.\n @param fundingTx Bitcoin funding transaction data.\n @param reveal Deposit reveal data.\n @param l2DepositOwner Address of the L2 deposit owner.\n @dev Requirements:\n      - The L2 deposit owner address must not be 0x0,\n      - The function can be called only one time for the given Bitcoin\n        funding transaction,\n      - The L2 deposit owner must be embedded in the Bitcoin P2(W)SH\n        deposit script as the <depositor-extra-data> field. The 20-byte\n        address must be expressed as a 32-byte value left-padded with 0.\n        If the value in the Bitcoin script and the value passed as\n        parameter do not match, the function will revert,\n      - All the requirements of tBTC Bridge.revealDepositWithExtraData\n        must be met."},"functionSelector":"642dc033","id":5293,"implemented":true,"kind":"function","modifiers":[],"name":"initializeDeposit","nameLocation":"16837:17:18","nodeType":"FunctionDefinition","parameters":{"id":5187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5181,"mutability":"mutable","name":"fundingTx","nameLocation":"16900:9:18","nodeType":"VariableDeclaration","scope":5293,"src":"16864:45:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":5180,"nodeType":"UserDefinedTypeName","pathNode":{"id":5179,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["16864:12:18","16877:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"16864:26:18"},"referencedDeclaration":4731,"src":"16864:26:18","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"},{"constant":false,"id":5184,"mutability":"mutable","name":"reveal","nameLocation":"16959:6:18","nodeType":"VariableDeclaration","scope":5293,"src":"16919:46:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"},"typeName":{"id":5183,"nodeType":"UserDefinedTypeName","pathNode":{"id":5182,"name":"IBridgeTypes.DepositRevealInfo","nameLocations":["16919:12:18","16932:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":4744,"src":"16919:30:18"},"referencedDeclaration":4744,"src":"16919:30:18","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_storage_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"}},"visibility":"internal"},{"constant":false,"id":5186,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"16983:14:18","nodeType":"VariableDeclaration","scope":5293,"src":"16975:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5185,"name":"address","nodeType":"ElementaryTypeName","src":"16975:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16854:149:18"},"returnParameters":{"id":5188,"nodeType":"ParameterList","parameters":[],"src":"17013:0:18"},"scope":5645,"src":"16828:2987:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5418,"nodeType":"Block","src":"21401:2787:18","statements":[{"assignments":[5300],"declarations":[{"constant":false,"id":5300,"mutability":"mutable","name":"gasStart","nameLocation":"21419:8:18","nodeType":"VariableDeclaration","scope":5418,"src":"21411:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5299,"name":"uint256","nodeType":"ElementaryTypeName","src":"21411:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5303,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5301,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"21430:7:18","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21430:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21411:28:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"},"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5305,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"21471:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"}},"id":5307,"indexExpression":{"id":5306,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"21480:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21471:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5308,"name":"DepositState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"21495:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DepositState_$4848_$","typeString":"type(enum L1BitcoinDepositor.DepositState)"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21508:11:18","memberName":"Initialized","nodeType":"MemberAccess","referencedDeclaration":4846,"src":"21495:24:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"src":"21471:48:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57726f6e67206465706f736974207374617465","id":5311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21533:21:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","typeString":"literal_string \"Wrong deposit state\""},"value":"Wrong deposit state"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","typeString":"literal_string \"Wrong deposit state\""}],"id":5304,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21450:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21450:114:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5313,"nodeType":"ExpressionStatement","src":"21450:114:18"},{"expression":{"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5314,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"21575:8:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_DepositState_$4848_$","typeString":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)"}},"id":5316,"indexExpression":{"id":5315,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"21584:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21575:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5317,"name":"DepositState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"21598:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_DepositState_$4848_$","typeString":"type(enum L1BitcoinDepositor.DepositState)"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21611:9:18","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":4847,"src":"21598:22:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"src":"21575:45:18","typeDescriptions":{"typeIdentifier":"t_enum$_DepositState_$4848","typeString":"enum L1BitcoinDepositor.DepositState"}},"id":5320,"nodeType":"ExpressionStatement","src":"21575:45:18"},{"assignments":[5322,5324,5326],"declarations":[{"constant":false,"id":5322,"mutability":"mutable","name":"initialDepositAmount","nameLocation":"21653:20:18","nodeType":"VariableDeclaration","scope":5418,"src":"21645:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5321,"name":"uint256","nodeType":"ElementaryTypeName","src":"21645:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5324,"mutability":"mutable","name":"tbtcAmount","nameLocation":"21695:10:18","nodeType":"VariableDeclaration","scope":5418,"src":"21687:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5323,"name":"uint256","nodeType":"ElementaryTypeName","src":"21687:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5326,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"21837:14:18","nodeType":"VariableDeclaration","scope":5418,"src":"21829:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21829:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5330,"initialValue":{"arguments":[{"id":5328,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"21881:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5327,"name":"_finalizeDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"21864:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_bytes32_$","typeString":"function (uint256) returns (uint256,uint256,bytes32)"}},"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21864:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_bytes32_$","typeString":"tuple(uint256,uint256,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"21631:261:18"},{"eventCall":{"arguments":[{"id":5332,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"21993:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5335,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"22051:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5333,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"22017:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22031:19:18","memberName":"fromWormholeAddress","nodeType":"MemberAccess","referencedDeclaration":6054,"src":"22017:33:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) pure returns (address)"}},"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22017:49:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5337,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"22080:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22084:6:18","memberName":"sender","nodeType":"MemberAccess","src":"22080:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5339,"name":"initialDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5322,"src":"22104:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5340,"name":"tbtcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"22138:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5331,"name":"DepositFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4926,"src":"21963:16:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256,uint256)"}},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21963:195:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5342,"nodeType":"EmitStatement","src":"21958:200:18"},{"expression":{"arguments":[{"id":5344,"name":"tbtcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"22183:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5345,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"22195:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5343,"name":"_transferTbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"22169:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32)"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22169:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5347,"nodeType":"ExpressionStatement","src":"22169:41:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5350,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"22537:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}],"id":5349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22529:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5348,"name":"address","nodeType":"ElementaryTypeName","src":"22529:7:18","typeDescriptions":{}}},"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22529:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22567:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22559:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5352,"name":"address","nodeType":"ElementaryTypeName","src":"22559:7:18","typeDescriptions":{}}},"id":5355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22559:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22529:40:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5417,"nodeType":"IfStatement","src":"22525:1657:18","trueBody":{"id":5416,"nodeType":"Block","src":"22571:1611:18","statements":[{"assignments":[5359],"declarations":[{"constant":false,"id":5359,"mutability":"mutable","name":"reimbursement","nameLocation":"22939:13:18","nodeType":"VariableDeclaration","scope":5416,"src":"22915:37:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_memory_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement"},"typeName":{"id":5358,"nodeType":"UserDefinedTypeName","pathNode":{"id":5357,"name":"GasReimbursement","nameLocations":["22915:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":4855,"src":"22915:16:18"},"referencedDeclaration":4855,"src":"22915:16:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement"}},"visibility":"internal"}],"id":5363,"initialValue":{"baseExpression":{"id":5360,"name":"gasReimbursements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"22955:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_GasReimbursement_$4855_storage_$","typeString":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement storage ref)"}},"id":5362,"indexExpression":{"id":5361,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"22990:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22955:59:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage","typeString":"struct L1BitcoinDepositor.GasReimbursement storage ref"}},"nodeType":"VariableDeclarationStatement","src":"22915:99:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5364,"name":"reimbursement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5359,"src":"23032:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_memory_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement memory"}},"id":5365,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23046:8:18","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":4851,"src":"23032:22:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23066:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23058:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5366,"name":"address","nodeType":"ElementaryTypeName","src":"23058:7:18","typeDescriptions":{}}},"id":5369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23058:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"23032:36:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5386,"nodeType":"IfStatement","src":"23028:260:18","trueBody":{"id":5385,"nodeType":"Block","src":"23070:218:18","statements":[{"expression":{"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"23088:36:18","subExpression":{"baseExpression":{"id":5371,"name":"gasReimbursements","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"23095:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_GasReimbursement_$4855_storage_$","typeString":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement storage ref)"}},"id":5373,"indexExpression":{"id":5372,"name":"depositKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"23113:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23095:29:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_storage","typeString":"struct L1BitcoinDepositor.GasReimbursement storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5375,"nodeType":"ExpressionStatement","src":"23088:36:18"},{"expression":{"arguments":[{"expression":{"id":5379,"name":"reimbursement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5359,"src":"23189:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_memory_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement memory"}},"id":5380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23203:8:18","memberName":"gasSpent","nodeType":"MemberAccess","referencedDeclaration":4854,"src":"23189:22:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"expression":{"id":5381,"name":"reimbursement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5359,"src":"23233:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_GasReimbursement_$4855_memory_ptr","typeString":"struct L1BitcoinDepositor.GasReimbursement memory"}},"id":5382,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23247:8:18","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":4851,"src":"23233:22:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5376,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"23143:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23161:6:18","memberName":"refund","nodeType":"MemberAccess","referencedDeclaration":2858,"src":"23143:24:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) external"}},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23143:130:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5384,"nodeType":"ExpressionStatement","src":"23143:130:18"}]}},{"condition":{"baseExpression":{"id":5387,"name":"reimbursementAuthorizations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"23442:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5390,"indexExpression":{"expression":{"id":5388,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23470:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23474:6:18","memberName":"sender","nodeType":"MemberAccess","src":"23470:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23442:39:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5415,"nodeType":"IfStatement","src":"23438:734:18","trueBody":{"id":5414,"nodeType":"Block","src":"23483:689:18","statements":[{"assignments":[5392],"declarations":[{"constant":false,"id":5392,"mutability":"mutable","name":"msgValueOffset","nameLocation":"23884:14:18","nodeType":"VariableDeclaration","scope":5414,"src":"23876:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5391,"name":"uint256","nodeType":"ElementaryTypeName","src":"23876:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5397,"initialValue":{"arguments":[{"expression":{"id":5394,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23919:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23923:5:18","memberName":"value","nodeType":"MemberAccess","src":"23919:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5393,"name":"_refundToGasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"23901:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23901:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23876:53:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5401,"name":"gasStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"23994:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5402,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"24005:7:18","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24005:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23994:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23993:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5406,"name":"msgValueOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"24042:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23993:63:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5408,"name":"finalizeDepositGasOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4901,"src":"24083:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23993:114:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5410,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"24129:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24133:6:18","memberName":"sender","nodeType":"MemberAccess","src":"24129:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5398,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"23947:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23965:6:18","memberName":"refund","nodeType":"MemberAccess","referencedDeclaration":2858,"src":"23947:24:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) external"}},"id":5412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:210:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5413,"nodeType":"ExpressionStatement","src":"23947:210:18"}]}}]}}]},"documentation":{"id":5294,"nodeType":"StructuredDocumentation","src":"19821:1513:18","text":"@notice Finalizes the deposit process by transferring ERC20 L1 TBTC\n         to the L2 deposit owner. This function should be called after\n         the deposit was initialized with a call to `initializeDeposit`\n         function and after ERC20 L1 TBTC was minted by the tBTC Bridge\n         to the `L1BitcoinDepositor` contract. Please note several hours\n         may pass between `initializeDeposit`and `finalizeDeposit`.\n         If the reimbursement pool is attached, the function pays out\n         a gas and call's value refund to the caller (if the given\n         caller is authorized for refunds) as well as the deferred gas\n         refund to the caller of `initializeDeposit` corresponding to\n         the finalized deposit.\n @param depositKey The deposit key, as emitted in the `DepositInitialized`\n        event emitted by the `initializeDeposit` function for the deposit.\n @dev Requirements:\n      - `initializeDeposit` was called for the given deposit before,\n      - ERC20 L1 TBTC was minted by tBTC Bridge to this contract,\n      - The function was not called for the given deposit before,\n      - The call must carry a payment for the Wormhole Relayer that\n        is responsible for executing the deposit finalization on the\n        corresponding L2 chain. The payment must be equal to the\n        value returned by the `quoteFinalizeDeposit` function."},"functionSelector":"46d9d49a","id":5419,"implemented":true,"kind":"function","modifiers":[],"name":"finalizeDeposit","nameLocation":"21348:15:18","nodeType":"FunctionDefinition","parameters":{"id":5297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5296,"mutability":"mutable","name":"depositKey","nameLocation":"21372:10:18","nodeType":"VariableDeclaration","scope":5419,"src":"21364:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5295,"name":"uint256","nodeType":"ElementaryTypeName","src":"21364:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21363:20:18"},"returnParameters":{"id":5298,"nodeType":"ParameterList","parameters":[],"src":"21401:0:18"},"scope":5645,"src":"21339:2849:18","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5475,"nodeType":"Block","src":"24743:664:18","statements":[{"assignments":[5428],"declarations":[{"constant":false,"id":5428,"mutability":"mutable","name":"maxGasPrice","nameLocation":"24761:11:18","nodeType":"VariableDeclaration","scope":5475,"src":"24753:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5427,"name":"uint256","nodeType":"ElementaryTypeName","src":"24753:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5432,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5429,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"24775:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24793:11:18","memberName":"maxGasPrice","nodeType":"MemberAccess","referencedDeclaration":2742,"src":"24775:29:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24775:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24753:53:18"},{"assignments":[5434],"declarations":[{"constant":false,"id":5434,"mutability":"mutable","name":"staticGas","nameLocation":"24824:9:18","nodeType":"VariableDeclaration","scope":5475,"src":"24816:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5433,"name":"uint256","nodeType":"ElementaryTypeName","src":"24816:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5438,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5435,"name":"reimbursementPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"24836:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_ReimbursementPool_$2999","typeString":"contract ReimbursementPool"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24854:9:18","memberName":"staticGas","nodeType":"MemberAccess","referencedDeclaration":2739,"src":"24836:27:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24836:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24816:49:18"},{"assignments":[5440],"declarations":[{"constant":false,"id":5440,"mutability":"mutable","name":"gasPrice","nameLocation":"24884:8:18","nodeType":"VariableDeclaration","scope":5475,"src":"24876:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5439,"name":"uint256","nodeType":"ElementaryTypeName","src":"24876:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5449,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5441,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"24895:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24898:8:18","memberName":"gasprice","nodeType":"MemberAccess","src":"24895:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5443,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"24909:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24895:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5447,"name":"maxGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"24961:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"24895:77:18","trueExpression":{"expression":{"id":5445,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"24935:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24938:8:18","memberName":"gasprice","nodeType":"MemberAccess","src":"24935:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24876:96:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5450,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5440,"src":"25092:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25104:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25092:13:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5456,"nodeType":"IfStatement","src":"25088:52:18","trueBody":{"id":5455,"nodeType":"Block","src":"25107:33:18","statements":[{"expression":{"hexValue":"30","id":5453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25128:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5426,"id":5454,"nodeType":"Return","src":"25121:8:18"}]}},{"assignments":[5458],"declarations":[{"constant":false,"id":5458,"mutability":"mutable","name":"gasSpent","nameLocation":"25158:8:18","nodeType":"VariableDeclaration","scope":5475,"src":"25150:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5457,"name":"uint256","nodeType":"ElementaryTypeName","src":"25150:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5463,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5459,"name":"refund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"25170:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5460,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5440,"src":"25179:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25170:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25169:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25150:38:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5464,"name":"staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"25308:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5465,"name":"gasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"25320:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25308:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5470,"nodeType":"IfStatement","src":"25304:59:18","trueBody":{"id":5469,"nodeType":"Block","src":"25330:33:18","statements":[{"expression":{"hexValue":"30","id":5467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25351:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5426,"id":5468,"nodeType":"Return","src":"25344:8:18"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5471,"name":"gasSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"25380:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5472,"name":"staticGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"25391:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25380:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5426,"id":5474,"nodeType":"Return","src":"25373:27:18"}]},"documentation":{"id":5420,"nodeType":"StructuredDocumentation","src":"24194:474:18","text":"@notice The `ReimbursementPool` contract issues refunds based on\n         gas spent. If there is a need to get a specific refund based\n         on WEI value, such a value must be first converted to gas spent.\n         This function does such a conversion.\n @param refund Refund value in WEI.\n @return Refund value as gas spent.\n @dev This function is the reverse of the logic used\n      within `ReimbursementPool.refund`."},"id":5476,"implemented":true,"kind":"function","modifiers":[],"name":"_refundToGasSpent","nameLocation":"24682:17:18","nodeType":"FunctionDefinition","parameters":{"id":5423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5422,"mutability":"mutable","name":"refund","nameLocation":"24708:6:18","nodeType":"VariableDeclaration","scope":5476,"src":"24700:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5421,"name":"uint256","nodeType":"ElementaryTypeName","src":"24700:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24699:16:18"},"returnParameters":{"id":5426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5476,"src":"24734:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5424,"name":"uint256","nodeType":"ElementaryTypeName","src":"24734:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24733:9:18"},"scope":5645,"src":"24673:734:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5490,"nodeType":"Block","src":"25861:68:18","statements":[{"expression":{"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5482,"name":"cost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5480,"src":"25871:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5484,"name":"wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"25900:8:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25909:10:18","memberName":"messageFee","nodeType":"MemberAccess","referencedDeclaration":5887,"src":"25900:19:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25900:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5483,"name":"_quoteFinalizeDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"25878:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25878:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25871:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5489,"nodeType":"ExpressionStatement","src":"25871:51:18"}]},"documentation":{"id":5477,"nodeType":"StructuredDocumentation","src":"25413:374:18","text":"@notice Quotes the payment that must be attached to the `finalizeDeposit`\n         function call. The payment is necessary to cover the cost of\n         the Wormhole Relayer that is responsible for executing the\n         deposit finalization on the corresponding L2 chain.\n @return cost The cost of the `finalizeDeposit` function call in WEI."},"functionSelector":"13b38cce","id":5491,"implemented":true,"kind":"function","modifiers":[],"name":"quoteFinalizeDeposit","nameLocation":"25801:20:18","nodeType":"FunctionDefinition","parameters":{"id":5478,"nodeType":"ParameterList","parameters":[],"src":"25821:2:18"},"returnParameters":{"id":5481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5480,"mutability":"mutable","name":"cost","nameLocation":"25855:4:18","nodeType":"VariableDeclaration","scope":5491,"src":"25847:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5479,"name":"uint256","nodeType":"ElementaryTypeName","src":"25847:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25846:14:18"},"scope":5645,"src":"25792:137:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5514,"nodeType":"Block","src":"26562:383:18","statements":[{"assignments":[5500,null],"declarations":[{"constant":false,"id":5500,"mutability":"mutable","name":"deliveryCost","nameLocation":"26645:12:18","nodeType":"VariableDeclaration","scope":5514,"src":"26637:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5499,"name":"uint256","nodeType":"ElementaryTypeName","src":"26637:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":5507,"initialValue":{"arguments":[{"id":5503,"name":"l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"26714:9:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"hexValue":"30","id":5504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26737:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5505,"name":"l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"26752:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5501,"name":"wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"26663:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26679:21:18","memberName":"quoteEVMDeliveryPrice","nodeType":"MemberAccess","referencedDeclaration":5903,"src":"26663:37:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint16,uint256,uint256) view external returns (uint256,uint256)"}},"id":5506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26663:124:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"26636:151:18"},{"expression":{"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5508,"name":"cost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5497,"src":"26906:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5509,"name":"deliveryCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"26913:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5510,"name":"messageFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"26928:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26913:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26906:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5513,"nodeType":"ExpressionStatement","src":"26906:32:18"}]},"documentation":{"id":5492,"nodeType":"StructuredDocumentation","src":"25935:506:18","text":"@notice Internal version of the `quoteFinalizeDeposit` function that\n         works with a custom Wormhole message fee.\n @param messageFee Custom Wormhole message fee.\n @return cost The cost of the `finalizeDeposit` function call in WEI.\n @dev Implemented based on examples presented as part of the Wormhole SDK:\n      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L23"},"id":5515,"implemented":true,"kind":"function","modifiers":[],"name":"_quoteFinalizeDeposit","nameLocation":"26455:21:18","nodeType":"FunctionDefinition","parameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"messageFee","nameLocation":"26485:10:18","nodeType":"VariableDeclaration","scope":5515,"src":"26477:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5493,"name":"uint256","nodeType":"ElementaryTypeName","src":"26477:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26476:20:18"},"returnParameters":{"id":5498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5497,"mutability":"mutable","name":"cost","nameLocation":"26552:4:18","nodeType":"VariableDeclaration","scope":5515,"src":"26544:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5496,"name":"uint256","nodeType":"ElementaryTypeName","src":"26544:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26543:14:18"},"scope":5645,"src":"26446:499:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5643,"nodeType":"Block","src":"28505:3033:18","statements":[{"expression":{"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5523,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"28633:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5526,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"28666:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5524,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"28642:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28656:9:18","memberName":"normalize","nodeType":"MemberAccess","referencedDeclaration":6077,"src":"28642:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28642:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28633:40:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5529,"nodeType":"ExpressionStatement","src":"28633:40:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5531,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"28692:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28701:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"28692:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7420746f6f206c6f7720746f20627269646765","id":5534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"28704:26:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45","typeString":"literal_string \"Amount too low to bridge\""},"value":"Amount too low to bridge"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45","typeString":"literal_string \"Amount too low to bridge\""}],"id":5530,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"28684:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28684:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5536,"nodeType":"ExpressionStatement","src":"28684:47:18"},{"assignments":[5538],"declarations":[{"constant":false,"id":5538,"mutability":"mutable","name":"wormholeMessageFee","nameLocation":"28894:18:18","nodeType":"VariableDeclaration","scope":5643,"src":"28886:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5537,"name":"uint256","nodeType":"ElementaryTypeName","src":"28886:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5542,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5539,"name":"wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"28915:8:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28924:10:18","memberName":"messageFee","nodeType":"MemberAccess","referencedDeclaration":5887,"src":"28915:19:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28915:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28886:50:18"},{"assignments":[5544],"declarations":[{"constant":false,"id":5544,"mutability":"mutable","name":"cost","nameLocation":"28954:4:18","nodeType":"VariableDeclaration","scope":5643,"src":"28946:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5543,"name":"uint256","nodeType":"ElementaryTypeName","src":"28946:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5548,"initialValue":{"arguments":[{"id":5546,"name":"wormholeMessageFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"28983:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5545,"name":"_quoteFinalizeDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"28961:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28961:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28946:56:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"29021:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29025:5:18","memberName":"value","nodeType":"MemberAccess","src":"29021:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5552,"name":"cost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"29034:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29021:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061796d656e7420666f7220576f726d686f6c652052656c6179657220697320746f6f206c6f77","id":5554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29040:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc","typeString":"literal_string \"Payment for Wormhole Relayer is too low\""},"value":"Payment for Wormhole Relayer is too low"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc","typeString":"literal_string \"Payment for Wormhole Relayer is too low\""}],"id":5549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"29013:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29013:69:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5556,"nodeType":"ExpressionStatement","src":"29013:69:18"},{"expression":{"arguments":[{"arguments":[{"id":5562,"name":"wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"29266:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}],"id":5561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29258:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5560,"name":"address","nodeType":"ElementaryTypeName","src":"29258:7:18","typeDescriptions":{}}},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29258:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5564,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"29288:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5557,"name":"tbtcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"29226:9:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}},"id":5559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29236:21:18","memberName":"safeIncreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"29226:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$3379_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$3379_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29226:69:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5566,"nodeType":"ExpressionStatement","src":"29226:69:18"},{"assignments":[5568],"declarations":[{"constant":false,"id":5568,"mutability":"mutable","name":"transferSequence","nameLocation":"29589:16:18","nodeType":"VariableDeclaration","scope":5643,"src":"29582:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5567,"name":"uint64","nodeType":"ElementaryTypeName","src":"29582:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":5589,"initialValue":{"arguments":[{"arguments":[{"id":5575,"name":"tbtcToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"29724:9:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$3379","typeString":"contract IERC20Upgradeable"}],"id":5574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29716:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5573,"name":"address","nodeType":"ElementaryTypeName","src":"29716:7:18","typeDescriptions":{}}},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29716:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5577,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"29748:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5578,"name":"l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"29768:9:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"id":5581,"name":"l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"29823:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5579,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"29791:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29805:17:18","memberName":"toWormholeAddress","nodeType":"MemberAccess","referencedDeclaration":6034,"src":"29791:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29791:50:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"30","id":5583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29855:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"id":5586,"name":"l2Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5520,"src":"29944:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5584,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"29933:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29937:6:18","memberName":"encode","nodeType":"MemberAccess","src":"29933:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29933:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5569,"name":"wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"29608:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29628:25:18","memberName":"transferTokensWithPayload","nodeType":"MemberAccess","referencedDeclaration":5995,"src":"29608:45:18","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_uint256_$_t_uint16_$_t_bytes32_$_t_uint32_$_t_bytes_memory_ptr_$returns$_t_uint64_$","typeString":"function (address,uint256,uint16,bytes32,uint32,bytes memory) payable external returns (uint64)"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5571,"name":"wormholeMessageFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"29674:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"29608:94:18","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_uint256_$_t_uint16_$_t_bytes32_$_t_uint32_$_t_bytes_memory_ptr_$returns$_t_uint64_$value","typeString":"function (address,uint256,uint16,bytes32,uint32,bytes memory) payable external returns (uint64)"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29608:413:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"29582:439:18"},{"assignments":[5595],"declarations":[{"constant":false,"id":5595,"mutability":"mutable","name":"additionalVaas","nameLocation":"30159:14:18","nodeType":"VariableDeclaration","scope":5643,"src":"30117:56:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey[]"},"typeName":{"baseType":{"id":5593,"nodeType":"UserDefinedTypeName","pathNode":{"id":5592,"name":"WormholeTypes.VaaKey","nameLocations":["30117:13:18","30131:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":5873,"src":"30117:20:18"},"referencedDeclaration":5873,"src":"30117:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_storage_ptr","typeString":"struct WormholeTypes.VaaKey"}},"id":5594,"nodeType":"ArrayTypeName","src":"30117:22:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_storage_$dyn_storage_ptr","typeString":"struct WormholeTypes.VaaKey[]"}},"visibility":"internal"}],"id":5602,"initialValue":{"arguments":[{"hexValue":"31","id":5600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30203:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"30176:26:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct WormholeTypes.VaaKey memory[] memory)"},"typeName":{"baseType":{"id":5597,"nodeType":"UserDefinedTypeName","pathNode":{"id":5596,"name":"WormholeTypes.VaaKey","nameLocations":["30180:13:18","30194:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":5873,"src":"30180:20:18"},"referencedDeclaration":5873,"src":"30180:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_storage_ptr","typeString":"struct WormholeTypes.VaaKey"}},"id":5598,"nodeType":"ArrayTypeName","src":"30180:22:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_storage_$dyn_storage_ptr","typeString":"struct WormholeTypes.VaaKey[]"}}},"id":5601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30176:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"30117:88:18"},{"expression":{"id":5620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5603,"name":"additionalVaas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"30215:14:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory[] memory"}},"id":5605,"indexExpression":{"hexValue":"30","id":5604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30230:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"30215:17:18","typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5608,"name":"wormhole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"30279:8:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormhole_$5888","typeString":"contract IWormhole"}},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30288:7:18","memberName":"chainId","nodeType":"MemberAccess","referencedDeclaration":5881,"src":"30279:16:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint16_$","typeString":"function () view external returns (uint16)"}},"id":5610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30279:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"arguments":[{"arguments":[{"id":5615,"name":"wormholeTokenBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"30384:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IWormholeTokenBridge_$6013","typeString":"contract IWormholeTokenBridge"}],"id":5614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30376:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5613,"name":"address","nodeType":"ElementaryTypeName","src":"30376:7:18","typeDescriptions":{}}},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30376:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5611,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"30327:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30341:17:18","memberName":"toWormholeAddress","nodeType":"MemberAccess","referencedDeclaration":6034,"src":"30327:31:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30327:91:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5618,"name":"transferSequence","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5568,"src":"30442:16:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"expression":{"id":5606,"name":"WormholeTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5874,"src":"30235:13:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeTypes_$5874_$","typeString":"type(library WormholeTypes)"}},"id":5607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30249:6:18","memberName":"VaaKey","nodeType":"MemberAccess","referencedDeclaration":5873,"src":"30235:20:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_VaaKey_$5873_storage_ptr_$","typeString":"type(struct WormholeTypes.VaaKey storage pointer)"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["30270:7:18","30311:14:18","30432:8:18"],"names":["chainId","emitterAddress","sequence"],"nodeType":"FunctionCall","src":"30235:234:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory"}},"src":"30215:254:18","typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory"}},"id":5621,"nodeType":"ExpressionStatement","src":"30215:254:18"},{"expression":{"arguments":[{"id":5629,"name":"l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"31082:9:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":5630,"name":"l2BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"31105:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"","id":5633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31143:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31137:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5631,"name":"bytes","nodeType":"ElementaryTypeName","src":"31137:5:18","typeDescriptions":{}}},"id":5634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31137:9:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31265:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5636,"name":"l2FinalizeDepositGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"31309:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5637,"name":"additionalVaas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"31348:14:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory[] memory"}},{"id":5638,"name":"l2ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"31376:9:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":5639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"31469:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31473:6:18","memberName":"sender","nodeType":"MemberAccess","src":"31469:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory[] memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey memory[] memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5622,"name":"wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"31005:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31021:13:18","memberName":"sendVaasToEvm","nodeType":"MemberAccess","referencedDeclaration":5927,"src":"31005:29:18","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_$_t_uint16_$_t_address_$returns$_t_uint64_$","typeString":"function (uint16,address,bytes memory,uint256,uint256,struct WormholeTypes.VaaKey memory[] memory,uint16,address) payable external returns (uint64)"}},"id":5628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5625,"name":"cost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"31042:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5626,"name":"wormholeMessageFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"31049:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31042:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"31005:63:18","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_$_t_uint16_$_t_address_$returns$_t_uint64_$value","typeString":"function (uint16,address,bytes memory,uint256,uint256,struct WormholeTypes.VaaKey memory[] memory,uint16,address) payable external returns (uint64)"}},"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31005:526:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":5642,"nodeType":"ExpressionStatement","src":"31005:526:18"}]},"documentation":{"id":5516,"nodeType":"StructuredDocumentation","src":"26951:1481:18","text":"@notice Transfers ERC20 L1 TBTC to the L2 deposit owner using the Wormhole\n         protocol. The function initiates a Wormhole token transfer that\n         locks the ERC20 L1 TBTC within the Wormhole Token Bridge contract\n         and assigns Wormhole-wrapped L2 TBTC to the corresponding\n         `L2WormholeGateway` contract. Then, the function notifies the\n         `L2BitcoinDepositor` contract by sending a Wormhole message\n         containing the VAA of the Wormhole token transfer. The\n         `L2BitcoinDepositor` contract receives the Wormhole message,\n         and calls the `L2WormholeGateway` contract that redeems\n         Wormhole-wrapped L2 TBTC from the Wormhole Token Bridge and\n         uses it to mint canonical L2 TBTC to the L2 deposit owner address.\n @param amount Amount of TBTC L1 ERC20 to transfer (1e18 precision).\n @param l2Receiver Address of the L2 deposit owner.\n @dev Requirements:\n      - The normalized amount (1e8 precision) must be greater than 0,\n      - The appropriate payment for the Wormhole Relayer must be\n        attached to the call (as calculated by `quoteFinalizeDeposit`).\n @dev Implemented based on examples presented as part of the Wormhole SDK:\n      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L29"},"id":5644,"implemented":true,"kind":"function","modifiers":[],"name":"_transferTbtc","nameLocation":"28446:13:18","nodeType":"FunctionDefinition","parameters":{"id":5521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5518,"mutability":"mutable","name":"amount","nameLocation":"28468:6:18","nodeType":"VariableDeclaration","scope":5644,"src":"28460:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5517,"name":"uint256","nodeType":"ElementaryTypeName","src":"28460:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5520,"mutability":"mutable","name":"l2Receiver","nameLocation":"28484:10:18","nodeType":"VariableDeclaration","scope":5644,"src":"28476:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"28476:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"28459:36:18"},"returnParameters":{"id":5522,"nodeType":"ParameterList","parameters":[],"src":"28505:0:18"},"scope":5645,"src":"28437:3101:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5646,"src":"4405:27135:18","usedErrors":[]}],"src":"971:30570:18"},"id":18},"contracts/l2/L2BitcoinDepositor.sol":{"ast":{"absolutePath":"contracts/l2/L2BitcoinDepositor.sol","exportedSymbols":{"ContextUpgradeable":[4172],"IBridge":[4795],"IBridgeTypes":[4760],"IL2WormholeGateway":[5658],"IWormhole":[5888],"IWormholeReceiver":[5945],"IWormholeRelayer":[5928],"IWormholeTokenBridge":[6013],"Initializable":[3301],"L2BitcoinDepositor":[5863],"OwnableUpgradeable":[3132],"WormholeTypes":[5874],"WormholeUtils":[6078]},"id":5864,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":5647,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"971:23:19"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5648,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5864,"sourceUnit":3133,"src":"996:75:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/integrator/IBridge.sol","file":"../integrator/IBridge.sol","id":5649,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5864,"sourceUnit":4796,"src":"1073:35:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/l2/Wormhole.sol","file":"./Wormhole.sol","id":5650,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5864,"sourceUnit":6079,"src":"1109:24:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IL2WormholeGateway","contractDependencies":[],"contractKind":"interface","documentation":{"id":5651,"nodeType":"StructuredDocumentation","src":"1135:89:19","text":"@title IL2WormholeGateway\n @notice Interface to the `L2WormholeGateway` contract."},"fullyImplemented":false,"id":5658,"linearizedBaseContracts":[5658],"name":"IL2WormholeGateway","nameLocation":"1234:18:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5652,"nodeType":"StructuredDocumentation","src":"1259:48:19","text":"@dev See ./L2WormholeGateway.sol#receiveTbtc"},"functionSelector":"5d21a596","id":5657,"implemented":false,"kind":"function","modifiers":[],"name":"receiveTbtc","nameLocation":"1321:11:19","nodeType":"FunctionDefinition","parameters":{"id":5655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5654,"mutability":"mutable","name":"vaa","nameLocation":"1346:3:19","nodeType":"VariableDeclaration","scope":5657,"src":"1333:16:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5653,"name":"bytes","nodeType":"ElementaryTypeName","src":"1333:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1332:18:19"},"returnParameters":{"id":5656,"nodeType":"ParameterList","parameters":[],"src":"1359:0:19"},"scope":5658,"src":"1312:48:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5864,"src":"1224:138:19","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":5660,"name":"IWormholeReceiver","nameLocations":["2125:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":5945,"src":"2125:17:19"},"id":5661,"nodeType":"InheritanceSpecifier","src":"2125:17:19"},{"baseName":{"id":5662,"name":"OwnableUpgradeable","nameLocations":["2144:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":3132,"src":"2144:18:19"},"id":5663,"nodeType":"InheritanceSpecifier","src":"2144:18:19"}],"canonicalName":"L2BitcoinDepositor","contractDependencies":[],"contractKind":"contract","documentation":{"id":5659,"nodeType":"StructuredDocumentation","src":"1364:688:19","text":"@title L2BitcoinDepositor\n @notice This contract is part of the direct bridging mechanism allowing\n         users to obtain ERC20 TBTC on supported L2 chains, without the need\n         to interact with the L1 tBTC ledger chain where minting occurs.\n         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with\n         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the\n         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`\n         pair is responsible for a specific L2 chain.\n         Please consult the `L1BitcoinDepositor` docstring for an\n         outline of the direct bridging mechanism"},"fullyImplemented":true,"id":5863,"linearizedBaseContracts":[5863,3132,4172,3301,5945],"name":"L2BitcoinDepositor","nameLocation":"2103:18:19","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":5664,"nodeType":"StructuredDocumentation","src":"2169:45:19","text":"@notice `WormholeRelayer` contract on L2."},"functionSelector":"da25b725","id":5667,"mutability":"mutable","name":"wormholeRelayer","nameLocation":"2243:15:19","nodeType":"VariableDeclaration","scope":5863,"src":"2219:39:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"},"typeName":{"id":5666,"nodeType":"UserDefinedTypeName","pathNode":{"id":5665,"name":"IWormholeRelayer","nameLocations":["2219:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":5928,"src":"2219:16:19"},"referencedDeclaration":5928,"src":"2219:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"visibility":"public"},{"constant":false,"documentation":{"id":5668,"nodeType":"StructuredDocumentation","src":"2264:52:19","text":"@notice tBTC `L2WormholeGateway` contract on L2."},"functionSelector":"aa82e33b","id":5671,"mutability":"mutable","name":"l2WormholeGateway","nameLocation":"2347:17:19","nodeType":"VariableDeclaration","scope":5863,"src":"2321:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"},"typeName":{"id":5670,"nodeType":"UserDefinedTypeName","pathNode":{"id":5669,"name":"IL2WormholeGateway","nameLocations":["2321:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":5658,"src":"2321:18:19"},"referencedDeclaration":5658,"src":"2321:18:19","typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"}},"visibility":"public"},{"constant":false,"documentation":{"id":5672,"nodeType":"StructuredDocumentation","src":"2370:60:19","text":"@notice Wormhole chain ID of the corresponding L1 chain."},"functionSelector":"12622e5b","id":5674,"mutability":"mutable","name":"l1ChainId","nameLocation":"2449:9:19","nodeType":"VariableDeclaration","scope":5863,"src":"2435:23:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5673,"name":"uint16","nodeType":"ElementaryTypeName","src":"2435:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"public"},{"constant":false,"documentation":{"id":5675,"nodeType":"StructuredDocumentation","src":"2464:77:19","text":"@notice tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain."},"functionSelector":"e1551fc9","id":5677,"mutability":"mutable","name":"l1BitcoinDepositor","nameLocation":"2561:18:19","nodeType":"VariableDeclaration","scope":5863,"src":"2546:33:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5676,"name":"address","nodeType":"ElementaryTypeName","src":"2546:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"69a2a6d267e87f99180657174ca85389598d457ba949435ee4940f621bb849cf","id":5689,"name":"DepositInitialized","nameLocation":"2592:18:19","nodeType":"EventDefinition","parameters":{"id":5688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5680,"indexed":false,"mutability":"mutable","name":"fundingTx","nameLocation":"2647:9:19","nodeType":"VariableDeclaration","scope":5689,"src":"2620:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_memory_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":5679,"nodeType":"UserDefinedTypeName","pathNode":{"id":5678,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["2620:12:19","2633:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"2620:26:19"},"referencedDeclaration":4731,"src":"2620:26:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"},{"constant":false,"id":5683,"indexed":false,"mutability":"mutable","name":"reveal","nameLocation":"2697:6:19","nodeType":"VariableDeclaration","scope":5689,"src":"2666:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_memory_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"},"typeName":{"id":5682,"nodeType":"UserDefinedTypeName","pathNode":{"id":5681,"name":"IBridgeTypes.DepositRevealInfo","nameLocations":["2666:12:19","2679:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":4744,"src":"2666:30:19"},"referencedDeclaration":4744,"src":"2666:30:19","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_storage_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"}},"visibility":"internal"},{"constant":false,"id":5685,"indexed":true,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"2729:14:19","nodeType":"VariableDeclaration","scope":5689,"src":"2713:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5684,"name":"address","nodeType":"ElementaryTypeName","src":"2713:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5687,"indexed":true,"mutability":"mutable","name":"l2Sender","nameLocation":"2769:8:19","nodeType":"VariableDeclaration","scope":5689,"src":"2753:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5686,"name":"address","nodeType":"ElementaryTypeName","src":"2753:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2610:173:19"},"src":"2586:198:19"},{"body":{"id":5696,"nodeType":"Block","src":"2857:39:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5693,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"2867:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2867:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5695,"nodeType":"ExpressionStatement","src":"2867:22:19"}]},"documentation":{"id":5690,"nodeType":"StructuredDocumentation","src":"2790:48:19","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5697,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5691,"nodeType":"ParameterList","parameters":[],"src":"2854:2:19"},"returnParameters":{"id":5692,"nodeType":"ParameterList","parameters":[],"src":"2857:0:19"},"scope":5863,"src":"2843:53:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5747,"nodeType":"Block","src":"3046:451:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5708,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"3056:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3056:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5710,"nodeType":"ExpressionStatement","src":"3056:16:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5712,"name":"_wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"3104:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3132:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3124:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5713,"name":"address","nodeType":"ElementaryTypeName","src":"3124:7:19","typeDescriptions":{}}},"id":5716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3124:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3104:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576f726d686f6c6552656c6179657220616464726573732063616e6e6f74206265207a65726f","id":5718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3148:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","typeString":"literal_string \"WormholeRelayer address cannot be zero\""},"value":"WormholeRelayer address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","typeString":"literal_string \"WormholeRelayer address cannot be zero\""}],"id":5711,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3083:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3083:115:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5720,"nodeType":"ExpressionStatement","src":"3083:115:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5722,"name":"_l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"3229:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3259:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3251:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5723,"name":"address","nodeType":"ElementaryTypeName","src":"3251:7:19","typeDescriptions":{}}},"id":5726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3229:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c32576f726d686f6c654761746577617920616464726573732063616e6e6f74206265207a65726f","id":5728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3275:42:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","typeString":"literal_string \"L2WormholeGateway address cannot be zero\""},"value":"L2WormholeGateway address cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","typeString":"literal_string \"L2WormholeGateway address cannot be zero\""}],"id":5721,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3208:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3208:119:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5730,"nodeType":"ExpressionStatement","src":"3208:119:19"},{"expression":{"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5731,"name":"wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"3338:15:19","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5733,"name":"_wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"3373:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5732,"name":"IWormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5928,"src":"3356:16:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWormholeRelayer_$5928_$","typeString":"type(contract IWormholeRelayer)"}},"id":5734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3356:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"src":"3338:52:19","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}},"id":5736,"nodeType":"ExpressionStatement","src":"3338:52:19"},{"expression":{"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5737,"name":"l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5671,"src":"3400:17:19","typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5739,"name":"_l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"3439:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5738,"name":"IL2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"3420:18:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IL2WormholeGateway_$5658_$","typeString":"type(contract IL2WormholeGateway)"}},"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3420:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"}},"src":"3400:58:19","typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"}},"id":5742,"nodeType":"ExpressionStatement","src":"3400:58:19"},{"expression":{"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5743,"name":"l1ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"3468:9:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5744,"name":"_l1ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"3480:10:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3468:22:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5746,"nodeType":"ExpressionStatement","src":"3468:22:19"}]},"functionSelector":"7ebef529","id":5748,"implemented":true,"kind":"function","modifiers":[{"id":5706,"kind":"modifierInvocation","modifierName":{"id":5705,"name":"initializer","nameLocations":["3034:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":3203,"src":"3034:11:19"},"nodeType":"ModifierInvocation","src":"3034:11:19"}],"name":"initialize","nameLocation":"2911:10:19","nodeType":"FunctionDefinition","parameters":{"id":5704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5699,"mutability":"mutable","name":"_wormholeRelayer","nameLocation":"2939:16:19","nodeType":"VariableDeclaration","scope":5748,"src":"2931:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5698,"name":"address","nodeType":"ElementaryTypeName","src":"2931:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5701,"mutability":"mutable","name":"_l2WormholeGateway","nameLocation":"2973:18:19","nodeType":"VariableDeclaration","scope":5748,"src":"2965:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5700,"name":"address","nodeType":"ElementaryTypeName","src":"2965:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5703,"mutability":"mutable","name":"_l1ChainId","nameLocation":"3008:10:19","nodeType":"VariableDeclaration","scope":5748,"src":"3001:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5702,"name":"uint16","nodeType":"ElementaryTypeName","src":"3001:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2921:103:19"},"returnParameters":{"id":5707,"nodeType":"ParameterList","parameters":[],"src":"3046:0:19"},"scope":5863,"src":"2902:595:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5780,"nodeType":"Block","src":"4170:304:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5757,"name":"l1BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"4201:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4231:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4223:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5758,"name":"address","nodeType":"ElementaryTypeName","src":"4223:7:19","typeDescriptions":{}}},"id":5761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4223:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4201:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c3120426974636f696e204465706f7369746f7220616c726561647920736574","id":5763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4247:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6","typeString":"literal_string \"L1 Bitcoin Depositor already set\""},"value":"L1 Bitcoin Depositor already set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6","typeString":"literal_string \"L1 Bitcoin Depositor already set\""}],"id":5756,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4180:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:111:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5765,"nodeType":"ExpressionStatement","src":"4180:111:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5767,"name":"_l1BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"4322:19:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4353:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4345:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5768,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:19","typeDescriptions":{}}},"id":5771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4345:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4322:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c3120426974636f696e204465706f7369746f72206d757374206e6f7420626520307830","id":5773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4369:38:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314","typeString":"literal_string \"L1 Bitcoin Depositor must not be 0x0\""},"value":"L1 Bitcoin Depositor must not be 0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314","typeString":"literal_string \"L1 Bitcoin Depositor must not be 0x0\""}],"id":5766,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4301:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4301:116:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5775,"nodeType":"ExpressionStatement","src":"4301:116:19"},{"expression":{"id":5778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5776,"name":"l1BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"4427:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5777,"name":"_l1BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"4448:19:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4427:40:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5779,"nodeType":"ExpressionStatement","src":"4427:40:19"}]},"documentation":{"id":5749,"nodeType":"StructuredDocumentation","src":"3503:560:19","text":"@notice Sets the address of the `L1BitcoinDepositor` contract on the\n         corresponding L1 chain. This function solves the chicken-and-egg\n         problem of setting the `L1BitcoinDepositor` contract address\n         on the `L2BitcoinDepositor` contract and vice versa.\n @param _l1BitcoinDepositor Address of the `L1BitcoinDepositor` contract.\n @dev Requirements:\n      - Can be called only by the contract owner,\n      - The address must not be set yet,\n      - The new address must not be 0x0."},"functionSelector":"31446c46","id":5781,"implemented":true,"kind":"function","modifiers":[{"id":5754,"kind":"modifierInvocation","modifierName":{"id":5753,"name":"onlyOwner","nameLocations":["4156:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":3046,"src":"4156:9:19"},"nodeType":"ModifierInvocation","src":"4156:9:19"}],"name":"attachL1BitcoinDepositor","nameLocation":"4077:24:19","nodeType":"FunctionDefinition","parameters":{"id":5752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5751,"mutability":"mutable","name":"_l1BitcoinDepositor","nameLocation":"4110:19:19","nodeType":"VariableDeclaration","scope":5781,"src":"4102:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5750,"name":"address","nodeType":"ElementaryTypeName","src":"4102:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4101:29:19"},"returnParameters":{"id":5755,"nodeType":"ParameterList","parameters":[],"src":"4170:0:19"},"scope":5863,"src":"4068:406:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5801,"nodeType":"Block","src":"6139:87:19","statements":[{"eventCall":{"arguments":[{"id":5794,"name":"fundingTx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5785,"src":"6173:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo calldata"}},{"id":5795,"name":"reveal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"6184:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo calldata"}},{"id":5796,"name":"l2DepositOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5790,"src":"6192:14:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5797,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6208:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6212:6:19","memberName":"sender","nodeType":"MemberAccess","src":"6208:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo calldata"},{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5793,"name":"DepositInitialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"6154:18:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_BitcoinTxInfo_$4731_memory_ptr_$_t_struct$_DepositRevealInfo_$4744_memory_ptr_$_t_address_$_t_address_$returns$__$","typeString":"function (struct IBridgeTypes.BitcoinTxInfo memory,struct IBridgeTypes.DepositRevealInfo memory,address,address)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6154:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5800,"nodeType":"EmitStatement","src":"6149:70:19"}]},"documentation":{"id":5782,"nodeType":"StructuredDocumentation","src":"4480:1469:19","text":"@notice Initializes the deposit process on L2 by emitting an event\n         containing the deposit data (funding transaction and\n         components of the P2(W)SH deposit address). The event is\n         supposed to be picked up by the relayer and used to initialize\n         the deposit on L1 through the `L1BitcoinDepositor` contract.\n @param fundingTx Bitcoin funding transaction data.\n @param reveal Deposit reveal data.\n @param l2DepositOwner Address of the L2 deposit owner.\n @dev The alternative approach of using Wormhole Relayer to send the\n      deposit data to L1 was considered. However, it turned out to be\n      too expensive. For example, relying deposit data from Base L2 to\n      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).\n      Moreover, the next iteration of the direct bridging mechanism\n      assumes that no L2 transaction will be required to initialize the\n      deposit and the relayer should obtain the deposit data off-chain.\n      There is a high chance this function will be removed then.\n      That said, there was no sense to explore another cross-chain\n      messaging solutions. Relying on simple on-chain event and custom\n      off-chain relayer seems to be the most reasonable way to go. It\n      also aligns with the future direction of the direct bridging mechanism."},"functionSelector":"642dc033","id":5802,"implemented":true,"kind":"function","modifiers":[],"name":"initializeDeposit","nameLocation":"5963:17:19","nodeType":"FunctionDefinition","parameters":{"id":5791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5785,"mutability":"mutable","name":"fundingTx","nameLocation":"6026:9:19","nodeType":"VariableDeclaration","scope":5802,"src":"5990:45:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_calldata_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"},"typeName":{"id":5784,"nodeType":"UserDefinedTypeName","pathNode":{"id":5783,"name":"IBridgeTypes.BitcoinTxInfo","nameLocations":["5990:12:19","6003:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4731,"src":"5990:26:19"},"referencedDeclaration":4731,"src":"5990:26:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitcoinTxInfo_$4731_storage_ptr","typeString":"struct IBridgeTypes.BitcoinTxInfo"}},"visibility":"internal"},{"constant":false,"id":5788,"mutability":"mutable","name":"reveal","nameLocation":"6085:6:19","nodeType":"VariableDeclaration","scope":5802,"src":"6045:46:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_calldata_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"},"typeName":{"id":5787,"nodeType":"UserDefinedTypeName","pathNode":{"id":5786,"name":"IBridgeTypes.DepositRevealInfo","nameLocations":["6045:12:19","6058:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":4744,"src":"6045:30:19"},"referencedDeclaration":4744,"src":"6045:30:19","typeDescriptions":{"typeIdentifier":"t_struct$_DepositRevealInfo_$4744_storage_ptr","typeString":"struct IBridgeTypes.DepositRevealInfo"}},"visibility":"internal"},{"constant":false,"id":5790,"mutability":"mutable","name":"l2DepositOwner","nameLocation":"6109:14:19","nodeType":"VariableDeclaration","scope":5802,"src":"6101:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5789,"name":"address","nodeType":"ElementaryTypeName","src":"6101:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5980:149:19"},"returnParameters":{"id":5792,"nodeType":"ParameterList","parameters":[],"src":"6139:0:19"},"scope":5863,"src":"5954:272:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5944],"body":{"id":5861,"nodeType":"Block","src":"7770:645:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5818,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7801:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7805:6:19","memberName":"sender","nodeType":"MemberAccess","src":"7801:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5822,"name":"wormholeRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"7823:15:19","typeDescriptions":{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IWormholeRelayer_$5928","typeString":"contract IWormholeRelayer"}],"id":5821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7815:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5820,"name":"address","nodeType":"ElementaryTypeName","src":"7815:7:19","typeDescriptions":{}}},"id":5823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7815:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7801:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420576f726d686f6c652052656c61796572","id":5825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7853:32:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3","typeString":"literal_string \"Caller is not Wormhole Relayer\""},"value":"Caller is not Wormhole Relayer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3","typeString":"literal_string \"Caller is not Wormhole Relayer\""}],"id":5817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7780:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7780:115:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5827,"nodeType":"ExpressionStatement","src":"7780:115:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5829,"name":"sourceChain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5812,"src":"7927:11:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5830,"name":"l1ChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"7942:9:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7927:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536f7572636520636861696e206973206e6f7420746865206578706563746564204c3120636861696e","id":5832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7965:43:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92","typeString":"literal_string \"Source chain is not the expected L1 chain\""},"value":"Source chain is not the expected L1 chain"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92","typeString":"literal_string \"Source chain is not the expected L1 chain\""}],"id":5828,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7906:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7906:112:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5834,"nodeType":"ExpressionStatement","src":"7906:112:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5838,"name":"sourceAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"8084:13:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5836,"name":"WormholeUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6078,"src":"8050:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_WormholeUtils_$6078_$","typeString":"type(library WormholeUtils)"}},"id":5837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8064:19:19","memberName":"fromWormholeAddress","nodeType":"MemberAccess","referencedDeclaration":6054,"src":"8050:33:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) pure returns (address)"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8050:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5840,"name":"l1BitcoinDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"8118:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8050:86:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536f757263652061646472657373206973206e6f7420746865206578706563746564204c3120426974636f696e206465706f7369746f72","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8150:57:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967","typeString":"literal_string \"Source address is not the expected L1 Bitcoin depositor\""},"value":"Source address is not the expected L1 Bitcoin depositor"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967","typeString":"literal_string \"Source address is not the expected L1 Bitcoin depositor\""}],"id":5835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8029:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8029:188:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5844,"nodeType":"ExpressionStatement","src":"8029:188:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5846,"name":"additionalVaas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"8249:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8264:6:19","memberName":"length","nodeType":"MemberAccess","src":"8249:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8274:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8249:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45787065637465642031206164646974696f6e616c20564141206b657920666f7220746f6b656e207472616e73666572","id":5850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8289:50:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae","typeString":"literal_string \"Expected 1 additional VAA key for token transfer\""},"value":"Expected 1 additional VAA key for token transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae","typeString":"literal_string \"Expected 1 additional VAA key for token transfer\""}],"id":5845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8228:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8228:121:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5852,"nodeType":"ExpressionStatement","src":"8228:121:19"},{"expression":{"arguments":[{"baseExpression":{"id":5856,"name":"additionalVaas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"8390:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5858,"indexExpression":{"hexValue":"30","id":5857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8405:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8390:17:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5853,"name":"l2WormholeGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5671,"src":"8360:17:19","typeDescriptions":{"typeIdentifier":"t_contract$_IL2WormholeGateway_$5658","typeString":"contract IL2WormholeGateway"}},"id":5855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8378:11:19","memberName":"receiveTbtc","nodeType":"MemberAccess","referencedDeclaration":5657,"src":"8360:29:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) external"}},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8360:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5860,"nodeType":"ExpressionStatement","src":"8360:48:19"}]},"documentation":{"id":5803,"nodeType":"StructuredDocumentation","src":"6232:1340:19","text":"@notice Receives Wormhole messages originating from the corresponding\n         `L1BitcoinDepositor` contract that lives on the L1 chain.\n         Messages are issued upon deposit finalization on L1 and\n         are supposed to carry the VAA of the Wormhole token transfer of\n         ERC20 L1 TBTC to the L2 chain. This contract performs some basic\n         checks and forwards the VAA to the `L2WormholeGateway` contract\n         that is authorized to withdraw the Wormhole-wrapped L2 TBTC\n         from the Wormhole Token Bridge (representing the ERC20 TBTC\n         locked on L1) and use it to mint the canonical L2 TBTC for the\n         deposit owner.\n @param additionalVaas Additional VAAs that are part of the Wormhole message.\n @param sourceAddress Address of the source of the message (in Wormhole format).\n @param sourceChain Wormhole chain ID of the source chain.\n @dev Requirements:\n      - Can be called only by the Wormhole Relayer contract,\n      - The source chain must be the expected L1 chain,\n      - The source address must be the corresponding\n        `L1BitcoinDepositor` contract,\n      - The message must carry exactly 1 additional VAA key representing\n        the token transfer."},"functionSelector":"529dca32","id":5862,"implemented":true,"kind":"function","modifiers":[],"name":"receiveWormholeMessages","nameLocation":"7586:23:19","nodeType":"FunctionDefinition","parameters":{"id":5815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5862,"src":"7619:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5804,"name":"bytes","nodeType":"ElementaryTypeName","src":"7619:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5808,"mutability":"mutable","name":"additionalVaas","nameLocation":"7656:14:19","nodeType":"VariableDeclaration","scope":5862,"src":"7641:29:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5806,"name":"bytes","nodeType":"ElementaryTypeName","src":"7641:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5807,"nodeType":"ArrayTypeName","src":"7641:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":5810,"mutability":"mutable","name":"sourceAddress","nameLocation":"7688:13:19","nodeType":"VariableDeclaration","scope":5862,"src":"7680:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7680:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5812,"mutability":"mutable","name":"sourceChain","nameLocation":"7718:11:19","nodeType":"VariableDeclaration","scope":5862,"src":"7711:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5811,"name":"uint16","nodeType":"ElementaryTypeName","src":"7711:6:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5862,"src":"7739:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5813,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7739:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7609:143:19"},"returnParameters":{"id":5816,"nodeType":"ParameterList","parameters":[],"src":"7770:0:19"},"scope":5863,"src":"7577:838:19","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":5864,"src":"2094:6323:19","usedErrors":[]}],"src":"971:7447:19"},"id":19},"contracts/l2/Wormhole.sol":{"ast":{"absolutePath":"contracts/l2/Wormhole.sol","exportedSymbols":{"IWormhole":[5888],"IWormholeReceiver":[5945],"IWormholeRelayer":[5928],"IWormholeTokenBridge":[6013],"WormholeTypes":[5874],"WormholeUtils":[6078]},"id":6079,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":5865,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"971:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"WormholeTypes","contractDependencies":[],"contractKind":"library","documentation":{"id":5866,"nodeType":"StructuredDocumentation","src":"997:103:20","text":"@title WormholeTypes\n @notice Namespace which groups all types relevant to Wormhole interfaces."},"fullyImplemented":true,"id":5874,"linearizedBaseContracts":[5874],"name":"WormholeTypes","nameLocation":"1108:13:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"WormholeTypes.VaaKey","id":5873,"members":[{"constant":false,"id":5868,"mutability":"mutable","name":"chainId","nameLocation":"1324:7:20","nodeType":"VariableDeclaration","scope":5873,"src":"1317:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5867,"name":"uint16","nodeType":"ElementaryTypeName","src":"1317:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5870,"mutability":"mutable","name":"emitterAddress","nameLocation":"1349:14:20","nodeType":"VariableDeclaration","scope":5873,"src":"1341:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1341:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5872,"mutability":"mutable","name":"sequence","nameLocation":"1380:8:20","nodeType":"VariableDeclaration","scope":5873,"src":"1373:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5871,"name":"uint64","nodeType":"ElementaryTypeName","src":"1373:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"VaaKey","nameLocation":"1300:6:20","nodeType":"StructDefinition","scope":5874,"src":"1293:102:20","visibility":"public"}],"scope":6079,"src":"1100:297:20","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IWormhole","contractDependencies":[],"contractKind":"interface","documentation":{"id":5875,"nodeType":"StructuredDocumentation","src":"1399:206:20","text":"@title IWormhole\n @notice Wormhole interface.\n @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6"},"fullyImplemented":false,"id":5888,"linearizedBaseContracts":[5888],"name":"IWormhole","nameLocation":"1615:9:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5876,"nodeType":"StructuredDocumentation","src":"1631:154:20","text":"@dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109"},"functionSelector":"9a8a0592","id":5881,"implemented":false,"kind":"function","modifiers":[],"name":"chainId","nameLocation":"1799:7:20","nodeType":"FunctionDefinition","parameters":{"id":5877,"nodeType":"ParameterList","parameters":[],"src":"1806:2:20"},"returnParameters":{"id":5880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5881,"src":"1832:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5878,"name":"uint16","nodeType":"ElementaryTypeName","src":"1832:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1831:8:20"},"scope":5888,"src":"1790:50:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5882,"nodeType":"StructuredDocumentation","src":"1846:154:20","text":"@dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117"},"functionSelector":"1a90a219","id":5887,"implemented":false,"kind":"function","modifiers":[],"name":"messageFee","nameLocation":"2014:10:20","nodeType":"FunctionDefinition","parameters":{"id":5883,"nodeType":"ParameterList","parameters":[],"src":"2024:2:20"},"returnParameters":{"id":5886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5887,"src":"2050:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5884,"name":"uint256","nodeType":"ElementaryTypeName","src":"2050:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2049:9:20"},"scope":5888,"src":"2005:54:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6079,"src":"1605:456:20","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IWormholeRelayer","contractDependencies":[],"contractKind":"interface","documentation":{"id":5889,"nodeType":"StructuredDocumentation","src":"2063:229:20","text":"@title IWormholeRelayer\n @notice Wormhole Relayer interface.\n @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74"},"fullyImplemented":false,"id":5928,"linearizedBaseContracts":[5928],"name":"IWormholeRelayer","nameLocation":"2302:16:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5890,"nodeType":"StructuredDocumentation","src":"2325:161:20","text":"@dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442"},"functionSelector":"c23ee3c3","id":5903,"implemented":false,"kind":"function","modifiers":[],"name":"quoteEVMDeliveryPrice","nameLocation":"2500:21:20","nodeType":"FunctionDefinition","parameters":{"id":5897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5892,"mutability":"mutable","name":"targetChain","nameLocation":"2538:11:20","nodeType":"VariableDeclaration","scope":5903,"src":"2531:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5891,"name":"uint16","nodeType":"ElementaryTypeName","src":"2531:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5894,"mutability":"mutable","name":"receiverValue","nameLocation":"2567:13:20","nodeType":"VariableDeclaration","scope":5903,"src":"2559:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5893,"name":"uint256","nodeType":"ElementaryTypeName","src":"2559:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5896,"mutability":"mutable","name":"gasLimit","nameLocation":"2598:8:20","nodeType":"VariableDeclaration","scope":5903,"src":"2590:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5895,"name":"uint256","nodeType":"ElementaryTypeName","src":"2590:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2521:91:20"},"returnParameters":{"id":5902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"nativePriceQuote","nameLocation":"2681:16:20","nodeType":"VariableDeclaration","scope":5903,"src":"2673:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5898,"name":"uint256","nodeType":"ElementaryTypeName","src":"2673:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"targetChainRefundPerGasUnused","nameLocation":"2719:29:20","nodeType":"VariableDeclaration","scope":5903,"src":"2711:37:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5900,"name":"uint256","nodeType":"ElementaryTypeName","src":"2711:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2659:99:20"},"scope":5928,"src":"2491:268:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5904,"nodeType":"StructuredDocumentation","src":"2765:161:20","text":"@dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182"},"functionSelector":"32b2fc0e","id":5927,"implemented":false,"kind":"function","modifiers":[],"name":"sendVaasToEvm","nameLocation":"2940:13:20","nodeType":"FunctionDefinition","parameters":{"id":5923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5906,"mutability":"mutable","name":"targetChain","nameLocation":"2970:11:20","nodeType":"VariableDeclaration","scope":5927,"src":"2963:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5905,"name":"uint16","nodeType":"ElementaryTypeName","src":"2963:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5908,"mutability":"mutable","name":"targetAddress","nameLocation":"2999:13:20","nodeType":"VariableDeclaration","scope":5927,"src":"2991:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5907,"name":"address","nodeType":"ElementaryTypeName","src":"2991:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5910,"mutability":"mutable","name":"payload","nameLocation":"3035:7:20","nodeType":"VariableDeclaration","scope":5927,"src":"3022:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5909,"name":"bytes","nodeType":"ElementaryTypeName","src":"3022:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5912,"mutability":"mutable","name":"receiverValue","nameLocation":"3060:13:20","nodeType":"VariableDeclaration","scope":5927,"src":"3052:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5911,"name":"uint256","nodeType":"ElementaryTypeName","src":"3052:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5914,"mutability":"mutable","name":"gasLimit","nameLocation":"3091:8:20","nodeType":"VariableDeclaration","scope":5927,"src":"3083:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3083:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5918,"mutability":"mutable","name":"vaaKeys","nameLocation":"3139:7:20","nodeType":"VariableDeclaration","scope":5927,"src":"3109:37:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","typeString":"struct WormholeTypes.VaaKey[]"},"typeName":{"baseType":{"id":5916,"nodeType":"UserDefinedTypeName","pathNode":{"id":5915,"name":"WormholeTypes.VaaKey","nameLocations":["3109:13:20","3123:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":5873,"src":"3109:20:20"},"referencedDeclaration":5873,"src":"3109:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_VaaKey_$5873_storage_ptr","typeString":"struct WormholeTypes.VaaKey"}},"id":5917,"nodeType":"ArrayTypeName","src":"3109:22:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_VaaKey_$5873_storage_$dyn_storage_ptr","typeString":"struct WormholeTypes.VaaKey[]"}},"visibility":"internal"},{"constant":false,"id":5920,"mutability":"mutable","name":"refundChain","nameLocation":"3163:11:20","nodeType":"VariableDeclaration","scope":5927,"src":"3156:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5919,"name":"uint16","nodeType":"ElementaryTypeName","src":"3156:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5922,"mutability":"mutable","name":"refundAddress","nameLocation":"3192:13:20","nodeType":"VariableDeclaration","scope":5927,"src":"3184:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5921,"name":"address","nodeType":"ElementaryTypeName","src":"3184:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2953:258:20"},"returnParameters":{"id":5926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5925,"mutability":"mutable","name":"sequence","nameLocation":"3245:8:20","nodeType":"VariableDeclaration","scope":5927,"src":"3238:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5924,"name":"uint64","nodeType":"ElementaryTypeName","src":"3238:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3237:17:20"},"scope":5928,"src":"2931:324:20","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6079,"src":"2292:965:20","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IWormholeReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":5929,"nodeType":"StructuredDocumentation","src":"3259:231:20","text":"@title IWormholeReceiver\n @notice Wormhole Receiver interface.\n @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8"},"fullyImplemented":false,"id":5945,"linearizedBaseContracts":[5945],"name":"IWormholeReceiver","nameLocation":"3500:17:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5930,"nodeType":"StructuredDocumentation","src":"3524:161:20","text":"@dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44"},"functionSelector":"529dca32","id":5944,"implemented":false,"kind":"function","modifiers":[],"name":"receiveWormholeMessages","nameLocation":"3699:23:20","nodeType":"FunctionDefinition","parameters":{"id":5942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5932,"mutability":"mutable","name":"payload","nameLocation":"3745:7:20","nodeType":"VariableDeclaration","scope":5944,"src":"3732:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5931,"name":"bytes","nodeType":"ElementaryTypeName","src":"3732:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5935,"mutability":"mutable","name":"additionalVaas","nameLocation":"3777:14:20","nodeType":"VariableDeclaration","scope":5944,"src":"3762:29:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5933,"name":"bytes","nodeType":"ElementaryTypeName","src":"3762:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5934,"nodeType":"ArrayTypeName","src":"3762:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":5937,"mutability":"mutable","name":"sourceAddress","nameLocation":"3809:13:20","nodeType":"VariableDeclaration","scope":5944,"src":"3801:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5936,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3801:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5939,"mutability":"mutable","name":"sourceChain","nameLocation":"3839:11:20","nodeType":"VariableDeclaration","scope":5944,"src":"3832:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5938,"name":"uint16","nodeType":"ElementaryTypeName","src":"3832:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5941,"mutability":"mutable","name":"deliveryHash","nameLocation":"3868:12:20","nodeType":"VariableDeclaration","scope":5944,"src":"3860:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3860:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3722:164:20"},"returnParameters":{"id":5943,"nodeType":"ParameterList","parameters":[],"src":"3903:0:20"},"scope":5945,"src":"3690:214:20","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6079,"src":"3490:416:20","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IWormholeTokenBridge","contractDependencies":[],"contractKind":"interface","documentation":{"id":5946,"nodeType":"StructuredDocumentation","src":"3908:233:20","text":"@title IWormholeTokenBridge\n @notice Wormhole Token Bridge interface.\n @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9"},"fullyImplemented":false,"id":6013,"linearizedBaseContracts":[6013],"name":"IWormholeTokenBridge","nameLocation":"4151:20:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c3f511c1","id":5953,"implemented":false,"kind":"function","modifiers":[],"name":"completeTransferWithPayload","nameLocation":"4187:27:20","nodeType":"FunctionDefinition","parameters":{"id":5949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5948,"mutability":"mutable","name":"encodedVm","nameLocation":"4228:9:20","nodeType":"VariableDeclaration","scope":5953,"src":"4215:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5947,"name":"bytes","nodeType":"ElementaryTypeName","src":"4215:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4214:24:20"},"returnParameters":{"id":5952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5953,"src":"4273:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5950,"name":"bytes","nodeType":"ElementaryTypeName","src":"4273:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4272:14:20"},"scope":6013,"src":"4178:109:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ea63738d","id":5961,"implemented":false,"kind":"function","modifiers":[],"name":"parseTransferWithPayload","nameLocation":"4302:24:20","nodeType":"FunctionDefinition","parameters":{"id":5956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5955,"mutability":"mutable","name":"encoded","nameLocation":"4340:7:20","nodeType":"VariableDeclaration","scope":5961,"src":"4327:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5954,"name":"bytes","nodeType":"ElementaryTypeName","src":"4327:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4326:22:20"},"returnParameters":{"id":5960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5959,"mutability":"mutable","name":"transfer","nameLocation":"4423:8:20","nodeType":"VariableDeclaration","scope":5961,"src":"4396:35:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TransferWithPayload_$6012_memory_ptr","typeString":"struct IWormholeTokenBridge.TransferWithPayload"},"typeName":{"id":5958,"nodeType":"UserDefinedTypeName","pathNode":{"id":5957,"name":"TransferWithPayload","nameLocations":["4396:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":6012,"src":"4396:19:20"},"referencedDeclaration":6012,"src":"4396:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_TransferWithPayload_$6012_storage_ptr","typeString":"struct IWormholeTokenBridge.TransferWithPayload"}},"visibility":"internal"}],"src":"4395:37:20"},"scope":6013,"src":"4293:140:20","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"0f5287b0","id":5978,"implemented":false,"kind":"function","modifiers":[],"name":"transferTokens","nameLocation":"4448:14:20","nodeType":"FunctionDefinition","parameters":{"id":5974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5963,"mutability":"mutable","name":"token","nameLocation":"4480:5:20","nodeType":"VariableDeclaration","scope":5978,"src":"4472:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5962,"name":"address","nodeType":"ElementaryTypeName","src":"4472:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5965,"mutability":"mutable","name":"amount","nameLocation":"4503:6:20","nodeType":"VariableDeclaration","scope":5978,"src":"4495:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5964,"name":"uint256","nodeType":"ElementaryTypeName","src":"4495:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5967,"mutability":"mutable","name":"recipientChain","nameLocation":"4526:14:20","nodeType":"VariableDeclaration","scope":5978,"src":"4519:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5966,"name":"uint16","nodeType":"ElementaryTypeName","src":"4519:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5969,"mutability":"mutable","name":"recipient","nameLocation":"4558:9:20","nodeType":"VariableDeclaration","scope":5978,"src":"4550:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4550:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5971,"mutability":"mutable","name":"arbiterFee","nameLocation":"4585:10:20","nodeType":"VariableDeclaration","scope":5978,"src":"4577:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5970,"name":"uint256","nodeType":"ElementaryTypeName","src":"4577:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5973,"mutability":"mutable","name":"nonce","nameLocation":"4612:5:20","nodeType":"VariableDeclaration","scope":5978,"src":"4605:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5972,"name":"uint32","nodeType":"ElementaryTypeName","src":"4605:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4462:161:20"},"returnParameters":{"id":5977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5976,"mutability":"mutable","name":"sequence","nameLocation":"4657:8:20","nodeType":"VariableDeclaration","scope":5978,"src":"4650:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5975,"name":"uint64","nodeType":"ElementaryTypeName","src":"4650:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4649:17:20"},"scope":6013,"src":"4439:228:20","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"c5a5ebda","id":5995,"implemented":false,"kind":"function","modifiers":[],"name":"transferTokensWithPayload","nameLocation":"4682:25:20","nodeType":"FunctionDefinition","parameters":{"id":5991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5980,"mutability":"mutable","name":"token","nameLocation":"4725:5:20","nodeType":"VariableDeclaration","scope":5995,"src":"4717:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5979,"name":"address","nodeType":"ElementaryTypeName","src":"4717:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5982,"mutability":"mutable","name":"amount","nameLocation":"4748:6:20","nodeType":"VariableDeclaration","scope":5995,"src":"4740:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5981,"name":"uint256","nodeType":"ElementaryTypeName","src":"4740:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5984,"mutability":"mutable","name":"recipientChain","nameLocation":"4771:14:20","nodeType":"VariableDeclaration","scope":5995,"src":"4764:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5983,"name":"uint16","nodeType":"ElementaryTypeName","src":"4764:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5986,"mutability":"mutable","name":"recipient","nameLocation":"4803:9:20","nodeType":"VariableDeclaration","scope":5995,"src":"4795:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4795:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5988,"mutability":"mutable","name":"nonce","nameLocation":"4829:5:20","nodeType":"VariableDeclaration","scope":5995,"src":"4822:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5987,"name":"uint32","nodeType":"ElementaryTypeName","src":"4822:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5990,"mutability":"mutable","name":"payload","nameLocation":"4857:7:20","nodeType":"VariableDeclaration","scope":5995,"src":"4844:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5989,"name":"bytes","nodeType":"ElementaryTypeName","src":"4844:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4707:163:20"},"returnParameters":{"id":5994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5993,"mutability":"mutable","name":"sequence","nameLocation":"4904:8:20","nodeType":"VariableDeclaration","scope":5995,"src":"4897:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5992,"name":"uint64","nodeType":"ElementaryTypeName","src":"4897:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4896:17:20"},"scope":6013,"src":"4673:241:20","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IWormholeTokenBridge.TransferWithPayload","id":6012,"members":[{"constant":false,"id":5997,"mutability":"mutable","name":"payloadID","nameLocation":"4963:9:20","nodeType":"VariableDeclaration","scope":6012,"src":"4957:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5996,"name":"uint8","nodeType":"ElementaryTypeName","src":"4957:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5999,"mutability":"mutable","name":"amount","nameLocation":"4990:6:20","nodeType":"VariableDeclaration","scope":6012,"src":"4982:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5998,"name":"uint256","nodeType":"ElementaryTypeName","src":"4982:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6001,"mutability":"mutable","name":"tokenAddress","nameLocation":"5014:12:20","nodeType":"VariableDeclaration","scope":6012,"src":"5006:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6000,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5006:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6003,"mutability":"mutable","name":"tokenChain","nameLocation":"5043:10:20","nodeType":"VariableDeclaration","scope":6012,"src":"5036:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6002,"name":"uint16","nodeType":"ElementaryTypeName","src":"5036:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6005,"mutability":"mutable","name":"to","nameLocation":"5071:2:20","nodeType":"VariableDeclaration","scope":6012,"src":"5063:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6007,"mutability":"mutable","name":"toChain","nameLocation":"5090:7:20","nodeType":"VariableDeclaration","scope":6012,"src":"5083:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6006,"name":"uint16","nodeType":"ElementaryTypeName","src":"5083:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":6009,"mutability":"mutable","name":"fromAddress","nameLocation":"5115:11:20","nodeType":"VariableDeclaration","scope":6012,"src":"5107:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5107:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6011,"mutability":"mutable","name":"payload","nameLocation":"5142:7:20","nodeType":"VariableDeclaration","scope":6012,"src":"5136:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":6010,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"TransferWithPayload","nameLocation":"4927:19:20","nodeType":"StructDefinition","scope":6013,"src":"4920:236:20","visibility":"public"}],"scope":6079,"src":"4141:1017:20","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"WormholeUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":6014,"nodeType":"StructuredDocumentation","src":"5160:69:20","text":"@title WormholeUtils\n @notice Library for Wormhole utilities."},"fullyImplemented":true,"id":6078,"linearizedBaseContracts":[6078],"name":"WormholeUtils","nameLocation":"5237:13:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":6033,"nodeType":"Block","src":"5474:59:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":6028,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6017,"src":"5515:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5507:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6026,"name":"uint160","nodeType":"ElementaryTypeName","src":"5507:7:20","typeDescriptions":{}}},"id":6029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5507:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5499:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6024,"name":"uint256","nodeType":"ElementaryTypeName","src":"5499:7:20","typeDescriptions":{}}},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5499:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5491:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5491:7:20","typeDescriptions":{}}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5491:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6021,"id":6032,"nodeType":"Return","src":"5484:42:20"}]},"documentation":{"id":6015,"nodeType":"StructuredDocumentation","src":"5257:107:20","text":"@notice Converts Ethereum address into Wormhole format.\n @param _address The address to convert."},"id":6034,"implemented":true,"kind":"function","modifiers":[],"name":"toWormholeAddress","nameLocation":"5378:17:20","nodeType":"FunctionDefinition","parameters":{"id":6018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6017,"mutability":"mutable","name":"_address","nameLocation":"5404:8:20","nodeType":"VariableDeclaration","scope":6034,"src":"5396:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6016,"name":"address","nodeType":"ElementaryTypeName","src":"5396:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5395:18:20"},"returnParameters":{"id":6021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6034,"src":"5461:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5461:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5460:9:20"},"scope":6078,"src":"5369:164:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6053,"nodeType":"Block","src":"5758:59:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":6048,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"5799:8:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5791:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6046,"name":"uint256","nodeType":"ElementaryTypeName","src":"5791:7:20","typeDescriptions":{}}},"id":6049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5791:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5783:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6044,"name":"uint160","nodeType":"ElementaryTypeName","src":"5783:7:20","typeDescriptions":{}}},"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5783:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5775:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6042,"name":"address","nodeType":"ElementaryTypeName","src":"5775:7:20","typeDescriptions":{}}},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5775:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6041,"id":6052,"nodeType":"Return","src":"5768:42:20"}]},"documentation":{"id":6035,"nodeType":"StructuredDocumentation","src":"5539:107:20","text":"@notice Converts Wormhole address into Ethereum format.\n @param _address The address to convert."},"id":6054,"implemented":true,"kind":"function","modifiers":[],"name":"fromWormholeAddress","nameLocation":"5660:19:20","nodeType":"FunctionDefinition","parameters":{"id":6038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6037,"mutability":"mutable","name":"_address","nameLocation":"5688:8:20","nodeType":"VariableDeclaration","scope":6054,"src":"5680:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5680:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5679:18:20"},"returnParameters":{"id":6041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6054,"src":"5745:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6039,"name":"address","nodeType":"ElementaryTypeName","src":"5745:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5744:9:20"},"scope":6078,"src":"5651:166:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6076,"nodeType":"Block","src":"6189:142:20","statements":[{"expression":{"id":6066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6062,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6259:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"id":6065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":6063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6269:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3130","id":6064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6273:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6269:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"}},"src":"6259:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6067,"nodeType":"ExpressionStatement","src":"6259:16:20"},{"expression":{"id":6072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6068,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6285:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"},"id":6071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":6069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6295:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3130","id":6070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6299:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6295:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000_by_1","typeString":"int_const 10000000000"}},"src":"6285:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6073,"nodeType":"ExpressionStatement","src":"6285:16:20"},{"expression":{"id":6074,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6318:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6061,"id":6075,"nodeType":"Return","src":"6311:13:20"}]},"documentation":{"id":6055,"nodeType":"StructuredDocumentation","src":"5823:294:20","text":"@dev Eliminates the dust that cannot be bridged with Wormhole\n      due to the decimal shift in the Wormhole Bridge contract.\n      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288"},"id":6077,"implemented":true,"kind":"function","modifiers":[],"name":"normalize","nameLocation":"6131:9:20","nodeType":"FunctionDefinition","parameters":{"id":6058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6057,"mutability":"mutable","name":"amount","nameLocation":"6149:6:20","nodeType":"VariableDeclaration","scope":6077,"src":"6141:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6056,"name":"uint256","nodeType":"ElementaryTypeName","src":"6141:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6140:16:20"},"returnParameters":{"id":6061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6077,"src":"6180:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6059,"name":"uint256","nodeType":"ElementaryTypeName","src":"6180:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6179:9:20"},"scope":6078,"src":"6122:209:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6079,"src":"5229:1104:20","usedErrors":[]}],"src":"971:5363:20"},"id":20}},"contracts":{"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol":{"BTCUtils":{"abi":[{"inputs":[],"name":"DIFF1_TARGET","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERR_BAD_ARG","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RETARGET_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RETARGET_PERIOD_BLOCKS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"61018e610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063056e04ec1461005b5780638cc71569146100795780638db69e6014610097578063d4258ca7146100b5575b600080fd5b6100636100d3565b604051610070919061013d565b60405180910390f35b6100816100da565b60405161008e919061013d565b60405180910390f35b61009f6100e0565b6040516100ac919061013d565b60405180910390f35b6100bd610104565b6040516100ca919061013d565b60405180910390f35b6212750081565b6107e081565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b7bffff000000000000000000000000000000000000000000000000000081565b6000819050919050565b61013781610124565b82525050565b6000602082019050610152600083018461012e565b9291505056fea2646970667358221220a92c176d25111552bd479e039f12b2d29cc650f435f60d254421f5e9afd61a1864736f6c63430008110033","opcodes":"PUSH2 0x18E PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x56E04EC EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x8CC71569 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DB69E60 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xD4258CA7 EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x63 PUSH2 0xD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x81 PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0xE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x104 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x7E0 DUP2 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 JUMP JUMPDEST PUSH28 0xFFFF0000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0x124 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x152 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0x2C OR PUSH14 0x25111552BD479E039F12B2D29CC6 POP DELEGATECALL CALLDATALOAD 0xF6 0xD 0x25 DIFFICULTY 0x21 CREATE2 0xE9 0xAF 0xD6 BYTE XOR PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"175:38691:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DIFF1_TARGET_14":{"entryPoint":260,"id":14,"parameterSlots":0,"returnSlots":0},"@ERR_BAD_ARG_31":{"entryPoint":224,"id":31,"parameterSlots":0,"returnSlots":0},"@RETARGET_PERIOD_25":{"entryPoint":211,"id":25,"parameterSlots":0,"returnSlots":0},"@RETARGET_PERIOD_BLOCKS_28":{"entryPoint":218,"id":28,"parameterSlots":0,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack_library":{"entryPoint":302,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed":{"entryPoint":317,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":292,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:463:21","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:21","statements":[{"nodeType":"YulAssignment","src":"62:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:21","type":""}],"src":"7:77:21"},{"body":{"nodeType":"YulBlock","src":"163:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"185:17:21"},"nodeType":"YulFunctionCall","src":"185:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:21"},"nodeType":"YulFunctionCall","src":"173:37:21"},"nodeType":"YulExpressionStatement","src":"173:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:21","type":""}],"src":"90:126:21"},{"body":{"nodeType":"YulBlock","src":"328:132:21","statements":[{"nodeType":"YulAssignment","src":"338:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:21"},"nodeType":"YulFunctionCall","src":"346:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:21"},"nodeType":"YulFunctionCall","src":"435:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"374:51:21"},"nodeType":"YulFunctionCall","src":"374:79:21"},"nodeType":"YulExpressionStatement","src":"374:79:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:21","type":""}],"src":"222:238:21"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063056e04ec1461005b5780638cc71569146100795780638db69e6014610097578063d4258ca7146100b5575b600080fd5b6100636100d3565b604051610070919061013d565b60405180910390f35b6100816100da565b60405161008e919061013d565b60405180910390f35b61009f6100e0565b6040516100ac919061013d565b60405180910390f35b6100bd610104565b6040516100ca919061013d565b60405180910390f35b6212750081565b6107e081565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b7bffff000000000000000000000000000000000000000000000000000081565b6000819050919050565b61013781610124565b82525050565b6000602082019050610152600083018461012e565b9291505056fea2646970667358221220a92c176d25111552bd479e039f12b2d29cc650f435f60d254421f5e9afd61a1864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x56E04EC EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x8CC71569 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DB69E60 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xD4258CA7 EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x63 PUSH2 0xD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x81 PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0xE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x104 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x7E0 DUP2 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 JUMP JUMPDEST PUSH28 0xFFFF0000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0x124 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x152 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0x2C OR PUSH14 0x25111552BD479E039F12B2D29CC6 POP DELEGATECALL CALLDATALOAD 0xF6 0xD 0x25 DIFFICULTY 0x21 CREATE2 0xE9 0xAF 0xD6 BYTE XOR PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"175:38691:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443:62;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;534:53;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;616:104;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;339:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;443:62;485:20;443:62;:::o;534:53::-;583:4;534:53;:::o;616:104::-;654:66;616:104;:::o;339:97::-;378:58;339:97;:::o;7:77:21:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"79600","executionCost":"154","totalCost":"79754"},"external":{"DIFF1_TARGET()":"357","ERR_BAD_ARG()":"335","RETARGET_PERIOD()":"291","RETARGET_PERIOD_BLOCKS()":"313"},"internal":{"_hash256MerkleStep(bytes memory,bytes memory)":"infinite","_hash256MerkleStep(bytes32,bytes32)":"infinite","bytesToUint(bytes memory)":"infinite","calculateDifficulty(uint256)":"infinite","determineInputLength(bytes memory)":"infinite","determineInputLengthAt(bytes memory,uint256)":"infinite","determineOutputLength(bytes memory)":"infinite","determineOutputLengthAt(bytes memory,uint256)":"infinite","determineVarIntDataLength(bytes memory)":"infinite","determineVarIntDataLengthAt(bytes memory,uint256)":"infinite","extractDifficulty(bytes memory)":"infinite","extractHash(bytes memory)":"infinite","extractHashAt(bytes memory,uint256,uint256)":"infinite","extractInputAtIndex(bytes memory,uint256)":"infinite","extractInputTxIdLE(bytes memory)":"infinite","extractInputTxIdLeAt(bytes memory,uint256)":"infinite","extractMerkleRootLE(bytes memory)":"infinite","extractOpReturnData(bytes memory)":"infinite","extractOutpoint(bytes memory)":"infinite","extractOutputAtIndex(bytes memory,uint256)":"infinite","extractPrevBlockLE(bytes memory)":"infinite","extractPrevBlockLEAt(bytes memory,uint256)":"infinite","extractScriptSig(bytes memory)":"infinite","extractScriptSigLen(bytes memory)":"infinite","extractScriptSigLenAt(bytes memory,uint256)":"infinite","extractSequenceLELegacy(bytes memory)":"infinite","extractSequenceLEWitness(bytes memory)":"infinite","extractSequenceLegacy(bytes memory)":"infinite","extractSequenceWitness(bytes memory)":"infinite","extractTarget(bytes memory)":"infinite","extractTargetAt(bytes memory,uint256)":"infinite","extractTimestamp(bytes memory)":"infinite","extractTimestampLE(bytes memory)":"infinite","extractTxIndexLE(bytes memory)":"infinite","extractTxIndexLeAt(bytes memory,uint256)":"infinite","extractValue(bytes memory)":"infinite","extractValueAt(bytes memory,uint256)":"infinite","extractValueLE(bytes memory)":"infinite","hash160(bytes memory)":"infinite","hash160View(bytes memory)":"infinite","hash256(bytes memory)":"infinite","hash256Pair(bytes32,bytes32)":"infinite","hash256Slice(bytes memory,uint256,uint256)":"infinite","hash256View(bytes memory)":"infinite","isLegacyInput(bytes memory)":"infinite","lastBytes(bytes memory,uint256)":"infinite","parseVarInt(bytes memory)":"infinite","parseVarIntAt(bytes memory,uint256)":"infinite","retargetAlgorithm(uint256,uint256,uint256)":"infinite","reverseEndianness(bytes memory)":"infinite","reverseUint16(uint16)":"infinite","reverseUint24(uint24)":"infinite","reverseUint256(uint256)":"infinite","reverseUint32(uint32)":"infinite","reverseUint64(uint64)":"infinite","validateVin(bytes memory)":"infinite","validateVout(bytes memory)":"infinite","verifyHash256Merkle(bytes memory,uint256)":"infinite","verifyHash256Merkle(bytes32,bytes memory,bytes32,uint256)":"infinite"}},"methodIdentifiers":{"DIFF1_TARGET()":"d4258ca7","ERR_BAD_ARG()":"8db69e60","RETARGET_PERIOD()":"056e04ec","RETARGET_PERIOD_BLOCKS()":"8cc71569"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DIFF1_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_BAD_ARG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETARGET_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETARGET_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\":\"BTCUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/** @title BitcoinSPV */\\n/** @author Summa (https://summa.one) */\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary BTCUtils {\\n    using BytesLib for bytes;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /* ***** */\\n    /* UTILS */\\n    /* ***** */\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _flag    The first byte of a VarInt\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\\n        return determineVarIntDataLengthAt(_flag, 0);\\n    }\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _b       The byte array containing a VarInt\\n    /// @param _at      The position of the VarInt in the array\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLengthAt(bytes memory _b, uint256 _at) internal pure returns (uint8) {\\n        if (uint8(_b[_at]) == 0xff) {\\n            return 8;  // one-byte flag, 8 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfe) {\\n            return 4;  // one-byte flag, 4 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfd) {\\n            return 2;  // one-byte flag, 2 bytes data\\n        }\\n\\n        return 0;  // flag is data\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string starting with a VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\\n        return parseVarIntAt(_b, 0);\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string containing a VarInt\\n    /// @param _at  The position of the VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarIntAt(bytes memory _b, uint256 _at) internal pure returns (uint256, uint256) {\\n        uint8 _dataLen = determineVarIntDataLengthAt(_b, _at);\\n\\n        if (_dataLen == 0) {\\n            return (0, uint8(_b[_at]));\\n        }\\n        if (_b.length < 1 + _dataLen + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n        uint256 _number;\\n        if (_dataLen == 2) {\\n            _number = reverseUint16(uint16(_b.slice2(1 + _at)));\\n        } else if (_dataLen == 4) {\\n            _number = reverseUint32(uint32(_b.slice4(1 + _at)));\\n        } else if (_dataLen == 8) {\\n            _number = reverseUint64(uint64(_b.slice8(1 + _at)));\\n        }\\n        return (_dataLen, _number);\\n    }\\n\\n    /// @notice          Changes the endianness of a byte array\\n    /// @dev             Returns a new, backwards, bytes\\n    /// @param _b        The bytes to reverse\\n    /// @return          The reversed bytes\\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\\n        bytes memory _newValue = new bytes(_b.length);\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _newValue[_b.length - i - 1] = _b[i];\\n        }\\n\\n        return _newValue;\\n    }\\n\\n    /// @notice          Changes the endianness of a uint256\\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint64\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint64(uint64 _b) internal pure returns (uint64 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint32\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint32(uint32 _b) internal pure returns (uint32 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF) |\\n            ((v & 0x00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint24\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint24(uint24 _b) internal pure returns (uint24 v) {\\n        v =  (_b << 16) | (_b & 0x00FF00) | (_b >> 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint16\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint16(uint16 _b) internal pure returns (uint16 v) {\\n        v =  (_b << 8) | (_b >> 8);\\n    }\\n\\n\\n    /// @notice          Converts big-endian bytes to a uint\\n    /// @dev             Traverses the byte array and sums the bytes\\n    /// @param _b        The big-endian bytes-encoded integer\\n    /// @return          The integer representation\\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\\n        uint256 _number;\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\\n        }\\n\\n        return _number;\\n    }\\n\\n    /// @notice          Get the last _num bytes from a byte array\\n    /// @param _b        The byte array to slice\\n    /// @param _num      The number of bytes to extract from the end\\n    /// @return          The last _num bytes of _b\\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\\n        uint256 _start = _b.length.sub(_num);\\n\\n        return _b.slice(_start, _num);\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (sha2 + ripemd160)\\n    /// @dev             sha2 precompile at address(2), ripemd160 at address(3)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash160View(bytes memory _b) internal view returns (bytes20 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 3, 0x00, 32, 0x00, 32))\\n            // read from position 12 = 0c\\n            res := mload(0x0c)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(sha256(_b)));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 on a pair of bytes32\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _a        The first bytes32 of the pre-image\\n    /// @param _b        The second bytes32 of the pre-image\\n    /// @return res      The digest\\n    function hash256Pair(bytes32 _a, bytes32 _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            mstore(0x00, _a)\\n            mstore(0x20, _b)\\n            pop(staticcall(gas(), 2, 0x00, 64, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The array containing the pre-image\\n    /// @param at        The start of the pre-image\\n    /// @param len       The length of the pre-image\\n    /// @return res      The digest\\n    function hash256Slice(\\n        bytes memory _b,\\n        uint256 at,\\n        uint256 len\\n    ) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, add(32, at)), len, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /* ************ */\\n    /* Legacy Input */\\n    /* ************ */\\n\\n    /// @notice          Extracts the nth input from the vin (0-indexed)\\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\\n    /// @param _vin      The vin as a tightly-packed byte array\\n    /// @param _index    The 0-indexed location of the input to extract\\n    /// @return          The input as a byte array\\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineInputLengthAt(_vin, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n            _offset = _offset + _len;\\n        }\\n\\n        _len = determineInputLengthAt(_vin, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _vin.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Determines whether an input is legacy\\n    /// @dev             False if no scriptSig, otherwise True\\n    /// @param _input    The input\\n    /// @return          True for legacy, False for witness\\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\\n        return _input[36] != hex\\\"00\\\";\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The LEGACY input\\n    /// @return          The length of the script sig\\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\\n        return extractScriptSigLenAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    ///                  starting at the specified position\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The byte array containing the LEGACY input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the script sig\\n    function extractScriptSigLenAt(bytes memory _input, uint256 _at) internal pure returns (uint256, uint256) {\\n        if (_input.length < 37 + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = parseVarIntAt(_input, _at + 36);\\n\\n        return (_varIntDataLen, _scriptSigLen);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The input\\n    /// @return          The length of the input in bytes\\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\\n        return determineInputLengthAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig,\\n    ///                  starting at the specified position\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the input in bytes\\n    function determineInputLengthAt(bytes memory _input, uint256 _at) internal pure returns (uint256) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLenAt(_input, _at);\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\\n    }\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes4) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice4(36 + 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLELegacy(_input));\\n        uint32 _beSequence = reverseUint32(_leSeqence);\\n        return _beSequence;\\n    }\\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\\n    /// @dev             Will return hex\\\"00\\\" if passed a witness input\\n    /// @param _input    The LEGACY input\\n    /// @return          The length-prepended scriptSig\\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n\\n    /* ************* */\\n    /* Witness Input */\\n    /* ************* */\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(37);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input in a tx\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLEWitness(_input));\\n        uint32 _inputeSequence = reverseUint32(_leSeqence);\\n        return _inputeSequence;\\n    }\\n\\n    /// @notice          Extracts the outpoint from the input in a tx\\n    /// @dev             32-byte tx id with 4-byte index\\n    /// @param _input    The input\\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\\n        return _input.slice(0, 36);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    /// @dev             32-byte tx id\\n    /// @param _input    The input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\\n        return _input.slice32(0);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    ///                  starting at the specified position\\n    /// @dev             32-byte tx id\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes32) {\\n        return _input.slice32(_at);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    /// @dev             4-byte tx index\\n    /// @param _input    The input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(32);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    ///                  starting at the specified position\\n    /// @dev             4-byte tx index\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes4) {\\n        return _input.slice4(32 + _at);\\n    }\\n\\n    /* ****** */\\n    /* Output */\\n    /* ****** */\\n\\n    /// @notice          Determines the length of an output\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\\n        return determineOutputLengthAt(_output, 0);\\n    }\\n\\n    /// @notice          Determines the length of an output\\n    ///                  starting at the specified position\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The position of the output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLengthAt(bytes memory _output, uint256 _at) internal pure returns (uint256) {\\n        if (_output.length < 9 + _at) {\\n            return ERR_BAD_ARG;\\n        }\\n        uint256 _varIntDataLen;\\n        uint256 _scriptPubkeyLength;\\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarIntAt(_output, 8 + _at);\\n\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        // 8-byte value, 1-byte for tag itself\\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\\n    }\\n\\n    /// @notice          Extracts the output at a given index in the TxOuts vector\\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\\n    /// @param _vout     The _vout to extract from\\n    /// @param _index    The 0-indexed location of the output to extract\\n    /// @return          The specified output\\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineOutputLengthAt(_vout, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n            _offset += _len;\\n        }\\n\\n        _len = determineOutputLengthAt(_vout, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n        return _vout.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Extracts the value bytes from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value as LE bytes\\n    function extractValueLE(bytes memory _output) internal pure returns (bytes8) {\\n        return _output.slice8(0);\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value\\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(extractValueLE(_output));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output in the array\\n    /// @return          The output value\\n    function extractValueAt(bytes memory _output, uint256 _at) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(_output.slice8(_at));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the data from an op return output\\n    /// @dev             Returns hex\\\"\\\" if no data or not an op return\\n    /// @param _output   The output\\n    /// @return          Any data contained in the opreturn output, null if not an op return\\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\\n        if (_output[9] != hex\\\"6a\\\") {\\n            return hex\\\"\\\";\\n        }\\n        bytes1 _dataLen = _output[10];\\n        return _output.slice(11, uint256(uint8(_dataLen)));\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The output\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\\n        return extractHashAt(_output, 8, _output.length - 8);\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output script in the array\\n    ///                  (output start + 8)\\n    /// @param _len      The length of the output script\\n    ///                  (output length - 8)\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHashAt(\\n        bytes memory _output,\\n        uint256 _at,\\n        uint256 _len\\n    ) internal pure returns (bytes memory) {\\n        uint8 _scriptLen = uint8(_output[_at]);\\n\\n        // don't have to worry about overflow here.\\n        // if _scriptLen + 1 overflows, then output length would have to be < 1\\n        // for this check to pass. if it's < 1, then we errored when assigning\\n        // _scriptLen\\n        if (_scriptLen + 1 != _len) {\\n            return hex\\\"\\\";\\n        }\\n\\n        if (uint8(_output[_at + 1]) == 0) {\\n            if (_scriptLen < 2) {\\n                return hex\\\"\\\";\\n            }\\n            uint256 _payloadLen = uint8(_output[_at + 2]);\\n            // Check for maliciously formatted witness outputs.\\n            // No need to worry about underflow as long b/c of the `< 2` check\\n            if (_payloadLen != _scriptLen - 2 || (_payloadLen != 0x20 && _payloadLen != 0x14)) {\\n                return hex\\\"\\\";\\n            }\\n            return _output.slice(_at + 3, _payloadLen);\\n        } else {\\n            bytes3 _tag = _output.slice3(_at);\\n            // p2pkh\\n            if (_tag == hex\\\"1976a9\\\") {\\n                // Check for maliciously formatted p2pkh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + 3]) != 0x14 ||\\n                    _output.slice2(_at + _len - 2) != hex\\\"88ac\\\") {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 4, 20);\\n            //p2sh\\n            } else if (_tag == hex\\\"17a914\\\") {\\n                // Check for maliciously formatted p2sh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + _len - 1]) != 0x87) {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 3, 20);\\n            }\\n        }\\n        return hex\\\"\\\";  /* NB: will trigger on OPRETURN and any non-standard that doesn't overrun */\\n    }\\n\\n    /* ********** */\\n    /* Witness TX */\\n    /* ********** */\\n\\n\\n    /// @notice      Checks that the vin passed up is properly formatted\\n    /// @dev         Consider a vin with a valid vout in its scriptsig\\n    /// @param _vin  Raw bytes length-prefixed input vector\\n    /// @return      True if it represents a validly formatted vin\\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n\\n        // Not valid if it says there are too many or no inputs\\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vin.length) {\\n                return false;\\n            }\\n\\n            // Grab the next input and determine its length.\\n            uint256 _nextLen = determineInputLengthAt(_vin, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            // Increase the offset by that much\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vin.length;\\n    }\\n\\n    /// @notice      Checks that the vout passed up is properly formatted\\n    /// @dev         Consider a vout with a valid scriptpubkey\\n    /// @param _vout Raw bytes length-prefixed output vector\\n    /// @return      True if it represents a validly formatted vout\\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n\\n        // Not valid if it says there are too many or no outputs\\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vout.length) {\\n                return false;\\n            }\\n\\n            // Grab the next output and determine its length.\\n            // Increase the offset by that much\\n            uint256 _nextLen = determineOutputLengthAt(_vout, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vout.length;\\n    }\\n\\n\\n\\n    /* ************ */\\n    /* Block Header */\\n    /* ************ */\\n\\n    /// @notice          Extracts the transaction merkle root from a block header\\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\\n    /// @param _header   The header\\n    /// @return          The merkle root (little-endian)\\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(36);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The header\\n    /// @return          The target threshold\\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\\n        return extractTargetAt(_header, 0);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The target threshold\\n    function extractTargetAt(bytes memory _header, uint256 at) internal pure returns (uint256) {\\n        uint24 _m = uint24(_header.slice3(72 + at));\\n        uint8 _e = uint8(_header[75 + at]);\\n        uint256 _mantissa = uint256(reverseUint24(_m));\\n        uint _exponent = _e - 3;\\n\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\\n    /// @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _target   The current target\\n    /// @return          The block difficulty (bdiff)\\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\\n        // Difficulty 1 calculated from 0x1d00ffff\\n        return DIFF1_TARGET.div(_target);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(4);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLEAt(\\n        bytes memory _header,\\n        uint256 at\\n    ) internal pure returns (bytes32) {\\n        return _header.slice32(4 + at);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (little-endian bytes)\\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes4) {\\n        return _header.slice4(68);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (uint)\\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\\n        return reverseUint32(uint32(extractTimestampLE(_header)));\\n    }\\n\\n    /// @notice          Extracts the expected difficulty from a block header\\n    /// @dev             Does NOT verify the work\\n    /// @param _header   The header\\n    /// @return          The difficulty as an integer\\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\\n        return calculateDifficulty(extractTarget(_header));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal view returns (bytes32) {\\n        return hash256View(abi.encodePacked(_a, _b));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32) {\\n        return hash256Pair(_a, _b);\\n    }\\n\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Inefficient version.\\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_proof.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Special case for coinbase-only blocks\\n        if (_proof.length == 32) {\\n            return true;\\n        }\\n\\n        // Should never occur\\n        if (_proof.length == 64) {\\n            return false;\\n        }\\n\\n        bytes32 _root = _proof.slice32(_proof.length - 32);\\n        bytes32 _current = _proof.slice32(0);\\n        bytes memory _tree = _proof.slice(32, _proof.length - 64);\\n\\n        return verifyHash256Merkle(_current, _tree, _root, _index);\\n    }\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Efficient version.\\n    /// @param _leaf     The leaf of the proof. LE sha256 hash.\\n    /// @param _tree     The intermediate nodes in the proof.\\n    ///                  Tightly packed LE sha256 hashes.\\n    /// @param _root     The root of the proof. LE sha256 hash.\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(\\n        bytes32 _leaf,\\n        bytes memory _tree,\\n        bytes32 _root,\\n        uint _index\\n    ) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_tree.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Should never occur\\n        if (_tree.length == 0) {\\n            return false;\\n        }\\n\\n        uint _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        // i moves in increments of 32\\n        for (uint i = 0; i < _tree.length; i += 32) {\\n            if (_idx % 2 == 1) {\\n                _current = _hash256MerkleStep(_tree.slice32(i), _current);\\n            } else {\\n                _current = _hash256MerkleStep(_current, _tree.slice32(i));\\n            }\\n            _idx = _idx >> 1;\\n        }\\n        return _current == _root;\\n    }\\n\\n    /*\\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\\n    NB: We get a full-bitlength target from this. For comparison with\\n        header-encoded targets we need to mask it with the header target\\n        e.g. (full & truncated) == truncated\\n    */\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\\n            _elapsedTime = RETARGET_PERIOD.div(4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\\n            _elapsedTime = RETARGET_PERIOD.mul(4);\\n        }\\n\\n        /*\\n          NB: high targets e.g. ffff0020 can cause overflows here\\n              so we divide it by 256**2, then multiply by 256**2 later\\n              we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n\\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\\n    }\\n}\\n\",\"keccak256\":\"0x439eaa97e9239705f3d31e8d39dccbad32311f1f119e295d53c65e0ae3c5a5fc\"},\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\n\\nhttps://github.com/GNSPS/solidity-bytes-utils/\\n\\nThis is free and unencumbered software released into the public domain.\\n\\nAnyone is free to copy, modify, publish, use, compile, sell, or\\ndistribute this software, either in source code form or as a compiled\\nbinary, for any purpose, commercial or non-commercial, and by any\\nmeans.\\n\\nIn jurisdictions that recognize copyright laws, the author or authors\\nof this software dedicate any and all copyright interest in the\\nsoftware to the public domain. We make this dedication for the benefit\\nof the public at large and to the detriment of our heirs and\\nsuccessors. We intend this dedication to be an overt act of\\nrelinquishment in perpetuity of all present and future rights to this\\nsoftware under copyright law.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\nOTHER DEALINGS IN THE SOFTWARE.\\n\\nFor more information, please refer to <https://unlicense.org>\\n*/\\n\\n\\n/** @title BytesLib **/\\n/** @author https://github.com/GNSPS **/\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                        ),\\n                        // and now shift left the number of bytes to\\n                        // leave space for the length in the slot\\n                        exp(0x100, sub(32, newlength))\\n                        ),\\n                        // increase length by the double of the memory\\n                        // bytes length\\n                        mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                    ),\\n                    and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\\n        if (_length == 0) {\\n            return hex\\\"\\\";\\n        }\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\\n            res := mload(0x40)\\n            mstore(0x40, add(add(res, 64), _length))\\n            mstore(res, _length)\\n\\n            // Compute distance between source and destination pointers\\n            let diff := sub(res, add(_bytes, _start))\\n\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n            } {\\n                mstore(add(src, diff), mload(src))\\n            }\\n        }\\n    }\\n\\n    /// @notice Take a slice of the byte array, overwriting the destination.\\n    /// The length of the slice will equal the length of the destination array.\\n    /// @dev Make sure the destination array has afterspace if required.\\n    /// @param _bytes The source array\\n    /// @param _dest The destination array.\\n    /// @param _start The location to start in the source array.\\n    function sliceInPlace(\\n        bytes memory _bytes,\\n        bytes memory _dest,\\n        uint _start\\n    ) internal pure {\\n        uint _length = _dest.length;\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let res := add(_dest, 32)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n                res := add(res, 32)\\n            } {\\n                mstore(res, mload(src))\\n            }\\n        }\\n    }\\n\\n    // Static slice functions, no bounds checking\\n    /// @notice take a 32-byte slice from the specified position\\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(_bytes, 32), _start))\\n        }\\n    }\\n\\n    /// @notice take a 20-byte slice from the specified position\\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\\n        return bytes20(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 8-byte slice from the specified position\\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\\n        return bytes8(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 4-byte slice from the specified position\\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\\n        return bytes4(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 3-byte slice from the specified position\\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\\n        return bytes3(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 2-byte slice from the specified position\\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\\n        return bytes2(slice32(_bytes, _start));\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        uint _totalLen = _start + 20;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Address conversion out of bounds.\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        uint _totalLen = _start + 32;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Uint conversion out of bounds.\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\\n        if (_source.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            result := keccak256(add(add(_bytes, 32), _start), _length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e0f3b3b23c861bd031588bf410dfdd02e2af17941a89aa38d70e534e0380d1\"},\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x35930d982394c7ffde439b82e5e696c5b21a6f09699d44861dfe409ef64084a3\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"author":"https://github.com/GNSPS *","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202b0dd02b9f6319969243a9abe4a6778bb0e04e36f77d6fd9746548d4d3a1056964736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xD 0xD0 0x2B SWAP16 PUSH4 0x19969243 0xA9 0xAB 0xE4 0xA6 PUSH24 0x8BB0E04E36F77D6FD9746548D4D3A1056964736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"1359:17750:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202b0dd02b9f6319969243a9abe4a6778bb0e04e36f77d6fd9746548d4d3a1056964736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xD 0xD0 0x2B SWAP16 PUSH4 0x19969243 0xA9 0xAB 0xE4 0xA6 PUSH24 0x8BB0E04E36F77D6FD9746548D4D3A1056964736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"1359:17750:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"concat(bytes memory,bytes memory)":"infinite","concatStorage(bytes storage pointer,bytes memory)":"infinite","equal(bytes memory,bytes memory)":"infinite","equalStorage(bytes storage pointer,bytes memory)":"infinite","keccak256Slice(bytes memory,uint256,uint256)":"infinite","slice(bytes memory,uint256,uint256)":"infinite","slice2(bytes memory,uint256)":"infinite","slice20(bytes memory,uint256)":"infinite","slice3(bytes memory,uint256)":"infinite","slice32(bytes memory,uint256)":"infinite","slice4(bytes memory,uint256)":"infinite","slice8(bytes memory,uint256)":"infinite","sliceInPlace(bytes memory,bytes memory,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toBytes32(bytes memory)":"infinite","toUint(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"https://github.com/GNSPS *\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\n\\nhttps://github.com/GNSPS/solidity-bytes-utils/\\n\\nThis is free and unencumbered software released into the public domain.\\n\\nAnyone is free to copy, modify, publish, use, compile, sell, or\\ndistribute this software, either in source code form or as a compiled\\nbinary, for any purpose, commercial or non-commercial, and by any\\nmeans.\\n\\nIn jurisdictions that recognize copyright laws, the author or authors\\nof this software dedicate any and all copyright interest in the\\nsoftware to the public domain. We make this dedication for the benefit\\nof the public at large and to the detriment of our heirs and\\nsuccessors. We intend this dedication to be an overt act of\\nrelinquishment in perpetuity of all present and future rights to this\\nsoftware under copyright law.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\nOTHER DEALINGS IN THE SOFTWARE.\\n\\nFor more information, please refer to <https://unlicense.org>\\n*/\\n\\n\\n/** @title BytesLib **/\\n/** @author https://github.com/GNSPS **/\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                        ),\\n                        // and now shift left the number of bytes to\\n                        // leave space for the length in the slot\\n                        exp(0x100, sub(32, newlength))\\n                        ),\\n                        // increase length by the double of the memory\\n                        // bytes length\\n                        mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                    ),\\n                    and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\\n        if (_length == 0) {\\n            return hex\\\"\\\";\\n        }\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\\n            res := mload(0x40)\\n            mstore(0x40, add(add(res, 64), _length))\\n            mstore(res, _length)\\n\\n            // Compute distance between source and destination pointers\\n            let diff := sub(res, add(_bytes, _start))\\n\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n            } {\\n                mstore(add(src, diff), mload(src))\\n            }\\n        }\\n    }\\n\\n    /// @notice Take a slice of the byte array, overwriting the destination.\\n    /// The length of the slice will equal the length of the destination array.\\n    /// @dev Make sure the destination array has afterspace if required.\\n    /// @param _bytes The source array\\n    /// @param _dest The destination array.\\n    /// @param _start The location to start in the source array.\\n    function sliceInPlace(\\n        bytes memory _bytes,\\n        bytes memory _dest,\\n        uint _start\\n    ) internal pure {\\n        uint _length = _dest.length;\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let res := add(_dest, 32)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n                res := add(res, 32)\\n            } {\\n                mstore(res, mload(src))\\n            }\\n        }\\n    }\\n\\n    // Static slice functions, no bounds checking\\n    /// @notice take a 32-byte slice from the specified position\\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(_bytes, 32), _start))\\n        }\\n    }\\n\\n    /// @notice take a 20-byte slice from the specified position\\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\\n        return bytes20(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 8-byte slice from the specified position\\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\\n        return bytes8(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 4-byte slice from the specified position\\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\\n        return bytes4(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 3-byte slice from the specified position\\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\\n        return bytes3(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 2-byte slice from the specified position\\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\\n        return bytes2(slice32(_bytes, _start));\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        uint _totalLen = _start + 20;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Address conversion out of bounds.\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        uint _totalLen = _start + 32;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Uint conversion out of bounds.\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\\n        if (_source.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            result := keccak256(add(add(_bytes, 32), _start), _length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e0f3b3b23c861bd031588bf410dfdd02e2af17941a89aa38d70e534e0380d1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Math operations with safety checks that throw on error","kind":"dev","methods":{},"title":"SafeMath","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122019459dec4114f917e01da96c7e45fc398dac31a230a4c9d44fc8450c0fa6057264736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT GASLIMIT SWAP14 0xEC COINBASE EQ 0xF9 OR 0xE0 SAR 0xA9 PUSH13 0x7E45FC398DAC31A230A4C9D44F 0xC8 GASLIMIT 0xC 0xF 0xA6 SDIV PUSH19 0x64736F6C634300081100330000000000000000 ","sourceMap":"1220:1473:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122019459dec4114f917e01da96c7e45fc398dac31a230a4c9d44fc8450c0fa6057264736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT GASLIMIT SWAP14 0xEC COINBASE EQ 0xF9 OR 0xE0 SAR 0xA9 PUSH13 0x7E45FC398DAC31A230A4C9D44F 0xC8 GASLIMIT 0xC 0xF 0xA6 SDIV PUSH19 0x64736F6C634300081100330000000000000000 ","sourceMap":"1220:1473:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that throw on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x35930d982394c7ffde439b82e5e696c5b21a6f09699d44861dfe409ef64084a3\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@keep-network/random-beacon/contracts/Reimbursable.sol":{"Reimbursable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newReimbursementPool","type":"address"}],"name":"ReimbursementPoolUpdated","type":"event"},{"inputs":[],"name":"reimbursementPool","outputs":[{"internalType":"contract ReimbursementPool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ReimbursementPool","name":"_reimbursementPool","type":"address"}],"name":"updateReimbursementPool","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"reimbursementPool()":"c09975cd","updateReimbursementPool(address)":"7b35b4e6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReimbursementPool\",\"type\":\"address\"}],\"name\":\"ReimbursementPoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"reimbursementPool\",\"outputs\":[{\"internalType\":\"contract ReimbursementPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ReimbursementPool\",\"name\":\"_reimbursementPool\",\"type\":\"address\"}],\"name\":\"updateReimbursementPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@keep-network/random-beacon/contracts/Reimbursable.sol\":\"Reimbursable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/random-beacon/contracts/Reimbursable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ReimbursementPool.sol\\\";\\n\\nabstract contract Reimbursable {\\n    // The variable should be initialized by the implementing contract.\\n    // slither-disable-next-line uninitialized-state\\n    ReimbursementPool public reimbursementPool;\\n\\n    // Reserved storage space in case we need to add more variables,\\n    // since there are upgradeable contracts that inherit from this one.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[49] private __gap;\\n\\n    event ReimbursementPoolUpdated(address newReimbursementPool);\\n\\n    modifier refundable(address receiver) {\\n        uint256 gasStart = gasleft();\\n        _;\\n        reimbursementPool.refund(gasStart - gasleft(), receiver);\\n    }\\n\\n    modifier onlyReimbursableAdmin() virtual {\\n        _;\\n    }\\n\\n    function updateReimbursementPool(ReimbursementPool _reimbursementPool)\\n        external\\n        onlyReimbursableAdmin\\n    {\\n        emit ReimbursementPoolUpdated(address(_reimbursementPool));\\n\\n        reimbursementPool = _reimbursementPool;\\n    }\\n}\\n\",\"keccak256\":\"0x6b01344c1ec13aaab1dc432d3afabe08d6dd0d1a9248be8b36a0747ac22e5d9f\",\"license\":\"GPL-3.0-only\"},\"@keep-network/random-beacon/contracts/ReimbursementPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ReimbursementPool is Ownable, ReentrancyGuard {\\n    /// @notice Authorized contracts that can interact with the reimbursment pool.\\n    ///         Authorization can be granted and removed by the owner.\\n    mapping(address => bool) public isAuthorized;\\n\\n    /// @notice Static gas includes:\\n    ///         - cost of the refund function\\n    ///         - base transaction cost\\n    uint256 public staticGas;\\n\\n    /// @notice Max gas price used to reimburse a transaction submitter. Protects\\n    ///         against malicious operator-miners.\\n    uint256 public maxGasPrice;\\n\\n    event StaticGasUpdated(uint256 newStaticGas);\\n\\n    event MaxGasPriceUpdated(uint256 newMaxGasPrice);\\n\\n    event SendingEtherFailed(uint256 refundAmount, address receiver);\\n\\n    event AuthorizedContract(address thirdPartyContract);\\n\\n    event UnauthorizedContract(address thirdPartyContract);\\n\\n    event FundsWithdrawn(uint256 withdrawnAmount, address receiver);\\n\\n    constructor(uint256 _staticGas, uint256 _maxGasPrice) {\\n        staticGas = _staticGas;\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    /// @notice Receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Refunds ETH to a spender for executing specific transactions.\\n    /// @dev Ignoring the result of sending ETH to a receiver is made on purpose.\\n    ///      For EOA receiving ETH should always work. If a receiver is a smart\\n    ///      contract, then we do not want to fail a transaction, because in some\\n    ///      cases the refund is done at the very end of multiple calls where all\\n    ///      the previous calls were already paid off. It is a receiver's smart\\n    ///      contract resposibility to make sure it can receive ETH.\\n    /// @dev Only authorized contracts are allowed calling this function.\\n    /// @param gasSpent Gas spent on a transaction that needs to be reimbursed.\\n    /// @param receiver Address where the reimbursment is sent.\\n    function refund(uint256 gasSpent, address receiver) external nonReentrant {\\n        require(\\n            isAuthorized[msg.sender],\\n            \\\"Contract is not authorized for a refund\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        uint256 gasPrice = tx.gasprice < maxGasPrice\\n            ? tx.gasprice\\n            : maxGasPrice;\\n\\n        uint256 refundAmount = (gasSpent + staticGas) * gasPrice;\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,unchecked-lowlevel\\n        (bool sent, ) = receiver.call{value: refundAmount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        if (!sent) {\\n            // slither-disable-next-line reentrancy-events\\n            emit SendingEtherFailed(refundAmount, receiver);\\n        }\\n    }\\n\\n    /// @notice Authorize a contract that can interact with this reimbursment pool.\\n    ///         Can be authorized by the owner only.\\n    /// @param _contract Authorized contract.\\n    function authorize(address _contract) external onlyOwner {\\n        isAuthorized[_contract] = true;\\n\\n        emit AuthorizedContract(_contract);\\n    }\\n\\n    /// @notice Unauthorize a contract that was previously authorized to interact\\n    ///         with this reimbursment pool. Can be unauthorized by the\\n    ///         owner only.\\n    /// @param _contract Authorized contract.\\n    function unauthorize(address _contract) external onlyOwner {\\n        delete isAuthorized[_contract];\\n\\n        emit UnauthorizedContract(_contract);\\n    }\\n\\n    /// @notice Setting a static gas cost for executing a transaction. Can be set\\n    ///         by the owner only.\\n    /// @param _staticGas Static gas cost.\\n    function setStaticGas(uint256 _staticGas) external onlyOwner {\\n        staticGas = _staticGas;\\n\\n        emit StaticGasUpdated(_staticGas);\\n    }\\n\\n    /// @notice Setting a max gas price for transactions. Can be set by the\\n    ///         owner only.\\n    /// @param _maxGasPrice Max gas price used to reimburse tx submitters.\\n    function setMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\\n        maxGasPrice = _maxGasPrice;\\n\\n        emit MaxGasPriceUpdated(_maxGasPrice);\\n    }\\n\\n    /// @notice Withdraws all ETH from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param receiver An address where ETH is sent.\\n    function withdrawAll(address receiver) external onlyOwner {\\n        withdraw(address(this).balance, receiver);\\n    }\\n\\n    /// @notice Withdraws ETH amount from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param amount Amount to withdraw from the pool.\\n    /// @param receiver An address where ETH is sent.\\n    function withdraw(uint256 amount, address receiver) public onlyOwner {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        emit FundsWithdrawn(amount, receiver);\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,arbitrary-send\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd6c24368cc4c6349b8b614e878ca961cad8254b8e8db1cc0abe452a70022ce50\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2669,"contract":"@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable","label":"reimbursementPool","offset":0,"slot":"0","type":"t_contract(ReimbursementPool)2999"},{"astId":2673,"contract":"@keep-network/random-beacon/contracts/Reimbursable.sol:Reimbursable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_contract(ReimbursementPool)2999":{"encoding":"inplace","label":"contract ReimbursementPool","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@keep-network/random-beacon/contracts/ReimbursementPool.sol":{"ReimbursementPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"_staticGas","type":"uint256"},{"internalType":"uint256","name":"_maxGasPrice","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"thirdPartyContract","type":"address"}],"name":"AuthorizedContract","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawnAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"}],"name":"FundsWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newMaxGasPrice","type":"uint256"}],"name":"MaxGasPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"refundAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"}],"name":"SendingEtherFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newStaticGas","type":"uint256"}],"name":"StaticGasUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"thirdPartyContract","type":"address"}],"name":"UnauthorizedContract","type":"event"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"authorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isAuthorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxGasPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasSpent","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxGasPrice","type":"uint256"}],"name":"setMaxGasPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_staticGas","type":"uint256"}],"name":"setStaticGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staticGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"unauthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"authorize(address)":{"params":{"_contract":"Authorized contract."}},"owner()":{"details":"Returns the address of the current owner."},"refund(uint256,address)":{"details":"Ignoring the result of sending ETH to a receiver is made on purpose.      For EOA receiving ETH should always work. If a receiver is a smart      contract, then we do not want to fail a transaction, because in some      cases the refund is done at the very end of multiple calls where all      the previous calls were already paid off. It is a receiver's smart      contract resposibility to make sure it can receive ETH.Only authorized contracts are allowed calling this function.","params":{"gasSpent":"Gas spent on a transaction that needs to be reimbursed.","receiver":"Address where the reimbursment is sent."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setMaxGasPrice(uint256)":{"params":{"_maxGasPrice":"Max gas price used to reimburse tx submitters."}},"setStaticGas(uint256)":{"params":{"_staticGas":"Static gas cost."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unauthorize(address)":{"params":{"_contract":"Authorized contract."}},"withdraw(uint256,address)":{"params":{"amount":"Amount to withdraw from the pool.","receiver":"An address where ETH is sent."}},"withdrawAll(address)":{"params":{"receiver":"An address where ETH is sent."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2786":{"entryPoint":null,"id":2786,"parameterSlots":2,"returnSlots":0},"@_4196":{"entryPoint":null,"id":4196,"parameterSlots":0,"returnSlots":0},"@_4304":{"entryPoint":null,"id":4304,"parameterSlots":0,"returnSlots":0},"@_msgSender_4362":{"entryPoint":116,"id":4362,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_4284":{"entryPoint":124,"id":4284,"parameterSlots":1,"returnSlots":0},"abi_decode_t_uint256_fromMemory":{"entryPoint":361,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256_fromMemory":{"entryPoint":384,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":325,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":320,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":335,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1204:21","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:21","statements":[{"nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:21"},"nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:21"},"nodeType":"YulFunctionCall","src":"187:12:21"},"nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:21"},"nodeType":"YulFunctionCall","src":"310:12:21"},"nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nodeType":"YulBlock","src":"379:32:21","statements":[{"nodeType":"YulAssignment","src":"389:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:21","type":""}],"src":"334:77:21"},{"body":{"nodeType":"YulBlock","src":"460:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:21"},"nodeType":"YulFunctionCall","src":"519:12:21"},"nodeType":"YulExpressionStatement","src":"519:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:21"},"nodeType":"YulFunctionCall","src":"490:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:21"},"nodeType":"YulFunctionCall","src":"480:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:21"},"nodeType":"YulFunctionCall","src":"473:43:21"},"nodeType":"YulIf","src":"470:63:21"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:21","type":""}],"src":"417:122:21"},{"body":{"nodeType":"YulBlock","src":"608:80:21","statements":[{"nodeType":"YulAssignment","src":"618:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"633:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"627:5:21"},"nodeType":"YulFunctionCall","src":"627:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"649:26:21"},"nodeType":"YulFunctionCall","src":"649:33:21"},"nodeType":"YulExpressionStatement","src":"649:33:21"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"586:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"594:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"602:5:21","type":""}],"src":"545:143:21"},{"body":{"nodeType":"YulBlock","src":"788:413:21","statements":[{"body":{"nodeType":"YulBlock","src":"834:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"836:77:21"},"nodeType":"YulFunctionCall","src":"836:79:21"},"nodeType":"YulExpressionStatement","src":"836:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"809:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"818:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"805:3:21"},"nodeType":"YulFunctionCall","src":"805:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"830:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"801:3:21"},"nodeType":"YulFunctionCall","src":"801:32:21"},"nodeType":"YulIf","src":"798:119:21"},{"nodeType":"YulBlock","src":"927:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"942:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"956:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"946:6:21","type":""}]},{"nodeType":"YulAssignment","src":"971:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1017:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1028:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1013:3:21"},"nodeType":"YulFunctionCall","src":"1013:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1037:7:21"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"981:31:21"},"nodeType":"YulFunctionCall","src":"981:64:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"971:6:21"}]}]},{"nodeType":"YulBlock","src":"1065:129:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1080:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1094:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1084:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1110:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1156:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1167:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1152:3:21"},"nodeType":"YulFunctionCall","src":"1152:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1176:7:21"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1120:31:21"},"nodeType":"YulFunctionCall","src":"1120:64:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1110:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"750:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"761:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"773:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"781:6:21","type":""}],"src":"694:507:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200133838038062001338833981810160405281019062000037919062000180565b620000576200004b6200007460201b60201c565b6200007c60201b60201c565b6001808190555081600381905550806004819055505050620001c7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6200015a8162000145565b81146200016657600080fd5b50565b6000815190506200017a816200014f565b92915050565b600080604083850312156200019a576200019962000140565b5b6000620001aa8582860162000169565b9250506020620001bd8582860162000169565b9150509250929050565b61116180620001d76000396000f3fe6080604052600436106100c55760003560e01c8063b6a5d7de1161007f578063f0b37c0411610059578063f0b37c0414610236578063f2fde38b1461025f578063fa09e63014610288578063fe9fbb80146102b1576100cc565b8063b6a5d7de146101b9578063d2fa635e146101e2578063e25b53451461020b576100cc565b8062f714ce146100d15780633de39c11146100fa5780633e21740414610125578063715018a61461014e5780637ad226dc146101655780638da5cb5b1461018e576100cc565b366100cc57005b600080fd5b3480156100dd57600080fd5b506100f860048036038101906100f39190610b7c565b6102ee565b005b34801561010657600080fd5b5061010f610492565b60405161011c9190610bcb565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610be6565b610498565b005b34801561015a57600080fd5b506101636104e1565b005b34801561017157600080fd5b5061018c60048036038101906101879190610b7c565b6104f5565b005b34801561019a57600080fd5b506101a36106e6565b6040516101b09190610c22565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190610c3d565b61070f565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610be6565b6107a9565b005b34801561021757600080fd5b506102206107f2565b60405161022d9190610bcb565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190610c3d565b6107f8565b005b34801561026b57600080fd5b5061028660048036038101906102819190610c3d565b610889565b005b34801561029457600080fd5b506102af60048036038101906102aa9190610c3d565b61090c565b005b3480156102bd57600080fd5b506102d860048036038101906102d39190610c3d565b610921565b6040516102e59190610c85565b60405180910390f35b6102f6610941565b81471015610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f90610d8f565b60405180910390fd5b7f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea82826040516103d9929190610daf565b60405180910390a160008173ffffffffffffffffffffffffffffffffffffffff168360405161040790610e09565b60006040518083038185875af1925050503d8060008114610444576040519150601f19603f3d011682016040523d82523d6000602084013e610449565b606091505b505090508061048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610e6a565b60405180910390fd5b505050565b60045481565b6104a0610941565b806003819055507fa86b6e9a406df021f05f513a796a1d5bea0bd3e18fe1d3f6082a3cccfc898d14816040516104d69190610bcb565b60405180910390a150565b6104e9610941565b6104f360006109bf565b565b6104fd610a83565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610efc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ef90610d8f565b60405180910390fd5b60006004543a1061060b5760045461060d565b3a5b9050600081600354856106209190610f4b565b61062a9190610f7f565b905060008373ffffffffffffffffffffffffffffffffffffffff168260405161065290610e09565b60006040518083038185875af1925050503d806000811461068f576040519150601f19603f3d011682016040523d82523d6000602084013e610694565b606091505b50509050806106d7577fd955712c3ae4c3c40451db84ea0c4531c61cc0ea75c13fe9168ae0e07d71e05082856040516106ce929190610daf565b60405180910390a15b5050506106e2610ad2565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610717610941565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2c74592fddad593c2c4403101ce9b30930711ab87571268ddd1e1989ee1d79178160405161079e9190610c22565b60405180910390a150565b6107b1610941565b806004819055507fa7a07f821dfdfca8e4baa9ccc4bbe7b782baac5946918bd19f1c9c761db41410816040516107e79190610bcb565b60405180910390a150565b60035481565b610800610941565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557fe195aa139c7c69ba98f719c94aecd784e12fabc0789ef81335150078bc0873178160405161087e9190610c22565b60405180910390a150565b610891610941565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611033565b60405180910390fd5b610909816109bf565b50565b610914610941565b61091e47826102ee565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b610949610adb565b73ffffffffffffffffffffffffffffffffffffffff166109676106e6565b73ffffffffffffffffffffffffffffffffffffffff16146109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b49061109f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf9061110b565b60405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600080fd5b6000819050919050565b610afb81610ae8565b8114610b0657600080fd5b50565b600081359050610b1881610af2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4982610b1e565b9050919050565b610b5981610b3e565b8114610b6457600080fd5b50565b600081359050610b7681610b50565b92915050565b60008060408385031215610b9357610b92610ae3565b5b6000610ba185828601610b09565b9250506020610bb285828601610b67565b9150509250929050565b610bc581610ae8565b82525050565b6000602082019050610be06000830184610bbc565b92915050565b600060208284031215610bfc57610bfb610ae3565b5b6000610c0a84828501610b09565b91505092915050565b610c1c81610b3e565b82525050565b6000602082019050610c376000830184610c13565b92915050565b600060208284031215610c5357610c52610ae3565b5b6000610c6184828501610b67565b91505092915050565b60008115159050919050565b610c7f81610c6a565b82525050565b6000602082019050610c9a6000830184610c76565b92915050565b600082825260208201905092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b6000610ce7601d83610ca0565b9150610cf282610cb1565b602082019050919050565b60006020820190508181036000830152610d1681610cda565b9050919050565b7f5265636569766572277320616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610d79602183610ca0565b9150610d8482610d1d565b604082019050919050565b60006020820190508181036000830152610da881610d6c565b9050919050565b6000604082019050610dc46000830185610bbc565b610dd16020830184610c13565b9392505050565b600081905092915050565b50565b6000610df3600083610dd8565b9150610dfe82610de3565b600082019050919050565b6000610e1482610de6565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e54601483610ca0565b9150610e5f82610e1e565b602082019050919050565b60006020820190508181036000830152610e8381610e47565b9050919050565b7f436f6e7472616374206973206e6f7420617574686f72697a656420666f72206160008201527f20726566756e6400000000000000000000000000000000000000000000000000602082015250565b6000610ee6602783610ca0565b9150610ef182610e8a565b604082019050919050565b60006020820190508181036000830152610f1581610ed9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5682610ae8565b9150610f6183610ae8565b9250828201905080821115610f7957610f78610f1c565b5b92915050565b6000610f8a82610ae8565b9150610f9583610ae8565b9250828202610fa381610ae8565b91508282048414831517610fba57610fb9610f1c565b5b5092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061101d602683610ca0565b915061102882610fc1565b604082019050919050565b6000602082019050818103600083015261104c81611010565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611089602083610ca0565b915061109482611053565b602082019050919050565b600060208201905081810360008301526110b88161107c565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110f5601f83610ca0565b9150611100826110bf565b602082019050919050565b60006020820190508181036000830152611124816110e8565b905091905056fea26469706673582212202c075939adfee7c3a9f4b39a080b848b02dcf6ed6706dcd6ac65d9e21467ebe464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1338 CODESIZE SUB DUP1 PUSH3 0x1338 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x180 JUMP JUMPDEST PUSH3 0x57 PUSH3 0x4B PUSH3 0x74 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x7C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP PUSH3 0x1C7 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x15A DUP2 PUSH3 0x145 JUMP JUMPDEST DUP2 EQ PUSH3 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x17A DUP2 PUSH3 0x14F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x19A JUMPI PUSH3 0x199 PUSH3 0x140 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1AA DUP6 DUP3 DUP7 ADD PUSH3 0x169 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x1BD DUP6 DUP3 DUP7 ADD PUSH3 0x169 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1161 DUP1 PUSH3 0x1D7 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB6A5D7DE GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF0B37C04 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF0B37C04 EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xFA09E630 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xFE9FBB80 EQ PUSH2 0x2B1 JUMPI PUSH2 0xCC JUMP JUMPDEST DUP1 PUSH4 0xB6A5D7DE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xD2FA635E EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xE25B5345 EQ PUSH2 0x20B JUMPI PUSH2 0xCC JUMP JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x3DE39C11 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x3E217404 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x7AD226DC EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x18E JUMPI PUSH2 0xCC JUMP JUMPDEST CALLDATASIZE PUSH2 0xCC JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x2EE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11C SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x4E1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A3 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B0 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x204 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x7A9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x220 PUSH2 0x7F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x7F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x281 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0xC85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F6 PUSH2 0x941 JUMP JUMPDEST DUP2 SELFBALANCE LT ISZERO PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x330 SWAP1 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x3A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39F SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6141B54B56B8A52A8C6F5CD2A857F6117B18FFBF4D46BD3106F300A839CBF5EA DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x3D9 SWAP3 SWAP2 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x407 SWAP1 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x444 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x449 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x48D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x484 SWAP1 PUSH2 0xE6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4A0 PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xA86B6E9A406DF021F05F513A796A1D5BEA0BD3E18FE1D3F6082A3CCCFC898D14 DUP2 PUSH1 0x40 MLOAD PUSH2 0x4D6 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4E9 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x4F3 PUSH1 0x0 PUSH2 0x9BF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4FD PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x589 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x580 SWAP1 PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GASPRICE LT PUSH2 0x60B JUMPI PUSH1 0x4 SLOAD PUSH2 0x60D JUMP JUMPDEST GASPRICE JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 SLOAD DUP6 PUSH2 0x620 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST PUSH2 0x62A SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x652 SWAP1 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x694 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6D7 JUMPI PUSH32 0xD955712C3AE4C3C40451DB84EA0C4531C61CC0EA75C13FE9168AE0E07D71E050 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH2 0x6CE SWAP3 SWAP2 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP PUSH2 0x6E2 PUSH2 0xAD2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x717 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x2C74592FDDAD593C2C4403101CE9B30930711AB87571268DDD1E1989EE1D7917 DUP2 PUSH1 0x40 MLOAD PUSH2 0x79E SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x7B1 PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xA7A07F821DFDFCA8E4BAA9CCC4BBE7B782BAAC5946918BD19F1C9C761DB41410 DUP2 PUSH1 0x40 MLOAD PUSH2 0x7E7 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x800 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH32 0xE195AA139C7C69BA98F719C94AECD784E12FABC0789EF81335150078BC087317 DUP2 PUSH1 0x40 MLOAD PUSH2 0x87E SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x891 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x909 DUP2 PUSH2 0x9BF JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x914 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x91E SELFBALANCE DUP3 PUSH2 0x2EE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x949 PUSH2 0xADB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x967 PUSH2 0x6E6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9B4 SWAP1 PUSH2 0x109F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xAC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABF SWAP1 PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAFB DUP2 PUSH2 0xAE8 JUMP JUMPDEST DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB18 DUP2 PUSH2 0xAF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB49 DUP3 PUSH2 0xB1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB59 DUP2 PUSH2 0xB3E JUMP JUMPDEST DUP2 EQ PUSH2 0xB64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB76 DUP2 PUSH2 0xB50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB93 JUMPI PUSH2 0xB92 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBA1 DUP6 DUP3 DUP7 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBB2 DUP6 DUP3 DUP7 ADD PUSH2 0xB67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC5 DUP2 PUSH2 0xAE8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBE0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBBC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFC JUMPI PUSH2 0xBFB PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0A DUP5 DUP3 DUP6 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xB3E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC53 JUMPI PUSH2 0xC52 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC61 DUP5 DUP3 DUP6 ADD PUSH2 0xB67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7F DUP2 PUSH2 0xC6A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC9A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE7 PUSH1 0x1D DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xCF2 DUP3 PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD16 DUP2 PUSH2 0xCDA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265636569766572277320616464726573732063616E6E6F74206265207A6572 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD79 PUSH1 0x21 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xD84 DUP3 PUSH2 0xD1D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA8 DUP2 PUSH2 0xD6C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDC4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xDD1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF3 PUSH1 0x0 DUP4 PUSH2 0xDD8 JUMP JUMPDEST SWAP2 POP PUSH2 0xDFE DUP3 PUSH2 0xDE3 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE14 DUP3 PUSH2 0xDE6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2073656E64204574686572000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE54 PUSH1 0x14 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xE5F DUP3 PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE83 DUP2 PUSH2 0xE47 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206973206E6F7420617574686F72697A656420666F722061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726566756E6400000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE6 PUSH1 0x27 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF1 DUP3 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF15 DUP2 PUSH2 0xED9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP3 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP4 PUSH2 0xAE8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF78 PUSH2 0xF1C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xAE8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xFA3 DUP2 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xFBA JUMPI PUSH2 0xFB9 PUSH2 0xF1C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101D PUSH1 0x26 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1028 DUP3 PUSH2 0xFC1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x104C DUP2 PUSH2 0x1010 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1089 PUSH1 0x20 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1094 DUP3 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10B8 DUP2 PUSH2 0x107C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F5 PUSH1 0x1F DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1100 DUP3 PUSH2 0x10BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1124 DUP2 PUSH2 0x10E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C SMOD MSIZE CODECOPY 0xAD INVALID 0xE7 0xC3 0xA9 DELEGATECALL 0xB3 SWAP11 ADDMOD SIGNEXTEND DUP5 DUP12 MUL 0xDC 0xF6 0xED PUSH8 0x6DCD6AC65D9E214 PUSH8 0xEBE464736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"2045:5295:4:-:0;;;2998:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:12;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1716:1:13;1821:7;:22;;;;3074:10:4;3062:9;:22;;;;3108:12;3094:11;:26;;;;2998:129;;2045:5295;;655:96:14;708:7;734:10;727:17;;655:96;:::o;2426:187:12:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;88:117:21:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:507::-;773:6;781;830:2;818:9;809:7;805:23;801:32;798:119;;;836:79;;:::i;:::-;798:119;956:1;981:64;1037:7;1028:6;1017:9;1013:22;981:64;:::i;:::-;971:74;;927:128;1094:2;1120:64;1176:7;1167:6;1156:9;1152:22;1120:64;:::i;:::-;1110:74;;1065:129;694:507;;;;;:::o;2045:5295:4:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_2791":{"entryPoint":null,"id":2791,"parameterSlots":0,"returnSlots":0},"@_checkOwner_4227":{"entryPoint":2369,"id":4227,"parameterSlots":0,"returnSlots":0},"@_msgSender_4362":{"entryPoint":2779,"id":4362,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_4338":{"entryPoint":2770,"id":4338,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_4330":{"entryPoint":2691,"id":4330,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_4284":{"entryPoint":2495,"id":4284,"parameterSlots":1,"returnSlots":0},"@authorize_2877":{"entryPoint":1807,"id":2877,"parameterSlots":1,"returnSlots":0},"@isAuthorized_2736":{"entryPoint":2337,"id":2736,"parameterSlots":0,"returnSlots":0},"@maxGasPrice_2742":{"entryPoint":1170,"id":2742,"parameterSlots":0,"returnSlots":0},"@owner_4213":{"entryPoint":1766,"id":4213,"parameterSlots":0,"returnSlots":1},"@refund_2858":{"entryPoint":1269,"id":2858,"parameterSlots":2,"returnSlots":0},"@renounceOwnership_4241":{"entryPoint":1249,"id":4241,"parameterSlots":0,"returnSlots":0},"@setMaxGasPrice_2929":{"entryPoint":1961,"id":2929,"parameterSlots":1,"returnSlots":0},"@setStaticGas_2912":{"entryPoint":1176,"id":2912,"parameterSlots":1,"returnSlots":0},"@staticGas_2739":{"entryPoint":2034,"id":2739,"parameterSlots":0,"returnSlots":0},"@transferOwnership_4264":{"entryPoint":2185,"id":4264,"parameterSlots":1,"returnSlots":0},"@unauthorize_2895":{"entryPoint":2040,"id":2895,"parameterSlots":1,"returnSlots":0},"@withdrawAll_2947":{"entryPoint":2316,"id":2947,"parameterSlots":1,"returnSlots":0},"@withdraw_2998":{"entryPoint":750,"id":2998,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address":{"entryPoint":2919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2825,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":2940,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3091,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3190,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13_to_t_string_memory_ptr_fromStack":{"entryPoint":3801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":4112,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb_to_t_string_memory_ptr_fromStack":{"entryPoint":3655,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5_to_t_string_memory_ptr_fromStack":{"entryPoint":3436,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":4220,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3558,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":4328,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749_to_t_string_memory_ptr_fromStack":{"entryPoint":3290,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3004,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3205,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3836,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4147,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3690,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4255,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3019,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":3503,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3544,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3232,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3915,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3967,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2878,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3178,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2846,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2792,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3868,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2787,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13":{"entryPoint":3722,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":4033,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb":{"entryPoint":3614,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5":{"entryPoint":3357,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":4179,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":3555,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":4287,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749":{"entryPoint":3249,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2896,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2802,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12853:21","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:21","statements":[{"nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:21"},"nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:21"},"nodeType":"YulFunctionCall","src":"187:12:21"},"nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:21"},"nodeType":"YulFunctionCall","src":"310:12:21"},"nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nodeType":"YulBlock","src":"379:32:21","statements":[{"nodeType":"YulAssignment","src":"389:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:21","type":""}],"src":"334:77:21"},{"body":{"nodeType":"YulBlock","src":"460:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:21"},"nodeType":"YulFunctionCall","src":"519:12:21"},"nodeType":"YulExpressionStatement","src":"519:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:21"},"nodeType":"YulFunctionCall","src":"490:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:21"},"nodeType":"YulFunctionCall","src":"480:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:21"},"nodeType":"YulFunctionCall","src":"473:43:21"},"nodeType":"YulIf","src":"470:63:21"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:21","type":""}],"src":"417:122:21"},{"body":{"nodeType":"YulBlock","src":"597:87:21","statements":[{"nodeType":"YulAssignment","src":"607:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:21"},"nodeType":"YulFunctionCall","src":"616:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:21"},"nodeType":"YulFunctionCall","src":"645:33:21"},"nodeType":"YulExpressionStatement","src":"645:33:21"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:21","type":""}],"src":"545:139:21"},{"body":{"nodeType":"YulBlock","src":"735:81:21","statements":[{"nodeType":"YulAssignment","src":"745:65:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"760:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"767:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"756:3:21"},"nodeType":"YulFunctionCall","src":"756:54:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"745:7:21"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"717:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"727:7:21","type":""}],"src":"690:126:21"},{"body":{"nodeType":"YulBlock","src":"867:51:21","statements":[{"nodeType":"YulAssignment","src":"877:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"906:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"888:17:21"},"nodeType":"YulFunctionCall","src":"888:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"877:7:21"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"849:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"859:7:21","type":""}],"src":"822:96:21"},{"body":{"nodeType":"YulBlock","src":"967:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:21"},"nodeType":"YulFunctionCall","src":"1026:12:21"},"nodeType":"YulExpressionStatement","src":"1026:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"997:17:21"},"nodeType":"YulFunctionCall","src":"997:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:21"},"nodeType":"YulFunctionCall","src":"987:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:21"},"nodeType":"YulFunctionCall","src":"980:43:21"},"nodeType":"YulIf","src":"977:63:21"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:21","type":""}],"src":"924:122:21"},{"body":{"nodeType":"YulBlock","src":"1104:87:21","statements":[{"nodeType":"YulAssignment","src":"1114:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:21"},"nodeType":"YulFunctionCall","src":"1123:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1152:26:21"},"nodeType":"YulFunctionCall","src":"1152:33:21"},"nodeType":"YulExpressionStatement","src":"1152:33:21"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:21","type":""}],"src":"1052:139:21"},{"body":{"nodeType":"YulBlock","src":"1280:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"1326:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1328:77:21"},"nodeType":"YulFunctionCall","src":"1328:79:21"},"nodeType":"YulExpressionStatement","src":"1328:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1301:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1310:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1297:3:21"},"nodeType":"YulFunctionCall","src":"1297:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1322:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1293:3:21"},"nodeType":"YulFunctionCall","src":"1293:32:21"},"nodeType":"YulIf","src":"1290:119:21"},{"nodeType":"YulBlock","src":"1419:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1434:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1448:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1438:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1463:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1498:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1509:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:21"},"nodeType":"YulFunctionCall","src":"1494:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1518:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1473:20:21"},"nodeType":"YulFunctionCall","src":"1473:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1463:6:21"}]}]},{"nodeType":"YulBlock","src":"1546:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1561:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1575:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1565:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1591:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1637:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:21"},"nodeType":"YulFunctionCall","src":"1622:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1601:20:21"},"nodeType":"YulFunctionCall","src":"1601:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1591:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1242:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1253:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1265:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1273:6:21","type":""}],"src":"1197:474:21"},{"body":{"nodeType":"YulBlock","src":"1742:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1759:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1782:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1764:17:21"},"nodeType":"YulFunctionCall","src":"1764:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:21"},"nodeType":"YulFunctionCall","src":"1752:37:21"},"nodeType":"YulExpressionStatement","src":"1752:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1730:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1737:3:21","type":""}],"src":"1677:118:21"},{"body":{"nodeType":"YulBlock","src":"1899:124:21","statements":[{"nodeType":"YulAssignment","src":"1909:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1921:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1932:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1917:3:21"},"nodeType":"YulFunctionCall","src":"1917:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1909:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:21"},"nodeType":"YulFunctionCall","src":"1998:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1945:43:21"},"nodeType":"YulFunctionCall","src":"1945:71:21"},"nodeType":"YulExpressionStatement","src":"1945:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1871:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1883:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1894:4:21","type":""}],"src":"1801:222:21"},{"body":{"nodeType":"YulBlock","src":"2095:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"2141:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2143:77:21"},"nodeType":"YulFunctionCall","src":"2143:79:21"},"nodeType":"YulExpressionStatement","src":"2143:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2116:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2125:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2112:3:21"},"nodeType":"YulFunctionCall","src":"2112:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2137:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2108:3:21"},"nodeType":"YulFunctionCall","src":"2108:32:21"},"nodeType":"YulIf","src":"2105:119:21"},{"nodeType":"YulBlock","src":"2234:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2249:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2263:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2253:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2278:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2313:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2324:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2309:3:21"},"nodeType":"YulFunctionCall","src":"2309:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2333:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2288:20:21"},"nodeType":"YulFunctionCall","src":"2288:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2278:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2065:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2076:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2088:6:21","type":""}],"src":"2029:329:21"},{"body":{"nodeType":"YulBlock","src":"2429:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2446:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2469:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2451:17:21"},"nodeType":"YulFunctionCall","src":"2451:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2439:6:21"},"nodeType":"YulFunctionCall","src":"2439:37:21"},"nodeType":"YulExpressionStatement","src":"2439:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2417:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2424:3:21","type":""}],"src":"2364:118:21"},{"body":{"nodeType":"YulBlock","src":"2586:124:21","statements":[{"nodeType":"YulAssignment","src":"2596:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2608:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2619:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2604:3:21"},"nodeType":"YulFunctionCall","src":"2604:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2596:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2676:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2689:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2700:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2685:3:21"},"nodeType":"YulFunctionCall","src":"2685:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2632:43:21"},"nodeType":"YulFunctionCall","src":"2632:71:21"},"nodeType":"YulExpressionStatement","src":"2632:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2558:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2570:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2581:4:21","type":""}],"src":"2488:222:21"},{"body":{"nodeType":"YulBlock","src":"2782:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"2828:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2830:77:21"},"nodeType":"YulFunctionCall","src":"2830:79:21"},"nodeType":"YulExpressionStatement","src":"2830:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2803:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2812:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2799:3:21"},"nodeType":"YulFunctionCall","src":"2799:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2824:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2795:3:21"},"nodeType":"YulFunctionCall","src":"2795:32:21"},"nodeType":"YulIf","src":"2792:119:21"},{"nodeType":"YulBlock","src":"2921:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2936:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2950:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2940:6:21","type":""}]},{"nodeType":"YulAssignment","src":"2965:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3000:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3011:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2996:3:21"},"nodeType":"YulFunctionCall","src":"2996:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3020:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2975:20:21"},"nodeType":"YulFunctionCall","src":"2975:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2965:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2752:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2763:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2775:6:21","type":""}],"src":"2716:329:21"},{"body":{"nodeType":"YulBlock","src":"3093:48:21","statements":[{"nodeType":"YulAssignment","src":"3103:32:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3128:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3121:6:21"},"nodeType":"YulFunctionCall","src":"3121:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3114:6:21"},"nodeType":"YulFunctionCall","src":"3114:21:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3103:7:21"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3075:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3085:7:21","type":""}],"src":"3051:90:21"},{"body":{"nodeType":"YulBlock","src":"3206:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3223:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3243:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3228:14:21"},"nodeType":"YulFunctionCall","src":"3228:21:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3216:6:21"},"nodeType":"YulFunctionCall","src":"3216:34:21"},"nodeType":"YulExpressionStatement","src":"3216:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3194:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3201:3:21","type":""}],"src":"3147:109:21"},{"body":{"nodeType":"YulBlock","src":"3354:118:21","statements":[{"nodeType":"YulAssignment","src":"3364:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3376:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3387:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3372:3:21"},"nodeType":"YulFunctionCall","src":"3372:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3364:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3438:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3451:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3462:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3447:3:21"},"nodeType":"YulFunctionCall","src":"3447:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3400:37:21"},"nodeType":"YulFunctionCall","src":"3400:65:21"},"nodeType":"YulExpressionStatement","src":"3400:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3326:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3338:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3349:4:21","type":""}],"src":"3262:210:21"},{"body":{"nodeType":"YulBlock","src":"3574:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3591:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3596:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3584:6:21"},"nodeType":"YulFunctionCall","src":"3584:19:21"},"nodeType":"YulExpressionStatement","src":"3584:19:21"},{"nodeType":"YulAssignment","src":"3612:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3631:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"3636:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3627:3:21"},"nodeType":"YulFunctionCall","src":"3627:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3612:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3546:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"3551:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3562:11:21","type":""}],"src":"3478:169:21"},{"body":{"nodeType":"YulBlock","src":"3759:73:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3781:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3789:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3777:3:21"},"nodeType":"YulFunctionCall","src":"3777:14:21"},{"hexValue":"496e73756666696369656e7420636f6e74726163742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"3793:31:21","type":"","value":"Insufficient contract balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3770:6:21"},"nodeType":"YulFunctionCall","src":"3770:55:21"},"nodeType":"YulExpressionStatement","src":"3770:55:21"}]},"name":"store_literal_in_memory_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3751:6:21","type":""}],"src":"3653:179:21"},{"body":{"nodeType":"YulBlock","src":"3984:220:21","statements":[{"nodeType":"YulAssignment","src":"3994:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4060:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"4065:2:21","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4001:58:21"},"nodeType":"YulFunctionCall","src":"4001:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3994:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4166:3:21"}],"functionName":{"name":"store_literal_in_memory_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749","nodeType":"YulIdentifier","src":"4077:88:21"},"nodeType":"YulFunctionCall","src":"4077:93:21"},"nodeType":"YulExpressionStatement","src":"4077:93:21"},{"nodeType":"YulAssignment","src":"4179:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4190:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"4195:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4186:3:21"},"nodeType":"YulFunctionCall","src":"4186:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4179:3:21"}]}]},"name":"abi_encode_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3972:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3980:3:21","type":""}],"src":"3838:366:21"},{"body":{"nodeType":"YulBlock","src":"4381:248:21","statements":[{"nodeType":"YulAssignment","src":"4391:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4403:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4414:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4399:3:21"},"nodeType":"YulFunctionCall","src":"4399:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4391:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4438:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4449:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4434:3:21"},"nodeType":"YulFunctionCall","src":"4434:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4457:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4463:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4453:3:21"},"nodeType":"YulFunctionCall","src":"4453:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4427:6:21"},"nodeType":"YulFunctionCall","src":"4427:47:21"},"nodeType":"YulExpressionStatement","src":"4427:47:21"},{"nodeType":"YulAssignment","src":"4483:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4617:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4491:124:21"},"nodeType":"YulFunctionCall","src":"4491:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4483:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4361:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4376:4:21","type":""}],"src":"4210:419:21"},{"body":{"nodeType":"YulBlock","src":"4741:114:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4763:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4771:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4759:3:21"},"nodeType":"YulFunctionCall","src":"4759:14:21"},{"hexValue":"5265636569766572277320616464726573732063616e6e6f74206265207a6572","kind":"string","nodeType":"YulLiteral","src":"4775:34:21","type":"","value":"Receiver's address cannot be zer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4752:6:21"},"nodeType":"YulFunctionCall","src":"4752:58:21"},"nodeType":"YulExpressionStatement","src":"4752:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4831:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4839:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4827:3:21"},"nodeType":"YulFunctionCall","src":"4827:15:21"},{"hexValue":"6f","kind":"string","nodeType":"YulLiteral","src":"4844:3:21","type":"","value":"o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4820:6:21"},"nodeType":"YulFunctionCall","src":"4820:28:21"},"nodeType":"YulExpressionStatement","src":"4820:28:21"}]},"name":"store_literal_in_memory_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4733:6:21","type":""}],"src":"4635:220:21"},{"body":{"nodeType":"YulBlock","src":"5007:220:21","statements":[{"nodeType":"YulAssignment","src":"5017:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5083:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"5088:2:21","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5024:58:21"},"nodeType":"YulFunctionCall","src":"5024:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5017:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5189:3:21"}],"functionName":{"name":"store_literal_in_memory_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5","nodeType":"YulIdentifier","src":"5100:88:21"},"nodeType":"YulFunctionCall","src":"5100:93:21"},"nodeType":"YulExpressionStatement","src":"5100:93:21"},{"nodeType":"YulAssignment","src":"5202:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5213:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"5218:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5209:3:21"},"nodeType":"YulFunctionCall","src":"5209:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5202:3:21"}]}]},"name":"abi_encode_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4995:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5003:3:21","type":""}],"src":"4861:366:21"},{"body":{"nodeType":"YulBlock","src":"5404:248:21","statements":[{"nodeType":"YulAssignment","src":"5414:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5426:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5437:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5422:3:21"},"nodeType":"YulFunctionCall","src":"5422:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5414:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5461:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5472:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5457:3:21"},"nodeType":"YulFunctionCall","src":"5457:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5480:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5486:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5476:3:21"},"nodeType":"YulFunctionCall","src":"5476:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5450:6:21"},"nodeType":"YulFunctionCall","src":"5450:47:21"},"nodeType":"YulExpressionStatement","src":"5450:47:21"},{"nodeType":"YulAssignment","src":"5506:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5640:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5514:124:21"},"nodeType":"YulFunctionCall","src":"5514:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5506:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5384:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5399:4:21","type":""}],"src":"5233:419:21"},{"body":{"nodeType":"YulBlock","src":"5784:206:21","statements":[{"nodeType":"YulAssignment","src":"5794:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5806:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5817:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5802:3:21"},"nodeType":"YulFunctionCall","src":"5802:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5794:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5874:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5887:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5898:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5883:3:21"},"nodeType":"YulFunctionCall","src":"5883:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5830:43:21"},"nodeType":"YulFunctionCall","src":"5830:71:21"},"nodeType":"YulExpressionStatement","src":"5830:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5955:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5968:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5979:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5964:3:21"},"nodeType":"YulFunctionCall","src":"5964:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5911:43:21"},"nodeType":"YulFunctionCall","src":"5911:72:21"},"nodeType":"YulExpressionStatement","src":"5911:72:21"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5748:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5760:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5768:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5779:4:21","type":""}],"src":"5658:332:21"},{"body":{"nodeType":"YulBlock","src":"6109:34:21","statements":[{"nodeType":"YulAssignment","src":"6119:18:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"6134:3:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6119:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6081:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"6086:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6097:11:21","type":""}],"src":"5996:147:21"},{"body":{"nodeType":"YulBlock","src":"6255:8:21","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6247:6:21","type":""}],"src":"6149:114:21"},{"body":{"nodeType":"YulBlock","src":"6432:235:21","statements":[{"nodeType":"YulAssignment","src":"6442:90:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6525:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6530:1:21","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6449:75:21"},"nodeType":"YulFunctionCall","src":"6449:83:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6442:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6630:3:21"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"6541:88:21"},"nodeType":"YulFunctionCall","src":"6541:93:21"},"nodeType":"YulExpressionStatement","src":"6541:93:21"},{"nodeType":"YulAssignment","src":"6643:18:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6654:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6659:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6650:3:21"},"nodeType":"YulFunctionCall","src":"6650:11:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6643:3:21"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6420:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6428:3:21","type":""}],"src":"6269:398:21"},{"body":{"nodeType":"YulBlock","src":"6861:191:21","statements":[{"nodeType":"YulAssignment","src":"6872:154:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7022:3:21"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6879:141:21"},"nodeType":"YulFunctionCall","src":"6879:147:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6872:3:21"}]},{"nodeType":"YulAssignment","src":"7036:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"7043:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7036:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6848:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6857:3:21","type":""}],"src":"6673:379:21"},{"body":{"nodeType":"YulBlock","src":"7164:64:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7186:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7194:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7182:3:21"},"nodeType":"YulFunctionCall","src":"7182:14:21"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nodeType":"YulLiteral","src":"7198:22:21","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7175:6:21"},"nodeType":"YulFunctionCall","src":"7175:46:21"},"nodeType":"YulExpressionStatement","src":"7175:46:21"}]},"name":"store_literal_in_memory_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7156:6:21","type":""}],"src":"7058:170:21"},{"body":{"nodeType":"YulBlock","src":"7380:220:21","statements":[{"nodeType":"YulAssignment","src":"7390:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7456:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7461:2:21","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7397:58:21"},"nodeType":"YulFunctionCall","src":"7397:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7390:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7562:3:21"}],"functionName":{"name":"store_literal_in_memory_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","nodeType":"YulIdentifier","src":"7473:88:21"},"nodeType":"YulFunctionCall","src":"7473:93:21"},"nodeType":"YulExpressionStatement","src":"7473:93:21"},{"nodeType":"YulAssignment","src":"7575:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7586:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"7591:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7582:3:21"},"nodeType":"YulFunctionCall","src":"7582:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7575:3:21"}]}]},"name":"abi_encode_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7368:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7376:3:21","type":""}],"src":"7234:366:21"},{"body":{"nodeType":"YulBlock","src":"7777:248:21","statements":[{"nodeType":"YulAssignment","src":"7787:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7799:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7810:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7795:3:21"},"nodeType":"YulFunctionCall","src":"7795:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7787:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7834:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7845:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7830:3:21"},"nodeType":"YulFunctionCall","src":"7830:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7853:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7859:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7849:3:21"},"nodeType":"YulFunctionCall","src":"7849:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7823:6:21"},"nodeType":"YulFunctionCall","src":"7823:47:21"},"nodeType":"YulExpressionStatement","src":"7823:47:21"},{"nodeType":"YulAssignment","src":"7879:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8013:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7887:124:21"},"nodeType":"YulFunctionCall","src":"7887:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7879:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7757:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7772:4:21","type":""}],"src":"7606:419:21"},{"body":{"nodeType":"YulBlock","src":"8137:120:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8159:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8167:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8155:3:21"},"nodeType":"YulFunctionCall","src":"8155:14:21"},{"hexValue":"436f6e7472616374206973206e6f7420617574686f72697a656420666f722061","kind":"string","nodeType":"YulLiteral","src":"8171:34:21","type":"","value":"Contract is not authorized for a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8148:6:21"},"nodeType":"YulFunctionCall","src":"8148:58:21"},"nodeType":"YulExpressionStatement","src":"8148:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8227:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8235:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8223:3:21"},"nodeType":"YulFunctionCall","src":"8223:15:21"},{"hexValue":"20726566756e64","kind":"string","nodeType":"YulLiteral","src":"8240:9:21","type":"","value":" refund"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8216:6:21"},"nodeType":"YulFunctionCall","src":"8216:34:21"},"nodeType":"YulExpressionStatement","src":"8216:34:21"}]},"name":"store_literal_in_memory_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8129:6:21","type":""}],"src":"8031:226:21"},{"body":{"nodeType":"YulBlock","src":"8409:220:21","statements":[{"nodeType":"YulAssignment","src":"8419:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8485:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8490:2:21","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8426:58:21"},"nodeType":"YulFunctionCall","src":"8426:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8419:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8591:3:21"}],"functionName":{"name":"store_literal_in_memory_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13","nodeType":"YulIdentifier","src":"8502:88:21"},"nodeType":"YulFunctionCall","src":"8502:93:21"},"nodeType":"YulExpressionStatement","src":"8502:93:21"},{"nodeType":"YulAssignment","src":"8604:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8615:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8620:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8611:3:21"},"nodeType":"YulFunctionCall","src":"8611:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8604:3:21"}]}]},"name":"abi_encode_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8397:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8405:3:21","type":""}],"src":"8263:366:21"},{"body":{"nodeType":"YulBlock","src":"8806:248:21","statements":[{"nodeType":"YulAssignment","src":"8816:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8828:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8839:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8824:3:21"},"nodeType":"YulFunctionCall","src":"8824:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8816:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8863:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8874:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8859:3:21"},"nodeType":"YulFunctionCall","src":"8859:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8882:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8888:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8878:3:21"},"nodeType":"YulFunctionCall","src":"8878:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8852:6:21"},"nodeType":"YulFunctionCall","src":"8852:47:21"},"nodeType":"YulExpressionStatement","src":"8852:47:21"},{"nodeType":"YulAssignment","src":"8908:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9042:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8916:124:21"},"nodeType":"YulFunctionCall","src":"8916:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8908:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8786:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8801:4:21","type":""}],"src":"8635:419:21"},{"body":{"nodeType":"YulBlock","src":"9088:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9105:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9108:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9098:6:21"},"nodeType":"YulFunctionCall","src":"9098:88:21"},"nodeType":"YulExpressionStatement","src":"9098:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9202:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9205:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9195:6:21"},"nodeType":"YulFunctionCall","src":"9195:15:21"},"nodeType":"YulExpressionStatement","src":"9195:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9229:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9219:6:21"},"nodeType":"YulFunctionCall","src":"9219:15:21"},"nodeType":"YulExpressionStatement","src":"9219:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9060:180:21"},{"body":{"nodeType":"YulBlock","src":"9290:147:21","statements":[{"nodeType":"YulAssignment","src":"9300:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9323:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9305:17:21"},"nodeType":"YulFunctionCall","src":"9305:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9300:1:21"}]},{"nodeType":"YulAssignment","src":"9334:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9357:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9339:17:21"},"nodeType":"YulFunctionCall","src":"9339:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9334:1:21"}]},{"nodeType":"YulAssignment","src":"9368:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9379:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"9382:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9375:3:21"},"nodeType":"YulFunctionCall","src":"9375:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9368:3:21"}]},{"body":{"nodeType":"YulBlock","src":"9408:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9410:16:21"},"nodeType":"YulFunctionCall","src":"9410:18:21"},"nodeType":"YulExpressionStatement","src":"9410:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9400:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"9403:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9397:2:21"},"nodeType":"YulFunctionCall","src":"9397:10:21"},"nodeType":"YulIf","src":"9394:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9277:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"9280:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9286:3:21","type":""}],"src":"9246:191:21"},{"body":{"nodeType":"YulBlock","src":"9491:362:21","statements":[{"nodeType":"YulAssignment","src":"9501:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9524:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9506:17:21"},"nodeType":"YulFunctionCall","src":"9506:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9501:1:21"}]},{"nodeType":"YulAssignment","src":"9535:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9558:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9540:17:21"},"nodeType":"YulFunctionCall","src":"9540:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9535:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"9569:28:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9592:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"9595:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9588:3:21"},"nodeType":"YulFunctionCall","src":"9588:9:21"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"9573:11:21","type":""}]},{"nodeType":"YulAssignment","src":"9606:41:21","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"9635:11:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9617:17:21"},"nodeType":"YulFunctionCall","src":"9617:30:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"9606:7:21"}]},{"body":{"nodeType":"YulBlock","src":"9824:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9826:16:21"},"nodeType":"YulFunctionCall","src":"9826:18:21"},"nodeType":"YulExpressionStatement","src":"9826:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9757:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9750:6:21"},"nodeType":"YulFunctionCall","src":"9750:9:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9780:1:21"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"9787:7:21"},{"name":"x","nodeType":"YulIdentifier","src":"9796:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9783:3:21"},"nodeType":"YulFunctionCall","src":"9783:15:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9777:2:21"},"nodeType":"YulFunctionCall","src":"9777:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9730:2:21"},"nodeType":"YulFunctionCall","src":"9730:83:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9710:6:21"},"nodeType":"YulFunctionCall","src":"9710:113:21"},"nodeType":"YulIf","src":"9707:139:21"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9474:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"9477:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"9483:7:21","type":""}],"src":"9443:410:21"},{"body":{"nodeType":"YulBlock","src":"9965:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9987:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9995:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9983:3:21"},"nodeType":"YulFunctionCall","src":"9983:14:21"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"9999:34:21","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9976:6:21"},"nodeType":"YulFunctionCall","src":"9976:58:21"},"nodeType":"YulExpressionStatement","src":"9976:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10055:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10063:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10051:3:21"},"nodeType":"YulFunctionCall","src":"10051:15:21"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"10068:8:21","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10044:6:21"},"nodeType":"YulFunctionCall","src":"10044:33:21"},"nodeType":"YulExpressionStatement","src":"10044:33:21"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9957:6:21","type":""}],"src":"9859:225:21"},{"body":{"nodeType":"YulBlock","src":"10236:220:21","statements":[{"nodeType":"YulAssignment","src":"10246:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10312:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10317:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10253:58:21"},"nodeType":"YulFunctionCall","src":"10253:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10246:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10418:3:21"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"10329:88:21"},"nodeType":"YulFunctionCall","src":"10329:93:21"},"nodeType":"YulExpressionStatement","src":"10329:93:21"},{"nodeType":"YulAssignment","src":"10431:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10442:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"10447:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10438:3:21"},"nodeType":"YulFunctionCall","src":"10438:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10431:3:21"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10224:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10232:3:21","type":""}],"src":"10090:366:21"},{"body":{"nodeType":"YulBlock","src":"10633:248:21","statements":[{"nodeType":"YulAssignment","src":"10643:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10655:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10666:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10651:3:21"},"nodeType":"YulFunctionCall","src":"10651:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10643:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10690:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10701:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10686:3:21"},"nodeType":"YulFunctionCall","src":"10686:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10709:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10715:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10705:3:21"},"nodeType":"YulFunctionCall","src":"10705:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10679:6:21"},"nodeType":"YulFunctionCall","src":"10679:47:21"},"nodeType":"YulExpressionStatement","src":"10679:47:21"},{"nodeType":"YulAssignment","src":"10735:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10869:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10743:124:21"},"nodeType":"YulFunctionCall","src":"10743:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10735:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10613:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10628:4:21","type":""}],"src":"10462:419:21"},{"body":{"nodeType":"YulBlock","src":"10993:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11015:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"11023:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11011:3:21"},"nodeType":"YulFunctionCall","src":"11011:14:21"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11027:34:21","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11004:6:21"},"nodeType":"YulFunctionCall","src":"11004:58:21"},"nodeType":"YulExpressionStatement","src":"11004:58:21"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10985:6:21","type":""}],"src":"10887:182:21"},{"body":{"nodeType":"YulBlock","src":"11221:220:21","statements":[{"nodeType":"YulAssignment","src":"11231:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11297:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11302:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11238:58:21"},"nodeType":"YulFunctionCall","src":"11238:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11231:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11403:3:21"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"11314:88:21"},"nodeType":"YulFunctionCall","src":"11314:93:21"},"nodeType":"YulExpressionStatement","src":"11314:93:21"},{"nodeType":"YulAssignment","src":"11416:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11427:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11432:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11423:3:21"},"nodeType":"YulFunctionCall","src":"11423:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11416:3:21"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11209:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11217:3:21","type":""}],"src":"11075:366:21"},{"body":{"nodeType":"YulBlock","src":"11618:248:21","statements":[{"nodeType":"YulAssignment","src":"11628:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11640:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11651:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11636:3:21"},"nodeType":"YulFunctionCall","src":"11636:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11628:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11675:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11686:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11671:3:21"},"nodeType":"YulFunctionCall","src":"11671:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11694:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"11700:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11690:3:21"},"nodeType":"YulFunctionCall","src":"11690:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11664:6:21"},"nodeType":"YulFunctionCall","src":"11664:47:21"},"nodeType":"YulExpressionStatement","src":"11664:47:21"},{"nodeType":"YulAssignment","src":"11720:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11728:124:21"},"nodeType":"YulFunctionCall","src":"11728:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11720:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11598:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11613:4:21","type":""}],"src":"11447:419:21"},{"body":{"nodeType":"YulBlock","src":"11978:75:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12000:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"12008:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11996:3:21"},"nodeType":"YulFunctionCall","src":"11996:14:21"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"12012:33:21","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11989:6:21"},"nodeType":"YulFunctionCall","src":"11989:57:21"},"nodeType":"YulExpressionStatement","src":"11989:57:21"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11970:6:21","type":""}],"src":"11872:181:21"},{"body":{"nodeType":"YulBlock","src":"12205:220:21","statements":[{"nodeType":"YulAssignment","src":"12215:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12281:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12286:2:21","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12222:58:21"},"nodeType":"YulFunctionCall","src":"12222:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12215:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12387:3:21"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"12298:88:21"},"nodeType":"YulFunctionCall","src":"12298:93:21"},"nodeType":"YulExpressionStatement","src":"12298:93:21"},{"nodeType":"YulAssignment","src":"12400:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12411:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12416:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12407:3:21"},"nodeType":"YulFunctionCall","src":"12407:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12400:3:21"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12193:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12201:3:21","type":""}],"src":"12059:366:21"},{"body":{"nodeType":"YulBlock","src":"12602:248:21","statements":[{"nodeType":"YulAssignment","src":"12612:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12624:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12635:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12620:3:21"},"nodeType":"YulFunctionCall","src":"12620:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12612:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12659:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12670:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12655:3:21"},"nodeType":"YulFunctionCall","src":"12655:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12678:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12684:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12674:3:21"},"nodeType":"YulFunctionCall","src":"12674:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12648:6:21"},"nodeType":"YulFunctionCall","src":"12648:47:21"},"nodeType":"YulExpressionStatement","src":"12648:47:21"},{"nodeType":"YulAssignment","src":"12704:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12838:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12712:124:21"},"nodeType":"YulFunctionCall","src":"12712:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12704:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12582:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12597:4:21","type":""}],"src":"12431:419:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient contract balance\")\n\n    }\n\n    function abi_encode_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Receiver's address cannot be zer\")\n\n        mstore(add(memPtr, 32), \"o\")\n\n    }\n\n    function abi_encode_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4641060dfc4b52429c4286c15953926c318c19fe2644d02d2d1d316c49744bc5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb(memPtr) {\n\n        mstore(add(memPtr, 0), \"Failed to send Ether\")\n\n    }\n\n    function abi_encode_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13(memPtr) {\n\n        mstore(add(memPtr, 0), \"Contract is not authorized for a\")\n\n        mstore(add(memPtr, 32), \" refund\")\n\n    }\n\n    function abi_encode_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0800e3a69af5117f2a9f4093fb7d0989f2995fe2c8302b6894bf3cb2e5c7ae13_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100c55760003560e01c8063b6a5d7de1161007f578063f0b37c0411610059578063f0b37c0414610236578063f2fde38b1461025f578063fa09e63014610288578063fe9fbb80146102b1576100cc565b8063b6a5d7de146101b9578063d2fa635e146101e2578063e25b53451461020b576100cc565b8062f714ce146100d15780633de39c11146100fa5780633e21740414610125578063715018a61461014e5780637ad226dc146101655780638da5cb5b1461018e576100cc565b366100cc57005b600080fd5b3480156100dd57600080fd5b506100f860048036038101906100f39190610b7c565b6102ee565b005b34801561010657600080fd5b5061010f610492565b60405161011c9190610bcb565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610be6565b610498565b005b34801561015a57600080fd5b506101636104e1565b005b34801561017157600080fd5b5061018c60048036038101906101879190610b7c565b6104f5565b005b34801561019a57600080fd5b506101a36106e6565b6040516101b09190610c22565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190610c3d565b61070f565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610be6565b6107a9565b005b34801561021757600080fd5b506102206107f2565b60405161022d9190610bcb565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190610c3d565b6107f8565b005b34801561026b57600080fd5b5061028660048036038101906102819190610c3d565b610889565b005b34801561029457600080fd5b506102af60048036038101906102aa9190610c3d565b61090c565b005b3480156102bd57600080fd5b506102d860048036038101906102d39190610c3d565b610921565b6040516102e59190610c85565b60405180910390f35b6102f6610941565b81471015610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f90610d8f565b60405180910390fd5b7f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea82826040516103d9929190610daf565b60405180910390a160008173ffffffffffffffffffffffffffffffffffffffff168360405161040790610e09565b60006040518083038185875af1925050503d8060008114610444576040519150601f19603f3d011682016040523d82523d6000602084013e610449565b606091505b505090508061048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610e6a565b60405180910390fd5b505050565b60045481565b6104a0610941565b806003819055507fa86b6e9a406df021f05f513a796a1d5bea0bd3e18fe1d3f6082a3cccfc898d14816040516104d69190610bcb565b60405180910390a150565b6104e9610941565b6104f360006109bf565b565b6104fd610a83565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610efc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ef90610d8f565b60405180910390fd5b60006004543a1061060b5760045461060d565b3a5b9050600081600354856106209190610f4b565b61062a9190610f7f565b905060008373ffffffffffffffffffffffffffffffffffffffff168260405161065290610e09565b60006040518083038185875af1925050503d806000811461068f576040519150601f19603f3d011682016040523d82523d6000602084013e610694565b606091505b50509050806106d7577fd955712c3ae4c3c40451db84ea0c4531c61cc0ea75c13fe9168ae0e07d71e05082856040516106ce929190610daf565b60405180910390a15b5050506106e2610ad2565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610717610941565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2c74592fddad593c2c4403101ce9b30930711ab87571268ddd1e1989ee1d79178160405161079e9190610c22565b60405180910390a150565b6107b1610941565b806004819055507fa7a07f821dfdfca8e4baa9ccc4bbe7b782baac5946918bd19f1c9c761db41410816040516107e79190610bcb565b60405180910390a150565b60035481565b610800610941565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557fe195aa139c7c69ba98f719c94aecd784e12fabc0789ef81335150078bc0873178160405161087e9190610c22565b60405180910390a150565b610891610941565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611033565b60405180910390fd5b610909816109bf565b50565b610914610941565b61091e47826102ee565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b610949610adb565b73ffffffffffffffffffffffffffffffffffffffff166109676106e6565b73ffffffffffffffffffffffffffffffffffffffff16146109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b49061109f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260015403610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf9061110b565b60405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600080fd5b6000819050919050565b610afb81610ae8565b8114610b0657600080fd5b50565b600081359050610b1881610af2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4982610b1e565b9050919050565b610b5981610b3e565b8114610b6457600080fd5b50565b600081359050610b7681610b50565b92915050565b60008060408385031215610b9357610b92610ae3565b5b6000610ba185828601610b09565b9250506020610bb285828601610b67565b9150509250929050565b610bc581610ae8565b82525050565b6000602082019050610be06000830184610bbc565b92915050565b600060208284031215610bfc57610bfb610ae3565b5b6000610c0a84828501610b09565b91505092915050565b610c1c81610b3e565b82525050565b6000602082019050610c376000830184610c13565b92915050565b600060208284031215610c5357610c52610ae3565b5b6000610c6184828501610b67565b91505092915050565b60008115159050919050565b610c7f81610c6a565b82525050565b6000602082019050610c9a6000830184610c76565b92915050565b600082825260208201905092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b6000610ce7601d83610ca0565b9150610cf282610cb1565b602082019050919050565b60006020820190508181036000830152610d1681610cda565b9050919050565b7f5265636569766572277320616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610d79602183610ca0565b9150610d8482610d1d565b604082019050919050565b60006020820190508181036000830152610da881610d6c565b9050919050565b6000604082019050610dc46000830185610bbc565b610dd16020830184610c13565b9392505050565b600081905092915050565b50565b6000610df3600083610dd8565b9150610dfe82610de3565b600082019050919050565b6000610e1482610de6565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e54601483610ca0565b9150610e5f82610e1e565b602082019050919050565b60006020820190508181036000830152610e8381610e47565b9050919050565b7f436f6e7472616374206973206e6f7420617574686f72697a656420666f72206160008201527f20726566756e6400000000000000000000000000000000000000000000000000602082015250565b6000610ee6602783610ca0565b9150610ef182610e8a565b604082019050919050565b60006020820190508181036000830152610f1581610ed9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5682610ae8565b9150610f6183610ae8565b9250828201905080821115610f7957610f78610f1c565b5b92915050565b6000610f8a82610ae8565b9150610f9583610ae8565b9250828202610fa381610ae8565b91508282048414831517610fba57610fb9610f1c565b5b5092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061101d602683610ca0565b915061102882610fc1565b604082019050919050565b6000602082019050818103600083015261104c81611010565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611089602083610ca0565b915061109482611053565b602082019050919050565b600060208201905081810360008301526110b88161107c565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110f5601f83610ca0565b9150611100826110bf565b602082019050919050565b60006020820190508181036000830152611124816110e8565b905091905056fea26469706673582212202c075939adfee7c3a9f4b39a080b848b02dcf6ed6706dcd6ac65d9e21467ebe464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB6A5D7DE GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF0B37C04 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF0B37C04 EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xFA09E630 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xFE9FBB80 EQ PUSH2 0x2B1 JUMPI PUSH2 0xCC JUMP JUMPDEST DUP1 PUSH4 0xB6A5D7DE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0xD2FA635E EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xE25B5345 EQ PUSH2 0x20B JUMPI PUSH2 0xCC JUMP JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x3DE39C11 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x3E217404 EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x7AD226DC EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x18E JUMPI PUSH2 0xCC JUMP JUMPDEST CALLDATASIZE PUSH2 0xCC JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x2EE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11C SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x4E1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A3 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B0 SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x204 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x7A9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x220 PUSH2 0x7F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x7F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x281 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0xC85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F6 PUSH2 0x941 JUMP JUMPDEST DUP2 SELFBALANCE LT ISZERO PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x330 SWAP1 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x3A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39F SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6141B54B56B8A52A8C6F5CD2A857F6117B18FFBF4D46BD3106F300A839CBF5EA DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x3D9 SWAP3 SWAP2 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x407 SWAP1 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x444 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x449 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x48D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x484 SWAP1 PUSH2 0xE6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4A0 PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xA86B6E9A406DF021F05F513A796A1D5BEA0BD3E18FE1D3F6082A3CCCFC898D14 DUP2 PUSH1 0x40 MLOAD PUSH2 0x4D6 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x4E9 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x4F3 PUSH1 0x0 PUSH2 0x9BF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4FD PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x589 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x580 SWAP1 PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GASPRICE LT PUSH2 0x60B JUMPI PUSH1 0x4 SLOAD PUSH2 0x60D JUMP JUMPDEST GASPRICE JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 SLOAD DUP6 PUSH2 0x620 SWAP2 SWAP1 PUSH2 0xF4B JUMP JUMPDEST PUSH2 0x62A SWAP2 SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x652 SWAP1 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x694 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6D7 JUMPI PUSH32 0xD955712C3AE4C3C40451DB84EA0C4531C61CC0EA75C13FE9168AE0E07D71E050 DUP3 DUP6 PUSH1 0x40 MLOAD PUSH2 0x6CE SWAP3 SWAP2 SWAP1 PUSH2 0xDAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP PUSH2 0x6E2 PUSH2 0xAD2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x717 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x2C74592FDDAD593C2C4403101CE9B30930711AB87571268DDD1E1989EE1D7917 DUP2 PUSH1 0x40 MLOAD PUSH2 0x79E SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x7B1 PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xA7A07F821DFDFCA8E4BAA9CCC4BBE7B782BAAC5946918BD19F1C9C761DB41410 DUP2 PUSH1 0x40 MLOAD PUSH2 0x7E7 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x800 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH32 0xE195AA139C7C69BA98F719C94AECD784E12FABC0789EF81335150078BC087317 DUP2 PUSH1 0x40 MLOAD PUSH2 0x87E SWAP2 SWAP1 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x891 PUSH2 0x941 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x909 DUP2 PUSH2 0x9BF JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x914 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x91E SELFBALANCE DUP3 PUSH2 0x2EE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x949 PUSH2 0xADB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x967 PUSH2 0x6E6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9B4 SWAP1 PUSH2 0x109F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xAC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABF SWAP1 PUSH2 0x110B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAFB DUP2 PUSH2 0xAE8 JUMP JUMPDEST DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB18 DUP2 PUSH2 0xAF2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB49 DUP3 PUSH2 0xB1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB59 DUP2 PUSH2 0xB3E JUMP JUMPDEST DUP2 EQ PUSH2 0xB64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB76 DUP2 PUSH2 0xB50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB93 JUMPI PUSH2 0xB92 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBA1 DUP6 DUP3 DUP7 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBB2 DUP6 DUP3 DUP7 ADD PUSH2 0xB67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC5 DUP2 PUSH2 0xAE8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBE0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBBC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFC JUMPI PUSH2 0xBFB PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0A DUP5 DUP3 DUP6 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC1C DUP2 PUSH2 0xB3E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC37 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC53 JUMPI PUSH2 0xC52 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC61 DUP5 DUP3 DUP6 ADD PUSH2 0xB67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7F DUP2 PUSH2 0xC6A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC9A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC76 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE7 PUSH1 0x1D DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xCF2 DUP3 PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD16 DUP2 PUSH2 0xCDA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265636569766572277320616464726573732063616E6E6F74206265207A6572 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD79 PUSH1 0x21 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xD84 DUP3 PUSH2 0xD1D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDA8 DUP2 PUSH2 0xD6C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xDC4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xDD1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC13 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF3 PUSH1 0x0 DUP4 PUSH2 0xDD8 JUMP JUMPDEST SWAP2 POP PUSH2 0xDFE DUP3 PUSH2 0xDE3 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE14 DUP3 PUSH2 0xDE6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2073656E64204574686572000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE54 PUSH1 0x14 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xE5F DUP3 PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE83 DUP2 PUSH2 0xE47 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F6E7472616374206973206E6F7420617574686F72697A656420666F722061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726566756E6400000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE6 PUSH1 0x27 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF1 DUP3 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF15 DUP2 PUSH2 0xED9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP3 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP4 PUSH2 0xAE8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF78 PUSH2 0xF1C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8A DUP3 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP PUSH2 0xF95 DUP4 PUSH2 0xAE8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xFA3 DUP2 PUSH2 0xAE8 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xFBA JUMPI PUSH2 0xFB9 PUSH2 0xF1C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x101D PUSH1 0x26 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1028 DUP3 PUSH2 0xFC1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x104C DUP2 PUSH2 0x1010 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1089 PUSH1 0x20 DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1094 DUP3 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10B8 DUP2 PUSH2 0x107C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F5 PUSH1 0x1F DUP4 PUSH2 0xCA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x1100 DUP3 PUSH2 0x10BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1124 DUP2 PUSH2 0x10E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C SMOD MSIZE CODECOPY 0xAD INVALID 0xE7 0xC3 0xA9 DELEGATECALL 0xB3 SWAP11 ADDMOD SIGNEXTEND DUP5 DUP12 MUL 0xDC 0xF6 0xED PUSH8 0x6DCD6AC65D9E214 PUSH8 0xEBE464736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"2045:5295:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6742:596;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2598:26;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5702:144;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1824:101:12;;;;;;;;;;;;;:::i;:::-;;3967:844:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1201:85:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5000:149:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6031:156;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2434:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5383:153;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2074:198:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6377:116:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2260:44;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6742:596;1094:13:12;:11;:13::i;:::-;6867:6:4::1;6842:21;:31;;6821:107;;;;;;;;;;;;:::i;:::-;;;;;;;;;6966:1;6946:22;;:8;:22;;::::0;6938:68:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;7022:32;7037:6;7045:8;7022:32;;;;;;;:::i;:::-;;;;;;;;7186:9;7201:8;:13;;7222:6;7201:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7185:48;;;7302:4;7294:37;;;;;;;;;;;;:::i;:::-;;;;;;;;;6811:527;6742:596:::0;;:::o;2598:26::-;;;;:::o;5702:144::-;1094:13:12;:11;:13::i;:::-;5785:10:4::1;5773:9;:22;;;;5811:28;5828:10;5811:28;;;;;;:::i;:::-;;;;;;;;5702:144:::0;:::o;1824:101:12:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;3967:844:4:-;2261:21:13;:19;:21::i;:::-;4072:12:4::1;:24;4085:10;4072:24;;;;;;;;;;;;;;;;;;;;;;;;;4051:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;4199:1;4179:22;;:8;:22;;::::0;4171:68:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;4250:16;4283:11;;4269;:25;:77;;4335:11;;4269:77;;;4309:11;4269:77;4250:96;;4357:20;4405:8;4392:9;;4381:8;:20;;;;:::i;:::-;4380:33;;;;:::i;:::-;4357:56;;4549:9;4564:8;:13;;4585:12;4564:38;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4548:54;;;4668:4;4663:142;;4752:42;4771:12;4785:8;4752:42;;;;;;;:::i;:::-;;;;;;;;4663:142;4041:770;;;2303:20:13::0;:18;:20::i;:::-;3967:844:4;;:::o;1201:85:12:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;5000:149:4:-;1094:13:12;:11;:13::i;:::-;5093:4:4::1;5067:12;:23;5080:9;5067:23;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;5113:29;5132:9;5113:29;;;;;;:::i;:::-;;;;;;;;5000:149:::0;:::o;6031:156::-;1094:13:12;:11;:13::i;:::-;6120:12:4::1;6106:11;:26;;;;6148:32;6167:12;6148:32;;;;;;:::i;:::-;;;;;;;;6031:156:::0;:::o;2434:24::-;;;;:::o;5383:153::-;1094:13:12;:11;:13::i;:::-;5459:12:4::1;:23;5472:9;5459:23;;;;;;;;;;;;;;;;5452:30;;;;;;;;;;;5498:31;5519:9;5498:31;;;;;;:::i;:::-;;;;;;;;5383:153:::0;:::o;2074:198:12:-;1094:13;:11;:13::i;:::-;2182:1:::1;2162:22;;:8;:22;;::::0;2154:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;6377:116:4:-;1094:13:12;:11;:13::i;:::-;6445:41:4::1;6454:21;6477:8;6445;:41::i;:::-;6377:116:::0;:::o;2260:44::-;;;;;;;;;;;;;;;;;;;;;;:::o;1359:130:12:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2426:187::-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;2336:287:13:-;1759:1;2468:7;;:19;2460:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1759:1;2598:7;:18;;;;2336:287::o;2629:209::-;1716:1;2809:7;:22;;;;2629:209::o;655:96:14:-;708:7;734:10;727:17;;655:96;:::o;88:117:21:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:329::-;2088:6;2137:2;2125:9;2116:7;2112:23;2108:32;2105:119;;;2143:79;;:::i;:::-;2105:119;2263:1;2288:53;2333:7;2324:6;2313:9;2309:22;2288:53;:::i;:::-;2278:63;;2234:117;2029:329;;;;:::o;2364:118::-;2451:24;2469:5;2451:24;:::i;:::-;2446:3;2439:37;2364:118;;:::o;2488:222::-;2581:4;2619:2;2608:9;2604:18;2596:26;;2632:71;2700:1;2689:9;2685:17;2676:6;2632:71;:::i;:::-;2488:222;;;;:::o;2716:329::-;2775:6;2824:2;2812:9;2803:7;2799:23;2795:32;2792:119;;;2830:79;;:::i;:::-;2792:119;2950:1;2975:53;3020:7;3011:6;3000:9;2996:22;2975:53;:::i;:::-;2965:63;;2921:117;2716:329;;;;:::o;3051:90::-;3085:7;3128:5;3121:13;3114:21;3103:32;;3051:90;;;:::o;3147:109::-;3228:21;3243:5;3228:21;:::i;:::-;3223:3;3216:34;3147:109;;:::o;3262:210::-;3349:4;3387:2;3376:9;3372:18;3364:26;;3400:65;3462:1;3451:9;3447:17;3438:6;3400:65;:::i;:::-;3262:210;;;;:::o;3478:169::-;3562:11;3596:6;3591:3;3584:19;3636:4;3631:3;3627:14;3612:29;;3478:169;;;;:::o;3653:179::-;3793:31;3789:1;3781:6;3777:14;3770:55;3653:179;:::o;3838:366::-;3980:3;4001:67;4065:2;4060:3;4001:67;:::i;:::-;3994:74;;4077:93;4166:3;4077:93;:::i;:::-;4195:2;4190:3;4186:12;4179:19;;3838:366;;;:::o;4210:419::-;4376:4;4414:2;4403:9;4399:18;4391:26;;4463:9;4457:4;4453:20;4449:1;4438:9;4434:17;4427:47;4491:131;4617:4;4491:131;:::i;:::-;4483:139;;4210:419;;;:::o;4635:220::-;4775:34;4771:1;4763:6;4759:14;4752:58;4844:3;4839:2;4831:6;4827:15;4820:28;4635:220;:::o;4861:366::-;5003:3;5024:67;5088:2;5083:3;5024:67;:::i;:::-;5017:74;;5100:93;5189:3;5100:93;:::i;:::-;5218:2;5213:3;5209:12;5202:19;;4861:366;;;:::o;5233:419::-;5399:4;5437:2;5426:9;5422:18;5414:26;;5486:9;5480:4;5476:20;5472:1;5461:9;5457:17;5450:47;5514:131;5640:4;5514:131;:::i;:::-;5506:139;;5233:419;;;:::o;5658:332::-;5779:4;5817:2;5806:9;5802:18;5794:26;;5830:71;5898:1;5887:9;5883:17;5874:6;5830:71;:::i;:::-;5911:72;5979:2;5968:9;5964:18;5955:6;5911:72;:::i;:::-;5658:332;;;;;:::o;5996:147::-;6097:11;6134:3;6119:18;;5996:147;;;;:::o;6149:114::-;;:::o;6269:398::-;6428:3;6449:83;6530:1;6525:3;6449:83;:::i;:::-;6442:90;;6541:93;6630:3;6541:93;:::i;:::-;6659:1;6654:3;6650:11;6643:18;;6269:398;;;:::o;6673:379::-;6857:3;6879:147;7022:3;6879:147;:::i;:::-;6872:154;;7043:3;7036:10;;6673:379;;;:::o;7058:170::-;7198:22;7194:1;7186:6;7182:14;7175:46;7058:170;:::o;7234:366::-;7376:3;7397:67;7461:2;7456:3;7397:67;:::i;:::-;7390:74;;7473:93;7562:3;7473:93;:::i;:::-;7591:2;7586:3;7582:12;7575:19;;7234:366;;;:::o;7606:419::-;7772:4;7810:2;7799:9;7795:18;7787:26;;7859:9;7853:4;7849:20;7845:1;7834:9;7830:17;7823:47;7887:131;8013:4;7887:131;:::i;:::-;7879:139;;7606:419;;;:::o;8031:226::-;8171:34;8167:1;8159:6;8155:14;8148:58;8240:9;8235:2;8227:6;8223:15;8216:34;8031:226;:::o;8263:366::-;8405:3;8426:67;8490:2;8485:3;8426:67;:::i;:::-;8419:74;;8502:93;8591:3;8502:93;:::i;:::-;8620:2;8615:3;8611:12;8604:19;;8263:366;;;:::o;8635:419::-;8801:4;8839:2;8828:9;8824:18;8816:26;;8888:9;8882:4;8878:20;8874:1;8863:9;8859:17;8852:47;8916:131;9042:4;8916:131;:::i;:::-;8908:139;;8635:419;;;:::o;9060:180::-;9108:77;9105:1;9098:88;9205:4;9202:1;9195:15;9229:4;9226:1;9219:15;9246:191;9286:3;9305:20;9323:1;9305:20;:::i;:::-;9300:25;;9339:20;9357:1;9339:20;:::i;:::-;9334:25;;9382:1;9379;9375:9;9368:16;;9403:3;9400:1;9397:10;9394:36;;;9410:18;;:::i;:::-;9394:36;9246:191;;;;:::o;9443:410::-;9483:7;9506:20;9524:1;9506:20;:::i;:::-;9501:25;;9540:20;9558:1;9540:20;:::i;:::-;9535:25;;9595:1;9592;9588:9;9617:30;9635:11;9617:30;:::i;:::-;9606:41;;9796:1;9787:7;9783:15;9780:1;9777:22;9757:1;9750:9;9730:83;9707:139;;9826:18;;:::i;:::-;9707:139;9491:362;9443:410;;;;:::o;9859:225::-;9999:34;9995:1;9987:6;9983:14;9976:58;10068:8;10063:2;10055:6;10051:15;10044:33;9859:225;:::o;10090:366::-;10232:3;10253:67;10317:2;10312:3;10253:67;:::i;:::-;10246:74;;10329:93;10418:3;10329:93;:::i;:::-;10447:2;10442:3;10438:12;10431:19;;10090:366;;;:::o;10462:419::-;10628:4;10666:2;10655:9;10651:18;10643:26;;10715:9;10709:4;10705:20;10701:1;10690:9;10686:17;10679:47;10743:131;10869:4;10743:131;:::i;:::-;10735:139;;10462:419;;;:::o;10887:182::-;11027:34;11023:1;11015:6;11011:14;11004:58;10887:182;:::o;11075:366::-;11217:3;11238:67;11302:2;11297:3;11238:67;:::i;:::-;11231:74;;11314:93;11403:3;11314:93;:::i;:::-;11432:2;11427:3;11423:12;11416:19;;11075:366;;;:::o;11447:419::-;11613:4;11651:2;11640:9;11636:18;11628:26;;11700:9;11694:4;11690:20;11686:1;11675:9;11671:17;11664:47;11728:131;11854:4;11728:131;:::i;:::-;11720:139;;11447:419;;;:::o;11872:181::-;12012:33;12008:1;12000:6;11996:14;11989:57;11872:181;:::o;12059:366::-;12201:3;12222:67;12286:2;12281:3;12222:67;:::i;:::-;12215:74;;12298:93;12387:3;12298:93;:::i;:::-;12416:2;12411:3;12407:12;12400:19;;12059:366;;;:::o;12431:419::-;12597:4;12635:2;12624:9;12620:18;12612:26;;12684:9;12678:4;12674:20;12670:1;12659:9;12655:17;12648:47;12712:131;12838:4;12712:131;:::i;:::-;12704:139;;12431:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"889800","executionCost":"infinite","totalCost":"infinite"},"external":{"authorize(address)":"infinite","isAuthorized(address)":"2933","maxGasPrice()":"2452","owner()":"2633","refund(uint256,address)":"infinite","renounceOwnership()":"30465","setMaxGasPrice(uint256)":"infinite","setStaticGas(uint256)":"infinite","staticGas()":"2496","transferOwnership(address)":"30788","unauthorize(address)":"infinite","withdraw(uint256,address)":"infinite","withdrawAll(address)":"infinite"}},"methodIdentifiers":{"authorize(address)":"b6a5d7de","isAuthorized(address)":"fe9fbb80","maxGasPrice()":"3de39c11","owner()":"8da5cb5b","refund(uint256,address)":"7ad226dc","renounceOwnership()":"715018a6","setMaxGasPrice(uint256)":"d2fa635e","setStaticGas(uint256)":"3e217404","staticGas()":"e25b5345","transferOwnership(address)":"f2fde38b","unauthorize(address)":"f0b37c04","withdraw(uint256,address)":"00f714ce","withdrawAll(address)":"fa09e630"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_staticGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyContract\",\"type\":\"address\"}],\"name\":\"AuthorizedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"MaxGasPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SendingEtherFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStaticGas\",\"type\":\"uint256\"}],\"name\":\"StaticGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyContract\",\"type\":\"address\"}],\"name\":\"UnauthorizedContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_staticGas\",\"type\":\"uint256\"}],\"name\":\"setStaticGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorize(address)\":{\"params\":{\"_contract\":\"Authorized contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(uint256,address)\":{\"details\":\"Ignoring the result of sending ETH to a receiver is made on purpose.      For EOA receiving ETH should always work. If a receiver is a smart      contract, then we do not want to fail a transaction, because in some      cases the refund is done at the very end of multiple calls where all      the previous calls were already paid off. It is a receiver's smart      contract resposibility to make sure it can receive ETH.Only authorized contracts are allowed calling this function.\",\"params\":{\"gasSpent\":\"Gas spent on a transaction that needs to be reimbursed.\",\"receiver\":\"Address where the reimbursment is sent.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMaxGasPrice(uint256)\":{\"params\":{\"_maxGasPrice\":\"Max gas price used to reimburse tx submitters.\"}},\"setStaticGas(uint256)\":{\"params\":{\"_staticGas\":\"Static gas cost.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorize(address)\":{\"params\":{\"_contract\":\"Authorized contract.\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw from the pool.\",\"receiver\":\"An address where ETH is sent.\"}},\"withdrawAll(address)\":{\"params\":{\"receiver\":\"An address where ETH is sent.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorize(address)\":{\"notice\":\"Authorize a contract that can interact with this reimbursment pool.         Can be authorized by the owner only.\"},\"isAuthorized(address)\":{\"notice\":\"Authorized contracts that can interact with the reimbursment pool.         Authorization can be granted and removed by the owner.\"},\"maxGasPrice()\":{\"notice\":\"Max gas price used to reimburse a transaction submitter. Protects         against malicious operator-miners.\"},\"refund(uint256,address)\":{\"notice\":\"Refunds ETH to a spender for executing specific transactions.\"},\"setMaxGasPrice(uint256)\":{\"notice\":\"Setting a max gas price for transactions. Can be set by the         owner only.\"},\"setStaticGas(uint256)\":{\"notice\":\"Setting a static gas cost for executing a transaction. Can be set         by the owner only.\"},\"staticGas()\":{\"notice\":\"Static gas includes:         - cost of the refund function         - base transaction cost\"},\"unauthorize(address)\":{\"notice\":\"Unauthorize a contract that was previously authorized to interact         with this reimbursment pool. Can be unauthorized by the         owner only.\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws ETH amount from this pool which are sent to a given         address. Can be set by the owner only.\"},\"withdrawAll(address)\":{\"notice\":\"Withdraws all ETH from this pool which are sent to a given         address. Can be set by the owner only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@keep-network/random-beacon/contracts/ReimbursementPool.sol\":\"ReimbursementPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/random-beacon/contracts/ReimbursementPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ReimbursementPool is Ownable, ReentrancyGuard {\\n    /// @notice Authorized contracts that can interact with the reimbursment pool.\\n    ///         Authorization can be granted and removed by the owner.\\n    mapping(address => bool) public isAuthorized;\\n\\n    /// @notice Static gas includes:\\n    ///         - cost of the refund function\\n    ///         - base transaction cost\\n    uint256 public staticGas;\\n\\n    /// @notice Max gas price used to reimburse a transaction submitter. Protects\\n    ///         against malicious operator-miners.\\n    uint256 public maxGasPrice;\\n\\n    event StaticGasUpdated(uint256 newStaticGas);\\n\\n    event MaxGasPriceUpdated(uint256 newMaxGasPrice);\\n\\n    event SendingEtherFailed(uint256 refundAmount, address receiver);\\n\\n    event AuthorizedContract(address thirdPartyContract);\\n\\n    event UnauthorizedContract(address thirdPartyContract);\\n\\n    event FundsWithdrawn(uint256 withdrawnAmount, address receiver);\\n\\n    constructor(uint256 _staticGas, uint256 _maxGasPrice) {\\n        staticGas = _staticGas;\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    /// @notice Receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Refunds ETH to a spender for executing specific transactions.\\n    /// @dev Ignoring the result of sending ETH to a receiver is made on purpose.\\n    ///      For EOA receiving ETH should always work. If a receiver is a smart\\n    ///      contract, then we do not want to fail a transaction, because in some\\n    ///      cases the refund is done at the very end of multiple calls where all\\n    ///      the previous calls were already paid off. It is a receiver's smart\\n    ///      contract resposibility to make sure it can receive ETH.\\n    /// @dev Only authorized contracts are allowed calling this function.\\n    /// @param gasSpent Gas spent on a transaction that needs to be reimbursed.\\n    /// @param receiver Address where the reimbursment is sent.\\n    function refund(uint256 gasSpent, address receiver) external nonReentrant {\\n        require(\\n            isAuthorized[msg.sender],\\n            \\\"Contract is not authorized for a refund\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        uint256 gasPrice = tx.gasprice < maxGasPrice\\n            ? tx.gasprice\\n            : maxGasPrice;\\n\\n        uint256 refundAmount = (gasSpent + staticGas) * gasPrice;\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,unchecked-lowlevel\\n        (bool sent, ) = receiver.call{value: refundAmount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        if (!sent) {\\n            // slither-disable-next-line reentrancy-events\\n            emit SendingEtherFailed(refundAmount, receiver);\\n        }\\n    }\\n\\n    /// @notice Authorize a contract that can interact with this reimbursment pool.\\n    ///         Can be authorized by the owner only.\\n    /// @param _contract Authorized contract.\\n    function authorize(address _contract) external onlyOwner {\\n        isAuthorized[_contract] = true;\\n\\n        emit AuthorizedContract(_contract);\\n    }\\n\\n    /// @notice Unauthorize a contract that was previously authorized to interact\\n    ///         with this reimbursment pool. Can be unauthorized by the\\n    ///         owner only.\\n    /// @param _contract Authorized contract.\\n    function unauthorize(address _contract) external onlyOwner {\\n        delete isAuthorized[_contract];\\n\\n        emit UnauthorizedContract(_contract);\\n    }\\n\\n    /// @notice Setting a static gas cost for executing a transaction. Can be set\\n    ///         by the owner only.\\n    /// @param _staticGas Static gas cost.\\n    function setStaticGas(uint256 _staticGas) external onlyOwner {\\n        staticGas = _staticGas;\\n\\n        emit StaticGasUpdated(_staticGas);\\n    }\\n\\n    /// @notice Setting a max gas price for transactions. Can be set by the\\n    ///         owner only.\\n    /// @param _maxGasPrice Max gas price used to reimburse tx submitters.\\n    function setMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\\n        maxGasPrice = _maxGasPrice;\\n\\n        emit MaxGasPriceUpdated(_maxGasPrice);\\n    }\\n\\n    /// @notice Withdraws all ETH from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param receiver An address where ETH is sent.\\n    function withdrawAll(address receiver) external onlyOwner {\\n        withdraw(address(this).balance, receiver);\\n    }\\n\\n    /// @notice Withdraws ETH amount from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param amount Amount to withdraw from the pool.\\n    /// @param receiver An address where ETH is sent.\\n    function withdraw(uint256 amount, address receiver) public onlyOwner {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        emit FundsWithdrawn(amount, receiver);\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,arbitrary-send\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd6c24368cc4c6349b8b614e878ca961cad8254b8e8db1cc0abe452a70022ce50\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4180,"contract":"@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":4296,"contract":"@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":2736,"contract":"@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool","label":"isAuthorized","offset":0,"slot":"2","type":"t_mapping(t_address,t_bool)"},{"astId":2739,"contract":"@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool","label":"staticGas","offset":0,"slot":"3","type":"t_uint256"},{"astId":2742,"contract":"@keep-network/random-beacon/contracts/ReimbursementPool.sol:ReimbursementPool","label":"maxGasPrice","offset":0,"slot":"4","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"authorize(address)":{"notice":"Authorize a contract that can interact with this reimbursment pool.         Can be authorized by the owner only."},"isAuthorized(address)":{"notice":"Authorized contracts that can interact with the reimbursment pool.         Authorization can be granted and removed by the owner."},"maxGasPrice()":{"notice":"Max gas price used to reimburse a transaction submitter. Protects         against malicious operator-miners."},"refund(uint256,address)":{"notice":"Refunds ETH to a spender for executing specific transactions."},"setMaxGasPrice(uint256)":{"notice":"Setting a max gas price for transactions. Can be set by the         owner only."},"setStaticGas(uint256)":{"notice":"Setting a static gas cost for executing a transaction. Can be set         by the owner only."},"staticGas()":{"notice":"Static gas includes:         - cost of the refund function         - base transaction cost"},"unauthorize(address)":{"notice":"Unauthorize a contract that was previously authorized to interact         with this reimbursment pool. Can be unauthorized by the         owner only."},"withdraw(uint256,address)":{"notice":"Withdraws ETH amount from this pool which are sent to a given         address. Can be set by the owner only."},"withdrawAll(address)":{"notice":"Withdraws all ETH from this pool which are sent to a given         address. Can be set by the owner only."}},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3139,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3142,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":4171,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3011,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":3131,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3139,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3142,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203957eb26c535914c8d9aad66f93fca63870c4c13a57b7bde87e911ee85fdd5ed64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY JUMPI 0xEB 0x26 0xC5 CALLDATALOAD SWAP2 0x4C DUP14 SWAP11 0xAD PUSH7 0xF93FCA63870C4C SGT 0xA5 PUSH28 0x7BDE87E911EE85FDD5ED64736F6C6343000811003300000000000000 ","sourceMap":"734:6366:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203957eb26c535914c8d9aad66f93fca63870c4c13a57b7bde87e911ee85fdd5ed64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY JUMPI 0xEB 0x26 0xC5 CALLDATALOAD SWAP2 0x4C DUP14 SWAP11 0xAD PUSH7 0xF93FCA63870C4C SGT 0xA5 PUSH28 0x7BDE87E911EE85FDD5ED64736F6C6343000811003300000000000000 ","sourceMap":"734:6366:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e5b9734c6029c9446c52708d2fc42f05d9b4a2486efaf20923c5f05a6f7a18d64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E JUMPDEST SWAP8 CALLVALUE 0xC6 MUL SWAP13 SWAP5 CHAINID 0xC5 0x27 ADDMOD 0xD2 0xFC TIMESTAMP CREATE 0x5D SWAP12 0x4A 0x24 DUP7 0xEF 0xAF KECCAK256 SWAP3 EXTCODECOPY 0x5F SDIV 0xA6 0xF7 LOG1 DUP14 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:9180:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e5b9734c6029c9446c52708d2fc42f05d9b4a2486efaf20923c5f05a6f7a18d64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E JUMPDEST SWAP8 CALLVALUE 0xC6 MUL SWAP13 SWAP5 CHAINID 0xC5 0x27 ADDMOD 0xD2 0xFC TIMESTAMP CREATE 0x5D SWAP12 0x4A 0x24 DUP7 0xEF 0xAF KECCAK256 SWAP3 EXTCODECOPY 0x5F SDIV 0xA6 0xF7 LOG1 DUP14 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"194:9180:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3139,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3142,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":4171,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4180,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4296,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/integrator/AbstractTBTCDepositor.sol":{"AbstractTBTCDepositor":{"abi":[{"inputs":[],"name":"SATOSHI_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"contract IBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tbtcVault","outputs":[{"internalType":"contract ITBTCVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor          constructor() {              // Prevents the contract from being initialized again.              _disableInitializers();          }          function initialize(              address _bridge,              address _tbtcVault          ) external initializer {              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);          }          function startProcess(              IBridgeTypes.BitcoinTxInfo calldata fundingTx,              IBridgeTypes.DepositRevealInfo calldata reveal          ) external {              // Embed necessary context as extra data.              bytes32 extraData = ...;              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(                  fundingTx,                  reveal,                  extraData              );              // Use the depositKey to track the process.          }          function finalizeProcess(uint256 depositKey) external {              // Ensure the function cannot be called for the same deposit              // twice.              (                  uint256 initialDepositAmount,                  uint256 tbtcAmount,                  bytes32 extraData              ) = _finalizeDeposit(depositKey);              // Do something with the minted TBTC using context              // embedded in the extraData.          }      }","details":"Example usage:      ```      // Example upgradeable integrator contract.      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {","kind":"dev","methods":{},"title":"Abstract AbstractTBTCDepositor contract.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SATOSHI_MULTIPLIER()":"c7ba0347","bridge()":"e78cea92","tbtcVault()":"0f36403a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SATOSHI_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcVault\",\"outputs\":[{\"internalType\":\"contract ITBTCVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor          constructor() {              // Prevents the contract from being initialized again.              _disableInitializers();          }          function initialize(              address _bridge,              address _tbtcVault          ) external initializer {              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);          }          function startProcess(              IBridgeTypes.BitcoinTxInfo calldata fundingTx,              IBridgeTypes.DepositRevealInfo calldata reveal          ) external {              // Embed necessary context as extra data.              bytes32 extraData = ...;              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(                  fundingTx,                  reveal,                  extraData              );              // Use the depositKey to track the process.          }          function finalizeProcess(uint256 depositKey) external {              // Ensure the function cannot be called for the same deposit              // twice.              (                  uint256 initialDepositAmount,                  uint256 tbtcAmount,                  bytes32 extraData              ) = _finalizeDeposit(depositKey);              // Do something with the minted TBTC using context              // embedded in the extraData.          }      }\",\"details\":\"Example usage:      ```      // Example upgradeable integrator contract.      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Abstract AbstractTBTCDepositor contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SATOSHI_MULTIPLIER()\":{\"notice\":\"Multiplier to convert satoshi to TBTC token units.\"},\"bridge()\":{\"notice\":\"Bridge contract address.\"},\"tbtcVault()\":{\"notice\":\"TBTCVault contract address.\"}},\"notice\":\"This abstract contract is meant to facilitate integration of protocols         aiming to use tBTC as an underlying Bitcoin bridge.         Such an integrator is supposed to:         - Create a child contract inheriting from this abstract contract         - Call the `__AbstractTBTCDepositor_initialize` initializer function         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their           business logic in order to initialize and finalize deposits.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrator/AbstractTBTCDepositor.sol\":\"AbstractTBTCDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/** @title BitcoinSPV */\\n/** @author Summa (https://summa.one) */\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary BTCUtils {\\n    using BytesLib for bytes;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /* ***** */\\n    /* UTILS */\\n    /* ***** */\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _flag    The first byte of a VarInt\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\\n        return determineVarIntDataLengthAt(_flag, 0);\\n    }\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _b       The byte array containing a VarInt\\n    /// @param _at      The position of the VarInt in the array\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLengthAt(bytes memory _b, uint256 _at) internal pure returns (uint8) {\\n        if (uint8(_b[_at]) == 0xff) {\\n            return 8;  // one-byte flag, 8 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfe) {\\n            return 4;  // one-byte flag, 4 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfd) {\\n            return 2;  // one-byte flag, 2 bytes data\\n        }\\n\\n        return 0;  // flag is data\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string starting with a VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\\n        return parseVarIntAt(_b, 0);\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string containing a VarInt\\n    /// @param _at  The position of the VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarIntAt(bytes memory _b, uint256 _at) internal pure returns (uint256, uint256) {\\n        uint8 _dataLen = determineVarIntDataLengthAt(_b, _at);\\n\\n        if (_dataLen == 0) {\\n            return (0, uint8(_b[_at]));\\n        }\\n        if (_b.length < 1 + _dataLen + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n        uint256 _number;\\n        if (_dataLen == 2) {\\n            _number = reverseUint16(uint16(_b.slice2(1 + _at)));\\n        } else if (_dataLen == 4) {\\n            _number = reverseUint32(uint32(_b.slice4(1 + _at)));\\n        } else if (_dataLen == 8) {\\n            _number = reverseUint64(uint64(_b.slice8(1 + _at)));\\n        }\\n        return (_dataLen, _number);\\n    }\\n\\n    /// @notice          Changes the endianness of a byte array\\n    /// @dev             Returns a new, backwards, bytes\\n    /// @param _b        The bytes to reverse\\n    /// @return          The reversed bytes\\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\\n        bytes memory _newValue = new bytes(_b.length);\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _newValue[_b.length - i - 1] = _b[i];\\n        }\\n\\n        return _newValue;\\n    }\\n\\n    /// @notice          Changes the endianness of a uint256\\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint64\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint64(uint64 _b) internal pure returns (uint64 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint32\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint32(uint32 _b) internal pure returns (uint32 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF) |\\n            ((v & 0x00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint24\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint24(uint24 _b) internal pure returns (uint24 v) {\\n        v =  (_b << 16) | (_b & 0x00FF00) | (_b >> 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint16\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint16(uint16 _b) internal pure returns (uint16 v) {\\n        v =  (_b << 8) | (_b >> 8);\\n    }\\n\\n\\n    /// @notice          Converts big-endian bytes to a uint\\n    /// @dev             Traverses the byte array and sums the bytes\\n    /// @param _b        The big-endian bytes-encoded integer\\n    /// @return          The integer representation\\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\\n        uint256 _number;\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\\n        }\\n\\n        return _number;\\n    }\\n\\n    /// @notice          Get the last _num bytes from a byte array\\n    /// @param _b        The byte array to slice\\n    /// @param _num      The number of bytes to extract from the end\\n    /// @return          The last _num bytes of _b\\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\\n        uint256 _start = _b.length.sub(_num);\\n\\n        return _b.slice(_start, _num);\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (sha2 + ripemd160)\\n    /// @dev             sha2 precompile at address(2), ripemd160 at address(3)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash160View(bytes memory _b) internal view returns (bytes20 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 3, 0x00, 32, 0x00, 32))\\n            // read from position 12 = 0c\\n            res := mload(0x0c)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(sha256(_b)));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 on a pair of bytes32\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _a        The first bytes32 of the pre-image\\n    /// @param _b        The second bytes32 of the pre-image\\n    /// @return res      The digest\\n    function hash256Pair(bytes32 _a, bytes32 _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            mstore(0x00, _a)\\n            mstore(0x20, _b)\\n            pop(staticcall(gas(), 2, 0x00, 64, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The array containing the pre-image\\n    /// @param at        The start of the pre-image\\n    /// @param len       The length of the pre-image\\n    /// @return res      The digest\\n    function hash256Slice(\\n        bytes memory _b,\\n        uint256 at,\\n        uint256 len\\n    ) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, add(32, at)), len, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /* ************ */\\n    /* Legacy Input */\\n    /* ************ */\\n\\n    /// @notice          Extracts the nth input from the vin (0-indexed)\\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\\n    /// @param _vin      The vin as a tightly-packed byte array\\n    /// @param _index    The 0-indexed location of the input to extract\\n    /// @return          The input as a byte array\\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineInputLengthAt(_vin, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n            _offset = _offset + _len;\\n        }\\n\\n        _len = determineInputLengthAt(_vin, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _vin.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Determines whether an input is legacy\\n    /// @dev             False if no scriptSig, otherwise True\\n    /// @param _input    The input\\n    /// @return          True for legacy, False for witness\\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\\n        return _input[36] != hex\\\"00\\\";\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The LEGACY input\\n    /// @return          The length of the script sig\\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\\n        return extractScriptSigLenAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    ///                  starting at the specified position\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The byte array containing the LEGACY input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the script sig\\n    function extractScriptSigLenAt(bytes memory _input, uint256 _at) internal pure returns (uint256, uint256) {\\n        if (_input.length < 37 + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = parseVarIntAt(_input, _at + 36);\\n\\n        return (_varIntDataLen, _scriptSigLen);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The input\\n    /// @return          The length of the input in bytes\\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\\n        return determineInputLengthAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig,\\n    ///                  starting at the specified position\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the input in bytes\\n    function determineInputLengthAt(bytes memory _input, uint256 _at) internal pure returns (uint256) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLenAt(_input, _at);\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\\n    }\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes4) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice4(36 + 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLELegacy(_input));\\n        uint32 _beSequence = reverseUint32(_leSeqence);\\n        return _beSequence;\\n    }\\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\\n    /// @dev             Will return hex\\\"00\\\" if passed a witness input\\n    /// @param _input    The LEGACY input\\n    /// @return          The length-prepended scriptSig\\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n\\n    /* ************* */\\n    /* Witness Input */\\n    /* ************* */\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(37);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input in a tx\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLEWitness(_input));\\n        uint32 _inputeSequence = reverseUint32(_leSeqence);\\n        return _inputeSequence;\\n    }\\n\\n    /// @notice          Extracts the outpoint from the input in a tx\\n    /// @dev             32-byte tx id with 4-byte index\\n    /// @param _input    The input\\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\\n        return _input.slice(0, 36);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    /// @dev             32-byte tx id\\n    /// @param _input    The input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\\n        return _input.slice32(0);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    ///                  starting at the specified position\\n    /// @dev             32-byte tx id\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes32) {\\n        return _input.slice32(_at);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    /// @dev             4-byte tx index\\n    /// @param _input    The input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(32);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    ///                  starting at the specified position\\n    /// @dev             4-byte tx index\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes4) {\\n        return _input.slice4(32 + _at);\\n    }\\n\\n    /* ****** */\\n    /* Output */\\n    /* ****** */\\n\\n    /// @notice          Determines the length of an output\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\\n        return determineOutputLengthAt(_output, 0);\\n    }\\n\\n    /// @notice          Determines the length of an output\\n    ///                  starting at the specified position\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The position of the output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLengthAt(bytes memory _output, uint256 _at) internal pure returns (uint256) {\\n        if (_output.length < 9 + _at) {\\n            return ERR_BAD_ARG;\\n        }\\n        uint256 _varIntDataLen;\\n        uint256 _scriptPubkeyLength;\\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarIntAt(_output, 8 + _at);\\n\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        // 8-byte value, 1-byte for tag itself\\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\\n    }\\n\\n    /// @notice          Extracts the output at a given index in the TxOuts vector\\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\\n    /// @param _vout     The _vout to extract from\\n    /// @param _index    The 0-indexed location of the output to extract\\n    /// @return          The specified output\\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineOutputLengthAt(_vout, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n            _offset += _len;\\n        }\\n\\n        _len = determineOutputLengthAt(_vout, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n        return _vout.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Extracts the value bytes from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value as LE bytes\\n    function extractValueLE(bytes memory _output) internal pure returns (bytes8) {\\n        return _output.slice8(0);\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value\\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(extractValueLE(_output));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output in the array\\n    /// @return          The output value\\n    function extractValueAt(bytes memory _output, uint256 _at) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(_output.slice8(_at));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the data from an op return output\\n    /// @dev             Returns hex\\\"\\\" if no data or not an op return\\n    /// @param _output   The output\\n    /// @return          Any data contained in the opreturn output, null if not an op return\\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\\n        if (_output[9] != hex\\\"6a\\\") {\\n            return hex\\\"\\\";\\n        }\\n        bytes1 _dataLen = _output[10];\\n        return _output.slice(11, uint256(uint8(_dataLen)));\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The output\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\\n        return extractHashAt(_output, 8, _output.length - 8);\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output script in the array\\n    ///                  (output start + 8)\\n    /// @param _len      The length of the output script\\n    ///                  (output length - 8)\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHashAt(\\n        bytes memory _output,\\n        uint256 _at,\\n        uint256 _len\\n    ) internal pure returns (bytes memory) {\\n        uint8 _scriptLen = uint8(_output[_at]);\\n\\n        // don't have to worry about overflow here.\\n        // if _scriptLen + 1 overflows, then output length would have to be < 1\\n        // for this check to pass. if it's < 1, then we errored when assigning\\n        // _scriptLen\\n        if (_scriptLen + 1 != _len) {\\n            return hex\\\"\\\";\\n        }\\n\\n        if (uint8(_output[_at + 1]) == 0) {\\n            if (_scriptLen < 2) {\\n                return hex\\\"\\\";\\n            }\\n            uint256 _payloadLen = uint8(_output[_at + 2]);\\n            // Check for maliciously formatted witness outputs.\\n            // No need to worry about underflow as long b/c of the `< 2` check\\n            if (_payloadLen != _scriptLen - 2 || (_payloadLen != 0x20 && _payloadLen != 0x14)) {\\n                return hex\\\"\\\";\\n            }\\n            return _output.slice(_at + 3, _payloadLen);\\n        } else {\\n            bytes3 _tag = _output.slice3(_at);\\n            // p2pkh\\n            if (_tag == hex\\\"1976a9\\\") {\\n                // Check for maliciously formatted p2pkh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + 3]) != 0x14 ||\\n                    _output.slice2(_at + _len - 2) != hex\\\"88ac\\\") {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 4, 20);\\n            //p2sh\\n            } else if (_tag == hex\\\"17a914\\\") {\\n                // Check for maliciously formatted p2sh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + _len - 1]) != 0x87) {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 3, 20);\\n            }\\n        }\\n        return hex\\\"\\\";  /* NB: will trigger on OPRETURN and any non-standard that doesn't overrun */\\n    }\\n\\n    /* ********** */\\n    /* Witness TX */\\n    /* ********** */\\n\\n\\n    /// @notice      Checks that the vin passed up is properly formatted\\n    /// @dev         Consider a vin with a valid vout in its scriptsig\\n    /// @param _vin  Raw bytes length-prefixed input vector\\n    /// @return      True if it represents a validly formatted vin\\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n\\n        // Not valid if it says there are too many or no inputs\\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vin.length) {\\n                return false;\\n            }\\n\\n            // Grab the next input and determine its length.\\n            uint256 _nextLen = determineInputLengthAt(_vin, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            // Increase the offset by that much\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vin.length;\\n    }\\n\\n    /// @notice      Checks that the vout passed up is properly formatted\\n    /// @dev         Consider a vout with a valid scriptpubkey\\n    /// @param _vout Raw bytes length-prefixed output vector\\n    /// @return      True if it represents a validly formatted vout\\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n\\n        // Not valid if it says there are too many or no outputs\\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vout.length) {\\n                return false;\\n            }\\n\\n            // Grab the next output and determine its length.\\n            // Increase the offset by that much\\n            uint256 _nextLen = determineOutputLengthAt(_vout, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vout.length;\\n    }\\n\\n\\n\\n    /* ************ */\\n    /* Block Header */\\n    /* ************ */\\n\\n    /// @notice          Extracts the transaction merkle root from a block header\\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\\n    /// @param _header   The header\\n    /// @return          The merkle root (little-endian)\\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(36);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The header\\n    /// @return          The target threshold\\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\\n        return extractTargetAt(_header, 0);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The target threshold\\n    function extractTargetAt(bytes memory _header, uint256 at) internal pure returns (uint256) {\\n        uint24 _m = uint24(_header.slice3(72 + at));\\n        uint8 _e = uint8(_header[75 + at]);\\n        uint256 _mantissa = uint256(reverseUint24(_m));\\n        uint _exponent = _e - 3;\\n\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\\n    /// @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _target   The current target\\n    /// @return          The block difficulty (bdiff)\\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\\n        // Difficulty 1 calculated from 0x1d00ffff\\n        return DIFF1_TARGET.div(_target);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(4);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLEAt(\\n        bytes memory _header,\\n        uint256 at\\n    ) internal pure returns (bytes32) {\\n        return _header.slice32(4 + at);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (little-endian bytes)\\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes4) {\\n        return _header.slice4(68);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (uint)\\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\\n        return reverseUint32(uint32(extractTimestampLE(_header)));\\n    }\\n\\n    /// @notice          Extracts the expected difficulty from a block header\\n    /// @dev             Does NOT verify the work\\n    /// @param _header   The header\\n    /// @return          The difficulty as an integer\\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\\n        return calculateDifficulty(extractTarget(_header));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal view returns (bytes32) {\\n        return hash256View(abi.encodePacked(_a, _b));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32) {\\n        return hash256Pair(_a, _b);\\n    }\\n\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Inefficient version.\\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_proof.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Special case for coinbase-only blocks\\n        if (_proof.length == 32) {\\n            return true;\\n        }\\n\\n        // Should never occur\\n        if (_proof.length == 64) {\\n            return false;\\n        }\\n\\n        bytes32 _root = _proof.slice32(_proof.length - 32);\\n        bytes32 _current = _proof.slice32(0);\\n        bytes memory _tree = _proof.slice(32, _proof.length - 64);\\n\\n        return verifyHash256Merkle(_current, _tree, _root, _index);\\n    }\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Efficient version.\\n    /// @param _leaf     The leaf of the proof. LE sha256 hash.\\n    /// @param _tree     The intermediate nodes in the proof.\\n    ///                  Tightly packed LE sha256 hashes.\\n    /// @param _root     The root of the proof. LE sha256 hash.\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(\\n        bytes32 _leaf,\\n        bytes memory _tree,\\n        bytes32 _root,\\n        uint _index\\n    ) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_tree.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Should never occur\\n        if (_tree.length == 0) {\\n            return false;\\n        }\\n\\n        uint _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        // i moves in increments of 32\\n        for (uint i = 0; i < _tree.length; i += 32) {\\n            if (_idx % 2 == 1) {\\n                _current = _hash256MerkleStep(_tree.slice32(i), _current);\\n            } else {\\n                _current = _hash256MerkleStep(_current, _tree.slice32(i));\\n            }\\n            _idx = _idx >> 1;\\n        }\\n        return _current == _root;\\n    }\\n\\n    /*\\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\\n    NB: We get a full-bitlength target from this. For comparison with\\n        header-encoded targets we need to mask it with the header target\\n        e.g. (full & truncated) == truncated\\n    */\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\\n            _elapsedTime = RETARGET_PERIOD.div(4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\\n            _elapsedTime = RETARGET_PERIOD.mul(4);\\n        }\\n\\n        /*\\n          NB: high targets e.g. ffff0020 can cause overflows here\\n              so we divide it by 256**2, then multiply by 256**2 later\\n              we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n\\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\\n    }\\n}\\n\",\"keccak256\":\"0x439eaa97e9239705f3d31e8d39dccbad32311f1f119e295d53c65e0ae3c5a5fc\"},\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\n\\nhttps://github.com/GNSPS/solidity-bytes-utils/\\n\\nThis is free and unencumbered software released into the public domain.\\n\\nAnyone is free to copy, modify, publish, use, compile, sell, or\\ndistribute this software, either in source code form or as a compiled\\nbinary, for any purpose, commercial or non-commercial, and by any\\nmeans.\\n\\nIn jurisdictions that recognize copyright laws, the author or authors\\nof this software dedicate any and all copyright interest in the\\nsoftware to the public domain. We make this dedication for the benefit\\nof the public at large and to the detriment of our heirs and\\nsuccessors. We intend this dedication to be an overt act of\\nrelinquishment in perpetuity of all present and future rights to this\\nsoftware under copyright law.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\nOTHER DEALINGS IN THE SOFTWARE.\\n\\nFor more information, please refer to <https://unlicense.org>\\n*/\\n\\n\\n/** @title BytesLib **/\\n/** @author https://github.com/GNSPS **/\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                        ),\\n                        // and now shift left the number of bytes to\\n                        // leave space for the length in the slot\\n                        exp(0x100, sub(32, newlength))\\n                        ),\\n                        // increase length by the double of the memory\\n                        // bytes length\\n                        mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                    ),\\n                    and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\\n        if (_length == 0) {\\n            return hex\\\"\\\";\\n        }\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\\n            res := mload(0x40)\\n            mstore(0x40, add(add(res, 64), _length))\\n            mstore(res, _length)\\n\\n            // Compute distance between source and destination pointers\\n            let diff := sub(res, add(_bytes, _start))\\n\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n            } {\\n                mstore(add(src, diff), mload(src))\\n            }\\n        }\\n    }\\n\\n    /// @notice Take a slice of the byte array, overwriting the destination.\\n    /// The length of the slice will equal the length of the destination array.\\n    /// @dev Make sure the destination array has afterspace if required.\\n    /// @param _bytes The source array\\n    /// @param _dest The destination array.\\n    /// @param _start The location to start in the source array.\\n    function sliceInPlace(\\n        bytes memory _bytes,\\n        bytes memory _dest,\\n        uint _start\\n    ) internal pure {\\n        uint _length = _dest.length;\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let res := add(_dest, 32)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n                res := add(res, 32)\\n            } {\\n                mstore(res, mload(src))\\n            }\\n        }\\n    }\\n\\n    // Static slice functions, no bounds checking\\n    /// @notice take a 32-byte slice from the specified position\\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(_bytes, 32), _start))\\n        }\\n    }\\n\\n    /// @notice take a 20-byte slice from the specified position\\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\\n        return bytes20(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 8-byte slice from the specified position\\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\\n        return bytes8(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 4-byte slice from the specified position\\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\\n        return bytes4(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 3-byte slice from the specified position\\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\\n        return bytes3(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 2-byte slice from the specified position\\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\\n        return bytes2(slice32(_bytes, _start));\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        uint _totalLen = _start + 20;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Address conversion out of bounds.\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        uint _totalLen = _start + 32;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Uint conversion out of bounds.\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\\n        if (_source.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            result := keccak256(add(add(_bytes, 32), _start), _length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e0f3b3b23c861bd031588bf410dfdd02e2af17941a89aa38d70e534e0380d1\"},\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x35930d982394c7ffde439b82e5e696c5b21a6f09699d44861dfe409ef64084a3\"},\"contracts/integrator/AbstractTBTCDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\nimport {BTCUtils} from \\\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\\\";\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./ITBTCVault.sol\\\";\\n\\n/// @title Abstract AbstractTBTCDepositor contract.\\n/// @notice This abstract contract is meant to facilitate integration of protocols\\n///         aiming to use tBTC as an underlying Bitcoin bridge.\\n///\\n///         Such an integrator is supposed to:\\n///         - Create a child contract inheriting from this abstract contract\\n///         - Call the `__AbstractTBTCDepositor_initialize` initializer function\\n///         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their\\n///           business logic in order to initialize and finalize deposits.\\n///\\n/// @dev Example usage:\\n///      ```\\n///      // Example upgradeable integrator contract.\\n///      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {\\n///          /// @custom:oz-upgrades-unsafe-allow constructor\\n///          constructor() {\\n///              // Prevents the contract from being initialized again.\\n///              _disableInitializers();\\n///          }\\n///\\n///          function initialize(\\n///              address _bridge,\\n///              address _tbtcVault\\n///          ) external initializer {\\n///              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);\\n///          }\\n///\\n///          function startProcess(\\n///              IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n///              IBridgeTypes.DepositRevealInfo calldata reveal\\n///          ) external {\\n///              // Embed necessary context as extra data.\\n///              bytes32 extraData = ...;\\n///\\n///              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(\\n///                  fundingTx,\\n///                  reveal,\\n///                  extraData\\n///              );\\n///\\n///              // Use the depositKey to track the process.\\n///          }\\n///\\n///          function finalizeProcess(uint256 depositKey) external {\\n///              // Ensure the function cannot be called for the same deposit\\n///              // twice.\\n///\\n///              (\\n///                  uint256 initialDepositAmount,\\n///                  uint256 tbtcAmount,\\n///                  bytes32 extraData\\n///              ) = _finalizeDeposit(depositKey);\\n///\\n///              // Do something with the minted TBTC using context\\n///              // embedded in the extraData.\\n///          }\\n///      }\\nabstract contract AbstractTBTCDepositor {\\n    using BTCUtils for bytes;\\n\\n    /// @notice Multiplier to convert satoshi to TBTC token units.\\n    uint256 public constant SATOSHI_MULTIPLIER = 10**10;\\n\\n    /// @notice Bridge contract address.\\n    IBridge public bridge;\\n    /// @notice TBTCVault contract address.\\n    ITBTCVault public tbtcVault;\\n\\n    // Reserved storage space that allows adding more variables without affecting\\n    // the storage layout of the child contracts. The convention from OpenZeppelin\\n    // suggests the storage space should add up to 50 slots. If more variables are\\n    // added in the upcoming versions one need to reduce the array size accordingly.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[47] private __gap;\\n\\n    /// @notice Initializes the contract. MUST BE CALLED from the child\\n    ///         contract initializer.\\n    // slither-disable-next-line dead-code\\n    function __AbstractTBTCDepositor_initialize(\\n        address _bridge,\\n        address _tbtcVault\\n    ) internal {\\n        require(\\n            address(bridge) == address(0) && address(tbtcVault) == address(0),\\n            \\\"AbstractTBTCDepositor already initialized\\\"\\n        );\\n\\n        require(_bridge != address(0), \\\"Bridge address cannot be zero\\\");\\n        require(_tbtcVault != address(0), \\\"TBTCVault address cannot be zero\\\");\\n\\n        bridge = IBridge(_bridge);\\n        tbtcVault = ITBTCVault(_tbtcVault);\\n    }\\n\\n    /// @notice Initializes a deposit by revealing it to the Bridge.\\n    /// @param fundingTx Bitcoin funding transaction data, see `IBridgeTypes.BitcoinTxInfo`.\\n    /// @param reveal Deposit reveal data, see `IBridgeTypes.DepositRevealInfo` struct.\\n    /// @param extraData 32-byte deposit extra data.\\n    /// @return depositKey Deposit key computed as\\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\\n    ///         key can be used to refer to the deposit in the Bridge and\\n    ///         TBTCVault contracts.\\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @dev Requirements:\\n    ///      - The revealed vault address must match the TBTCVault address,\\n    ///      - All requirements from {Bridge#revealDepositWithExtraData}\\n    ///        function must be met.\\n    /// @dev This function doesn't validate if a deposit has been initialized before,\\n    ///      as the Bridge won't allow the same deposit to be revealed twice.\\n    // slither-disable-next-line dead-code\\n    function _initializeDeposit(\\n        IBridgeTypes.BitcoinTxInfo memory fundingTx,\\n        IBridgeTypes.DepositRevealInfo memory reveal,\\n        bytes32 extraData\\n    ) internal returns (uint256 depositKey, uint256 initialDepositAmount) {\\n        require(reveal.vault == address(tbtcVault), \\\"Vault address mismatch\\\");\\n\\n        depositKey = _calculateDepositKey(\\n            _calculateBitcoinTxHash(fundingTx),\\n            reveal.fundingOutputIndex\\n        );\\n\\n        // The Bridge does not allow to reveal the same deposit twice and\\n        // revealed deposits stay there forever. The transaction will revert\\n        // if the deposit has already been revealed so, there is no need to do\\n        // an explicit check here.\\n        bridge.revealDepositWithExtraData(fundingTx, reveal, extraData);\\n\\n        initialDepositAmount =\\n            bridge.deposits(depositKey).amount *\\n            SATOSHI_MULTIPLIER;\\n    }\\n\\n    /// @notice Finalizes a deposit by calculating the amount of TBTC minted\\n    ///         for the deposit.\\n    /// @param depositKey Deposit key identifying the deposit.\\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @return extraData 32-byte deposit extra data.\\n    /// @dev Requirements:\\n    ///      - The deposit must be initialized but not finalized\\n    ///        (in the context of this contract) yet.\\n    ///      - The deposit must be finalized on the Bridge side. That means the\\n    ///        deposit must be either swept or optimistically minted.\\n    /// @dev THIS FUNCTION DOESN'T VALIDATE IF A DEPOSIT HAS BEEN FINALIZED BEFORE,\\n    ///      IT IS A RESPONSIBILITY OF THE IMPLEMENTING CONTRACT TO ENSURE THIS\\n    ///      FUNCTION WON'T BE CALLED TWICE FOR THE SAME DEPOSIT.\\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function is an\\n    ///      approximation. See documentation of the `calculateTbtcAmount`\\n    ///      responsible for calculating this value for more details.\\n    // slither-disable-next-line dead-code\\n    function _finalizeDeposit(uint256 depositKey)\\n        internal\\n        returns (\\n            uint256 initialDepositAmount,\\n            uint256 tbtcAmount,\\n            bytes32 extraData\\n        )\\n    {\\n        IBridgeTypes.DepositRequest memory deposit = bridge.deposits(\\n            depositKey\\n        );\\n        require(deposit.revealedAt != 0, \\\"Deposit not initialized\\\");\\n\\n        (, uint64 finalizedAt) = tbtcVault.optimisticMintingRequests(\\n            depositKey\\n        );\\n\\n        require(\\n            deposit.sweptAt != 0 || finalizedAt != 0,\\n            \\\"Deposit not finalized by the bridge\\\"\\n        );\\n\\n        initialDepositAmount = deposit.amount * SATOSHI_MULTIPLIER;\\n\\n        tbtcAmount = _calculateTbtcAmount(deposit.amount, deposit.treasuryFee);\\n\\n        extraData = deposit.extraData;\\n    }\\n\\n    /// @notice Calculates the amount of TBTC minted for the deposit.\\n    /// @param depositAmountSat Deposit amount in satoshi (1e8 precision).\\n    ///        This is the actual amount deposited by the deposit creator, i.e.\\n    ///        the gross amount the Bridge's fees are cut from.\\n    /// @param depositTreasuryFeeSat Deposit treasury fee in satoshi (1e8 precision).\\n    ///        This is an accurate value of the treasury fee that was actually\\n    ///        cut upon minting.\\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit.\\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function may\\n    ///      not correspond to the actual amount of TBTC minted for the deposit.\\n    ///      Although the treasury fee cut upon minting is known precisely,\\n    ///      this is not the case for the optimistic minting fee and the Bitcoin\\n    ///      transaction fee. To overcome that problem, this function just takes\\n    ///      the current maximum allowed values of both fees, at the moment of deposit\\n    ///      finalization. For the great majority of the deposits, such an\\n    ///      algorithm will return a tbtcAmount slightly lesser than the\\n    ///      actual amount of TBTC minted for the deposit. This will cause\\n    ///      some TBTC to be left in the contract and ensure there is enough\\n    ///      liquidity to finalize the deposit. However, in some rare cases,\\n    ///      where the actual values of those fees change between the deposit\\n    ///      minting and finalization, the tbtcAmount returned by this function\\n    ///      may be greater than the actual amount of TBTC minted for the deposit.\\n    ///      If this happens and the reserve coming from previous deposits\\n    ///      leftovers does not provide enough liquidity, the deposit will have\\n    ///      to wait for finalization until the reserve is refilled by subsequent\\n    ///      deposits or a manual top-up. The integrator is responsible for\\n    ///      handling such cases.\\n    // slither-disable-next-line dead-code\\n    function _calculateTbtcAmount(\\n        uint64 depositAmountSat,\\n        uint64 depositTreasuryFeeSat\\n    ) internal view virtual returns (uint256) {\\n        // Both deposit amount and treasury fee are in the 1e8 satoshi precision.\\n        // We need to convert them to the 1e18 TBTC precision.\\n        uint256 amountSubTreasury = (depositAmountSat - depositTreasuryFeeSat) *\\n            SATOSHI_MULTIPLIER;\\n\\n        uint256 omFeeDivisor = tbtcVault.optimisticMintingFeeDivisor();\\n        uint256 omFee = omFeeDivisor > 0\\n            ? (amountSubTreasury / omFeeDivisor)\\n            : 0;\\n\\n        // The deposit transaction max fee is in the 1e8 satoshi precision.\\n        // We need to convert them to the 1e18 TBTC precision.\\n        (, , uint64 depositTxMaxFee, ) = bridge.depositParameters();\\n        uint256 txMaxFee = depositTxMaxFee * SATOSHI_MULTIPLIER;\\n\\n        return amountSubTreasury - omFee - txMaxFee;\\n    }\\n\\n    /// @notice Calculates the deposit key for the given funding transaction\\n    ///         hash and funding output index.\\n    /// @param fundingTxHash Funding transaction hash.\\n    /// @param fundingOutputIndex Funding output index.\\n    /// @return depositKey Deposit key computed as\\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\\n    ///         key can be used to refer to the deposit in the Bridge and\\n    ///         TBTCVault contracts.\\n    // slither-disable-next-line dead-code\\n    function _calculateDepositKey(\\n        bytes32 fundingTxHash,\\n        uint32 fundingOutputIndex\\n    ) internal pure returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(abi.encodePacked(fundingTxHash, fundingOutputIndex))\\n            );\\n    }\\n\\n    /// @notice Calculates the Bitcoin transaction hash for the given Bitcoin\\n    ///         transaction data.\\n    /// @param txInfo Bitcoin transaction data, see `IBridgeTypes.BitcoinTxInfo` struct.\\n    /// @return txHash Bitcoin transaction hash.\\n    // slither-disable-next-line dead-code\\n    function _calculateBitcoinTxHash(IBridgeTypes.BitcoinTxInfo memory txInfo)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            abi\\n                .encodePacked(\\n                    txInfo.version,\\n                    txInfo.inputVector,\\n                    txInfo.outputVector,\\n                    txInfo.locktime\\n                )\\n                .hash256View();\\n    }\\n\\n    /// @notice Returns minimum deposit amount.\\n    /// @return Minimum deposit amount. In TBTC token decimals precision.\\n    // slither-disable-next-line dead-code\\n    function _minDepositAmount() internal view returns (uint256) {\\n        // Read tBTC Bridge Deposit Dust Threshold in satoshi precision.\\n        (uint64 bridgeDepositDustThresholdSat, , , ) = bridge\\n            .depositParameters();\\n\\n        // Convert tBTC Bridge Deposit Dust Threshold to TBTC token precision.\\n        return bridgeDepositDustThresholdSat * SATOSHI_MULTIPLIER;\\n    }\\n}\\n\",\"keccak256\":\"0x24dd42ef0aa2dd54ba02f3fea63a1e2a6663dd0b6ba745f28098164d1c31c359\",\"license\":\"GPL-3.0-only\"},\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"},\"contracts/integrator/ITBTCVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface of the TBTCVault contract.\\n/// @dev See vault/TBTCVault.sol\\ninterface ITBTCVault {\\n    /// @dev See {TBTCVault#optimisticMintingRequests}\\n    function optimisticMintingRequests(uint256 depositKey)\\n        external\\n        returns (uint64 requestedAt, uint64 finalizedAt);\\n\\n    /// @dev See {TBTCVault#optimisticMintingFeeDivisor}\\n    function optimisticMintingFeeDivisor() external view returns (uint32);\\n\\n    /// @dev See {TBTCVault#tbtcToken}\\n    function tbtcToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ccf20f2a2e32fa544adb84a17aaa80cefef626888d1f2cfc71e11789ba98674\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4400,"contract":"contracts/integrator/AbstractTBTCDepositor.sol:AbstractTBTCDepositor","label":"bridge","offset":0,"slot":"0","type":"t_contract(IBridge)4795"},{"astId":4404,"contract":"contracts/integrator/AbstractTBTCDepositor.sol:AbstractTBTCDepositor","label":"tbtcVault","offset":0,"slot":"1","type":"t_contract(ITBTCVault)4821"},{"astId":4408,"contract":"contracts/integrator/AbstractTBTCDepositor.sol:AbstractTBTCDepositor","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)47_storage"}],"types":{"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_contract(IBridge)4795":{"encoding":"inplace","label":"contract IBridge","numberOfBytes":"20"},"t_contract(ITBTCVault)4821":{"encoding":"inplace","label":"contract ITBTCVault","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"SATOSHI_MULTIPLIER()":{"notice":"Multiplier to convert satoshi to TBTC token units."},"bridge()":{"notice":"Bridge contract address."},"tbtcVault()":{"notice":"TBTCVault contract address."}},"notice":"This abstract contract is meant to facilitate integration of protocols         aiming to use tBTC as an underlying Bitcoin bridge.         Such an integrator is supposed to:         - Create a child contract inheriting from this abstract contract         - Call the `__AbstractTBTCDepositor_initialize` initializer function         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their           business logic in order to initialize and finalize deposits.","version":1}}},"contracts/integrator/IBridge.sol":{"IBridge":{"abi":[{"inputs":[],"name":"depositParameters","outputs":[{"internalType":"uint64","name":"depositDustThreshold","type":"uint64"},{"internalType":"uint64","name":"depositTreasuryFeeDivisor","type":"uint64"},{"internalType":"uint64","name":"depositTxMaxFee","type":"uint64"},{"internalType":"uint32","name":"depositRevealAheadPeriod","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"depositKey","type":"uint256"}],"name":"deposits","outputs":[{"components":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"uint64","name":"amount","type":"uint64"},{"internalType":"uint32","name":"revealedAt","type":"uint32"},{"internalType":"address","name":"vault","type":"address"},{"internalType":"uint64","name":"treasuryFee","type":"uint64"},{"internalType":"uint32","name":"sweptAt","type":"uint32"},{"internalType":"bytes32","name":"extraData","type":"bytes32"}],"internalType":"struct IBridgeTypes.DepositRequest","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes4","name":"version","type":"bytes4"},{"internalType":"bytes","name":"inputVector","type":"bytes"},{"internalType":"bytes","name":"outputVector","type":"bytes"},{"internalType":"bytes4","name":"locktime","type":"bytes4"}],"internalType":"struct IBridgeTypes.BitcoinTxInfo","name":"fundingTx","type":"tuple"},{"components":[{"internalType":"uint32","name":"fundingOutputIndex","type":"uint32"},{"internalType":"bytes8","name":"blindingFactor","type":"bytes8"},{"internalType":"bytes20","name":"walletPubKeyHash","type":"bytes20"},{"internalType":"bytes20","name":"refundPubKeyHash","type":"bytes20"},{"internalType":"bytes4","name":"refundLocktime","type":"bytes4"},{"internalType":"address","name":"vault","type":"address"}],"internalType":"struct IBridgeTypes.DepositRevealInfo","name":"reveal","type":"tuple"},{"internalType":"bytes32","name":"extraData","type":"bytes32"}],"name":"revealDepositWithExtraData","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See bridge/Bridge.sol","kind":"dev","methods":{"depositParameters()":{"details":"See {Bridge#depositParameters}"},"deposits(uint256)":{"details":"See {Bridge#deposits}"},"revealDepositWithExtraData((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),bytes32)":{"details":"See {Bridge#revealDepositWithExtraData}"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"depositParameters()":"c42b64d0","deposits(uint256)":"b02c43d0","revealDepositWithExtraData((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),bytes32)":"86f01439"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"depositParameters\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"depositDustThreshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"depositTreasuryFeeDivisor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"depositTxMaxFee\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"depositRevealAheadPeriod\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"revealedAt\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"treasuryFee\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"sweptAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"extraData\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBridgeTypes.DepositRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"inputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"}],\"internalType\":\"struct IBridgeTypes.BitcoinTxInfo\",\"name\":\"fundingTx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes8\",\"name\":\"blindingFactor\",\"type\":\"bytes8\"},{\"internalType\":\"bytes20\",\"name\":\"walletPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"refundPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes4\",\"name\":\"refundLocktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct IBridgeTypes.DepositRevealInfo\",\"name\":\"reveal\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"extraData\",\"type\":\"bytes32\"}],\"name\":\"revealDepositWithExtraData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See bridge/Bridge.sol\",\"kind\":\"dev\",\"methods\":{\"depositParameters()\":{\"details\":\"See {Bridge#depositParameters}\"},\"deposits(uint256)\":{\"details\":\"See {Bridge#deposits}\"},\"revealDepositWithExtraData((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),bytes32)\":{\"details\":\"See {Bridge#revealDepositWithExtraData}\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface of the Bridge contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrator/IBridge.sol\":\"IBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface of the Bridge contract.","version":1}},"IBridgeTypes":{"abi":[],"devdoc":{"details":"This is a mirror of the real types used in the Bridge contract.      This way, the `integrator` subpackage does not need to import      anything from the `bridge` subpackage and explicitly depend on it.      This simplifies the dependency graph for integrators.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202c01872c2aa2438f4933a889b7647b9b3e1d253337674801d95b5d8d6d6bc8f764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C ADD DUP8 0x2C 0x2A LOG2 NUMBER DUP16 0x49 CALLER 0xA8 DUP10 0xB7 PUSH5 0x7B9B3E1D25 CALLER CALLDATACOPY PUSH8 0x4801D95B5D8D6D6B 0xC8 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1359:749:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202c01872c2aa2438f4933a889b7647b9b3e1d253337674801d95b5d8d6d6bc8f764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C ADD DUP8 0x2C 0x2A LOG2 NUMBER DUP16 0x49 CALLER 0xA8 DUP10 0xB7 PUSH5 0x7B9B3E1D25 CALLER CALLDATACOPY PUSH8 0x4801D95B5D8D6D6B 0xC8 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1359:749:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a mirror of the real types used in the Bridge contract.      This way, the `integrator` subpackage does not need to import      anything from the `bridge` subpackage and explicitly depend on it.      This simplifies the dependency graph for integrators.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Namespace which groups all types relevant to the IBridge interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrator/IBridge.sol\":\"IBridgeTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Namespace which groups all types relevant to the IBridge interface.","version":1}}},"contracts/integrator/ITBTCVault.sol":{"ITBTCVault":{"abi":[{"inputs":[],"name":"optimisticMintingFeeDivisor","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"depositKey","type":"uint256"}],"name":"optimisticMintingRequests","outputs":[{"internalType":"uint64","name":"requestedAt","type":"uint64"},{"internalType":"uint64","name":"finalizedAt","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tbtcToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See vault/TBTCVault.sol","kind":"dev","methods":{"optimisticMintingFeeDivisor()":{"details":"See {TBTCVault#optimisticMintingFeeDivisor}"},"optimisticMintingRequests(uint256)":{"details":"See {TBTCVault#optimisticMintingRequests}"},"tbtcToken()":{"details":"See {TBTCVault#tbtcToken}"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"optimisticMintingFeeDivisor()":"09b53f51","optimisticMintingRequests(uint256)":"6c626aa4","tbtcToken()":"e5d3d714"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"optimisticMintingFeeDivisor\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"optimisticMintingRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"requestedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finalizedAt\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See vault/TBTCVault.sol\",\"kind\":\"dev\",\"methods\":{\"optimisticMintingFeeDivisor()\":{\"details\":\"See {TBTCVault#optimisticMintingFeeDivisor}\"},\"optimisticMintingRequests(uint256)\":{\"details\":\"See {TBTCVault#optimisticMintingRequests}\"},\"tbtcToken()\":{\"details\":\"See {TBTCVault#tbtcToken}\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface of the TBTCVault contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrator/ITBTCVault.sol\":\"ITBTCVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/integrator/ITBTCVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface of the TBTCVault contract.\\n/// @dev See vault/TBTCVault.sol\\ninterface ITBTCVault {\\n    /// @dev See {TBTCVault#optimisticMintingRequests}\\n    function optimisticMintingRequests(uint256 depositKey)\\n        external\\n        returns (uint64 requestedAt, uint64 finalizedAt);\\n\\n    /// @dev See {TBTCVault#optimisticMintingFeeDivisor}\\n    function optimisticMintingFeeDivisor() external view returns (uint32);\\n\\n    /// @dev See {TBTCVault#tbtcToken}\\n    function tbtcToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ccf20f2a2e32fa544adb84a17aaa80cefef626888d1f2cfc71e11789ba98674\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface of the TBTCVault contract.","version":1}}},"contracts/l2/L1BitcoinDepositor.sol":{"L1BitcoinDepositor":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"depositKey","type":"uint256"},{"indexed":true,"internalType":"address","name":"l2DepositOwner","type":"address"},{"indexed":true,"internalType":"address","name":"l1Sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"initialAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tbtcAmount","type":"uint256"}],"name":"DepositFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"depositKey","type":"uint256"},{"indexed":true,"internalType":"address","name":"l2DepositOwner","type":"address"},{"indexed":true,"internalType":"address","name":"l1Sender","type":"address"}],"name":"DepositInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"initializeDepositGasOffset","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"finalizeDepositGasOffset","type":"uint256"}],"name":"GasOffsetParametersUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"l2FinalizeDepositGasLimit","type":"uint256"}],"name":"L2FinalizeDepositGasLimitUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_address","type":"address"},{"indexed":false,"internalType":"bool","name":"authorization","type":"bool"}],"name":"ReimbursementAuthorizationUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newReimbursementPool","type":"address"}],"name":"ReimbursementPoolUpdated","type":"event"},{"inputs":[],"name":"SATOSHI_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_l2BitcoinDepositor","type":"address"}],"name":"attachL2BitcoinDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"contract IBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"deposits","outputs":[{"internalType":"enum L1BitcoinDepositor.DepositState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"depositKey","type":"uint256"}],"name":"finalizeDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"finalizeDepositGasOffset","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"gasReimbursements","outputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint96","name":"gasSpent","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tbtcBridge","type":"address"},{"internalType":"address","name":"_tbtcVault","type":"address"},{"internalType":"address","name":"_wormhole","type":"address"},{"internalType":"address","name":"_wormholeRelayer","type":"address"},{"internalType":"address","name":"_wormholeTokenBridge","type":"address"},{"internalType":"address","name":"_l2WormholeGateway","type":"address"},{"internalType":"uint16","name":"_l2ChainId","type":"uint16"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes4","name":"version","type":"bytes4"},{"internalType":"bytes","name":"inputVector","type":"bytes"},{"internalType":"bytes","name":"outputVector","type":"bytes"},{"internalType":"bytes4","name":"locktime","type":"bytes4"}],"internalType":"struct IBridgeTypes.BitcoinTxInfo","name":"fundingTx","type":"tuple"},{"components":[{"internalType":"uint32","name":"fundingOutputIndex","type":"uint32"},{"internalType":"bytes8","name":"blindingFactor","type":"bytes8"},{"internalType":"bytes20","name":"walletPubKeyHash","type":"bytes20"},{"internalType":"bytes20","name":"refundPubKeyHash","type":"bytes20"},{"internalType":"bytes4","name":"refundLocktime","type":"bytes4"},{"internalType":"address","name":"vault","type":"address"}],"internalType":"struct IBridgeTypes.DepositRevealInfo","name":"reveal","type":"tuple"},{"internalType":"address","name":"l2DepositOwner","type":"address"}],"name":"initializeDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initializeDepositGasOffset","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2BitcoinDepositor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2ChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2FinalizeDepositGasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2WormholeGateway","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quoteFinalizeDeposit","outputs":[{"internalType":"uint256","name":"cost","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"reimbursementAuthorizations","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reimbursementPool","outputs":[{"internalType":"contract ReimbursementPool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tbtcToken","outputs":[{"internalType":"contract IERC20Upgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tbtcVault","outputs":[{"internalType":"contract ITBTCVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_initializeDepositGasOffset","type":"uint256"},{"internalType":"uint256","name":"_finalizeDepositGasOffset","type":"uint256"}],"name":"updateGasOffsetParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2FinalizeDepositGasLimit","type":"uint256"}],"name":"updateL2FinalizeDepositGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bool","name":"authorization","type":"bool"}],"name":"updateReimbursementAuthorization","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ReimbursementPool","name":"_reimbursementPool","type":"address"}],"name":"updateReimbursementPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wormhole","outputs":[{"internalType":"contract IWormhole","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wormholeRelayer","outputs":[{"internalType":"contract IWormholeRelayer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wormholeTokenBridge","outputs":[{"internalType":"contract IWormholeTokenBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"attachL2BitcoinDepositor(address)":{"details":"Requirements:      - Can be called only by the contract owner,      - The address must not be set yet,      - The new address must not be 0x0.","params":{"_l2BitcoinDepositor":"Address of the `L2BitcoinDepositor` contract."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"finalizeDeposit(uint256)":{"details":"Requirements:      - `initializeDeposit` was called for the given deposit before,      - ERC20 L1 TBTC was minted by tBTC Bridge to this contract,      - The function was not called for the given deposit before,      - The call must carry a payment for the Wormhole Relayer that        is responsible for executing the deposit finalization on the        corresponding L2 chain. The payment must be equal to the        value returned by the `quoteFinalizeDeposit` function.","params":{"depositKey":"The deposit key, as emitted in the `DepositInitialized`        event emitted by the `initializeDeposit` function for the deposit."}},"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":{"details":"Requirements:      - The L2 deposit owner address must not be 0x0,      - The function can be called only one time for the given Bitcoin        funding transaction,      - The L2 deposit owner must be embedded in the Bitcoin P2(W)SH        deposit script as the <depositor-extra-data> field. The 20-byte        address must be expressed as a 32-byte value left-padded with 0.        If the value in the Bitcoin script and the value passed as        parameter do not match, the function will revert,      - All the requirements of tBTC Bridge.revealDepositWithExtraData        must be met.","params":{"fundingTx":"Bitcoin funding transaction data.","l2DepositOwner":"Address of the L2 deposit owner.","reveal":"Deposit reveal data."}},"owner()":{"details":"Returns the address of the current owner."},"quoteFinalizeDeposit()":{"returns":{"cost":"The cost of the `finalizeDeposit` function call in WEI."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateGasOffsetParameters(uint256,uint256)":{"details":"Can be called only by the contract owner. The caller is responsible      for validating parameters.","params":{"_finalizeDepositGasOffset":"New finalize deposit gas offset.","_initializeDepositGasOffset":"New initialize deposit gas offset."}},"updateL2FinalizeDepositGasLimit(uint256)":{"details":"Requirements:      - Can be called only by the contract owner.","params":{"_l2FinalizeDepositGasLimit":"New gas limit."}},"updateReimbursementAuthorization(address,bool)":{"details":"Requirements:      - Can be called only by the contract owner.","params":{"_address":"Address to update the authorization for.","authorization":"New authorization status."}}},"title":"L1BitcoinDepositor","version":1},"evm":{"bytecode":{"functionDebugData":{"@_4965":{"entryPoint":null,"id":4965,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_3282":{"entryPoint":40,"id":3282,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:21","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:21"},"nodeType":"YulFunctionCall","src":"113:19:21"},"nodeType":"YulExpressionStatement","src":"113:19:21"},{"nodeType":"YulAssignment","src":"141:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:21"},"nodeType":"YulFunctionCall","src":"156:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:21","type":""}],"src":"7:169:21"},{"body":{"nodeType":"YulBlock","src":"288:120:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:21"},"nodeType":"YulFunctionCall","src":"306:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:21","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:21"},"nodeType":"YulFunctionCall","src":"299:58:21"},"nodeType":"YulExpressionStatement","src":"299:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:21"},"nodeType":"YulFunctionCall","src":"374:15:21"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:21","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:21"},"nodeType":"YulFunctionCall","src":"367:34:21"},"nodeType":"YulExpressionStatement","src":"367:34:21"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:21","type":""}],"src":"182:226:21"},{"body":{"nodeType":"YulBlock","src":"560:220:21","statements":[{"nodeType":"YulAssignment","src":"570:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:21","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:21"},"nodeType":"YulFunctionCall","src":"577:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:21"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:21"},"nodeType":"YulFunctionCall","src":"653:93:21"},"nodeType":"YulExpressionStatement","src":"653:93:21"},{"nodeType":"YulAssignment","src":"755:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:21"},"nodeType":"YulFunctionCall","src":"762:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:21"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:21","type":""}],"src":"414:366:21"},{"body":{"nodeType":"YulBlock","src":"957:248:21","statements":[{"nodeType":"YulAssignment","src":"967:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:21"},"nodeType":"YulFunctionCall","src":"975:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:21"},"nodeType":"YulFunctionCall","src":"1010:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:21"},"nodeType":"YulFunctionCall","src":"1029:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:21"},"nodeType":"YulFunctionCall","src":"1003:47:21"},"nodeType":"YulExpressionStatement","src":"1003:47:21"},{"nodeType":"YulAssignment","src":"1059:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:21"},"nodeType":"YulFunctionCall","src":"1067:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:21","type":""}],"src":"786:419:21"},{"body":{"nodeType":"YulBlock","src":"1254:43:21","statements":[{"nodeType":"YulAssignment","src":"1264:27:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:21"},"nodeType":"YulFunctionCall","src":"1275:16:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:21"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:21","type":""}],"src":"1211:86:21"},{"body":{"nodeType":"YulBlock","src":"1364:51:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:21"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:21"},"nodeType":"YulFunctionCall","src":"1386:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:21"},"nodeType":"YulFunctionCall","src":"1374:35:21"},"nodeType":"YulExpressionStatement","src":"1374:35:21"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:21","type":""}],"src":"1303:112:21"},{"body":{"nodeType":"YulBlock","src":"1515:120:21","statements":[{"nodeType":"YulAssignment","src":"1525:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:21"},"nodeType":"YulFunctionCall","src":"1533:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:21"},"nodeType":"YulFunctionCall","src":"1610:17:21"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:21"},"nodeType":"YulFunctionCall","src":"1561:67:21"},"nodeType":"YulExpressionStatement","src":"1561:67:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:21","type":""}],"src":"1421:214:21"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b6156b180620001e26000396000f3fe6080604052600436106101c25760003560e01c80637c9e9ffb116100f7578063c7ba034711610095578063e5d3d71411610064578063e5d3d71414610600578063e78cea921461062b578063f11df69d14610656578063f2fde38b14610681576101c2565b8063c7ba034714610554578063c81ef1681461057f578063d6ae3cd5146105aa578063da25b725146105d5576101c2565b80639e0e4e2f116100d15780639e0e4e2f14610498578063aa82e33b146104c1578063b02c43d0146104ec578063c09975cd14610529576101c2565b80637c9e9ffb1461040457806384acd1bb146104425780638da5cb5b1461046d576101c2565b806360ec23dd11610164578063715018a61161013e578063715018a614610370578063715468311461038757806371c654ee146103b25780637b35b4e6146103db576101c2565b806360ec23dd146102e1578063642dc0331461030a57806366b58a0114610333576101c2565b80631159bef0116101a05780631159bef01461024657806313b38cce1461026f57806327ce36c61461029a57806346d9d49a146102c5576101c2565b80630515f0c1146101c75780630f36403a146101f05780630fa1ba441461021b575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613218565b6106aa565b005b3480156101fc57600080fd5b506102056107f6565b60405161021291906132a4565b60405180910390f35b34801561022757600080fd5b5061023061081c565b60405161023d91906132d8565b60405180910390f35b34801561025257600080fd5b5061026d6004803603810190610268919061331f565b610822565b005b34801561027b57600080fd5b5061028461086b565b60405161029191906132d8565b60405180910390f35b3480156102a657600080fd5b506102af61090b565b6040516102bc91906132d8565b60405180910390f35b6102df60048036038101906102da919061331f565b610911565b005b3480156102ed57600080fd5b5061030860048036038101906103039190613384565b610dbb565b005b34801561031657600080fd5b50610331600480360381019061032c9190613407565b610e6c565b005b34801561033f57600080fd5b5061035a60048036038101906103559190613218565b6111f5565b6040516103679190613486565b60405180910390f35b34801561037c57600080fd5b50610385611215565b005b34801561039357600080fd5b5061039c611229565b6040516103a991906132d8565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d491906134db565b61122f565b005b3480156103e757600080fd5b5061040260048036038101906103fd91906135cd565b611726565b005b34801561041057600080fd5b5061042b6004803603810190610426919061331f565b611816565b604051610439929190613630565b60405180910390f35b34801561044e57600080fd5b50610457611872565b604051610464919061367a565b60405180910390f35b34801561047957600080fd5b50610482611898565b60405161048f9190613695565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba91906136b0565b6118c2565b005b3480156104cd57600080fd5b506104d6611915565b6040516104e39190613695565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e919061331f565b61193b565b6040516105209190613767565b60405180910390f35b34801561053557600080fd5b5061053e61195b565b60405161054b91906137b5565b60405180910390f35b34801561056057600080fd5b50610569611981565b60405161057691906132d8565b60405180910390f35b34801561058b57600080fd5b5061059461198a565b6040516105a19190613695565b60405180910390f35b3480156105b657600080fd5b506105bf6119b0565b6040516105cc91906137df565b60405180910390f35b3480156105e157600080fd5b506105ea6119c4565b6040516105f7919061381b565b60405180910390f35b34801561060c57600080fd5b506106156119ea565b6040516106229190613857565b60405180910390f35b34801561063757600080fd5b50610640611a10565b60405161064d9190613893565b60405180910390f35b34801561066257600080fd5b5061066b611a36565b60405161067891906138cf565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190613218565b611a5c565b005b6106b2611adf565b600073ffffffffffffffffffffffffffffffffffffffff1660cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90613947565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906139d9565b60405180910390fd5b8060cd60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60d15481565b61082a611adf565b8060ce819055507f6ed5a3ddedc64e149e68b8bbc09d35489452528ae70487ee4f8832837c5c01058160405161086091906132d8565b60405180910390a150565b600061090660c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a90a2196040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190613a0e565b611b5d565b905090565b60d05481565b60005a90506001600281111561092a576109296136f0565b5b60c7600084815260200190815260200160002060009054906101000a900460ff16600281111561095d5761095c6136f0565b5b1461099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099490613a87565b60405180910390fd5b600260c7600084815260200190815260200160002060006101000a81548160ff021916908360028111156109d4576109d36136f0565b5b021790555060008060006109e785611c29565b9250925092503373ffffffffffffffffffffffffffffffffffffffff16610a0d82611e65565b73ffffffffffffffffffffffffffffffffffffffff16867f94d36bc0d9bf5adbd2dec8bd125b7bf12eecc6e5539fc8f2bd57a831d9995af78686604051610a55929190613aa7565b60405180910390a4610a678282611e72565b600073ffffffffffffffffffffffffffffffffffffffff16609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610db457600060cf60008781526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610c9f5760cf6000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ad226dc826020015183600001516040518363ffffffff1660e01b8152600401610c6c929190613b01565b600060405180830381600087803b158015610c8657600080fd5b505af1158015610c9a573d6000803e3d6000fd5b505050505b60d260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610db2576000610cfc346123ac565b9050609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ad226dc60d154835a8a610d4c9190613b59565b610d569190613b8d565b610d609190613b8d565b336040518363ffffffff1660e01b8152600401610d7e929190613bc1565b600060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b50505050505b505b5050505050565b610dc3611adf565b8173ffffffffffffffffffffffffffffffffffffffff167f1fff4aae494aaedff71ff8b04de50a56543bb83ce05b033c3fb4a93e065c05fc82604051610e099190613486565b60405180910390a28060d260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60005a9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790613c36565b60405180910390fd5b6000610eeb8361253b565b90506000610f1386610efc90613eae565b86803603810190610f0d919061404d565b8461255e565b50905060006002811115610f2a57610f296136f0565b5b60c7600083815260200190815260200160002060009054906101000a900460ff166002811115610f5d57610f5c6136f0565b5b14610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490613a87565b60405180910390fd5b600160c7600083815260200190815260200160002060006101000a81548160ff02191690836002811115610fd457610fd36136f0565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16827f04870363995d5b750bccca9d95e57044d630524aec2ef09ebdb820ac11d866b460405160405180910390a4600073ffffffffffffffffffffffffffffffffffffffff16609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156110dc575060d260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156111ec57600060d0545a856110f29190613b59565b6110fc9190613b8d565b90506bffffffffffffffffffffffff801681111561111d57505050506111f0565b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060cf600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505b5050505b505050565b60d26020528060005260406000206000915054906101000a900460ff1681565b61121d611adf565b6112276000612762565b565b60ce5481565b60008060019054906101000a900460ff161590508080156112605750600160008054906101000a900460ff1660ff16105b8061128d575061126f30612828565b15801561128c5750600160008054906101000a900460ff1660ff16145b5b6112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c3906140ec565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611309576001600060016101000a81548160ff0219169083151502179055505b611313888861284b565b61131b612a9a565b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190614158565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f0906141ea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145f9061427c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce9061430e565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663e5d3d7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115469190614343565b60c860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cc60146101000a81548161ffff021916908361ffff1602179055506207a12060ce8190555061ea6060d081905550614e2060d181905550801561171c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161171391906143b8565b60405180910390a15b5050505050505050565b61172e611898565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117929061441f565b60405180910390fd5b7f0e2d2343d31b085b7c4e56d1c8a6ec79f7ab07460386f1c9a1756239fe2533ac816040516117ca9190613695565b60405180910390a180609560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60cf6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16905082565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6118ca611adf565b8160d0819055508060d1819055507fb8df1fba472926f296225c210e366f62b21fec23b8e1b6b0a375724798ca9c0a8282604051611909929190613aa7565b60405180910390a15050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60c76020528060005260406000206000915054906101000a900460ff1681565b609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6402540be40081565b60cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc60149054906101000a900461ffff1681565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a64611adf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca906144b1565b60405180910390fd5b611adc81612762565b50565b611ae7612af3565b73ffffffffffffffffffffffffffffffffffffffff16611b05611898565b73ffffffffffffffffffffffffffffffffffffffff1614611b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b529061451d565b60405180910390fd5b565b60008060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23ee3c360cc60149054906101000a900461ffff16600060ce546040518463ffffffff1660e01b8152600401611bd293929190614578565b6040805180830381865afa158015611bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1291906145af565b5090508281611c219190613b8d565b915050919050565b600080600080600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b02c43d0866040518263ffffffff1660e01b8152600401611c8a91906132d8565b60e060405180830381865afa158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb919061472e565b90506000816040015163ffffffff1603611d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d11906147a7565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c626aa4876040518263ffffffff1660e01b8152600401611d7791906132d8565b60408051808303816000875af1158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db991906147c7565b91505060008260a0015163ffffffff16141580611de1575060008167ffffffffffffffff1614155b611e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1790614879565b60405180910390fd5b6402540be400826020015167ffffffffffffffff16611e3f9190614899565b9450611e5382602001518360800151612afb565b93508160c00151925050509193909250565b60008160001c9050919050565b611e7b82612cba565b915060008211611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb790614927565b60405180910390fd5b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a90a2196040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190613a0e565b90506000611f6082611b5d565b9050803414611fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9b906149b9565b60405180910390fd5b61201360cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612cea9092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5a5ebda8460c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860cc60149054906101000a900461ffff166120b460cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661253b565b60008b6040516020016120c791906149e8565b6040516020818303038152906040526040518863ffffffff1660e01b81526004016120f796959493929190614ab3565b60206040518083038185885af1158015612115573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061213a9190614b1b565b90506000600167ffffffffffffffff81111561215957612158613c6c565b5b60405190808252806020026020018201604052801561219257816020015b61217f613174565b8152602001906001900390816121775790505b509050604051806060016040528060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a8a05926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122319190614b5d565b61ffff16815260200161226560cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661253b565b81526020018367ffffffffffffffff168152508160008151811061228c5761228b614b8a565b5b602002602001018190525060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332b2fc0e85856122e19190613b59565b60cc60149054906101000a900461ffff1660cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180602001604052806000815250600060ce548860cc60149054906101000a900461ffff16336040518a63ffffffff1660e01b8152600401612360989796959493929190614cd7565b60206040518083038185885af115801561237e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123a39190614b1b565b50505050505050565b600080609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633de39c116040518163ffffffff1660e01b8152600401602060405180830381865afa15801561241c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124409190613a0e565b90506000609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e25b53456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190613a0e565b90506000823a106124e657826124e8565b3a5b9050600081036124fe5760009350505050612536565b6000818661250c9190614d92565b905080831115612523576000945050505050612536565b828161252f9190613b59565b9450505050505b919050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16146125f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ec90614e0f565b60405180910390fd5b61260b61260186612dfc565b8560000151612e43565b9150600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f014398686866040518463ffffffff1660e01b815260040161266c93929190614fa9565b600060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506402540be400600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b02c43d0846040518263ffffffff1660e01b81526004016126ff91906132d8565b60e060405180830381865afa15801561271c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612740919061472e565b6020015167ffffffffffffffff166127589190614899565b9050935093915050565b6000606360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156128f75750600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292d9061505a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036129a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299c906150c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0b90615132565b60405180910390fd5b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060019054906101000a900460ff16612ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae0906151c4565b60405180910390fd5b612af1612e79565b565b600033905090565b6000806402540be4008385612b1091906151e4565b67ffffffffffffffff16612b249190614899565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309b53f516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb99190615220565b63ffffffff1690506000808211612bd1576000612bde565b8183612bdd9190614d92565b5b905060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c42b64d06040518163ffffffff1660e01b8152600401608060405180830381865afa158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c72919061524d565b509250505060006402540be4008267ffffffffffffffff16612c949190614899565b9050808386612ca39190613b59565b612cad9190613b59565b9550505050505092915050565b60006402540be40082612ccd9190614d92565b91506402540be40082612ce09190614899565b9150819050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612d279291906152b4565b602060405180830381865afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d689190613a0e565b9050612df68463095ea7b360e01b858585612d839190613b8d565b604051602401612d949291906152dd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eda565b50505050565b6000612e3c8260000151836020015184604001518560600151604051602001612e289493929190615363565b604051602081830303815290604052612fa2565b9050919050565b60008282604051602001612e58929190615400565b6040516020818303038152906040528051906020012060001c905092915050565b600060019054906101000a900460ff16612ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebf906151c4565b60405180910390fd5b612ed8612ed3612af3565b612762565b565b6000612f3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612fca9092919063ffffffff16565b9050600081511480612f5e575080806020019051810190612f5d9190615441565b5b612f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f94906154e0565b60405180910390fd5b505050565b60006020600083516020850160025afa50602060006020600060025afa506000519050919050565b6060612fd98484600085612fe2565b90509392505050565b606082471015613027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301e90615572565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516130509190615592565b60006040518083038185875af1925050503d806000811461308d576040519150601f19603f3d011682016040523d82523d6000602084013e613092565b606091505b50915091506130a3878383876130af565b92505050949350505050565b60608315613111576000835103613109576130c985612828565b613108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ff906155f5565b60405180910390fd5b5b82905061311c565b61311b8383613124565b5b949350505050565b6000825111156131375781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316b9190615659565b60405180910390fd5b6040518060600160405280600061ffff16815260200160008019168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131e5826131ba565b9050919050565b6131f5816131da565b811461320057600080fd5b50565b600081359050613212816131ec565b92915050565b60006020828403121561322e5761322d6131b0565b5b600061323c84828501613203565b91505092915050565b6000819050919050565b600061326a613265613260846131ba565b613245565b6131ba565b9050919050565b600061327c8261324f565b9050919050565b600061328e82613271565b9050919050565b61329e81613283565b82525050565b60006020820190506132b96000830184613295565b92915050565b6000819050919050565b6132d2816132bf565b82525050565b60006020820190506132ed60008301846132c9565b92915050565b6132fc816132bf565b811461330757600080fd5b50565b600081359050613319816132f3565b92915050565b600060208284031215613335576133346131b0565b5b60006133438482850161330a565b91505092915050565b60008115159050919050565b6133618161334c565b811461336c57600080fd5b50565b60008135905061337e81613358565b92915050565b6000806040838503121561339b5761339a6131b0565b5b60006133a985828601613203565b92505060206133ba8582860161336f565b9150509250929050565b600080fd5b6000608082840312156133df576133de6133c4565b5b81905092915050565b600060c082840312156133fe576133fd6133c4565b5b81905092915050565b60008060006101008486031215613421576134206131b0565b5b600084013567ffffffffffffffff81111561343f5761343e6131b5565b5b61344b868287016133c9565b935050602061345c868287016133e8565b92505060e061346d86828701613203565b9150509250925092565b6134808161334c565b82525050565b600060208201905061349b6000830184613477565b92915050565b600061ffff82169050919050565b6134b8816134a1565b81146134c357600080fd5b50565b6000813590506134d5816134af565b92915050565b600080600080600080600060e0888a0312156134fa576134f96131b0565b5b60006135088a828b01613203565b97505060206135198a828b01613203565b965050604061352a8a828b01613203565b955050606061353b8a828b01613203565b945050608061354c8a828b01613203565b93505060a061355d8a828b01613203565b92505060c061356e8a828b016134c6565b91505092959891949750929550565b6000613588826131ba565b9050919050565b600061359a8261357d565b9050919050565b6135aa8161358f565b81146135b557600080fd5b50565b6000813590506135c7816135a1565b92915050565b6000602082840312156135e3576135e26131b0565b5b60006135f1848285016135b8565b91505092915050565b613603816131da565b82525050565b60006bffffffffffffffffffffffff82169050919050565b61362a81613609565b82525050565b600060408201905061364560008301856135fa565b6136526020830184613621565b9392505050565b600061366482613271565b9050919050565b61367481613659565b82525050565b600060208201905061368f600083018461366b565b92915050565b60006020820190506136aa60008301846135fa565b92915050565b600080604083850312156136c7576136c66131b0565b5b60006136d58582860161330a565b92505060206136e68582860161330a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137305761372f6136f0565b5b50565b60008190506137418261371f565b919050565b600061375182613733565b9050919050565b61376181613746565b82525050565b600060208201905061377c6000830184613758565b92915050565b600061378d8261324f565b9050919050565b600061379f82613782565b9050919050565b6137af81613794565b82525050565b60006020820190506137ca60008301846137a6565b92915050565b6137d9816134a1565b82525050565b60006020820190506137f460008301846137d0565b92915050565b600061380582613271565b9050919050565b613815816137fa565b82525050565b6000602082019050613830600083018461380c565b92915050565b600061384182613271565b9050919050565b61385181613836565b82525050565b600060208201905061386c6000830184613848565b92915050565b600061387d82613271565b9050919050565b61388d81613872565b82525050565b60006020820190506138a86000830184613884565b92915050565b60006138b982613271565b9050919050565b6138c9816138ae565b82525050565b60006020820190506138e460008301846138c0565b92915050565b600082825260208201905092915050565b7f4c3220426974636f696e204465706f7369746f7220616c726561647920736574600082015250565b60006139316020836138ea565b915061393c826138fb565b602082019050919050565b6000602082019050818103600083015261396081613924565b9050919050565b7f4c3220426974636f696e204465706f7369746f72206d757374206e6f7420626560008201527f2030783000000000000000000000000000000000000000000000000000000000602082015250565b60006139c36024836138ea565b91506139ce82613967565b604082019050919050565b600060208201905081810360008301526139f2816139b6565b9050919050565b600081519050613a08816132f3565b92915050565b600060208284031215613a2457613a236131b0565b5b6000613a32848285016139f9565b91505092915050565b7f57726f6e67206465706f73697420737461746500000000000000000000000000600082015250565b6000613a716013836138ea565b9150613a7c82613a3b565b602082019050919050565b60006020820190508181036000830152613aa081613a64565b9050919050565b6000604082019050613abc60008301856132c9565b613ac960208301846132c9565b9392505050565b6000613aeb613ae6613ae184613609565b613245565b6132bf565b9050919050565b613afb81613ad0565b82525050565b6000604082019050613b166000830185613af2565b613b2360208301846135fa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b64826132bf565b9150613b6f836132bf565b9250828203905081811115613b8757613b86613b2a565b5b92915050565b6000613b98826132bf565b9150613ba3836132bf565b9250828201905080821115613bbb57613bba613b2a565b5b92915050565b6000604082019050613bd660008301856132c9565b613be360208301846135fa565b9392505050565b7f4c32206465706f736974206f776e6572206d757374206e6f7420626520307830600082015250565b6000613c206020836138ea565b9150613c2b82613bea565b602082019050919050565b60006020820190508181036000830152613c4f81613c13565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ca482613c5b565b810181811067ffffffffffffffff82111715613cc357613cc2613c6c565b5b80604052505050565b6000613cd66131a6565b9050613ce28282613c9b565b919050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d2181613cec565b8114613d2c57600080fd5b50565b600081359050613d3e81613d18565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115613d6957613d68613c6c565b5b613d7282613c5b565b9050602081019050919050565b82818337600083830152505050565b6000613da1613d9c84613d4e565b613ccc565b905082815260208101848484011115613dbd57613dbc613d49565b5b613dc8848285613d7f565b509392505050565b600082601f830112613de557613de4613d44565b5b8135613df5848260208601613d8e565b91505092915050565b600060808284031215613e1457613e13613c56565b5b613e1e6080613ccc565b90506000613e2e84828501613d2f565b600083015250602082013567ffffffffffffffff811115613e5257613e51613ce7565b5b613e5e84828501613dd0565b602083015250604082013567ffffffffffffffff811115613e8257613e81613ce7565b5b613e8e84828501613dd0565b6040830152506060613ea284828501613d2f565b60608301525092915050565b6000613eba3683613dfe565b9050919050565b600063ffffffff82169050919050565b613eda81613ec1565b8114613ee557600080fd5b50565b600081359050613ef781613ed1565b92915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b613f3281613efd565b8114613f3d57600080fd5b50565b600081359050613f4f81613f29565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b613f8a81613f55565b8114613f9557600080fd5b50565b600081359050613fa781613f81565b92915050565b600060c08284031215613fc357613fc2613c56565b5b613fcd60c0613ccc565b90506000613fdd84828501613ee8565b6000830152506020613ff184828501613f40565b602083015250604061400584828501613f98565b604083015250606061401984828501613f98565b606083015250608061402d84828501613d2f565b60808301525060a061404184828501613203565b60a08301525092915050565b600060c08284031215614063576140626131b0565b5b600061407184828501613fad565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140d6602e836138ea565b91506140e18261407a565b604082019050919050565b60006020820190508181036000830152614105816140c9565b9050919050565b7f576f726d686f6c6520616464726573732063616e6e6f74206265207a65726f00600082015250565b6000614142601f836138ea565b915061414d8261410c565b602082019050919050565b6000602082019050818103600083015261417181614135565b9050919050565b7f576f726d686f6c6552656c6179657220616464726573732063616e6e6f74206260008201527f65207a65726f0000000000000000000000000000000000000000000000000000602082015250565b60006141d46026836138ea565b91506141df82614178565b604082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b7f576f726d686f6c65546f6b656e42726964676520616464726573732063616e6e60008201527f6f74206265207a65726f00000000000000000000000000000000000000000000602082015250565b6000614266602a836138ea565b91506142718261420a565b604082019050919050565b6000602082019050818103600083015261429581614259565b9050919050565b7f4c32576f726d686f6c654761746577617920616464726573732063616e6e6f7460008201527f206265207a65726f000000000000000000000000000000000000000000000000602082015250565b60006142f86028836138ea565b91506143038261429c565b604082019050919050565b60006020820190508181036000830152614327816142eb565b9050919050565b60008151905061433d816131ec565b92915050565b600060208284031215614359576143586131b0565b5b60006143678482850161432e565b91505092915050565b6000819050919050565b600060ff82169050919050565b60006143a261439d61439884614370565b613245565b61437a565b9050919050565b6143b281614387565b82525050565b60006020820190506143cd60008301846143a9565b92915050565b7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b60006144096017836138ea565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061449b6026836138ea565b91506144a68261443f565b604082019050919050565b600060208201905081810360008301526144ca8161448e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006145076020836138ea565b9150614512826144d1565b602082019050919050565b60006020820190508181036000830152614536816144fa565b9050919050565b6000819050919050565b600061456261455d6145588461453d565b613245565b6132bf565b9050919050565b61457281614547565b82525050565b600060608201905061458d60008301866137d0565b61459a6020830185614569565b6145a760408301846132c9565b949350505050565b600080604083850312156145c6576145c56131b0565b5b60006145d4858286016139f9565b92505060206145e5858286016139f9565b9150509250929050565b600067ffffffffffffffff82169050919050565b61460c816145ef565b811461461757600080fd5b50565b60008151905061462981614603565b92915050565b60008151905061463e81613ed1565b92915050565b6000819050919050565b61465781614644565b811461466257600080fd5b50565b6000815190506146748161464e565b92915050565b600060e082840312156146905761468f613c56565b5b61469a60e0613ccc565b905060006146aa8482850161432e565b60008301525060206146be8482850161461a565b60208301525060406146d28482850161462f565b60408301525060606146e68482850161432e565b60608301525060806146fa8482850161461a565b60808301525060a061470e8482850161462f565b60a08301525060c061472284828501614665565b60c08301525092915050565b600060e08284031215614744576147436131b0565b5b60006147528482850161467a565b91505092915050565b7f4465706f736974206e6f7420696e697469616c697a6564000000000000000000600082015250565b60006147916017836138ea565b915061479c8261475b565b602082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b600080604083850312156147de576147dd6131b0565b5b60006147ec8582860161461a565b92505060206147fd8582860161461a565b9150509250929050565b7f4465706f736974206e6f742066696e616c697a6564206279207468652062726960008201527f6467650000000000000000000000000000000000000000000000000000000000602082015250565b60006148636023836138ea565b915061486e82614807565b604082019050919050565b6000602082019050818103600083015261489281614856565b9050919050565b60006148a4826132bf565b91506148af836132bf565b92508282026148bd816132bf565b915082820484148315176148d4576148d3613b2a565b5b5092915050565b7f416d6f756e7420746f6f206c6f7720746f206272696467650000000000000000600082015250565b60006149116018836138ea565b915061491c826148db565b602082019050919050565b6000602082019050818103600083015261494081614904565b9050919050565b7f5061796d656e7420666f7220576f726d686f6c652052656c617965722069732060008201527f746f6f206c6f7700000000000000000000000000000000000000000000000000602082015250565b60006149a36027836138ea565b91506149ae82614947565b604082019050919050565b600060208201905081810360008301526149d281614996565b9050919050565b6149e281614644565b82525050565b60006020820190506149fd60008301846149d9565b92915050565b6000614a1e614a19614a148461453d565b613245565b613ec1565b9050919050565b614a2e81614a03565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614a6e578082015181840152602081019050614a53565b60008484015250505050565b6000614a8582614a34565b614a8f8185614a3f565b9350614a9f818560208601614a50565b614aa881613c5b565b840191505092915050565b600060c082019050614ac860008301896135fa565b614ad560208301886132c9565b614ae260408301876137d0565b614aef60608301866149d9565b614afc6080830185614a25565b81810360a0830152614b0e8184614a7a565b9050979650505050505050565b600060208284031215614b3157614b306131b0565b5b6000614b3f8482850161461a565b91505092915050565b600081519050614b57816134af565b92915050565b600060208284031215614b7357614b726131b0565b5b6000614b8184828501614b48565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614bee816134a1565b82525050565b614bfd81614644565b82525050565b614c0c816145ef565b82525050565b606082016000820151614c286000850182614be5565b506020820151614c3b6020850182614bf4565b506040820151614c4e6040850182614c03565b50505050565b6000614c608383614c12565b60608301905092915050565b6000602082019050919050565b6000614c8482614bb9565b614c8e8185614bc4565b9350614c9983614bd5565b8060005b83811015614cca578151614cb18882614c54565b9750614cbc83614c6c565b925050600181019050614c9d565b5085935050505092915050565b600061010082019050614ced600083018b6137d0565b614cfa602083018a6135fa565b8181036040830152614d0c8189614a7a565b9050614d1b6060830188614569565b614d2860808301876132c9565b81810360a0830152614d3a8186614c79565b9050614d4960c08301856137d0565b614d5660e08301846135fa565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614d9d826132bf565b9150614da8836132bf565b925082614db857614db7614d63565b5b828204905092915050565b7f5661756c742061646472657373206d69736d6174636800000000000000000000600082015250565b6000614df96016836138ea565b9150614e0482614dc3565b602082019050919050565b60006020820190508181036000830152614e2881614dec565b9050919050565b614e3881613cec565b82525050565b600082825260208201905092915050565b6000614e5a82614a34565b614e648185614e3e565b9350614e74818560208601614a50565b614e7d81613c5b565b840191505092915050565b6000608083016000830151614ea06000860182614e2f565b5060208301518482036020860152614eb88282614e4f565b91505060408301518482036040860152614ed28282614e4f565b9150506060830151614ee76060860182614e2f565b508091505092915050565b614efb81613ec1565b82525050565b614f0a81613efd565b82525050565b614f1981613f55565b82525050565b614f28816131da565b82525050565b60c082016000820151614f446000850182614ef2565b506020820151614f576020850182614f01565b506040820151614f6a6040850182614f10565b506060820151614f7d6060850182614f10565b506080820151614f906080850182614e2f565b5060a0820151614fa360a0850182614f1f565b50505050565b6000610100820190508181036000830152614fc48186614e88565b9050614fd36020830185614f2e565b614fe060e08301846149d9565b949350505050565b7f4162737472616374544254434465706f7369746f7220616c726561647920696e60008201527f697469616c697a65640000000000000000000000000000000000000000000000602082015250565b60006150446029836138ea565b915061504f82614fe8565b604082019050919050565b6000602082019050818103600083015261507381615037565b9050919050565b7f42726964676520616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006150b0601d836138ea565b91506150bb8261507a565b602082019050919050565b600060208201905081810360008301526150df816150a3565b9050919050565b7f544254435661756c7420616464726573732063616e6e6f74206265207a65726f600082015250565b600061511c6020836138ea565b9150615127826150e6565b602082019050919050565b6000602082019050818103600083015261514b8161510f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006151ae602b836138ea565b91506151b982615152565b604082019050919050565b600060208201905081810360008301526151dd816151a1565b9050919050565b60006151ef826145ef565b91506151fa836145ef565b9250828203905067ffffffffffffffff81111561521a57615219613b2a565b5b92915050565b600060208284031215615236576152356131b0565b5b60006152448482850161462f565b91505092915050565b60008060008060808587031215615267576152666131b0565b5b60006152758782880161461a565b94505060206152868782880161461a565b93505060406152978782880161461a565b92505060606152a88782880161462f565b91505092959194509250565b60006040820190506152c960008301856135fa565b6152d660208301846135fa565b9392505050565b60006040820190506152f260008301856135fa565b6152ff60208301846132c9565b9392505050565b6000819050919050565b61532161531c82613cec565b615306565b82525050565b600081905092915050565b600061533d82614a34565b6153478185615327565b9350615357818560208601614a50565b80840191505092915050565b600061536f8287615310565b60048201915061537f8286615332565b915061538b8285615332565b91506153978284615310565b60048201915081905095945050505050565b6000819050919050565b6153c46153bf82614644565b6153a9565b82525050565b60008160e01b9050919050565b60006153e2826153ca565b9050919050565b6153fa6153f582613ec1565b6153d7565b82525050565b600061540c82856153b3565b60208201915061541c82846153e9565b6004820191508190509392505050565b60008151905061543b81613358565b92915050565b600060208284031215615457576154566131b0565b5b60006154658482850161542c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006154ca602a836138ea565b91506154d58261546e565b604082019050919050565b600060208201905081810360008301526154f9816154bd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061555c6026836138ea565b915061556782615500565b604082019050919050565b6000602082019050818103600083015261558b8161554f565b9050919050565b600061559e8284615332565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006155df601d836138ea565b91506155ea826155a9565b602082019050919050565b6000602082019050818103600083015261560e816155d2565b9050919050565b600081519050919050565b600061562b82615615565b61563581856138ea565b9350615645818560208601614a50565b61564e81613c5b565b840191505092915050565b600060208201905081810360008301526156738184615620565b90509291505056fea2646970667358221220c7b9a6d1c3adbf3895240b6a0f7a30681fa41f5d6f89a5a7c0c3d0a084bde36864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x56B1 DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C9E9FFB GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC7BA0347 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE5D3D714 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE5D3D714 EQ PUSH2 0x600 JUMPI DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xF11DF69D EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x681 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xC7BA0347 EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0xC81EF168 EQ PUSH2 0x57F JUMPI DUP1 PUSH4 0xD6AE3CD5 EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xDA25B725 EQ PUSH2 0x5D5 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x9E0E4E2F GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9E0E4E2F EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xAA82E33B EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0xC09975CD EQ PUSH2 0x529 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x7C9E9FFB EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x84ACD1BB EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x60EC23DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x71546831 EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x71C654EE EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x7B35B4E6 EQ PUSH2 0x3DB JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x60EC23DD EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x642DC033 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x66B58A01 EQ PUSH2 0x333 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1159BEF0 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x1159BEF0 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x13B38CCE EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x27CE36C6 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x46D9D49A EQ PUSH2 0x2C5 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x515F0C1 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xF36403A EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xFA1BA44 EQ PUSH2 0x21B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x32A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x822 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x284 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x90B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x911 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x331 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32C SWAP2 SWAP1 PUSH2 0x3407 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x355 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x11F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x1215 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39C PUSH2 0x1229 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D4 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x35CD JUMP JUMPDEST PUSH2 0x1726 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x426 SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x1816 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP3 SWAP2 SWAP1 PUSH2 0x3630 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x457 PUSH2 0x1872 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x367A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x482 PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BA SWAP2 SWAP1 PUSH2 0x36B0 JUMP JUMPDEST PUSH2 0x18C2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D6 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E3 SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x513 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50E SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x193B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x53E PUSH2 0x195B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54B SWAP2 SWAP1 PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x569 PUSH2 0x1981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x594 PUSH2 0x198A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BF PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5CC SWAP2 SWAP1 PUSH2 0x37DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5EA PUSH2 0x19C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0x381B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x615 PUSH2 0x19EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x3857 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x640 PUSH2 0x1A10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x64D SWAP2 SWAP1 PUSH2 0x3893 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66B PUSH2 0x1A36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x678 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6A3 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x1A5C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6B2 PUSH2 0x1ADF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x743 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP1 PUSH2 0x3947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x39D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xCD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xD1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x82A PUSH2 0x1ADF JUMP JUMPDEST DUP1 PUSH1 0xCE DUP2 SWAP1 SSTORE POP PUSH32 0x6ED5A3DDEDC64E149E68B8BBC09D35489452528AE70487EE4F8832837C5C0105 DUP2 PUSH1 0x40 MLOAD PUSH2 0x860 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x906 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A90A219 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x901 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xD0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x92A JUMPI PUSH2 0x929 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST PUSH1 0xC7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x95D JUMPI PUSH2 0x95C PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x994 SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9D4 JUMPI PUSH2 0x9D3 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9E7 DUP6 PUSH2 0x1C29 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA0D DUP3 PUSH2 0x1E65 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x94D36BC0D9BF5ADBD2DEC8BD125B7BF12EECC6E5539FC8F2BD57A831D9995AF7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xA55 SWAP3 SWAP2 SWAP1 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA67 DUP3 DUP3 PUSH2 0x1E72 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDB4 JUMPI PUSH1 0x0 PUSH1 0xCF PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC9F JUMPI PUSH1 0xCF PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7AD226DC DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6C SWAP3 SWAP2 SWAP1 PUSH2 0x3B01 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0xD2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 PUSH2 0xCFC CALLVALUE PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7AD226DC PUSH1 0xD1 SLOAD DUP4 GAS DUP11 PUSH2 0xD4C SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0xD56 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST PUSH2 0xD60 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD7E SWAP3 SWAP2 SWAP1 PUSH2 0x3BC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDC3 PUSH2 0x1ADF JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFF4AAE494AAEDFF71FF8B04DE50A56543BB83CE05B033C3FB4A93E065C05FC DUP3 PUSH1 0x40 MLOAD PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0xD2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED7 SWAP1 PUSH2 0x3C36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEEB DUP4 PUSH2 0x253B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF13 DUP7 PUSH2 0xEFC SWAP1 PUSH2 0x3EAE JUMP JUMPDEST DUP7 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF0D SWAP2 SWAP1 PUSH2 0x404D JUMP JUMPDEST DUP5 PUSH2 0x255E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF2A JUMPI PUSH2 0xF29 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST PUSH1 0xC7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF5D JUMPI PUSH2 0xF5C PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST EQ PUSH2 0xF9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF94 SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFD4 JUMPI PUSH2 0xFD3 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0x4870363995D5B750BCCCA9D95E57044D630524AEC2EF09EBDB820AC11D866B4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x10DC JUMPI POP PUSH1 0xD2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x11EC JUMPI PUSH1 0x0 PUSH1 0xD0 SLOAD GAS DUP6 PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x10FC SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 GT ISZERO PUSH2 0x111D JUMPI POP POP POP POP PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0xCF PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x121D PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x1227 PUSH1 0x0 PUSH2 0x2762 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xCE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1260 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x128D JUMPI POP PUSH2 0x126F ADDRESS PUSH2 0x2828 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x128C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x12CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C3 SWAP1 PUSH2 0x40EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1309 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1313 DUP9 DUP9 PUSH2 0x284B JUMP JUMPDEST PUSH2 0x131B PUSH2 0x2A9A JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x138A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1381 SWAP1 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F0 SWAP1 PUSH2 0x41EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1468 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145F SWAP1 PUSH2 0x427C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14CE SWAP1 PUSH2 0x430E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE5D3D714 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1522 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1546 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0xC8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0xC9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0xCA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0xCB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xCC PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x7A120 PUSH1 0xCE DUP2 SWAP1 SSTORE POP PUSH2 0xEA60 PUSH1 0xD0 DUP2 SWAP1 SSTORE POP PUSH2 0x4E20 PUSH1 0xD1 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x171C JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x43B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x172E PUSH2 0x1898 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x179B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1792 SWAP1 PUSH2 0x441F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE2D2343D31B085B7C4E56D1C8A6EC79F7AB07460386F1C9A1756239FE2533AC DUP2 PUSH1 0x40 MLOAD PUSH2 0x17CA SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 PUSH1 0x95 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0xCF PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x63 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18CA PUSH2 0x1ADF JUMP JUMPDEST DUP2 PUSH1 0xD0 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xD1 DUP2 SWAP1 SSTORE POP PUSH32 0xB8DF1FBA472926F296225C210E366F62B21FEC23B8E1B6B0A375724798CA9C0A DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1909 SWAP3 SWAP2 SWAP1 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH5 0x2540BE400 DUP2 JUMP JUMPDEST PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1A64 PUSH2 0x1ADF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1AD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ACA SWAP1 PUSH2 0x44B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ADC DUP2 PUSH2 0x2762 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AE7 PUSH2 0x2AF3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B05 PUSH2 0x1898 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B52 SWAP1 PUSH2 0x451D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC23EE3C3 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0x0 PUSH1 0xCE SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BD2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4578 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C12 SWAP2 SWAP1 PUSH2 0x45AF JUMP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH2 0x1C21 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB02C43D0 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8A SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CCB SWAP2 SWAP1 PUSH2 0x472E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1D1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D11 SWAP1 PUSH2 0x47A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6C626AA4 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D77 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DB9 SWAP2 SWAP1 PUSH2 0x47C7 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP3 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x1DE1 JUMPI POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x1E20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E17 SWAP1 PUSH2 0x4879 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH5 0x2540BE400 DUP3 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x1E3F SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP5 POP PUSH2 0x1E53 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x2AFB JUMP JUMPDEST SWAP4 POP DUP2 PUSH1 0xC0 ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E7B DUP3 PUSH2 0x2CBA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT PUSH2 0x1EC0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EB7 SWAP1 PUSH2 0x4927 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A90A219 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F53 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F60 DUP3 PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE EQ PUSH2 0x1FA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9B SWAP1 PUSH2 0x49B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2013 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CEA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC5A5EBDA DUP5 PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x20B4 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x253B JUMP JUMPDEST PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20C7 SWAP2 SWAP1 PUSH2 0x49E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20F7 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4AB3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x213A SWAP2 SWAP1 PUSH2 0x4B1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2158 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2192 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x217F PUSH2 0x3174 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2177 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A8A0592 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x220D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2231 SWAP2 SWAP1 PUSH2 0x4B5D JUMP JUMPDEST PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2265 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x253B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x228C JUMPI PUSH2 0x228B PUSH2 0x4B8A JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x32B2FC0E DUP6 DUP6 PUSH2 0x22E1 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH1 0xCE SLOAD DUP9 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND CALLER PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2360 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CD7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x237E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23A3 SWAP2 SWAP1 PUSH2 0x4B1B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3DE39C11 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x241C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2440 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE25B5345 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24D5 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GASPRICE LT PUSH2 0x24E6 JUMPI DUP3 PUSH2 0x24E8 JUMP JUMPDEST GASPRICE JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x24FE JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2536 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 PUSH2 0x250C SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x2536 JUMP JUMPDEST DUP3 DUP2 PUSH2 0x252F SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25EC SWAP1 PUSH2 0x4E0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x260B PUSH2 0x2601 DUP7 PUSH2 0x2DFC JUMP JUMPDEST DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x2E43 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x86F01439 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x269A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH5 0x2540BE400 PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB02C43D0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26FF SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x271C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2740 SWAP2 SWAP1 PUSH2 0x472E JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2758 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x63 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x63 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x28F7 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2936 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x292D SWAP1 PUSH2 0x505A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x29A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x299C SWAP1 PUSH2 0x50C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A0B SWAP1 PUSH2 0x5132 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2AE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE0 SWAP1 PUSH2 0x51C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AF1 PUSH2 0x2E79 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH5 0x2540BE400 DUP4 DUP6 PUSH2 0x2B10 SWAP2 SWAP1 PUSH2 0x51E4 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2B24 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9B53F51 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BB9 SWAP2 SWAP1 PUSH2 0x5220 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2BD1 JUMPI PUSH1 0x0 PUSH2 0x2BDE JUMP JUMPDEST DUP2 DUP4 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC42B64D0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C72 SWAP2 SWAP1 PUSH2 0x524D JUMP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x0 PUSH5 0x2540BE400 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2C94 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP7 PUSH2 0x2CA3 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x2CAD SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0x2540BE400 DUP3 PUSH2 0x2CCD SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST SWAP2 POP PUSH5 0x2540BE400 DUP3 PUSH2 0x2CE0 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D27 SWAP3 SWAP2 SWAP1 PUSH2 0x52B4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D68 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH2 0x2DF6 DUP5 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH2 0x2D83 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D94 SWAP3 SWAP2 SWAP1 PUSH2 0x52DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x2EDA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E3C DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E28 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5363 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2FA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E58 SWAP3 SWAP2 SWAP1 PUSH2 0x5400 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2EC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EBF SWAP1 PUSH2 0x51C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2ED8 PUSH2 0x2ED3 PUSH2 0x2AF3 JUMP JUMPDEST PUSH2 0x2762 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F3C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2FCA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x2F5E JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2F5D SWAP2 SWAP1 PUSH2 0x5441 JUMP JUMPDEST JUMPDEST PUSH2 0x2F9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F94 SWAP1 PUSH2 0x54E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH1 0x2 GAS STATICCALL POP PUSH1 0x20 PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 PUSH1 0x2 GAS STATICCALL POP PUSH1 0x0 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FD9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2FE2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3027 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301E SWAP1 PUSH2 0x5572 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3050 SWAP2 SWAP1 PUSH2 0x5592 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x308D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3092 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x30A3 DUP8 DUP4 DUP4 DUP8 PUSH2 0x30AF JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3111 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x3109 JUMPI PUSH2 0x30C9 DUP6 PUSH2 0x2828 JUMP JUMPDEST PUSH2 0x3108 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30FF SWAP1 PUSH2 0x55F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x311C JUMP JUMPDEST PUSH2 0x311B DUP4 DUP4 PUSH2 0x3124 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x3137 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x316B SWAP2 SWAP1 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E5 DUP3 PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31F5 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP2 EQ PUSH2 0x3200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3212 DUP2 PUSH2 0x31EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322E JUMPI PUSH2 0x322D PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x323C DUP5 DUP3 DUP6 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x326A PUSH2 0x3265 PUSH2 0x3260 DUP5 PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C DUP3 PUSH2 0x324F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328E DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329E DUP2 PUSH2 0x3283 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3295 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D2 DUP2 PUSH2 0x32BF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32FC DUP2 PUSH2 0x32BF JUMP JUMPDEST DUP2 EQ PUSH2 0x3307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3319 DUP2 PUSH2 0x32F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3335 JUMPI PUSH2 0x3334 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3343 DUP5 DUP3 DUP6 ADD PUSH2 0x330A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3361 DUP2 PUSH2 0x334C JUMP JUMPDEST DUP2 EQ PUSH2 0x336C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x337E DUP2 PUSH2 0x3358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x339B JUMPI PUSH2 0x339A PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33A9 DUP6 DUP3 DUP7 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x33BA DUP6 DUP3 DUP7 ADD PUSH2 0x336F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33DF JUMPI PUSH2 0x33DE PUSH2 0x33C4 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33FE JUMPI PUSH2 0x33FD PUSH2 0x33C4 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3421 JUMPI PUSH2 0x3420 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x343F JUMPI PUSH2 0x343E PUSH2 0x31B5 JUMP JUMPDEST JUMPDEST PUSH2 0x344B DUP7 DUP3 DUP8 ADD PUSH2 0x33C9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x345C DUP7 DUP3 DUP8 ADD PUSH2 0x33E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x346D DUP7 DUP3 DUP8 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x3480 DUP2 PUSH2 0x334C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x349B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B8 DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x34C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34D5 DUP2 PUSH2 0x34AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x34FA JUMPI PUSH2 0x34F9 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3508 DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3519 DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x352A DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x353B DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x354C DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x355D DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x356E DUP11 DUP3 DUP12 ADD PUSH2 0x34C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3588 DUP3 PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359A DUP3 PUSH2 0x357D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35AA DUP2 PUSH2 0x358F JUMP JUMPDEST DUP2 EQ PUSH2 0x35B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35C7 DUP2 PUSH2 0x35A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35E3 JUMPI PUSH2 0x35E2 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35F1 DUP5 DUP3 DUP6 ADD PUSH2 0x35B8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3603 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x362A DUP2 PUSH2 0x3609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3645 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x3652 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3621 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3664 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3674 DUP2 PUSH2 0x3659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x368F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x366B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36C7 JUMPI PUSH2 0x36C6 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36D5 DUP6 DUP3 DUP7 ADD PUSH2 0x330A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36E6 DUP6 DUP3 DUP7 ADD PUSH2 0x330A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x3730 JUMPI PUSH2 0x372F PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x3741 DUP3 PUSH2 0x371F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3751 DUP3 PUSH2 0x3733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3761 DUP2 PUSH2 0x3746 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x377C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3758 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378D DUP3 PUSH2 0x324F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379F DUP3 PUSH2 0x3782 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37AF DUP2 PUSH2 0x3794 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37CA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x37D9 DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37F4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3805 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3815 DUP2 PUSH2 0x37FA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3830 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x380C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3841 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3851 DUP2 PUSH2 0x3836 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x386C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3848 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387D DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x388D DUP2 PUSH2 0x3872 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3884 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38B9 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x38C9 DUP2 PUSH2 0x38AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38E4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x38C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4C3220426974636F696E204465706F7369746F7220616C726561647920736574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3931 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x393C DUP3 PUSH2 0x38FB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3960 DUP2 PUSH2 0x3924 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C3220426974636F696E204465706F7369746F72206D757374206E6F74206265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030783000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39C3 PUSH1 0x24 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x39CE DUP3 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39F2 DUP2 PUSH2 0x39B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3A08 DUP2 PUSH2 0x32F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A24 JUMPI PUSH2 0x3A23 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A32 DUP5 DUP3 DUP6 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x57726F6E67206465706F73697420737461746500000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A71 PUSH1 0x13 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7C DUP3 PUSH2 0x3A3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AA0 DUP2 PUSH2 0x3A64 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3ABC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x3AC9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AEB PUSH2 0x3AE6 PUSH2 0x3AE1 DUP5 PUSH2 0x3609 JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x32BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AFB DUP2 PUSH2 0x3AD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B16 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3AF2 JUMP JUMPDEST PUSH2 0x3B23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B64 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6F DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B87 JUMPI PUSH2 0x3B86 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B98 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x3BA3 DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BBB JUMPI PUSH2 0x3BBA PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3BD6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x3BE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4C32206465706F736974206F776E6572206D757374206E6F7420626520307830 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C20 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3C2B DUP3 PUSH2 0x3BEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C4F DUP2 PUSH2 0x3C13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3CA4 DUP3 PUSH2 0x3C5B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3CC3 JUMPI PUSH2 0x3CC2 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD6 PUSH2 0x31A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CE2 DUP3 DUP3 PUSH2 0x3C9B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D21 DUP2 PUSH2 0x3CEC JUMP JUMPDEST DUP2 EQ PUSH2 0x3D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3D3E DUP2 PUSH2 0x3D18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3D69 JUMPI PUSH2 0x3D68 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST PUSH2 0x3D72 DUP3 PUSH2 0x3C5B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA1 PUSH2 0x3D9C DUP5 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3DBD JUMPI PUSH2 0x3DBC PUSH2 0x3D49 JUMP JUMPDEST JUMPDEST PUSH2 0x3DC8 DUP5 DUP3 DUP6 PUSH2 0x3D7F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DE5 JUMPI PUSH2 0x3DE4 PUSH2 0x3D44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DF5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E14 JUMPI PUSH2 0x3E13 PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x3E1E PUSH1 0x80 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E2E DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E52 JUMPI PUSH2 0x3E51 PUSH2 0x3CE7 JUMP JUMPDEST JUMPDEST PUSH2 0x3E5E DUP5 DUP3 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E82 JUMPI PUSH2 0x3E81 PUSH2 0x3CE7 JUMP JUMPDEST JUMPDEST PUSH2 0x3E8E DUP5 DUP3 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3EA2 DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EBA CALLDATASIZE DUP4 PUSH2 0x3DFE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EDA DUP2 PUSH2 0x3EC1 JUMP JUMPDEST DUP2 EQ PUSH2 0x3EE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3EF7 DUP2 PUSH2 0x3ED1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F32 DUP2 PUSH2 0x3EFD JUMP JUMPDEST DUP2 EQ PUSH2 0x3F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3F4F DUP2 PUSH2 0x3F29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F8A DUP2 PUSH2 0x3F55 JUMP JUMPDEST DUP2 EQ PUSH2 0x3F95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3FA7 DUP2 PUSH2 0x3F81 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FC3 JUMPI PUSH2 0x3FC2 PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x3FCD PUSH1 0xC0 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3FDD DUP5 DUP3 DUP6 ADD PUSH2 0x3EE8 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x3FF1 DUP5 DUP3 DUP6 ADD PUSH2 0x3F40 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x4005 DUP5 DUP3 DUP6 ADD PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x4019 DUP5 DUP3 DUP6 ADD PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x402D DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x4041 DUP5 DUP3 DUP6 ADD PUSH2 0x3203 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4063 JUMPI PUSH2 0x4062 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4071 DUP5 DUP3 DUP6 ADD PUSH2 0x3FAD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D6 PUSH1 0x2E DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x40E1 DUP3 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4105 DUP2 PUSH2 0x40C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6520616464726573732063616E6E6F74206265207A65726F00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4142 PUSH1 0x1F DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x414D DUP3 PUSH2 0x410C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4171 DUP2 PUSH2 0x4135 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6552656C6179657220616464726573732063616E6E6F742062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65207A65726F0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D4 PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x41DF DUP3 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4203 DUP2 PUSH2 0x41C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C65546F6B656E42726964676520616464726573732063616E6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206265207A65726F00000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4266 PUSH1 0x2A DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4271 DUP3 PUSH2 0x420A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4295 DUP2 PUSH2 0x4259 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C32576F726D686F6C654761746577617920616464726573732063616E6E6F74 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265207A65726F000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F8 PUSH1 0x28 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4303 DUP3 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4327 DUP2 PUSH2 0x42EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x433D DUP2 PUSH2 0x31EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4359 JUMPI PUSH2 0x4358 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4367 DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43A2 PUSH2 0x439D PUSH2 0x4398 DUP5 PUSH2 0x4370 JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x437A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x43B2 DUP2 PUSH2 0x4387 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x43CD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4409 PUSH1 0x17 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4414 DUP3 PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4438 DUP2 PUSH2 0x43FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449B PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x44A6 DUP3 PUSH2 0x443F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44CA DUP2 PUSH2 0x448E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4507 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4512 DUP3 PUSH2 0x44D1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4536 DUP2 PUSH2 0x44FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4562 PUSH2 0x455D PUSH2 0x4558 DUP5 PUSH2 0x453D JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x32BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4572 DUP2 PUSH2 0x4547 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x458D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x459A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4569 JUMP JUMPDEST PUSH2 0x45A7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x45C6 JUMPI PUSH2 0x45C5 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x45D4 DUP6 DUP3 DUP7 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x45E5 DUP6 DUP3 DUP7 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x460C DUP2 PUSH2 0x45EF JUMP JUMPDEST DUP2 EQ PUSH2 0x4617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4629 DUP2 PUSH2 0x4603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x463E DUP2 PUSH2 0x3ED1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4657 DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP2 EQ PUSH2 0x4662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4674 DUP2 PUSH2 0x464E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4690 JUMPI PUSH2 0x468F PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x469A PUSH1 0xE0 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x46AA DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x46BE DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x46D2 DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x46E6 DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x46FA DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x470E DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x4722 DUP5 DUP3 DUP6 ADD PUSH2 0x4665 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4744 JUMPI PUSH2 0x4743 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4752 DUP5 DUP3 DUP6 ADD PUSH2 0x467A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4465706F736974206E6F7420696E697469616C697A6564000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4791 PUSH1 0x17 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x479C DUP3 PUSH2 0x475B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47C0 DUP2 PUSH2 0x4784 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47DE JUMPI PUSH2 0x47DD PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x47EC DUP6 DUP3 DUP7 ADD PUSH2 0x461A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x47FD DUP6 DUP3 DUP7 ADD PUSH2 0x461A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4465706F736974206E6F742066696E616C697A65642062792074686520627269 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6467650000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4863 PUSH1 0x23 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x486E DUP3 PUSH2 0x4807 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4892 DUP2 PUSH2 0x4856 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A4 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x48AF DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x48BD DUP2 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x48D4 JUMPI PUSH2 0x48D3 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416D6F756E7420746F6F206C6F7720746F206272696467650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4911 PUSH1 0x18 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x491C DUP3 PUSH2 0x48DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4940 DUP2 PUSH2 0x4904 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061796D656E7420666F7220576F726D686F6C652052656C6179657220697320 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x746F6F206C6F7700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49A3 PUSH1 0x27 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x49AE DUP3 PUSH2 0x4947 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49D2 DUP2 PUSH2 0x4996 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x49E2 DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x49FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x49D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A1E PUSH2 0x4A19 PUSH2 0x4A14 DUP5 PUSH2 0x453D JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x3EC1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4A2E DUP2 PUSH2 0x4A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A6E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A53 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A85 DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x4A8F DUP2 DUP6 PUSH2 0x4A3F JUMP JUMPDEST SWAP4 POP PUSH2 0x4A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x4AA8 DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x4AC8 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x4AD5 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x4AE2 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4AEF PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x49D9 JUMP JUMPDEST PUSH2 0x4AFC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x4A25 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4B0E DUP2 DUP5 PUSH2 0x4A7A JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B31 JUMPI PUSH2 0x4B30 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4B3F DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4B57 DUP2 PUSH2 0x34AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B73 JUMPI PUSH2 0x4B72 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4B81 DUP5 DUP3 DUP6 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4BEE DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4BFD DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4C0C DUP2 PUSH2 0x45EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x4C28 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x4BE5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4C3B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4BF4 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4C4E PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4C03 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C60 DUP4 DUP4 PUSH2 0x4C12 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C84 DUP3 PUSH2 0x4BB9 JUMP JUMPDEST PUSH2 0x4C8E DUP2 DUP6 PUSH2 0x4BC4 JUMP JUMPDEST SWAP4 POP PUSH2 0x4C99 DUP4 PUSH2 0x4BD5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4CCA JUMPI DUP2 MLOAD PUSH2 0x4CB1 DUP9 DUP3 PUSH2 0x4C54 JUMP JUMPDEST SWAP8 POP PUSH2 0x4CBC DUP4 PUSH2 0x4C6C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4C9D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH2 0x4CED PUSH1 0x0 DUP4 ADD DUP12 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4CFA PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x35FA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4D0C DUP2 DUP10 PUSH2 0x4A7A JUMP JUMPDEST SWAP1 POP PUSH2 0x4D1B PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0x4569 JUMP JUMPDEST PUSH2 0x4D28 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x32C9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4D3A DUP2 DUP7 PUSH2 0x4C79 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D49 PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4D56 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D9D DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x4DA8 DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4DB8 JUMPI PUSH2 0x4DB7 PUSH2 0x4D63 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C742061646472657373206D69736D6174636800000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DF9 PUSH1 0x16 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4E04 DUP3 PUSH2 0x4DC3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4E28 DUP2 PUSH2 0x4DEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4E38 DUP2 PUSH2 0x3CEC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E5A DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x4E64 DUP2 DUP6 PUSH2 0x4E3E JUMP JUMPDEST SWAP4 POP PUSH2 0x4E74 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x4E7D DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x4EA0 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x4EB8 DUP3 DUP3 PUSH2 0x4E4F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x4ED2 DUP3 DUP3 PUSH2 0x4E4F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4EE7 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4EFB DUP2 PUSH2 0x3EC1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F0A DUP2 PUSH2 0x3EFD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F19 DUP2 PUSH2 0x3F55 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F28 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x4F44 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x4EF2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4F57 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4F01 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4F6A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4F10 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x4F7D PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4F10 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x4F90 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x4FA3 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x4F1F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4FC4 DUP2 DUP7 PUSH2 0x4E88 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FD3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4F2E JUMP JUMPDEST PUSH2 0x4FE0 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x49D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4162737472616374544254434465706F7369746F7220616C726561647920696E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x697469616C697A65640000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5044 PUSH1 0x29 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x504F DUP3 PUSH2 0x4FE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5073 DUP2 PUSH2 0x5037 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x42726964676520616464726573732063616E6E6F74206265207A65726F000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50B0 PUSH1 0x1D DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x50BB DUP3 PUSH2 0x507A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x50DF DUP2 PUSH2 0x50A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x544254435661756C7420616464726573732063616E6E6F74206265207A65726F PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x511C PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x5127 DUP3 PUSH2 0x50E6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x514B DUP2 PUSH2 0x510F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51AE PUSH1 0x2B DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x51B9 DUP3 PUSH2 0x5152 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x51DD DUP2 PUSH2 0x51A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51EF DUP3 PUSH2 0x45EF JUMP JUMPDEST SWAP2 POP PUSH2 0x51FA DUP4 PUSH2 0x45EF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x521A JUMPI PUSH2 0x5219 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5236 JUMPI PUSH2 0x5235 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5244 DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5267 JUMPI PUSH2 0x5266 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5275 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x5286 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x5297 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x52A8 DUP8 DUP3 DUP9 ADD PUSH2 0x462F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x52C9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x52D6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x52F2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x52FF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5321 PUSH2 0x531C DUP3 PUSH2 0x3CEC JUMP JUMPDEST PUSH2 0x5306 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x533D DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x5347 DUP2 DUP6 PUSH2 0x5327 JUMP JUMPDEST SWAP4 POP PUSH2 0x5357 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536F DUP3 DUP8 PUSH2 0x5310 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP PUSH2 0x537F DUP3 DUP7 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP PUSH2 0x538B DUP3 DUP6 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP PUSH2 0x5397 DUP3 DUP5 PUSH2 0x5310 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53C4 PUSH2 0x53BF DUP3 PUSH2 0x4644 JUMP JUMPDEST PUSH2 0x53A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53E2 DUP3 PUSH2 0x53CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53FA PUSH2 0x53F5 DUP3 PUSH2 0x3EC1 JUMP JUMPDEST PUSH2 0x53D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x540C DUP3 DUP6 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x541C DUP3 DUP5 PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x543B DUP2 PUSH2 0x3358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5457 JUMPI PUSH2 0x5456 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5465 DUP5 DUP3 DUP6 ADD PUSH2 0x542C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54CA PUSH1 0x2A DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x54D5 DUP3 PUSH2 0x546E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x54F9 DUP2 PUSH2 0x54BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555C PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x5567 DUP3 PUSH2 0x5500 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x558B DUP2 PUSH2 0x554F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x559E DUP3 DUP5 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x55DF PUSH1 0x1D DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x55EA DUP3 PUSH2 0x55A9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x560E DUP2 PUSH2 0x55D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x562B DUP3 PUSH2 0x5615 JUMP JUMPDEST PUSH2 0x5635 DUP2 DUP6 PUSH2 0x38EA JUMP JUMPDEST SWAP4 POP PUSH2 0x5645 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x564E DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5673 DUP2 DUP5 PUSH2 0x5620 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xB9 0xA6 0xD1 0xC3 0xAD 0xBF CODESIZE SWAP6 0x24 SIGNEXTEND PUSH11 0xF7A30681FA41F5D6F89A5 0xA7 0xC0 0xC3 0xD0 LOG0 DUP5 0xBD 0xE3 PUSH9 0x64736F6C6343000811 STOP CALLER ","sourceMap":"4405:27135:18:-:0;;;9151:53;;;;;;;;;;9175:22;:20;;;:22;;:::i;:::-;4405:27135;;5939:280:6;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:21:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;4405:27135:18:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@SATOSHI_MULTIPLIER_4396":{"entryPoint":6529,"id":4396,"parameterSlots":0,"returnSlots":0},"@__AbstractTBTCDepositor_initialize_4472":{"entryPoint":10315,"id":4472,"parameterSlots":2,"returnSlots":0},"@__Ownable_init_3027":{"entryPoint":10906,"id":3027,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_3038":{"entryPoint":11897,"id":3038,"parameterSlots":0,"returnSlots":0},"@_calculateBitcoinTxHash_4701":{"entryPoint":11772,"id":4701,"parameterSlots":1,"returnSlots":1},"@_calculateDepositKey_4677":{"entryPoint":11843,"id":4677,"parameterSlots":2,"returnSlots":1},"@_calculateTbtcAmount_4655":{"entryPoint":11003,"id":4655,"parameterSlots":2,"returnSlots":1},"@_callOptionalReturn_3742":{"entryPoint":11994,"id":3742,"parameterSlots":2,"returnSlots":0},"@_checkOwner_3069":{"entryPoint":6879,"id":3069,"parameterSlots":0,"returnSlots":0},"@_finalizeDeposit_4599":{"entryPoint":7209,"id":4599,"parameterSlots":1,"returnSlots":3},"@_initializeDeposit_4528":{"entryPoint":9566,"id":4528,"parameterSlots":3,"returnSlots":2},"@_msgSender_4149":{"entryPoint":10995,"id":4149,"parameterSlots":0,"returnSlots":1},"@_quoteFinalizeDeposit_5515":{"entryPoint":7005,"id":5515,"parameterSlots":1,"returnSlots":1},"@_refundToGasSpent_5476":{"entryPoint":9132,"id":5476,"parameterSlots":1,"returnSlots":1},"@_revert_4120":{"entryPoint":12580,"id":4120,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_3126":{"entryPoint":10082,"id":3126,"parameterSlots":1,"returnSlots":0},"@_transferTbtc_5644":{"entryPoint":7794,"id":5644,"parameterSlots":2,"returnSlots":0},"@attachL2BitcoinDepositor_5114":{"entryPoint":1706,"id":5114,"parameterSlots":1,"returnSlots":0},"@bridge_4400":{"entryPoint":6672,"id":4400,"parameterSlots":0,"returnSlots":0},"@deposits_4861":{"entryPoint":6459,"id":4861,"parameterSlots":0,"returnSlots":0},"@finalizeDepositGasOffset_4901":{"entryPoint":2076,"id":4901,"parameterSlots":0,"returnSlots":0},"@finalizeDeposit_5419":{"entryPoint":2321,"id":5419,"parameterSlots":1,"returnSlots":0},"@fromWormholeAddress_6054":{"entryPoint":7781,"id":6054,"parameterSlots":1,"returnSlots":1},"@functionCallWithValue_3945":{"entryPoint":12258,"id":3945,"parameterSlots":4,"returnSlots":1},"@functionCall_3881":{"entryPoint":12234,"id":3881,"parameterSlots":3,"returnSlots":1},"@gasReimbursements_4895":{"entryPoint":6166,"id":4895,"parameterSlots":0,"returnSlots":0},"@hash256View_652":{"entryPoint":12194,"id":652,"parameterSlots":1,"returnSlots":1},"@initializeDepositGasOffset_4898":{"entryPoint":2315,"id":4898,"parameterSlots":0,"returnSlots":0},"@initializeDeposit_5293":{"entryPoint":3692,"id":5293,"parameterSlots":3,"returnSlots":0},"@initialize_5081":{"entryPoint":4655,"id":5081,"parameterSlots":7,"returnSlots":0},"@isContract_3809":{"entryPoint":10280,"id":3809,"parameterSlots":1,"returnSlots":1},"@l2BitcoinDepositor_4886":{"entryPoint":6538,"id":4886,"parameterSlots":0,"returnSlots":0},"@l2ChainId_4883":{"entryPoint":6576,"id":4883,"parameterSlots":0,"returnSlots":0},"@l2FinalizeDepositGasLimit_4889":{"entryPoint":4649,"id":4889,"parameterSlots":0,"returnSlots":0},"@l2WormholeGateway_4880":{"entryPoint":6421,"id":4880,"parameterSlots":0,"returnSlots":0},"@normalize_6077":{"entryPoint":11450,"id":6077,"parameterSlots":1,"returnSlots":1},"@owner_3055":{"entryPoint":6296,"id":3055,"parameterSlots":0,"returnSlots":1},"@quoteFinalizeDeposit_5491":{"entryPoint":2155,"id":5491,"parameterSlots":0,"returnSlots":1},"@reimbursementAuthorizations_4906":{"entryPoint":4597,"id":4906,"parameterSlots":0,"returnSlots":0},"@reimbursementPool_2669":{"entryPoint":6491,"id":2669,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_3083":{"entryPoint":4629,"id":3083,"parameterSlots":0,"returnSlots":0},"@safeIncreaseAllowance_3556":{"entryPoint":11498,"id":3556,"parameterSlots":3,"returnSlots":0},"@tbtcToken_4865":{"entryPoint":6634,"id":4865,"parameterSlots":0,"returnSlots":0},"@tbtcVault_4404":{"entryPoint":2038,"id":4404,"parameterSlots":0,"returnSlots":0},"@toWormholeAddress_6034":{"entryPoint":9531,"id":6034,"parameterSlots":1,"returnSlots":1},"@transferOwnership_3106":{"entryPoint":6748,"id":3106,"parameterSlots":1,"returnSlots":0},"@updateGasOffsetParameters_5155":{"entryPoint":6338,"id":5155,"parameterSlots":2,"returnSlots":0},"@updateL2FinalizeDepositGasLimit_5131":{"entryPoint":2082,"id":5131,"parameterSlots":1,"returnSlots":0},"@updateReimbursementAuthorization_5177":{"entryPoint":3515,"id":5177,"parameterSlots":2,"returnSlots":0},"@updateReimbursementPool_2722":{"entryPoint":5926,"id":2722,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_4076":{"entryPoint":12463,"id":4076,"parameterSlots":4,"returnSlots":1},"@wormholeRelayer_4873":{"entryPoint":6596,"id":4873,"parameterSlots":0,"returnSlots":0},"@wormholeTokenBridge_4877":{"entryPoint":6710,"id":4877,"parameterSlots":0,"returnSlots":0},"@wormhole_4869":{"entryPoint":6258,"id":4869,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":15758,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":12803,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":17198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":13167,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":21548,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes20":{"entryPoint":16280,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":18021,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":15663,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes8":{"entryPoint":16192,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":15824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_contract$_ReimbursementPool_$2999":{"entryPoint":13752,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr":{"entryPoint":13257,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_BitcoinTxInfo_$4731_memory_ptr":{"entryPoint":15870,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory":{"entryPoint":18042,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr":{"entryPoint":13288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_DepositRevealInfo_$4744_memory_ptr":{"entryPoint":16301,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":13510,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16_fromMemory":{"entryPoint":19272,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13066,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":14841,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32":{"entryPoint":16104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":17967,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":17946,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":12824,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":17219,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint16":{"entryPoint":13531,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_bool":{"entryPoint":13188,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":21569,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_ReimbursementPool_$2999":{"entryPoint":13773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address":{"entryPoint":13319,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory":{"entryPoint":18222,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_DepositRevealInfo_$4744_memory_ptr":{"entryPoint":16461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint16_fromMemory":{"entryPoint":19293,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":13087,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":14862,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":14000,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256_fromMemory":{"entryPoint":17839,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint32_fromMemory":{"entryPoint":21024,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64_fromMemory":{"entryPoint":19227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64t_uint64_fromMemory":{"entryPoint":18375,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint64t_uint64t_uint32_fromMemory":{"entryPoint":21069,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encodeUpdatedPos_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr":{"entryPoint":19540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":20255,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":13818,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":19577,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13431,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes20_to_t_bytes20":{"entryPoint":20240,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":19444,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":18905,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":21427,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes4_to_t_bytes4":{"entryPoint":20015,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack":{"entryPoint":21264,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes8_to_t_bytes8":{"entryPoint":20225,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr":{"entryPoint":20047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":19066,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":21298,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IBridge_$4795_to_t_address_fromStack":{"entryPoint":14468,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IERC20Upgradeable_$3379_to_t_address_fromStack":{"entryPoint":14408,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_ITBTCVault_$4821_to_t_address_fromStack":{"entryPoint":12949,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack":{"entryPoint":14348,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IWormholeTokenBridge_$6013_to_t_address_fromStack":{"entryPoint":14528,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IWormhole_$5888_to_t_address_fromStack":{"entryPoint":13931,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_ReimbursementPool_$2999_to_t_address_payable_fromStack":{"entryPoint":14246,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_enum$_DepositState_$4848_to_t_uint8_fromStack":{"entryPoint":14168,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack":{"entryPoint":17769,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_0_by_1_to_t_uint32_fromStack":{"entryPoint":18981,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":17321,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":22048,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45_to_t_string_memory_ptr_fromStack":{"entryPoint":19948,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33_to_t_string_memory_ptr_fromStack":{"entryPoint":17404,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542_to_t_string_memory_ptr_fromStack":{"entryPoint":15379,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":17550,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c_to_t_string_memory_ptr_fromStack":{"entryPoint":14628,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506_to_t_string_memory_ptr_fromStack":{"entryPoint":20535,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b_to_t_string_memory_ptr_fromStack":{"entryPoint":14948,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":21839,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9_to_t_string_memory_ptr_fromStack":{"entryPoint":16985,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627_to_t_string_memory_ptr_fromStack":{"entryPoint":14774,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":16585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":17658,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack":{"entryPoint":16839,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68_to_t_string_memory_ptr_fromStack":{"entryPoint":18308,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4_to_t_string_memory_ptr_fromStack":{"entryPoint":20643,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac_to_t_string_memory_ptr_fromStack":{"entryPoint":18518,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45_to_t_string_memory_ptr_fromStack":{"entryPoint":18692,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9_to_t_string_memory_ptr_fromStack":{"entryPoint":16693,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":21970,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":20897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":21693,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4_to_t_string_memory_ptr_fromStack":{"entryPoint":20751,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc_to_t_string_memory_ptr_fromStack":{"entryPoint":18838,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack":{"entryPoint":17131,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_BitcoinTxInfo_$4731_memory_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack":{"entryPoint":20104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_struct$_DepositRevealInfo_$4744_memory_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack":{"entryPoint":20270,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr":{"entryPoint":19474,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16":{"entryPoint":19429,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":14288,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13001,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32":{"entryPoint":20210,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_nonPadded_inplace_fromStack":{"entryPoint":21481,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64":{"entryPoint":19459,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":15090,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96_fromStack":{"entryPoint":13857,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed":{"entryPoint":21504,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__to_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__nonPadded_inplace_fromStack_reversed":{"entryPoint":21347,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":21906,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":13973,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":21172,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":21213,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint16_t_bytes32_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_bytes32_t_uint32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":19123,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed":{"entryPoint":13872,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":13446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":18920,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IBridge_$4795__to_t_address__fromStack_reversed":{"entryPoint":14483,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20Upgradeable_$3379__to_t_address__fromStack_reversed":{"entryPoint":14423,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ITBTCVault_$4821__to_t_address__fromStack_reversed":{"entryPoint":12964,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed":{"entryPoint":14363,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IWormholeTokenBridge_$6013__to_t_address__fromStack_reversed":{"entryPoint":14543,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IWormhole_$5888__to_t_address__fromStack_reversed":{"entryPoint":13946,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ReimbursementPool_$2999__to_t_address_payable__fromStack_reversed":{"entryPoint":14261,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_DepositState_$4848__to_t_uint8__fromStack_reversed":{"entryPoint":14183,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":17336,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":22105,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":19983,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17439,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15414,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14663,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20570,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14983,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":21874,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17020,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14809,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17693,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16874,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18343,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20678,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18727,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16728,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":22005,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":21728,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":20786,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18873,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17166,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":20393,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":14303,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_rational_0_by_1_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__to_t_uint16_t_address_t_bytes_memory_ptr_t_uint256_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__fromStack_reversed":{"entryPoint":19671,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_uint16_t_rational_0_by_1_t_uint256__to_t_uint16_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":17784,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13016,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":15297,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":15015,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint96_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":15105,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":15564,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":12710,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":15694,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr":{"entryPoint":19413,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr":{"entryPoint":19385,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":18996,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":22037,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr":{"entryPoint":19564,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":19396,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr":{"entryPoint":20030,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":19007,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":21287,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14570,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15245,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":19858,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":18585,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15193,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint64":{"entryPoint":20964,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":12762,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":13693,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13132,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes20":{"entryPoint":16213,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":17988,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":15596,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes8":{"entryPoint":16125,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_contract$_ReimbursementPool_$2999":{"entryPoint":13711,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_DepositState_$4848":{"entryPoint":14131,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_0_by_1":{"entryPoint":17725,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":17264,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":13473,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":12730,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":12991,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":16065,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":17903,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":17274,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":13833,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IBridge_$4795_to_t_address":{"entryPoint":14450,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IERC20Upgradeable_$3379_to_t_address":{"entryPoint":14390,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_ITBTCVault_$4821_to_t_address":{"entryPoint":12931,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IWormholeRelayer_$5928_to_t_address":{"entryPoint":14330,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IWormholeTokenBridge_$6013_to_t_address":{"entryPoint":14510,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IWormhole_$5888_to_t_address":{"entryPoint":13913,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_ReimbursementPool_$2999_to_t_address_payable":{"entryPoint":14228,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_DepositState_$4848_to_t_uint8":{"entryPoint":14150,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_0_by_1_to_t_uint256":{"entryPoint":17735,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_0_by_1_to_t_uint32":{"entryPoint":18947,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":17287,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr":{"entryPoint":16046,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":12913,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address_payable":{"entryPoint":14210,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":12879,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":15056,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":15743,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":19024,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":15515,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12869,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":21417,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes4":{"entryPoint":21254,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint32":{"entryPoint":21463,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":15146,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":19811,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":14064,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":19338,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":15468,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":15684,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":13252,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":15446,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":15591,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":15689,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":12725,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":12720,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":15451,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_224":{"entryPoint":21450,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45":{"entryPoint":19907,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33":{"entryPoint":17363,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542":{"entryPoint":15338,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":17471,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c":{"entryPoint":14587,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506":{"entryPoint":20456,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b":{"entryPoint":14907,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":21760,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9":{"entryPoint":16906,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627":{"entryPoint":14695,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":16506,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":17617,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0":{"entryPoint":16760,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68":{"entryPoint":18267,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4":{"entryPoint":20602,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac":{"entryPoint":18439,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45":{"entryPoint":18651,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9":{"entryPoint":16652,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":21929,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":20818,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":21614,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4":{"entryPoint":20710,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc":{"entryPoint":18759,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349":{"entryPoint":17052,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_DepositState_$4848":{"entryPoint":14111,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":12780,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13144,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes20":{"entryPoint":16257,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":17998,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":15640,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes8":{"entryPoint":16169,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_contract$_ReimbursementPool_$2999":{"entryPoint":13729,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint16":{"entryPoint":13487,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13043,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":16081,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":17923,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:74398:21","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:21","statements":[{"nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:21"},"nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:21"},"nodeType":"YulFunctionCall","src":"187:12:21"},"nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:21"},"nodeType":"YulFunctionCall","src":"310:12:21"},"nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nodeType":"YulBlock","src":"379:81:21","statements":[{"nodeType":"YulAssignment","src":"389:65:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:21"},"nodeType":"YulFunctionCall","src":"400:54:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:21"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:21","type":""}],"src":"334:126:21"},{"body":{"nodeType":"YulBlock","src":"511:51:21","statements":[{"nodeType":"YulAssignment","src":"521:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:21"},"nodeType":"YulFunctionCall","src":"532:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:21"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:21","type":""}],"src":"466:96:21"},{"body":{"nodeType":"YulBlock","src":"611:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:21"},"nodeType":"YulFunctionCall","src":"670:12:21"},"nodeType":"YulExpressionStatement","src":"670:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:21"},"nodeType":"YulFunctionCall","src":"641:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:21"},"nodeType":"YulFunctionCall","src":"631:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:21"},"nodeType":"YulFunctionCall","src":"624:43:21"},"nodeType":"YulIf","src":"621:63:21"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:21","type":""}],"src":"568:122:21"},{"body":{"nodeType":"YulBlock","src":"748:87:21","statements":[{"nodeType":"YulAssignment","src":"758:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:21"},"nodeType":"YulFunctionCall","src":"767:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:21"},"nodeType":"YulFunctionCall","src":"796:33:21"},"nodeType":"YulExpressionStatement","src":"796:33:21"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:21","type":""}],"src":"696:139:21"},{"body":{"nodeType":"YulBlock","src":"907:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"953:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"955:77:21"},"nodeType":"YulFunctionCall","src":"955:79:21"},"nodeType":"YulExpressionStatement","src":"955:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"928:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"924:3:21"},"nodeType":"YulFunctionCall","src":"924:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"949:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"920:3:21"},"nodeType":"YulFunctionCall","src":"920:32:21"},"nodeType":"YulIf","src":"917:119:21"},{"nodeType":"YulBlock","src":"1046:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1061:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1075:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1065:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1090:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1125:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1121:3:21"},"nodeType":"YulFunctionCall","src":"1121:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1145:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1100:20:21"},"nodeType":"YulFunctionCall","src":"1100:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1090:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"877:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"888:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"900:6:21","type":""}],"src":"841:329:21"},{"body":{"nodeType":"YulBlock","src":"1208:28:21","statements":[{"nodeType":"YulAssignment","src":"1218:12:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1225:5:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1218:3:21"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1194:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1204:3:21","type":""}],"src":"1176:60:21"},{"body":{"nodeType":"YulBlock","src":"1302:82:21","statements":[{"nodeType":"YulAssignment","src":"1312:66:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1370:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1352:17:21"},"nodeType":"YulFunctionCall","src":"1352:24:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1343:8:21"},"nodeType":"YulFunctionCall","src":"1343:34:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1325:17:21"},"nodeType":"YulFunctionCall","src":"1325:53:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1312:9:21"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1282:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1292:9:21","type":""}],"src":"1242:142:21"},{"body":{"nodeType":"YulBlock","src":"1450:66:21","statements":[{"nodeType":"YulAssignment","src":"1460:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1504:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"1473:30:21"},"nodeType":"YulFunctionCall","src":"1473:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1460:9:21"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1430:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1440:9:21","type":""}],"src":"1390:126:21"},{"body":{"nodeType":"YulBlock","src":"1601:66:21","statements":[{"nodeType":"YulAssignment","src":"1611:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"1624:30:21"},"nodeType":"YulFunctionCall","src":"1624:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1611:9:21"}]}]},"name":"convert_t_contract$_ITBTCVault_$4821_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1581:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1591:9:21","type":""}],"src":"1522:145:21"},{"body":{"nodeType":"YulBlock","src":"1757:85:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1774:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1829:5:21"}],"functionName":{"name":"convert_t_contract$_ITBTCVault_$4821_to_t_address","nodeType":"YulIdentifier","src":"1779:49:21"},"nodeType":"YulFunctionCall","src":"1779:56:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1767:6:21"},"nodeType":"YulFunctionCall","src":"1767:69:21"},"nodeType":"YulExpressionStatement","src":"1767:69:21"}]},"name":"abi_encode_t_contract$_ITBTCVault_$4821_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1745:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1752:3:21","type":""}],"src":"1673:169:21"},{"body":{"nodeType":"YulBlock","src":"1965:143:21","statements":[{"nodeType":"YulAssignment","src":"1975:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1987:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1998:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1983:3:21"},"nodeType":"YulFunctionCall","src":"1983:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1975:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2074:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2087:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2098:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2083:3:21"},"nodeType":"YulFunctionCall","src":"2083:17:21"}],"functionName":{"name":"abi_encode_t_contract$_ITBTCVault_$4821_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2011:62:21"},"nodeType":"YulFunctionCall","src":"2011:90:21"},"nodeType":"YulExpressionStatement","src":"2011:90:21"}]},"name":"abi_encode_tuple_t_contract$_ITBTCVault_$4821__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1937:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1949:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1960:4:21","type":""}],"src":"1848:260:21"},{"body":{"nodeType":"YulBlock","src":"2159:32:21","statements":[{"nodeType":"YulAssignment","src":"2169:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"2180:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2169:7:21"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2141:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2151:7:21","type":""}],"src":"2114:77:21"},{"body":{"nodeType":"YulBlock","src":"2262:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2279:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2302:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2284:17:21"},"nodeType":"YulFunctionCall","src":"2284:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2272:6:21"},"nodeType":"YulFunctionCall","src":"2272:37:21"},"nodeType":"YulExpressionStatement","src":"2272:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2250:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2257:3:21","type":""}],"src":"2197:118:21"},{"body":{"nodeType":"YulBlock","src":"2419:124:21","statements":[{"nodeType":"YulAssignment","src":"2429:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2441:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2452:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2437:3:21"},"nodeType":"YulFunctionCall","src":"2437:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2429:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2509:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2522:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2533:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2518:3:21"},"nodeType":"YulFunctionCall","src":"2518:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2465:43:21"},"nodeType":"YulFunctionCall","src":"2465:71:21"},"nodeType":"YulExpressionStatement","src":"2465:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2391:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2403:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2414:4:21","type":""}],"src":"2321:222:21"},{"body":{"nodeType":"YulBlock","src":"2592:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"2649:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2658:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2661:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2651:6:21"},"nodeType":"YulFunctionCall","src":"2651:12:21"},"nodeType":"YulExpressionStatement","src":"2651:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2615:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2640:5:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2622:17:21"},"nodeType":"YulFunctionCall","src":"2622:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2612:2:21"},"nodeType":"YulFunctionCall","src":"2612:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2605:6:21"},"nodeType":"YulFunctionCall","src":"2605:43:21"},"nodeType":"YulIf","src":"2602:63:21"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2585:5:21","type":""}],"src":"2549:122:21"},{"body":{"nodeType":"YulBlock","src":"2729:87:21","statements":[{"nodeType":"YulAssignment","src":"2739:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2761:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2748:12:21"},"nodeType":"YulFunctionCall","src":"2748:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2739:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2804:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2777:26:21"},"nodeType":"YulFunctionCall","src":"2777:33:21"},"nodeType":"YulExpressionStatement","src":"2777:33:21"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2707:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2715:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2723:5:21","type":""}],"src":"2677:139:21"},{"body":{"nodeType":"YulBlock","src":"2888:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"2934:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2936:77:21"},"nodeType":"YulFunctionCall","src":"2936:79:21"},"nodeType":"YulExpressionStatement","src":"2936:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2909:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2918:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2905:3:21"},"nodeType":"YulFunctionCall","src":"2905:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2930:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2901:3:21"},"nodeType":"YulFunctionCall","src":"2901:32:21"},"nodeType":"YulIf","src":"2898:119:21"},{"nodeType":"YulBlock","src":"3027:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3042:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3056:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3046:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3071:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3106:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3117:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3102:3:21"},"nodeType":"YulFunctionCall","src":"3102:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3126:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3081:20:21"},"nodeType":"YulFunctionCall","src":"3081:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3071:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2858:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2869:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2881:6:21","type":""}],"src":"2822:329:21"},{"body":{"nodeType":"YulBlock","src":"3199:48:21","statements":[{"nodeType":"YulAssignment","src":"3209:32:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3234:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3227:6:21"},"nodeType":"YulFunctionCall","src":"3227:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3220:6:21"},"nodeType":"YulFunctionCall","src":"3220:21:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3209:7:21"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3181:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3191:7:21","type":""}],"src":"3157:90:21"},{"body":{"nodeType":"YulBlock","src":"3293:76:21","statements":[{"body":{"nodeType":"YulBlock","src":"3347:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3356:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3359:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3349:6:21"},"nodeType":"YulFunctionCall","src":"3349:12:21"},"nodeType":"YulExpressionStatement","src":"3349:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3316:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3338:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3323:14:21"},"nodeType":"YulFunctionCall","src":"3323:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3313:2:21"},"nodeType":"YulFunctionCall","src":"3313:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3306:6:21"},"nodeType":"YulFunctionCall","src":"3306:40:21"},"nodeType":"YulIf","src":"3303:60:21"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3286:5:21","type":""}],"src":"3253:116:21"},{"body":{"nodeType":"YulBlock","src":"3424:84:21","statements":[{"nodeType":"YulAssignment","src":"3434:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3456:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3443:12:21"},"nodeType":"YulFunctionCall","src":"3443:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3434:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3496:5:21"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"3472:23:21"},"nodeType":"YulFunctionCall","src":"3472:30:21"},"nodeType":"YulExpressionStatement","src":"3472:30:21"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3402:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3410:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3418:5:21","type":""}],"src":"3375:133:21"},{"body":{"nodeType":"YulBlock","src":"3594:388:21","statements":[{"body":{"nodeType":"YulBlock","src":"3640:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3642:77:21"},"nodeType":"YulFunctionCall","src":"3642:79:21"},"nodeType":"YulExpressionStatement","src":"3642:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3615:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3624:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3611:3:21"},"nodeType":"YulFunctionCall","src":"3611:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3636:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3607:3:21"},"nodeType":"YulFunctionCall","src":"3607:32:21"},"nodeType":"YulIf","src":"3604:119:21"},{"nodeType":"YulBlock","src":"3733:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3748:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3762:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3752:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3777:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3812:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3823:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3808:3:21"},"nodeType":"YulFunctionCall","src":"3808:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3832:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3787:20:21"},"nodeType":"YulFunctionCall","src":"3787:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3777:6:21"}]}]},{"nodeType":"YulBlock","src":"3860:115:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3875:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3889:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3879:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3905:60:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3937:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3948:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3933:3:21"},"nodeType":"YulFunctionCall","src":"3933:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3957:7:21"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"3915:17:21"},"nodeType":"YulFunctionCall","src":"3915:50:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3905:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3556:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3567:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3579:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3587:6:21","type":""}],"src":"3514:468:21"},{"body":{"nodeType":"YulBlock","src":"4077:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4094:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4097:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4087:6:21"},"nodeType":"YulFunctionCall","src":"4087:12:21"},"nodeType":"YulExpressionStatement","src":"4087:12:21"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"3988:117:21"},{"body":{"nodeType":"YulBlock","src":"4237:153:21","statements":[{"body":{"nodeType":"YulBlock","src":"4277:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"4279:77:21"},"nodeType":"YulFunctionCall","src":"4279:79:21"},"nodeType":"YulExpressionStatement","src":"4279:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"4258:3:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4263:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4254:3:21"},"nodeType":"YulFunctionCall","src":"4254:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"4272:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4250:3:21"},"nodeType":"YulFunctionCall","src":"4250:26:21"},"nodeType":"YulIf","src":"4247:113:21"},{"nodeType":"YulAssignment","src":"4369:15:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"4378:6:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4369:5:21"}]}]},"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4215:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"4223:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4231:5:21","type":""}],"src":"4152:238:21"},{"body":{"nodeType":"YulBlock","src":"4530:153:21","statements":[{"body":{"nodeType":"YulBlock","src":"4570:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"4572:77:21"},"nodeType":"YulFunctionCall","src":"4572:79:21"},"nodeType":"YulExpressionStatement","src":"4572:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"4551:3:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4556:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4547:3:21"},"nodeType":"YulFunctionCall","src":"4547:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"4565:3:21","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4543:3:21"},"nodeType":"YulFunctionCall","src":"4543:26:21"},"nodeType":"YulIf","src":"4540:113:21"},{"nodeType":"YulAssignment","src":"4662:15:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"4671:6:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4662:5:21"}]}]},"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4508:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"4516:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4524:5:21","type":""}],"src":"4441:242:21"},{"body":{"nodeType":"YulBlock","src":"4859:751:21","statements":[{"body":{"nodeType":"YulBlock","src":"4906:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4908:77:21"},"nodeType":"YulFunctionCall","src":"4908:79:21"},"nodeType":"YulExpressionStatement","src":"4908:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4880:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4889:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4876:3:21"},"nodeType":"YulFunctionCall","src":"4876:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4901:3:21","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4872:3:21"},"nodeType":"YulFunctionCall","src":"4872:33:21"},"nodeType":"YulIf","src":"4869:120:21"},{"nodeType":"YulBlock","src":"4999:310:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5045:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5056:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5041:3:21"},"nodeType":"YulFunctionCall","src":"5041:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5028:12:21"},"nodeType":"YulFunctionCall","src":"5028:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5018:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5106:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5108:77:21"},"nodeType":"YulFunctionCall","src":"5108:79:21"},"nodeType":"YulExpressionStatement","src":"5108:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5078:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5086:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5075:2:21"},"nodeType":"YulFunctionCall","src":"5075:30:21"},"nodeType":"YulIf","src":"5072:117:21"},{"nodeType":"YulAssignment","src":"5203:96:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5271:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5282:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5267:3:21"},"nodeType":"YulFunctionCall","src":"5267:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5291:7:21"}],"functionName":{"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr","nodeType":"YulIdentifier","src":"5213:53:21"},"nodeType":"YulFunctionCall","src":"5213:86:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5203:6:21"}]}]},{"nodeType":"YulBlock","src":"5319:155:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5334:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5348:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5338:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5364:100:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5436:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5447:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5432:3:21"},"nodeType":"YulFunctionCall","src":"5432:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5456:7:21"}],"functionName":{"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr","nodeType":"YulIdentifier","src":"5374:57:21"},"nodeType":"YulFunctionCall","src":"5374:90:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5364:6:21"}]}]},{"nodeType":"YulBlock","src":"5484:119:21","statements":[{"nodeType":"YulVariableDeclaration","src":"5499:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5513:3:21","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5503:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5530:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5565:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5576:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5561:3:21"},"nodeType":"YulFunctionCall","src":"5561:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5585:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5540:20:21"},"nodeType":"YulFunctionCall","src":"5540:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5530:6:21"}]}]}]},"name":"abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4813:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4824:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4836:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4844:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4852:6:21","type":""}],"src":"4689:921:21"},{"body":{"nodeType":"YulBlock","src":"5675:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5692:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5712:5:21"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5697:14:21"},"nodeType":"YulFunctionCall","src":"5697:21:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5685:6:21"},"nodeType":"YulFunctionCall","src":"5685:34:21"},"nodeType":"YulExpressionStatement","src":"5685:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5663:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5670:3:21","type":""}],"src":"5616:109:21"},{"body":{"nodeType":"YulBlock","src":"5823:118:21","statements":[{"nodeType":"YulAssignment","src":"5833:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5845:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5856:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5841:3:21"},"nodeType":"YulFunctionCall","src":"5841:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5833:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5907:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5920:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5931:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5916:3:21"},"nodeType":"YulFunctionCall","src":"5916:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"5869:37:21"},"nodeType":"YulFunctionCall","src":"5869:65:21"},"nodeType":"YulExpressionStatement","src":"5869:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5795:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5807:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5818:4:21","type":""}],"src":"5731:210:21"},{"body":{"nodeType":"YulBlock","src":"5991:45:21","statements":[{"nodeType":"YulAssignment","src":"6001:29:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6016:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6023:6:21","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6012:3:21"},"nodeType":"YulFunctionCall","src":"6012:18:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6001:7:21"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5973:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5983:7:21","type":""}],"src":"5947:89:21"},{"body":{"nodeType":"YulBlock","src":"6084:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"6140:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6149:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6152:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6142:6:21"},"nodeType":"YulFunctionCall","src":"6142:12:21"},"nodeType":"YulExpressionStatement","src":"6142:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6107:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6131:5:21"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"6114:16:21"},"nodeType":"YulFunctionCall","src":"6114:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6104:2:21"},"nodeType":"YulFunctionCall","src":"6104:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6097:6:21"},"nodeType":"YulFunctionCall","src":"6097:42:21"},"nodeType":"YulIf","src":"6094:62:21"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6077:5:21","type":""}],"src":"6042:120:21"},{"body":{"nodeType":"YulBlock","src":"6219:86:21","statements":[{"nodeType":"YulAssignment","src":"6229:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6251:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6238:12:21"},"nodeType":"YulFunctionCall","src":"6238:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6229:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6293:5:21"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"6267:25:21"},"nodeType":"YulFunctionCall","src":"6267:32:21"},"nodeType":"YulExpressionStatement","src":"6267:32:21"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6197:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"6205:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6213:5:21","type":""}],"src":"6168:137:21"},{"body":{"nodeType":"YulBlock","src":"6478:1034:21","statements":[{"body":{"nodeType":"YulBlock","src":"6525:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6527:77:21"},"nodeType":"YulFunctionCall","src":"6527:79:21"},"nodeType":"YulExpressionStatement","src":"6527:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6499:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6508:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6495:3:21"},"nodeType":"YulFunctionCall","src":"6495:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6520:3:21","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6491:3:21"},"nodeType":"YulFunctionCall","src":"6491:33:21"},"nodeType":"YulIf","src":"6488:120:21"},{"nodeType":"YulBlock","src":"6618:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6633:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6647:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6637:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6662:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6697:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6708:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6693:3:21"},"nodeType":"YulFunctionCall","src":"6693:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6717:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6672:20:21"},"nodeType":"YulFunctionCall","src":"6672:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6662:6:21"}]}]},{"nodeType":"YulBlock","src":"6745:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6760:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6774:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6764:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6790:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6825:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6836:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6821:3:21"},"nodeType":"YulFunctionCall","src":"6821:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6845:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6800:20:21"},"nodeType":"YulFunctionCall","src":"6800:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6790:6:21"}]}]},{"nodeType":"YulBlock","src":"6873:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6888:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6902:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6892:6:21","type":""}]},{"nodeType":"YulAssignment","src":"6918:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6953:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6964:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6949:3:21"},"nodeType":"YulFunctionCall","src":"6949:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6973:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6928:20:21"},"nodeType":"YulFunctionCall","src":"6928:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6918:6:21"}]}]},{"nodeType":"YulBlock","src":"7001:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7016:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7030:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7020:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7046:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7081:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7092:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7077:3:21"},"nodeType":"YulFunctionCall","src":"7077:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7101:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7056:20:21"},"nodeType":"YulFunctionCall","src":"7056:53:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7046:6:21"}]}]},{"nodeType":"YulBlock","src":"7129:119:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7144:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7158:3:21","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7148:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7175:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7210:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7221:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7206:3:21"},"nodeType":"YulFunctionCall","src":"7206:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7230:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7185:20:21"},"nodeType":"YulFunctionCall","src":"7185:53:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7175:6:21"}]}]},{"nodeType":"YulBlock","src":"7258:119:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7273:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7287:3:21","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7277:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7304:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7339:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7350:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7335:3:21"},"nodeType":"YulFunctionCall","src":"7335:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7359:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7314:20:21"},"nodeType":"YulFunctionCall","src":"7314:53:21"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7304:6:21"}]}]},{"nodeType":"YulBlock","src":"7387:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7402:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7416:3:21","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7406:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7433:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7467:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7478:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7463:3:21"},"nodeType":"YulFunctionCall","src":"7463:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7487:7:21"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"7443:19:21"},"nodeType":"YulFunctionCall","src":"7443:52:21"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7433:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6400:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6411:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6423:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6431:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6439:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6447:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6455:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6463:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6471:6:21","type":""}],"src":"6311:1201:21"},{"body":{"nodeType":"YulBlock","src":"7571:51:21","statements":[{"nodeType":"YulAssignment","src":"7581:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7610:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7592:17:21"},"nodeType":"YulFunctionCall","src":"7592:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7581:7:21"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7553:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7563:7:21","type":""}],"src":"7518:104:21"},{"body":{"nodeType":"YulBlock","src":"7699:59:21","statements":[{"nodeType":"YulAssignment","src":"7709:43:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7746:5:21"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"7720:25:21"},"nodeType":"YulFunctionCall","src":"7720:32:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7709:7:21"}]}]},"name":"cleanup_t_contract$_ReimbursementPool_$2999","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7681:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7691:7:21","type":""}],"src":"7628:130:21"},{"body":{"nodeType":"YulBlock","src":"7833:105:21","statements":[{"body":{"nodeType":"YulBlock","src":"7916:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7925:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7928:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7918:6:21"},"nodeType":"YulFunctionCall","src":"7918:12:21"},"nodeType":"YulExpressionStatement","src":"7918:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7856:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7907:5:21"}],"functionName":{"name":"cleanup_t_contract$_ReimbursementPool_$2999","nodeType":"YulIdentifier","src":"7863:43:21"},"nodeType":"YulFunctionCall","src":"7863:50:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7853:2:21"},"nodeType":"YulFunctionCall","src":"7853:61:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7846:6:21"},"nodeType":"YulFunctionCall","src":"7846:69:21"},"nodeType":"YulIf","src":"7843:89:21"}]},"name":"validator_revert_t_contract$_ReimbursementPool_$2999","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7826:5:21","type":""}],"src":"7764:174:21"},{"body":{"nodeType":"YulBlock","src":"8022:113:21","statements":[{"nodeType":"YulAssignment","src":"8032:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8054:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8041:12:21"},"nodeType":"YulFunctionCall","src":"8041:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8032:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8123:5:21"}],"functionName":{"name":"validator_revert_t_contract$_ReimbursementPool_$2999","nodeType":"YulIdentifier","src":"8070:52:21"},"nodeType":"YulFunctionCall","src":"8070:59:21"},"nodeType":"YulExpressionStatement","src":"8070:59:21"}]},"name":"abi_decode_t_contract$_ReimbursementPool_$2999","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8000:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"8008:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8016:5:21","type":""}],"src":"7944:191:21"},{"body":{"nodeType":"YulBlock","src":"8233:289:21","statements":[{"body":{"nodeType":"YulBlock","src":"8279:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8281:77:21"},"nodeType":"YulFunctionCall","src":"8281:79:21"},"nodeType":"YulExpressionStatement","src":"8281:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8254:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8263:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8250:3:21"},"nodeType":"YulFunctionCall","src":"8250:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8275:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8246:3:21"},"nodeType":"YulFunctionCall","src":"8246:32:21"},"nodeType":"YulIf","src":"8243:119:21"},{"nodeType":"YulBlock","src":"8372:143:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8387:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"8401:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8391:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8416:89:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8477:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8488:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:21"},"nodeType":"YulFunctionCall","src":"8473:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8497:7:21"}],"functionName":{"name":"abi_decode_t_contract$_ReimbursementPool_$2999","nodeType":"YulIdentifier","src":"8426:46:21"},"nodeType":"YulFunctionCall","src":"8426:79:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8416:6:21"}]}]}]},"name":"abi_decode_tuple_t_contract$_ReimbursementPool_$2999","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8203:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8214:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8226:6:21","type":""}],"src":"8141:381:21"},{"body":{"nodeType":"YulBlock","src":"8593:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8610:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8633:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"8615:17:21"},"nodeType":"YulFunctionCall","src":"8615:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8603:6:21"},"nodeType":"YulFunctionCall","src":"8603:37:21"},"nodeType":"YulExpressionStatement","src":"8603:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8581:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8588:3:21","type":""}],"src":"8528:118:21"},{"body":{"nodeType":"YulBlock","src":"8696:65:21","statements":[{"nodeType":"YulAssignment","src":"8706:49:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8721:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"8728:26:21","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8717:3:21"},"nodeType":"YulFunctionCall","src":"8717:38:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8706:7:21"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8678:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8688:7:21","type":""}],"src":"8652:109:21"},{"body":{"nodeType":"YulBlock","src":"8830:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8847:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8869:5:21"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"8852:16:21"},"nodeType":"YulFunctionCall","src":"8852:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8840:6:21"},"nodeType":"YulFunctionCall","src":"8840:36:21"},"nodeType":"YulExpressionStatement","src":"8840:36:21"}]},"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8818:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8825:3:21","type":""}],"src":"8767:115:21"},{"body":{"nodeType":"YulBlock","src":"9012:204:21","statements":[{"nodeType":"YulAssignment","src":"9022:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9034:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9045:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9030:3:21"},"nodeType":"YulFunctionCall","src":"9030:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9022:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9102:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9115:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9126:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9111:3:21"},"nodeType":"YulFunctionCall","src":"9111:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9058:43:21"},"nodeType":"YulFunctionCall","src":"9058:71:21"},"nodeType":"YulExpressionStatement","src":"9058:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9181:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9194:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9205:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9190:3:21"},"nodeType":"YulFunctionCall","src":"9190:18:21"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"9139:41:21"},"nodeType":"YulFunctionCall","src":"9139:70:21"},"nodeType":"YulExpressionStatement","src":"9139:70:21"}]},"name":"abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8976:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8988:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8996:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9007:4:21","type":""}],"src":"8888:328:21"},{"body":{"nodeType":"YulBlock","src":"9300:66:21","statements":[{"nodeType":"YulAssignment","src":"9310:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9354:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"9323:30:21"},"nodeType":"YulFunctionCall","src":"9323:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9310:9:21"}]}]},"name":"convert_t_contract$_IWormhole_$5888_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9280:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9290:9:21","type":""}],"src":"9222:144:21"},{"body":{"nodeType":"YulBlock","src":"9455:84:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9472:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9526:5:21"}],"functionName":{"name":"convert_t_contract$_IWormhole_$5888_to_t_address","nodeType":"YulIdentifier","src":"9477:48:21"},"nodeType":"YulFunctionCall","src":"9477:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9465:6:21"},"nodeType":"YulFunctionCall","src":"9465:68:21"},"nodeType":"YulExpressionStatement","src":"9465:68:21"}]},"name":"abi_encode_t_contract$_IWormhole_$5888_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9443:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9450:3:21","type":""}],"src":"9372:167:21"},{"body":{"nodeType":"YulBlock","src":"9661:142:21","statements":[{"nodeType":"YulAssignment","src":"9671:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9683:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9694:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9679:3:21"},"nodeType":"YulFunctionCall","src":"9679:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9671:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9769:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9782:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9793:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9778:3:21"},"nodeType":"YulFunctionCall","src":"9778:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IWormhole_$5888_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9707:61:21"},"nodeType":"YulFunctionCall","src":"9707:89:21"},"nodeType":"YulExpressionStatement","src":"9707:89:21"}]},"name":"abi_encode_tuple_t_contract$_IWormhole_$5888__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9633:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9645:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9656:4:21","type":""}],"src":"9545:258:21"},{"body":{"nodeType":"YulBlock","src":"9907:124:21","statements":[{"nodeType":"YulAssignment","src":"9917:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9929:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9940:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9925:3:21"},"nodeType":"YulFunctionCall","src":"9925:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9917:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9997:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10010:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10021:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10006:3:21"},"nodeType":"YulFunctionCall","src":"10006:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9953:43:21"},"nodeType":"YulFunctionCall","src":"9953:71:21"},"nodeType":"YulExpressionStatement","src":"9953:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9879:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9891:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9902:4:21","type":""}],"src":"9809:222:21"},{"body":{"nodeType":"YulBlock","src":"10120:391:21","statements":[{"body":{"nodeType":"YulBlock","src":"10166:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10168:77:21"},"nodeType":"YulFunctionCall","src":"10168:79:21"},"nodeType":"YulExpressionStatement","src":"10168:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10141:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10150:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10137:3:21"},"nodeType":"YulFunctionCall","src":"10137:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10162:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10133:3:21"},"nodeType":"YulFunctionCall","src":"10133:32:21"},"nodeType":"YulIf","src":"10130:119:21"},{"nodeType":"YulBlock","src":"10259:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10274:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"10288:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10278:6:21","type":""}]},{"nodeType":"YulAssignment","src":"10303:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10338:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10349:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10334:3:21"},"nodeType":"YulFunctionCall","src":"10334:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10358:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10313:20:21"},"nodeType":"YulFunctionCall","src":"10313:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10303:6:21"}]}]},{"nodeType":"YulBlock","src":"10386:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10401:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"10415:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10405:6:21","type":""}]},{"nodeType":"YulAssignment","src":"10431:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10466:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"10477:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10462:3:21"},"nodeType":"YulFunctionCall","src":"10462:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10486:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10441:20:21"},"nodeType":"YulFunctionCall","src":"10441:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10431:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10082:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10093:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10105:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10113:6:21","type":""}],"src":"10037:474:21"},{"body":{"nodeType":"YulBlock","src":"10545:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10562:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10565:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10555:6:21"},"nodeType":"YulFunctionCall","src":"10555:88:21"},"nodeType":"YulExpressionStatement","src":"10555:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10659:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10662:4:21","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10652:6:21"},"nodeType":"YulFunctionCall","src":"10652:15:21"},"nodeType":"YulExpressionStatement","src":"10652:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10683:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10686:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10676:6:21"},"nodeType":"YulFunctionCall","src":"10676:15:21"},"nodeType":"YulExpressionStatement","src":"10676:15:21"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"10517:180:21"},{"body":{"nodeType":"YulBlock","src":"10763:62:21","statements":[{"body":{"nodeType":"YulBlock","src":"10797:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"10799:16:21"},"nodeType":"YulFunctionCall","src":"10799:18:21"},"nodeType":"YulExpressionStatement","src":"10799:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10786:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10793:1:21","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10783:2:21"},"nodeType":"YulFunctionCall","src":"10783:12:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10776:6:21"},"nodeType":"YulFunctionCall","src":"10776:20:21"},"nodeType":"YulIf","src":"10773:46:21"}]},"name":"validator_assert_t_enum$_DepositState_$4848","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10756:5:21","type":""}],"src":"10703:122:21"},{"body":{"nodeType":"YulBlock","src":"10893:83:21","statements":[{"nodeType":"YulAssignment","src":"10903:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"10914:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10903:7:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10964:5:21"}],"functionName":{"name":"validator_assert_t_enum$_DepositState_$4848","nodeType":"YulIdentifier","src":"10920:43:21"},"nodeType":"YulFunctionCall","src":"10920:50:21"},"nodeType":"YulExpressionStatement","src":"10920:50:21"}]},"name":"cleanup_t_enum$_DepositState_$4848","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10875:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10885:7:21","type":""}],"src":"10831:145:21"},{"body":{"nodeType":"YulBlock","src":"11057:70:21","statements":[{"nodeType":"YulAssignment","src":"11067:54:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11115:5:21"}],"functionName":{"name":"cleanup_t_enum$_DepositState_$4848","nodeType":"YulIdentifier","src":"11080:34:21"},"nodeType":"YulFunctionCall","src":"11080:41:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11067:9:21"}]}]},"name":"convert_t_enum$_DepositState_$4848_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11037:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11047:9:21","type":""}],"src":"10982:145:21"},{"body":{"nodeType":"YulBlock","src":"11213:81:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11230:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11281:5:21"}],"functionName":{"name":"convert_t_enum$_DepositState_$4848_to_t_uint8","nodeType":"YulIdentifier","src":"11235:45:21"},"nodeType":"YulFunctionCall","src":"11235:52:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11223:6:21"},"nodeType":"YulFunctionCall","src":"11223:65:21"},"nodeType":"YulExpressionStatement","src":"11223:65:21"}]},"name":"abi_encode_t_enum$_DepositState_$4848_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11201:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11208:3:21","type":""}],"src":"11133:161:21"},{"body":{"nodeType":"YulBlock","src":"11413:139:21","statements":[{"nodeType":"YulAssignment","src":"11423:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11435:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11446:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11431:3:21"},"nodeType":"YulFunctionCall","src":"11431:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11423:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11518:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11531:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11542:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11527:3:21"},"nodeType":"YulFunctionCall","src":"11527:17:21"}],"functionName":{"name":"abi_encode_t_enum$_DepositState_$4848_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"11459:58:21"},"nodeType":"YulFunctionCall","src":"11459:86:21"},"nodeType":"YulExpressionStatement","src":"11459:86:21"}]},"name":"abi_encode_tuple_t_enum$_DepositState_$4848__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11385:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11397:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11408:4:21","type":""}],"src":"11300:252:21"},{"body":{"nodeType":"YulBlock","src":"11626:66:21","statements":[{"nodeType":"YulAssignment","src":"11636:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11680:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"11649:30:21"},"nodeType":"YulFunctionCall","src":"11649:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11636:9:21"}]}]},"name":"convert_t_uint160_to_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11606:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11616:9:21","type":""}],"src":"11558:134:21"},{"body":{"nodeType":"YulBlock","src":"11792:74:21","statements":[{"nodeType":"YulAssignment","src":"11802:58:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11854:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address_payable","nodeType":"YulIdentifier","src":"11815:38:21"},"nodeType":"YulFunctionCall","src":"11815:45:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11802:9:21"}]}]},"name":"convert_t_contract$_ReimbursementPool_$2999_to_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11772:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11782:9:21","type":""}],"src":"11698:168:21"},{"body":{"nodeType":"YulBlock","src":"11971:100:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11988:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12058:5:21"}],"functionName":{"name":"convert_t_contract$_ReimbursementPool_$2999_to_t_address_payable","nodeType":"YulIdentifier","src":"11993:64:21"},"nodeType":"YulFunctionCall","src":"11993:71:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11981:6:21"},"nodeType":"YulFunctionCall","src":"11981:84:21"},"nodeType":"YulExpressionStatement","src":"11981:84:21"}]},"name":"abi_encode_t_contract$_ReimbursementPool_$2999_to_t_address_payable_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11959:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11966:3:21","type":""}],"src":"11872:199:21"},{"body":{"nodeType":"YulBlock","src":"12209:158:21","statements":[{"nodeType":"YulAssignment","src":"12219:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12231:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12242:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12227:3:21"},"nodeType":"YulFunctionCall","src":"12227:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12219:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12333:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12346:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12357:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12342:3:21"},"nodeType":"YulFunctionCall","src":"12342:17:21"}],"functionName":{"name":"abi_encode_t_contract$_ReimbursementPool_$2999_to_t_address_payable_fromStack","nodeType":"YulIdentifier","src":"12255:77:21"},"nodeType":"YulFunctionCall","src":"12255:105:21"},"nodeType":"YulExpressionStatement","src":"12255:105:21"}]},"name":"abi_encode_tuple_t_contract$_ReimbursementPool_$2999__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12181:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12193:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12204:4:21","type":""}],"src":"12077:290:21"},{"body":{"nodeType":"YulBlock","src":"12436:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12453:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12475:5:21"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"12458:16:21"},"nodeType":"YulFunctionCall","src":"12458:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12446:6:21"},"nodeType":"YulFunctionCall","src":"12446:36:21"},"nodeType":"YulExpressionStatement","src":"12446:36:21"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12424:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12431:3:21","type":""}],"src":"12373:115:21"},{"body":{"nodeType":"YulBlock","src":"12590:122:21","statements":[{"nodeType":"YulAssignment","src":"12600:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12612:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12623:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:21"},"nodeType":"YulFunctionCall","src":"12608:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12600:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12678:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12691:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12702:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12687:3:21"},"nodeType":"YulFunctionCall","src":"12687:17:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"12636:41:21"},"nodeType":"YulFunctionCall","src":"12636:69:21"},"nodeType":"YulExpressionStatement","src":"12636:69:21"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12562:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12574:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12585:4:21","type":""}],"src":"12494:218:21"},{"body":{"nodeType":"YulBlock","src":"12803:66:21","statements":[{"nodeType":"YulAssignment","src":"12813:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12857:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"12826:30:21"},"nodeType":"YulFunctionCall","src":"12826:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"12813:9:21"}]}]},"name":"convert_t_contract$_IWormholeRelayer_$5928_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12783:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"12793:9:21","type":""}],"src":"12718:151:21"},{"body":{"nodeType":"YulBlock","src":"12965:91:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12982:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13043:5:21"}],"functionName":{"name":"convert_t_contract$_IWormholeRelayer_$5928_to_t_address","nodeType":"YulIdentifier","src":"12987:55:21"},"nodeType":"YulFunctionCall","src":"12987:62:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12975:6:21"},"nodeType":"YulFunctionCall","src":"12975:75:21"},"nodeType":"YulExpressionStatement","src":"12975:75:21"}]},"name":"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12953:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12960:3:21","type":""}],"src":"12875:181:21"},{"body":{"nodeType":"YulBlock","src":"13185:149:21","statements":[{"nodeType":"YulAssignment","src":"13195:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13207:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13218:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13203:3:21"},"nodeType":"YulFunctionCall","src":"13203:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13195:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13300:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13313:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13324:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13309:3:21"},"nodeType":"YulFunctionCall","src":"13309:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13231:68:21"},"nodeType":"YulFunctionCall","src":"13231:96:21"},"nodeType":"YulExpressionStatement","src":"13231:96:21"}]},"name":"abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13157:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13169:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13180:4:21","type":""}],"src":"13062:272:21"},{"body":{"nodeType":"YulBlock","src":"13426:66:21","statements":[{"nodeType":"YulAssignment","src":"13436:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13480:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"13449:30:21"},"nodeType":"YulFunctionCall","src":"13449:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13436:9:21"}]}]},"name":"convert_t_contract$_IERC20Upgradeable_$3379_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13406:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13416:9:21","type":""}],"src":"13340:152:21"},{"body":{"nodeType":"YulBlock","src":"13589:92:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13606:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13668:5:21"}],"functionName":{"name":"convert_t_contract$_IERC20Upgradeable_$3379_to_t_address","nodeType":"YulIdentifier","src":"13611:56:21"},"nodeType":"YulFunctionCall","src":"13611:63:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13599:6:21"},"nodeType":"YulFunctionCall","src":"13599:76:21"},"nodeType":"YulExpressionStatement","src":"13599:76:21"}]},"name":"abi_encode_t_contract$_IERC20Upgradeable_$3379_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13577:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13584:3:21","type":""}],"src":"13498:183:21"},{"body":{"nodeType":"YulBlock","src":"13811:150:21","statements":[{"nodeType":"YulAssignment","src":"13821:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13833:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13844:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13829:3:21"},"nodeType":"YulFunctionCall","src":"13829:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13821:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13927:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13940:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13951:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13936:3:21"},"nodeType":"YulFunctionCall","src":"13936:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IERC20Upgradeable_$3379_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13857:69:21"},"nodeType":"YulFunctionCall","src":"13857:97:21"},"nodeType":"YulExpressionStatement","src":"13857:97:21"}]},"name":"abi_encode_tuple_t_contract$_IERC20Upgradeable_$3379__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13783:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13795:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13806:4:21","type":""}],"src":"13687:274:21"},{"body":{"nodeType":"YulBlock","src":"14043:66:21","statements":[{"nodeType":"YulAssignment","src":"14053:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14097:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"14066:30:21"},"nodeType":"YulFunctionCall","src":"14066:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"14053:9:21"}]}]},"name":"convert_t_contract$_IBridge_$4795_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14023:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"14033:9:21","type":""}],"src":"13967:142:21"},{"body":{"nodeType":"YulBlock","src":"14196:82:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14213:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14265:5:21"}],"functionName":{"name":"convert_t_contract$_IBridge_$4795_to_t_address","nodeType":"YulIdentifier","src":"14218:46:21"},"nodeType":"YulFunctionCall","src":"14218:53:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14206:6:21"},"nodeType":"YulFunctionCall","src":"14206:66:21"},"nodeType":"YulExpressionStatement","src":"14206:66:21"}]},"name":"abi_encode_t_contract$_IBridge_$4795_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14184:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14191:3:21","type":""}],"src":"14115:163:21"},{"body":{"nodeType":"YulBlock","src":"14398:140:21","statements":[{"nodeType":"YulAssignment","src":"14408:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14420:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14431:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14416:3:21"},"nodeType":"YulFunctionCall","src":"14416:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14408:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14504:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14517:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14528:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14513:3:21"},"nodeType":"YulFunctionCall","src":"14513:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IBridge_$4795_to_t_address_fromStack","nodeType":"YulIdentifier","src":"14444:59:21"},"nodeType":"YulFunctionCall","src":"14444:87:21"},"nodeType":"YulExpressionStatement","src":"14444:87:21"}]},"name":"abi_encode_tuple_t_contract$_IBridge_$4795__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14370:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14382:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14393:4:21","type":""}],"src":"14284:254:21"},{"body":{"nodeType":"YulBlock","src":"14633:66:21","statements":[{"nodeType":"YulAssignment","src":"14643:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14687:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"14656:30:21"},"nodeType":"YulFunctionCall","src":"14656:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"14643:9:21"}]}]},"name":"convert_t_contract$_IWormholeTokenBridge_$6013_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14613:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"14623:9:21","type":""}],"src":"14544:155:21"},{"body":{"nodeType":"YulBlock","src":"14799:95:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14816:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14881:5:21"}],"functionName":{"name":"convert_t_contract$_IWormholeTokenBridge_$6013_to_t_address","nodeType":"YulIdentifier","src":"14821:59:21"},"nodeType":"YulFunctionCall","src":"14821:66:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14809:6:21"},"nodeType":"YulFunctionCall","src":"14809:79:21"},"nodeType":"YulExpressionStatement","src":"14809:79:21"}]},"name":"abi_encode_t_contract$_IWormholeTokenBridge_$6013_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14787:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14794:3:21","type":""}],"src":"14705:189:21"},{"body":{"nodeType":"YulBlock","src":"15027:153:21","statements":[{"nodeType":"YulAssignment","src":"15037:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15049:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15060:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15045:3:21"},"nodeType":"YulFunctionCall","src":"15045:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15037:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15146:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15159:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15170:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15155:3:21"},"nodeType":"YulFunctionCall","src":"15155:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IWormholeTokenBridge_$6013_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15073:72:21"},"nodeType":"YulFunctionCall","src":"15073:100:21"},"nodeType":"YulExpressionStatement","src":"15073:100:21"}]},"name":"abi_encode_tuple_t_contract$_IWormholeTokenBridge_$6013__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14999:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15011:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15022:4:21","type":""}],"src":"14900:280:21"},{"body":{"nodeType":"YulBlock","src":"15282:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15299:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"15304:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15292:6:21"},"nodeType":"YulFunctionCall","src":"15292:19:21"},"nodeType":"YulExpressionStatement","src":"15292:19:21"},{"nodeType":"YulAssignment","src":"15320:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15339:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15344:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15335:3:21"},"nodeType":"YulFunctionCall","src":"15335:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15320:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15254:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"15259:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15270:11:21","type":""}],"src":"15186:169:21"},{"body":{"nodeType":"YulBlock","src":"15467:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15489:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15497:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15485:3:21"},"nodeType":"YulFunctionCall","src":"15485:14:21"},{"hexValue":"4c3220426974636f696e204465706f7369746f7220616c726561647920736574","kind":"string","nodeType":"YulLiteral","src":"15501:34:21","type":"","value":"L2 Bitcoin Depositor already set"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15478:6:21"},"nodeType":"YulFunctionCall","src":"15478:58:21"},"nodeType":"YulExpressionStatement","src":"15478:58:21"}]},"name":"store_literal_in_memory_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15459:6:21","type":""}],"src":"15361:182:21"},{"body":{"nodeType":"YulBlock","src":"15695:220:21","statements":[{"nodeType":"YulAssignment","src":"15705:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15771:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15776:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15712:58:21"},"nodeType":"YulFunctionCall","src":"15712:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15705:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15877:3:21"}],"functionName":{"name":"store_literal_in_memory_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c","nodeType":"YulIdentifier","src":"15788:88:21"},"nodeType":"YulFunctionCall","src":"15788:93:21"},"nodeType":"YulExpressionStatement","src":"15788:93:21"},{"nodeType":"YulAssignment","src":"15890:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15901:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15906:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15897:3:21"},"nodeType":"YulFunctionCall","src":"15897:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15890:3:21"}]}]},"name":"abi_encode_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15683:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15691:3:21","type":""}],"src":"15549:366:21"},{"body":{"nodeType":"YulBlock","src":"16092:248:21","statements":[{"nodeType":"YulAssignment","src":"16102:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16114:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16125:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16110:3:21"},"nodeType":"YulFunctionCall","src":"16110:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16102:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16149:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16160:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16145:3:21"},"nodeType":"YulFunctionCall","src":"16145:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16168:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16174:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16164:3:21"},"nodeType":"YulFunctionCall","src":"16164:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16138:6:21"},"nodeType":"YulFunctionCall","src":"16138:47:21"},"nodeType":"YulExpressionStatement","src":"16138:47:21"},{"nodeType":"YulAssignment","src":"16194:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16328:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16202:124:21"},"nodeType":"YulFunctionCall","src":"16202:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16194:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16072:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16087:4:21","type":""}],"src":"15921:419:21"},{"body":{"nodeType":"YulBlock","src":"16452:117:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16474:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16482:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16470:3:21"},"nodeType":"YulFunctionCall","src":"16470:14:21"},{"hexValue":"4c3220426974636f696e204465706f7369746f72206d757374206e6f74206265","kind":"string","nodeType":"YulLiteral","src":"16486:34:21","type":"","value":"L2 Bitcoin Depositor must not be"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16463:6:21"},"nodeType":"YulFunctionCall","src":"16463:58:21"},"nodeType":"YulExpressionStatement","src":"16463:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16542:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16550:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16538:3:21"},"nodeType":"YulFunctionCall","src":"16538:15:21"},{"hexValue":"20307830","kind":"string","nodeType":"YulLiteral","src":"16555:6:21","type":"","value":" 0x0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16531:6:21"},"nodeType":"YulFunctionCall","src":"16531:31:21"},"nodeType":"YulExpressionStatement","src":"16531:31:21"}]},"name":"store_literal_in_memory_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16444:6:21","type":""}],"src":"16346:223:21"},{"body":{"nodeType":"YulBlock","src":"16721:220:21","statements":[{"nodeType":"YulAssignment","src":"16731:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16797:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16802:2:21","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16738:58:21"},"nodeType":"YulFunctionCall","src":"16738:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16731:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16903:3:21"}],"functionName":{"name":"store_literal_in_memory_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627","nodeType":"YulIdentifier","src":"16814:88:21"},"nodeType":"YulFunctionCall","src":"16814:93:21"},"nodeType":"YulExpressionStatement","src":"16814:93:21"},{"nodeType":"YulAssignment","src":"16916:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16927:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16932:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16923:3:21"},"nodeType":"YulFunctionCall","src":"16923:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16916:3:21"}]}]},"name":"abi_encode_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16709:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16717:3:21","type":""}],"src":"16575:366:21"},{"body":{"nodeType":"YulBlock","src":"17118:248:21","statements":[{"nodeType":"YulAssignment","src":"17128:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17140:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17151:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17136:3:21"},"nodeType":"YulFunctionCall","src":"17136:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17128:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17175:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17186:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17171:3:21"},"nodeType":"YulFunctionCall","src":"17171:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17194:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"17200:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17190:3:21"},"nodeType":"YulFunctionCall","src":"17190:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17164:6:21"},"nodeType":"YulFunctionCall","src":"17164:47:21"},"nodeType":"YulExpressionStatement","src":"17164:47:21"},{"nodeType":"YulAssignment","src":"17220:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17354:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17228:124:21"},"nodeType":"YulFunctionCall","src":"17228:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17220:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17098:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17113:4:21","type":""}],"src":"16947:419:21"},{"body":{"nodeType":"YulBlock","src":"17435:80:21","statements":[{"nodeType":"YulAssignment","src":"17445:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17460:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17454:5:21"},"nodeType":"YulFunctionCall","src":"17454:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17445:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17503:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"17476:26:21"},"nodeType":"YulFunctionCall","src":"17476:33:21"},"nodeType":"YulExpressionStatement","src":"17476:33:21"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17413:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"17421:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17429:5:21","type":""}],"src":"17372:143:21"},{"body":{"nodeType":"YulBlock","src":"17598:274:21","statements":[{"body":{"nodeType":"YulBlock","src":"17644:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17646:77:21"},"nodeType":"YulFunctionCall","src":"17646:79:21"},"nodeType":"YulExpressionStatement","src":"17646:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17619:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"17628:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17615:3:21"},"nodeType":"YulFunctionCall","src":"17615:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"17640:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17611:3:21"},"nodeType":"YulFunctionCall","src":"17611:32:21"},"nodeType":"YulIf","src":"17608:119:21"},{"nodeType":"YulBlock","src":"17737:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"17752:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"17766:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17756:6:21","type":""}]},{"nodeType":"YulAssignment","src":"17781:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17827:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"17838:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17823:3:21"},"nodeType":"YulFunctionCall","src":"17823:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17847:7:21"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"17791:31:21"},"nodeType":"YulFunctionCall","src":"17791:64:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17781:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17568:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17579:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17591:6:21","type":""}],"src":"17521:351:21"},{"body":{"nodeType":"YulBlock","src":"17984:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18006:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"18014:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18002:3:21"},"nodeType":"YulFunctionCall","src":"18002:14:21"},{"hexValue":"57726f6e67206465706f736974207374617465","kind":"string","nodeType":"YulLiteral","src":"18018:21:21","type":"","value":"Wrong deposit state"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17995:6:21"},"nodeType":"YulFunctionCall","src":"17995:45:21"},"nodeType":"YulExpressionStatement","src":"17995:45:21"}]},"name":"store_literal_in_memory_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17976:6:21","type":""}],"src":"17878:169:21"},{"body":{"nodeType":"YulBlock","src":"18199:220:21","statements":[{"nodeType":"YulAssignment","src":"18209:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18275:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18280:2:21","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18216:58:21"},"nodeType":"YulFunctionCall","src":"18216:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18209:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18381:3:21"}],"functionName":{"name":"store_literal_in_memory_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b","nodeType":"YulIdentifier","src":"18292:88:21"},"nodeType":"YulFunctionCall","src":"18292:93:21"},"nodeType":"YulExpressionStatement","src":"18292:93:21"},{"nodeType":"YulAssignment","src":"18394:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18405:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18410:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18401:3:21"},"nodeType":"YulFunctionCall","src":"18401:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18394:3:21"}]}]},"name":"abi_encode_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18187:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18195:3:21","type":""}],"src":"18053:366:21"},{"body":{"nodeType":"YulBlock","src":"18596:248:21","statements":[{"nodeType":"YulAssignment","src":"18606:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18618:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18629:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18614:3:21"},"nodeType":"YulFunctionCall","src":"18614:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18606:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18653:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18664:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18649:3:21"},"nodeType":"YulFunctionCall","src":"18649:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18672:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"18678:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18668:3:21"},"nodeType":"YulFunctionCall","src":"18668:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18642:6:21"},"nodeType":"YulFunctionCall","src":"18642:47:21"},"nodeType":"YulExpressionStatement","src":"18642:47:21"},{"nodeType":"YulAssignment","src":"18698:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18832:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18706:124:21"},"nodeType":"YulFunctionCall","src":"18706:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18698:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18576:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18591:4:21","type":""}],"src":"18425:419:21"},{"body":{"nodeType":"YulBlock","src":"18976:206:21","statements":[{"nodeType":"YulAssignment","src":"18986:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18998:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19009:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18994:3:21"},"nodeType":"YulFunctionCall","src":"18994:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18986:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19066:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19079:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19090:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19075:3:21"},"nodeType":"YulFunctionCall","src":"19075:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19022:43:21"},"nodeType":"YulFunctionCall","src":"19022:71:21"},"nodeType":"YulExpressionStatement","src":"19022:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19147:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19160:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19171:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19156:3:21"},"nodeType":"YulFunctionCall","src":"19156:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19103:43:21"},"nodeType":"YulFunctionCall","src":"19103:72:21"},"nodeType":"YulExpressionStatement","src":"19103:72:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18940:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18952:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18960:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18971:4:21","type":""}],"src":"18850:332:21"},{"body":{"nodeType":"YulBlock","src":"19247:81:21","statements":[{"nodeType":"YulAssignment","src":"19257:65:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19314:5:21"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"19297:16:21"},"nodeType":"YulFunctionCall","src":"19297:23:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"19288:8:21"},"nodeType":"YulFunctionCall","src":"19288:33:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19270:17:21"},"nodeType":"YulFunctionCall","src":"19270:52:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"19257:9:21"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19227:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"19237:9:21","type":""}],"src":"19188:140:21"},{"body":{"nodeType":"YulBlock","src":"19398:65:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19415:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19450:5:21"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"19420:29:21"},"nodeType":"YulFunctionCall","src":"19420:36:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19408:6:21"},"nodeType":"YulFunctionCall","src":"19408:49:21"},"nodeType":"YulExpressionStatement","src":"19408:49:21"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19386:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19393:3:21","type":""}],"src":"19334:129:21"},{"body":{"nodeType":"YulBlock","src":"19594:205:21","statements":[{"nodeType":"YulAssignment","src":"19604:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19616:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19627:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19612:3:21"},"nodeType":"YulFunctionCall","src":"19612:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19604:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19683:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19696:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19707:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19692:3:21"},"nodeType":"YulFunctionCall","src":"19692:17:21"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19640:42:21"},"nodeType":"YulFunctionCall","src":"19640:70:21"},"nodeType":"YulExpressionStatement","src":"19640:70:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19764:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19777:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19788:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19773:3:21"},"nodeType":"YulFunctionCall","src":"19773:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19720:43:21"},"nodeType":"YulFunctionCall","src":"19720:72:21"},"nodeType":"YulExpressionStatement","src":"19720:72:21"}]},"name":"abi_encode_tuple_t_uint96_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19558:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19570:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19578:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19589:4:21","type":""}],"src":"19469:330:21"},{"body":{"nodeType":"YulBlock","src":"19833:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19850:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19853:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19843:6:21"},"nodeType":"YulFunctionCall","src":"19843:88:21"},"nodeType":"YulExpressionStatement","src":"19843:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19947:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19950:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19940:6:21"},"nodeType":"YulFunctionCall","src":"19940:15:21"},"nodeType":"YulExpressionStatement","src":"19940:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19971:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19974:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19964:6:21"},"nodeType":"YulFunctionCall","src":"19964:15:21"},"nodeType":"YulExpressionStatement","src":"19964:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"19805:180:21"},{"body":{"nodeType":"YulBlock","src":"20036:149:21","statements":[{"nodeType":"YulAssignment","src":"20046:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20069:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20051:17:21"},"nodeType":"YulFunctionCall","src":"20051:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"20046:1:21"}]},{"nodeType":"YulAssignment","src":"20080:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20103:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20085:17:21"},"nodeType":"YulFunctionCall","src":"20085:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"20080:1:21"}]},{"nodeType":"YulAssignment","src":"20114:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20126:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"20129:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20122:3:21"},"nodeType":"YulFunctionCall","src":"20122:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"20114:4:21"}]},{"body":{"nodeType":"YulBlock","src":"20156:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20158:16:21"},"nodeType":"YulFunctionCall","src":"20158:18:21"},"nodeType":"YulExpressionStatement","src":"20158:18:21"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"20147:4:21"},{"name":"x","nodeType":"YulIdentifier","src":"20153:1:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20144:2:21"},"nodeType":"YulFunctionCall","src":"20144:11:21"},"nodeType":"YulIf","src":"20141:37:21"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"20022:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"20025:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"20031:4:21","type":""}],"src":"19991:194:21"},{"body":{"nodeType":"YulBlock","src":"20235:147:21","statements":[{"nodeType":"YulAssignment","src":"20245:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20268:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20250:17:21"},"nodeType":"YulFunctionCall","src":"20250:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"20245:1:21"}]},{"nodeType":"YulAssignment","src":"20279:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20302:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20284:17:21"},"nodeType":"YulFunctionCall","src":"20284:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"20279:1:21"}]},{"nodeType":"YulAssignment","src":"20313:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20324:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"20327:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20320:3:21"},"nodeType":"YulFunctionCall","src":"20320:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"20313:3:21"}]},{"body":{"nodeType":"YulBlock","src":"20353:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20355:16:21"},"nodeType":"YulFunctionCall","src":"20355:18:21"},"nodeType":"YulExpressionStatement","src":"20355:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20345:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"20348:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20342:2:21"},"nodeType":"YulFunctionCall","src":"20342:10:21"},"nodeType":"YulIf","src":"20339:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"20222:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"20225:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"20231:3:21","type":""}],"src":"20191:191:21"},{"body":{"nodeType":"YulBlock","src":"20514:206:21","statements":[{"nodeType":"YulAssignment","src":"20524:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20536:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20547:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20532:3:21"},"nodeType":"YulFunctionCall","src":"20532:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20524:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20604:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20617:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20628:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20613:3:21"},"nodeType":"YulFunctionCall","src":"20613:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"20560:43:21"},"nodeType":"YulFunctionCall","src":"20560:71:21"},"nodeType":"YulExpressionStatement","src":"20560:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20685:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20698:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20709:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20694:3:21"},"nodeType":"YulFunctionCall","src":"20694:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20641:43:21"},"nodeType":"YulFunctionCall","src":"20641:72:21"},"nodeType":"YulExpressionStatement","src":"20641:72:21"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20478:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20490:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20498:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20509:4:21","type":""}],"src":"20388:332:21"},{"body":{"nodeType":"YulBlock","src":"20832:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20854:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"20862:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20850:3:21"},"nodeType":"YulFunctionCall","src":"20850:14:21"},{"hexValue":"4c32206465706f736974206f776e6572206d757374206e6f7420626520307830","kind":"string","nodeType":"YulLiteral","src":"20866:34:21","type":"","value":"L2 deposit owner must not be 0x0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20843:6:21"},"nodeType":"YulFunctionCall","src":"20843:58:21"},"nodeType":"YulExpressionStatement","src":"20843:58:21"}]},"name":"store_literal_in_memory_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20824:6:21","type":""}],"src":"20726:182:21"},{"body":{"nodeType":"YulBlock","src":"21060:220:21","statements":[{"nodeType":"YulAssignment","src":"21070:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21136:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"21141:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21077:58:21"},"nodeType":"YulFunctionCall","src":"21077:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21070:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21242:3:21"}],"functionName":{"name":"store_literal_in_memory_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542","nodeType":"YulIdentifier","src":"21153:88:21"},"nodeType":"YulFunctionCall","src":"21153:93:21"},"nodeType":"YulExpressionStatement","src":"21153:93:21"},{"nodeType":"YulAssignment","src":"21255:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21266:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"21271:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21262:3:21"},"nodeType":"YulFunctionCall","src":"21262:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21255:3:21"}]}]},"name":"abi_encode_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21048:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21056:3:21","type":""}],"src":"20914:366:21"},{"body":{"nodeType":"YulBlock","src":"21457:248:21","statements":[{"nodeType":"YulAssignment","src":"21467:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21479:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21490:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21475:3:21"},"nodeType":"YulFunctionCall","src":"21475:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21467:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21514:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21525:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21510:3:21"},"nodeType":"YulFunctionCall","src":"21510:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21533:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"21539:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21529:3:21"},"nodeType":"YulFunctionCall","src":"21529:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21503:6:21"},"nodeType":"YulFunctionCall","src":"21503:47:21"},"nodeType":"YulExpressionStatement","src":"21503:47:21"},{"nodeType":"YulAssignment","src":"21559:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21693:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21567:124:21"},"nodeType":"YulFunctionCall","src":"21567:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21559:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21437:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21452:4:21","type":""}],"src":"21286:419:21"},{"body":{"nodeType":"YulBlock","src":"21800:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21817:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21820:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21810:6:21"},"nodeType":"YulFunctionCall","src":"21810:12:21"},"nodeType":"YulExpressionStatement","src":"21810:12:21"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"21711:117:21"},{"body":{"nodeType":"YulBlock","src":"21882:54:21","statements":[{"nodeType":"YulAssignment","src":"21892:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21910:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"21917:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21906:3:21"},"nodeType":"YulFunctionCall","src":"21906:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21926:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21922:3:21"},"nodeType":"YulFunctionCall","src":"21922:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21902:3:21"},"nodeType":"YulFunctionCall","src":"21902:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21892:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21865:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21875:6:21","type":""}],"src":"21834:102:21"},{"body":{"nodeType":"YulBlock","src":"21970:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21987:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21990:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21980:6:21"},"nodeType":"YulFunctionCall","src":"21980:88:21"},"nodeType":"YulExpressionStatement","src":"21980:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22084:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22087:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22077:6:21"},"nodeType":"YulFunctionCall","src":"22077:15:21"},"nodeType":"YulExpressionStatement","src":"22077:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22108:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22111:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22101:6:21"},"nodeType":"YulFunctionCall","src":"22101:15:21"},"nodeType":"YulExpressionStatement","src":"22101:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"21942:180:21"},{"body":{"nodeType":"YulBlock","src":"22171:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22181:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22203:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"22233:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22211:21:21"},"nodeType":"YulFunctionCall","src":"22211:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22199:3:21"},"nodeType":"YulFunctionCall","src":"22199:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"22185:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"22350:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"22352:16:21"},"nodeType":"YulFunctionCall","src":"22352:18:21"},"nodeType":"YulExpressionStatement","src":"22352:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"22293:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"22305:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22290:2:21"},"nodeType":"YulFunctionCall","src":"22290:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"22329:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"22341:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22326:2:21"},"nodeType":"YulFunctionCall","src":"22326:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22287:2:21"},"nodeType":"YulFunctionCall","src":"22287:62:21"},"nodeType":"YulIf","src":"22284:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22388:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"22392:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22381:6:21"},"nodeType":"YulFunctionCall","src":"22381:22:21"},"nodeType":"YulExpressionStatement","src":"22381:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22157:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"22165:4:21","type":""}],"src":"22128:281:21"},{"body":{"nodeType":"YulBlock","src":"22456:88:21","statements":[{"nodeType":"YulAssignment","src":"22466:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"22476:18:21"},"nodeType":"YulFunctionCall","src":"22476:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22466:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22525:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"22533:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"22505:19:21"},"nodeType":"YulFunctionCall","src":"22505:33:21"},"nodeType":"YulExpressionStatement","src":"22505:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"22440:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"22449:6:21","type":""}],"src":"22415:129:21"},{"body":{"nodeType":"YulBlock","src":"22639:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22656:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22659:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22649:6:21"},"nodeType":"YulFunctionCall","src":"22649:12:21"},"nodeType":"YulExpressionStatement","src":"22649:12:21"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"22550:117:21"},{"body":{"nodeType":"YulBlock","src":"22717:105:21","statements":[{"nodeType":"YulAssignment","src":"22727:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22742:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"22749:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22738:3:21"},"nodeType":"YulFunctionCall","src":"22738:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22727:7:21"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22699:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22709:7:21","type":""}],"src":"22673:149:21"},{"body":{"nodeType":"YulBlock","src":"22870:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"22926:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22935:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22938:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22928:6:21"},"nodeType":"YulFunctionCall","src":"22928:12:21"},"nodeType":"YulExpressionStatement","src":"22928:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22893:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22917:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"22900:16:21"},"nodeType":"YulFunctionCall","src":"22900:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22890:2:21"},"nodeType":"YulFunctionCall","src":"22890:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22883:6:21"},"nodeType":"YulFunctionCall","src":"22883:42:21"},"nodeType":"YulIf","src":"22880:62:21"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22863:5:21","type":""}],"src":"22828:120:21"},{"body":{"nodeType":"YulBlock","src":"23005:86:21","statements":[{"nodeType":"YulAssignment","src":"23015:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23037:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23024:12:21"},"nodeType":"YulFunctionCall","src":"23024:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23015:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23079:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23053:25:21"},"nodeType":"YulFunctionCall","src":"23053:32:21"},"nodeType":"YulExpressionStatement","src":"23053:32:21"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22983:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"22991:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22999:5:21","type":""}],"src":"22954:137:21"},{"body":{"nodeType":"YulBlock","src":"23186:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23203:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23206:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23196:6:21"},"nodeType":"YulFunctionCall","src":"23196:12:21"},"nodeType":"YulExpressionStatement","src":"23196:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"23097:117:21"},{"body":{"nodeType":"YulBlock","src":"23309:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23326:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23329:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23319:6:21"},"nodeType":"YulFunctionCall","src":"23319:12:21"},"nodeType":"YulExpressionStatement","src":"23319:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"23220:117:21"},{"body":{"nodeType":"YulBlock","src":"23409:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"23514:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"23516:16:21"},"nodeType":"YulFunctionCall","src":"23516:18:21"},"nodeType":"YulExpressionStatement","src":"23516:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23486:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"23494:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23483:2:21"},"nodeType":"YulFunctionCall","src":"23483:30:21"},"nodeType":"YulIf","src":"23480:56:21"},{"nodeType":"YulAssignment","src":"23546:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23576:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"23554:21:21"},"nodeType":"YulFunctionCall","src":"23554:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"23546:4:21"}]},{"nodeType":"YulAssignment","src":"23620:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"23632:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"23638:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23628:3:21"},"nodeType":"YulFunctionCall","src":"23628:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"23620:4:21"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"23393:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"23404:4:21","type":""}],"src":"23343:307:21"},{"body":{"nodeType":"YulBlock","src":"23720:82:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23743:3:21"},{"name":"src","nodeType":"YulIdentifier","src":"23748:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"23753:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"23730:12:21"},"nodeType":"YulFunctionCall","src":"23730:30:21"},"nodeType":"YulExpressionStatement","src":"23730:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23780:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"23785:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23776:3:21"},"nodeType":"YulFunctionCall","src":"23776:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"23794:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23769:6:21"},"nodeType":"YulFunctionCall","src":"23769:27:21"},"nodeType":"YulExpressionStatement","src":"23769:27:21"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23702:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23707:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"23712:6:21","type":""}],"src":"23656:146:21"},{"body":{"nodeType":"YulBlock","src":"23891:340:21","statements":[{"nodeType":"YulAssignment","src":"23901:74:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23967:6:21"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"23926:40:21"},"nodeType":"YulFunctionCall","src":"23926:48:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"23910:15:21"},"nodeType":"YulFunctionCall","src":"23910:65:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"23901:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"23991:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"23998:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23984:6:21"},"nodeType":"YulFunctionCall","src":"23984:21:21"},"nodeType":"YulExpressionStatement","src":"23984:21:21"},{"nodeType":"YulVariableDeclaration","src":"24014:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"24029:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"24036:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24025:3:21"},"nodeType":"YulFunctionCall","src":"24025:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"24018:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"24079:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"24081:77:21"},"nodeType":"YulFunctionCall","src":"24081:79:21"},"nodeType":"YulExpressionStatement","src":"24081:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24060:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"24065:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24056:3:21"},"nodeType":"YulFunctionCall","src":"24056:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"24074:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24053:2:21"},"nodeType":"YulFunctionCall","src":"24053:25:21"},"nodeType":"YulIf","src":"24050:112:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24208:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"24213:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"24218:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24171:36:21"},"nodeType":"YulFunctionCall","src":"24171:54:21"},"nodeType":"YulExpressionStatement","src":"24171:54:21"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23864:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"23869:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"23877:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"23885:5:21","type":""}],"src":"23808:423:21"},{"body":{"nodeType":"YulBlock","src":"24311:277:21","statements":[{"body":{"nodeType":"YulBlock","src":"24360:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"24362:77:21"},"nodeType":"YulFunctionCall","src":"24362:79:21"},"nodeType":"YulExpressionStatement","src":"24362:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24339:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"24347:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24335:3:21"},"nodeType":"YulFunctionCall","src":"24335:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"24354:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24331:3:21"},"nodeType":"YulFunctionCall","src":"24331:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24324:6:21"},"nodeType":"YulFunctionCall","src":"24324:35:21"},"nodeType":"YulIf","src":"24321:122:21"},{"nodeType":"YulVariableDeclaration","src":"24452:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24479:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"24466:12:21"},"nodeType":"YulFunctionCall","src":"24466:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24456:6:21","type":""}]},{"nodeType":"YulAssignment","src":"24495:87:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24555:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"24563:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24551:3:21"},"nodeType":"YulFunctionCall","src":"24551:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"24570:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"24578:3:21"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"24504:46:21"},"nodeType":"YulFunctionCall","src":"24504:78:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"24495:5:21"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24289:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"24297:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"24305:5:21","type":""}],"src":"24250:338:21"},{"body":{"nodeType":"YulBlock","src":"24721:1174:21","statements":[{"body":{"nodeType":"YulBlock","src":"24765:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"24767:77:21"},"nodeType":"YulFunctionCall","src":"24767:79:21"},"nodeType":"YulExpressionStatement","src":"24767:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"24742:3:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"24747:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24738:3:21"},"nodeType":"YulFunctionCall","src":"24738:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"24759:4:21","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24734:3:21"},"nodeType":"YulFunctionCall","src":"24734:30:21"},"nodeType":"YulIf","src":"24731:117:21"},{"nodeType":"YulAssignment","src":"24857:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24882:4:21","type":"","value":"0x80"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"24866:15:21"},"nodeType":"YulFunctionCall","src":"24866:21:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24857:5:21"}]},{"nodeType":"YulBlock","src":"24897:152:21","statements":[{"nodeType":"YulVariableDeclaration","src":"24935:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"24949:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24939:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24975:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"24982:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24971:3:21"},"nodeType":"YulFunctionCall","src":"24971:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25013:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"25024:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25009:3:21"},"nodeType":"YulFunctionCall","src":"25009:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"25033:3:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"24989:19:21"},"nodeType":"YulFunctionCall","src":"24989:48:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24964:6:21"},"nodeType":"YulFunctionCall","src":"24964:74:21"},"nodeType":"YulExpressionStatement","src":"24964:74:21"}]},{"nodeType":"YulBlock","src":"25059:327:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25101:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25132:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25143:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25128:3:21"},"nodeType":"YulFunctionCall","src":"25128:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"25115:12:21"},"nodeType":"YulFunctionCall","src":"25115:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25105:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"25194:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"25196:77:21"},"nodeType":"YulFunctionCall","src":"25196:79:21"},"nodeType":"YulExpressionStatement","src":"25196:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25166:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"25174:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25163:2:21"},"nodeType":"YulFunctionCall","src":"25163:30:21"},"nodeType":"YulIf","src":"25160:117:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25302:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"25309:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25298:3:21"},"nodeType":"YulFunctionCall","src":"25298:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25350:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"25361:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25346:3:21"},"nodeType":"YulFunctionCall","src":"25346:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"25370:3:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"25316:29:21"},"nodeType":"YulFunctionCall","src":"25316:58:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25291:6:21"},"nodeType":"YulFunctionCall","src":"25291:84:21"},"nodeType":"YulExpressionStatement","src":"25291:84:21"}]},{"nodeType":"YulBlock","src":"25396:328:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25439:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25470:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25481:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25466:3:21"},"nodeType":"YulFunctionCall","src":"25466:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"25453:12:21"},"nodeType":"YulFunctionCall","src":"25453:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25443:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"25532:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"25534:77:21"},"nodeType":"YulFunctionCall","src":"25534:79:21"},"nodeType":"YulExpressionStatement","src":"25534:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25504:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"25512:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25501:2:21"},"nodeType":"YulFunctionCall","src":"25501:30:21"},"nodeType":"YulIf","src":"25498:117:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25640:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"25647:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25636:3:21"},"nodeType":"YulFunctionCall","src":"25636:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25688:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"25699:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25684:3:21"},"nodeType":"YulFunctionCall","src":"25684:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"25708:3:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"25654:29:21"},"nodeType":"YulFunctionCall","src":"25654:58:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25629:6:21"},"nodeType":"YulFunctionCall","src":"25629:84:21"},"nodeType":"YulExpressionStatement","src":"25629:84:21"}]},{"nodeType":"YulBlock","src":"25734:154:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25773:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"25787:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25777:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25814:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"25821:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25810:3:21"},"nodeType":"YulFunctionCall","src":"25810:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25852:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"25863:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25848:3:21"},"nodeType":"YulFunctionCall","src":"25848:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"25872:3:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"25828:19:21"},"nodeType":"YulFunctionCall","src":"25828:48:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25803:6:21"},"nodeType":"YulFunctionCall","src":"25803:74:21"},"nodeType":"YulExpressionStatement","src":"25803:74:21"}]}]},"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24696:9:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"24707:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24715:5:21","type":""}],"src":"24635:1260:21"},{"body":{"nodeType":"YulBlock","src":"26025:105:21","statements":[{"nodeType":"YulAssignment","src":"26036:87:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26101:5:21"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"26108:12:21"},"nodeType":"YulFunctionCall","src":"26108:14:21"}],"functionName":{"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_memory_ptr","nodeType":"YulIdentifier","src":"26049:51:21"},"nodeType":"YulFunctionCall","src":"26049:74:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"26036:9:21"}]}]},"name":"convert_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26005:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"26015:9:21","type":""}],"src":"25901:229:21"},{"body":{"nodeType":"YulBlock","src":"26180:49:21","statements":[{"nodeType":"YulAssignment","src":"26190:33:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26205:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26212:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26201:3:21"},"nodeType":"YulFunctionCall","src":"26201:22:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26190:7:21"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26162:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26172:7:21","type":""}],"src":"26136:93:21"},{"body":{"nodeType":"YulBlock","src":"26277:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"26333:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26342:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26345:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26335:6:21"},"nodeType":"YulFunctionCall","src":"26335:12:21"},"nodeType":"YulExpressionStatement","src":"26335:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26300:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26324:5:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"26307:16:21"},"nodeType":"YulFunctionCall","src":"26307:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26297:2:21"},"nodeType":"YulFunctionCall","src":"26297:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26290:6:21"},"nodeType":"YulFunctionCall","src":"26290:42:21"},"nodeType":"YulIf","src":"26287:62:21"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26270:5:21","type":""}],"src":"26235:120:21"},{"body":{"nodeType":"YulBlock","src":"26412:86:21","statements":[{"nodeType":"YulAssignment","src":"26422:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26444:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"26431:12:21"},"nodeType":"YulFunctionCall","src":"26431:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26422:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26486:5:21"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"26460:25:21"},"nodeType":"YulFunctionCall","src":"26460:32:21"},"nodeType":"YulExpressionStatement","src":"26460:32:21"}]},"name":"abi_decode_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"26390:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"26398:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26406:5:21","type":""}],"src":"26361:137:21"},{"body":{"nodeType":"YulBlock","src":"26548:105:21","statements":[{"nodeType":"YulAssignment","src":"26558:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26573:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26580:66:21","type":"","value":"0xffffffffffffffff000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26569:3:21"},"nodeType":"YulFunctionCall","src":"26569:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26558:7:21"}]}]},"name":"cleanup_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26530:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26540:7:21","type":""}],"src":"26504:149:21"},{"body":{"nodeType":"YulBlock","src":"26701:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"26757:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26766:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26769:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26759:6:21"},"nodeType":"YulFunctionCall","src":"26759:12:21"},"nodeType":"YulExpressionStatement","src":"26759:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26724:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26748:5:21"}],"functionName":{"name":"cleanup_t_bytes8","nodeType":"YulIdentifier","src":"26731:16:21"},"nodeType":"YulFunctionCall","src":"26731:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26721:2:21"},"nodeType":"YulFunctionCall","src":"26721:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26714:6:21"},"nodeType":"YulFunctionCall","src":"26714:42:21"},"nodeType":"YulIf","src":"26711:62:21"}]},"name":"validator_revert_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26694:5:21","type":""}],"src":"26659:120:21"},{"body":{"nodeType":"YulBlock","src":"26836:86:21","statements":[{"nodeType":"YulAssignment","src":"26846:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26868:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"26855:12:21"},"nodeType":"YulFunctionCall","src":"26855:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26846:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26910:5:21"}],"functionName":{"name":"validator_revert_t_bytes8","nodeType":"YulIdentifier","src":"26884:25:21"},"nodeType":"YulFunctionCall","src":"26884:32:21"},"nodeType":"YulExpressionStatement","src":"26884:32:21"}]},"name":"abi_decode_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"26814:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"26822:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26830:5:21","type":""}],"src":"26785:137:21"},{"body":{"nodeType":"YulBlock","src":"26973:105:21","statements":[{"nodeType":"YulAssignment","src":"26983:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26998:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"27005:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26994:3:21"},"nodeType":"YulFunctionCall","src":"26994:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26983:7:21"}]}]},"name":"cleanup_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26955:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26965:7:21","type":""}],"src":"26928:150:21"},{"body":{"nodeType":"YulBlock","src":"27127:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"27184:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27193:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27196:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27186:6:21"},"nodeType":"YulFunctionCall","src":"27186:12:21"},"nodeType":"YulExpressionStatement","src":"27186:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27150:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27175:5:21"}],"functionName":{"name":"cleanup_t_bytes20","nodeType":"YulIdentifier","src":"27157:17:21"},"nodeType":"YulFunctionCall","src":"27157:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"27147:2:21"},"nodeType":"YulFunctionCall","src":"27147:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27140:6:21"},"nodeType":"YulFunctionCall","src":"27140:43:21"},"nodeType":"YulIf","src":"27137:63:21"}]},"name":"validator_revert_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27120:5:21","type":""}],"src":"27084:122:21"},{"body":{"nodeType":"YulBlock","src":"27264:87:21","statements":[{"nodeType":"YulAssignment","src":"27274:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27296:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27283:12:21"},"nodeType":"YulFunctionCall","src":"27283:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27274:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27339:5:21"}],"functionName":{"name":"validator_revert_t_bytes20","nodeType":"YulIdentifier","src":"27312:26:21"},"nodeType":"YulFunctionCall","src":"27312:33:21"},"nodeType":"YulExpressionStatement","src":"27312:33:21"}]},"name":"abi_decode_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27242:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"27250:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27258:5:21","type":""}],"src":"27212:139:21"},{"body":{"nodeType":"YulBlock","src":"27492:1196:21","statements":[{"body":{"nodeType":"YulBlock","src":"27536:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"27538:77:21"},"nodeType":"YulFunctionCall","src":"27538:79:21"},"nodeType":"YulExpressionStatement","src":"27538:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"27513:3:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"27518:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27509:3:21"},"nodeType":"YulFunctionCall","src":"27509:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"27530:4:21","type":"","value":"0xc0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27505:3:21"},"nodeType":"YulFunctionCall","src":"27505:30:21"},"nodeType":"YulIf","src":"27502:117:21"},{"nodeType":"YulAssignment","src":"27628:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27653:4:21","type":"","value":"0xc0"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"27637:15:21"},"nodeType":"YulFunctionCall","src":"27637:21:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27628:5:21"}]},{"nodeType":"YulBlock","src":"27668:163:21","statements":[{"nodeType":"YulVariableDeclaration","src":"27717:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"27731:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27721:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27757:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"27764:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27753:3:21"},"nodeType":"YulFunctionCall","src":"27753:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27795:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"27806:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27791:3:21"},"nodeType":"YulFunctionCall","src":"27791:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"27815:3:21"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"27771:19:21"},"nodeType":"YulFunctionCall","src":"27771:48:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27746:6:21"},"nodeType":"YulFunctionCall","src":"27746:74:21"},"nodeType":"YulExpressionStatement","src":"27746:74:21"}]},{"nodeType":"YulBlock","src":"27841:160:21","statements":[{"nodeType":"YulVariableDeclaration","src":"27886:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"27900:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27890:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27927:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"27934:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27923:3:21"},"nodeType":"YulFunctionCall","src":"27923:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27965:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"27976:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27961:3:21"},"nodeType":"YulFunctionCall","src":"27961:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"27985:3:21"}],"functionName":{"name":"abi_decode_t_bytes8","nodeType":"YulIdentifier","src":"27941:19:21"},"nodeType":"YulFunctionCall","src":"27941:48:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27916:6:21"},"nodeType":"YulFunctionCall","src":"27916:74:21"},"nodeType":"YulExpressionStatement","src":"27916:74:21"}]},{"nodeType":"YulBlock","src":"28011:163:21","statements":[{"nodeType":"YulVariableDeclaration","src":"28058:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"28072:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28062:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28099:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"28106:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28095:3:21"},"nodeType":"YulFunctionCall","src":"28095:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28138:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"28149:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28134:3:21"},"nodeType":"YulFunctionCall","src":"28134:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"28158:3:21"}],"functionName":{"name":"abi_decode_t_bytes20","nodeType":"YulIdentifier","src":"28113:20:21"},"nodeType":"YulFunctionCall","src":"28113:49:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28088:6:21"},"nodeType":"YulFunctionCall","src":"28088:75:21"},"nodeType":"YulExpressionStatement","src":"28088:75:21"}]},{"nodeType":"YulBlock","src":"28184:163:21","statements":[{"nodeType":"YulVariableDeclaration","src":"28231:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"28245:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28235:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28272:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"28279:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28268:3:21"},"nodeType":"YulFunctionCall","src":"28268:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28311:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"28322:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28307:3:21"},"nodeType":"YulFunctionCall","src":"28307:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"28331:3:21"}],"functionName":{"name":"abi_decode_t_bytes20","nodeType":"YulIdentifier","src":"28286:20:21"},"nodeType":"YulFunctionCall","src":"28286:49:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28261:6:21"},"nodeType":"YulFunctionCall","src":"28261:75:21"},"nodeType":"YulExpressionStatement","src":"28261:75:21"}]},{"nodeType":"YulBlock","src":"28357:161:21","statements":[{"nodeType":"YulVariableDeclaration","src":"28402:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"28416:3:21","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28406:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28444:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"28451:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28440:3:21"},"nodeType":"YulFunctionCall","src":"28440:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28482:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"28493:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28478:3:21"},"nodeType":"YulFunctionCall","src":"28478:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"28502:3:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"28458:19:21"},"nodeType":"YulFunctionCall","src":"28458:48:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28433:6:21"},"nodeType":"YulFunctionCall","src":"28433:74:21"},"nodeType":"YulExpressionStatement","src":"28433:74:21"}]},{"nodeType":"YulBlock","src":"28528:153:21","statements":[{"nodeType":"YulVariableDeclaration","src":"28564:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"28578:3:21","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28568:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28606:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"28613:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28602:3:21"},"nodeType":"YulFunctionCall","src":"28602:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28645:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"28656:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28641:3:21"},"nodeType":"YulFunctionCall","src":"28641:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"28665:3:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"28620:20:21"},"nodeType":"YulFunctionCall","src":"28620:49:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28595:6:21"},"nodeType":"YulFunctionCall","src":"28595:75:21"},"nodeType":"YulExpressionStatement","src":"28595:75:21"}]}]},"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27467:9:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"27478:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27486:5:21","type":""}],"src":"27402:1286:21"},{"body":{"nodeType":"YulBlock","src":"28795:299:21","statements":[{"body":{"nodeType":"YulBlock","src":"28842:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"28844:77:21"},"nodeType":"YulFunctionCall","src":"28844:79:21"},"nodeType":"YulExpressionStatement","src":"28844:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"28816:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"28825:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28812:3:21"},"nodeType":"YulFunctionCall","src":"28812:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"28837:3:21","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"28808:3:21"},"nodeType":"YulFunctionCall","src":"28808:33:21"},"nodeType":"YulIf","src":"28805:120:21"},{"nodeType":"YulBlock","src":"28935:152:21","statements":[{"nodeType":"YulVariableDeclaration","src":"28950:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"28964:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28954:6:21","type":""}]},{"nodeType":"YulAssignment","src":"28979:98:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29049:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"29060:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29045:3:21"},"nodeType":"YulFunctionCall","src":"29045:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"29069:7:21"}],"functionName":{"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_memory_ptr","nodeType":"YulIdentifier","src":"28989:55:21"},"nodeType":"YulFunctionCall","src":"28989:88:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"28979:6:21"}]}]}]},"name":"abi_decode_tuple_t_struct$_DepositRevealInfo_$4744_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28765:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"28776:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"28788:6:21","type":""}],"src":"28694:400:21"},{"body":{"nodeType":"YulBlock","src":"29206:127:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29228:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"29236:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29224:3:21"},"nodeType":"YulFunctionCall","src":"29224:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"29240:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29217:6:21"},"nodeType":"YulFunctionCall","src":"29217:58:21"},"nodeType":"YulExpressionStatement","src":"29217:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29296:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"29304:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29292:3:21"},"nodeType":"YulFunctionCall","src":"29292:15:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"29309:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29285:6:21"},"nodeType":"YulFunctionCall","src":"29285:41:21"},"nodeType":"YulExpressionStatement","src":"29285:41:21"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29198:6:21","type":""}],"src":"29100:233:21"},{"body":{"nodeType":"YulBlock","src":"29485:220:21","statements":[{"nodeType":"YulAssignment","src":"29495:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29561:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29566:2:21","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29502:58:21"},"nodeType":"YulFunctionCall","src":"29502:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29495:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29667:3:21"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"29578:88:21"},"nodeType":"YulFunctionCall","src":"29578:93:21"},"nodeType":"YulExpressionStatement","src":"29578:93:21"},{"nodeType":"YulAssignment","src":"29680:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29691:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29696:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29687:3:21"},"nodeType":"YulFunctionCall","src":"29687:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29680:3:21"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29473:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29481:3:21","type":""}],"src":"29339:366:21"},{"body":{"nodeType":"YulBlock","src":"29882:248:21","statements":[{"nodeType":"YulAssignment","src":"29892:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29904:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"29915:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29900:3:21"},"nodeType":"YulFunctionCall","src":"29900:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29892:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29939:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"29950:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29935:3:21"},"nodeType":"YulFunctionCall","src":"29935:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29958:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"29964:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29954:3:21"},"nodeType":"YulFunctionCall","src":"29954:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29928:6:21"},"nodeType":"YulFunctionCall","src":"29928:47:21"},"nodeType":"YulExpressionStatement","src":"29928:47:21"},{"nodeType":"YulAssignment","src":"29984:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30118:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29992:124:21"},"nodeType":"YulFunctionCall","src":"29992:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29984:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29862:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29877:4:21","type":""}],"src":"29711:419:21"},{"body":{"nodeType":"YulBlock","src":"30242:75:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30264:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"30272:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30260:3:21"},"nodeType":"YulFunctionCall","src":"30260:14:21"},{"hexValue":"576f726d686f6c6520616464726573732063616e6e6f74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"30276:33:21","type":"","value":"Wormhole address cannot be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30253:6:21"},"nodeType":"YulFunctionCall","src":"30253:57:21"},"nodeType":"YulExpressionStatement","src":"30253:57:21"}]},"name":"store_literal_in_memory_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30234:6:21","type":""}],"src":"30136:181:21"},{"body":{"nodeType":"YulBlock","src":"30469:220:21","statements":[{"nodeType":"YulAssignment","src":"30479:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30545:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"30550:2:21","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30486:58:21"},"nodeType":"YulFunctionCall","src":"30486:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30479:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30651:3:21"}],"functionName":{"name":"store_literal_in_memory_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9","nodeType":"YulIdentifier","src":"30562:88:21"},"nodeType":"YulFunctionCall","src":"30562:93:21"},"nodeType":"YulExpressionStatement","src":"30562:93:21"},{"nodeType":"YulAssignment","src":"30664:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30675:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"30680:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30671:3:21"},"nodeType":"YulFunctionCall","src":"30671:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30664:3:21"}]}]},"name":"abi_encode_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30457:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30465:3:21","type":""}],"src":"30323:366:21"},{"body":{"nodeType":"YulBlock","src":"30866:248:21","statements":[{"nodeType":"YulAssignment","src":"30876:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30888:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"30899:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30884:3:21"},"nodeType":"YulFunctionCall","src":"30884:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30876:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30923:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"30934:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30919:3:21"},"nodeType":"YulFunctionCall","src":"30919:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30942:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"30948:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30938:3:21"},"nodeType":"YulFunctionCall","src":"30938:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30912:6:21"},"nodeType":"YulFunctionCall","src":"30912:47:21"},"nodeType":"YulExpressionStatement","src":"30912:47:21"},{"nodeType":"YulAssignment","src":"30968:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31102:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30976:124:21"},"nodeType":"YulFunctionCall","src":"30976:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30968:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30846:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30861:4:21","type":""}],"src":"30695:419:21"},{"body":{"nodeType":"YulBlock","src":"31226:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31248:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31256:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31244:3:21"},"nodeType":"YulFunctionCall","src":"31244:14:21"},{"hexValue":"576f726d686f6c6552656c6179657220616464726573732063616e6e6f742062","kind":"string","nodeType":"YulLiteral","src":"31260:34:21","type":"","value":"WormholeRelayer address cannot b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31237:6:21"},"nodeType":"YulFunctionCall","src":"31237:58:21"},"nodeType":"YulExpressionStatement","src":"31237:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31316:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31324:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31312:3:21"},"nodeType":"YulFunctionCall","src":"31312:15:21"},{"hexValue":"65207a65726f","kind":"string","nodeType":"YulLiteral","src":"31329:8:21","type":"","value":"e zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31305:6:21"},"nodeType":"YulFunctionCall","src":"31305:33:21"},"nodeType":"YulExpressionStatement","src":"31305:33:21"}]},"name":"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31218:6:21","type":""}],"src":"31120:225:21"},{"body":{"nodeType":"YulBlock","src":"31497:220:21","statements":[{"nodeType":"YulAssignment","src":"31507:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31573:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"31578:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31514:58:21"},"nodeType":"YulFunctionCall","src":"31514:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31507:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31679:3:21"}],"functionName":{"name":"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","nodeType":"YulIdentifier","src":"31590:88:21"},"nodeType":"YulFunctionCall","src":"31590:93:21"},"nodeType":"YulExpressionStatement","src":"31590:93:21"},{"nodeType":"YulAssignment","src":"31692:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31703:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"31708:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31699:3:21"},"nodeType":"YulFunctionCall","src":"31699:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31692:3:21"}]}]},"name":"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31485:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31493:3:21","type":""}],"src":"31351:366:21"},{"body":{"nodeType":"YulBlock","src":"31894:248:21","statements":[{"nodeType":"YulAssignment","src":"31904:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31916:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"31927:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31912:3:21"},"nodeType":"YulFunctionCall","src":"31912:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31904:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31951:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"31962:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31947:3:21"},"nodeType":"YulFunctionCall","src":"31947:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31970:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"31976:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31966:3:21"},"nodeType":"YulFunctionCall","src":"31966:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31940:6:21"},"nodeType":"YulFunctionCall","src":"31940:47:21"},"nodeType":"YulExpressionStatement","src":"31940:47:21"},{"nodeType":"YulAssignment","src":"31996:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32130:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32004:124:21"},"nodeType":"YulFunctionCall","src":"32004:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31996:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31874:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31889:4:21","type":""}],"src":"31723:419:21"},{"body":{"nodeType":"YulBlock","src":"32254:123:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32276:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"32284:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32272:3:21"},"nodeType":"YulFunctionCall","src":"32272:14:21"},{"hexValue":"576f726d686f6c65546f6b656e42726964676520616464726573732063616e6e","kind":"string","nodeType":"YulLiteral","src":"32288:34:21","type":"","value":"WormholeTokenBridge address cann"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32265:6:21"},"nodeType":"YulFunctionCall","src":"32265:58:21"},"nodeType":"YulExpressionStatement","src":"32265:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32344:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"32352:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32340:3:21"},"nodeType":"YulFunctionCall","src":"32340:15:21"},{"hexValue":"6f74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"32357:12:21","type":"","value":"ot be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32333:6:21"},"nodeType":"YulFunctionCall","src":"32333:37:21"},"nodeType":"YulExpressionStatement","src":"32333:37:21"}]},"name":"store_literal_in_memory_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32246:6:21","type":""}],"src":"32148:229:21"},{"body":{"nodeType":"YulBlock","src":"32529:220:21","statements":[{"nodeType":"YulAssignment","src":"32539:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32605:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"32610:2:21","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32546:58:21"},"nodeType":"YulFunctionCall","src":"32546:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32539:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32711:3:21"}],"functionName":{"name":"store_literal_in_memory_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9","nodeType":"YulIdentifier","src":"32622:88:21"},"nodeType":"YulFunctionCall","src":"32622:93:21"},"nodeType":"YulExpressionStatement","src":"32622:93:21"},{"nodeType":"YulAssignment","src":"32724:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32735:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"32740:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32731:3:21"},"nodeType":"YulFunctionCall","src":"32731:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32724:3:21"}]}]},"name":"abi_encode_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32517:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32525:3:21","type":""}],"src":"32383:366:21"},{"body":{"nodeType":"YulBlock","src":"32926:248:21","statements":[{"nodeType":"YulAssignment","src":"32936:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32948:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"32959:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32944:3:21"},"nodeType":"YulFunctionCall","src":"32944:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32936:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32983:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"32994:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32979:3:21"},"nodeType":"YulFunctionCall","src":"32979:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33002:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"33008:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32998:3:21"},"nodeType":"YulFunctionCall","src":"32998:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32972:6:21"},"nodeType":"YulFunctionCall","src":"32972:47:21"},"nodeType":"YulExpressionStatement","src":"32972:47:21"},{"nodeType":"YulAssignment","src":"33028:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33162:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33036:124:21"},"nodeType":"YulFunctionCall","src":"33036:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33028:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32906:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32921:4:21","type":""}],"src":"32755:419:21"},{"body":{"nodeType":"YulBlock","src":"33286:121:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33308:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33316:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33304:3:21"},"nodeType":"YulFunctionCall","src":"33304:14:21"},{"hexValue":"4c32576f726d686f6c654761746577617920616464726573732063616e6e6f74","kind":"string","nodeType":"YulLiteral","src":"33320:34:21","type":"","value":"L2WormholeGateway address cannot"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33297:6:21"},"nodeType":"YulFunctionCall","src":"33297:58:21"},"nodeType":"YulExpressionStatement","src":"33297:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33376:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33384:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33372:3:21"},"nodeType":"YulFunctionCall","src":"33372:15:21"},{"hexValue":"206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"33389:10:21","type":"","value":" be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33365:6:21"},"nodeType":"YulFunctionCall","src":"33365:35:21"},"nodeType":"YulExpressionStatement","src":"33365:35:21"}]},"name":"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33278:6:21","type":""}],"src":"33180:227:21"},{"body":{"nodeType":"YulBlock","src":"33559:220:21","statements":[{"nodeType":"YulAssignment","src":"33569:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33635:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"33640:2:21","type":"","value":"40"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33576:58:21"},"nodeType":"YulFunctionCall","src":"33576:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33569:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33741:3:21"}],"functionName":{"name":"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","nodeType":"YulIdentifier","src":"33652:88:21"},"nodeType":"YulFunctionCall","src":"33652:93:21"},"nodeType":"YulExpressionStatement","src":"33652:93:21"},{"nodeType":"YulAssignment","src":"33754:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33765:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"33770:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33761:3:21"},"nodeType":"YulFunctionCall","src":"33761:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33754:3:21"}]}]},"name":"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33547:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33555:3:21","type":""}],"src":"33413:366:21"},{"body":{"nodeType":"YulBlock","src":"33956:248:21","statements":[{"nodeType":"YulAssignment","src":"33966:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33978:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"33989:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33974:3:21"},"nodeType":"YulFunctionCall","src":"33974:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33966:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34013:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"34024:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34009:3:21"},"nodeType":"YulFunctionCall","src":"34009:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34032:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"34038:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34028:3:21"},"nodeType":"YulFunctionCall","src":"34028:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34002:6:21"},"nodeType":"YulFunctionCall","src":"34002:47:21"},"nodeType":"YulExpressionStatement","src":"34002:47:21"},{"nodeType":"YulAssignment","src":"34058:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34192:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34066:124:21"},"nodeType":"YulFunctionCall","src":"34066:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34058:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33936:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33951:4:21","type":""}],"src":"33785:419:21"},{"body":{"nodeType":"YulBlock","src":"34273:80:21","statements":[{"nodeType":"YulAssignment","src":"34283:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"34298:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34292:5:21"},"nodeType":"YulFunctionCall","src":"34292:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"34283:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34341:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"34314:26:21"},"nodeType":"YulFunctionCall","src":"34314:33:21"},"nodeType":"YulExpressionStatement","src":"34314:33:21"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"34251:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"34259:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"34267:5:21","type":""}],"src":"34210:143:21"},{"body":{"nodeType":"YulBlock","src":"34436:274:21","statements":[{"body":{"nodeType":"YulBlock","src":"34482:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"34484:77:21"},"nodeType":"YulFunctionCall","src":"34484:79:21"},"nodeType":"YulExpressionStatement","src":"34484:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"34457:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"34466:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34453:3:21"},"nodeType":"YulFunctionCall","src":"34453:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"34478:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"34449:3:21"},"nodeType":"YulFunctionCall","src":"34449:32:21"},"nodeType":"YulIf","src":"34446:119:21"},{"nodeType":"YulBlock","src":"34575:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"34590:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"34604:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"34594:6:21","type":""}]},{"nodeType":"YulAssignment","src":"34619:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34665:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"34676:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34661:3:21"},"nodeType":"YulFunctionCall","src":"34661:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"34685:7:21"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"34629:31:21"},"nodeType":"YulFunctionCall","src":"34629:64:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"34619:6:21"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34406:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"34417:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"34429:6:21","type":""}],"src":"34359:351:21"},{"body":{"nodeType":"YulBlock","src":"34769:32:21","statements":[{"nodeType":"YulAssignment","src":"34779:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"34790:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"34779:7:21"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34751:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"34761:7:21","type":""}],"src":"34716:85:21"},{"body":{"nodeType":"YulBlock","src":"34850:43:21","statements":[{"nodeType":"YulAssignment","src":"34860:27:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34875:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"34882:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34871:3:21"},"nodeType":"YulFunctionCall","src":"34871:16:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"34860:7:21"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34832:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"34842:7:21","type":""}],"src":"34807:86:21"},{"body":{"nodeType":"YulBlock","src":"34965:88:21","statements":[{"nodeType":"YulAssignment","src":"34975:72:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35039:5:21"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"35013:25:21"},"nodeType":"YulFunctionCall","src":"35013:32:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"35004:8:21"},"nodeType":"YulFunctionCall","src":"35004:42:21"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"34988:15:21"},"nodeType":"YulFunctionCall","src":"34988:59:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"34975:9:21"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34945:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"34955:9:21","type":""}],"src":"34899:154:21"},{"body":{"nodeType":"YulBlock","src":"35130:72:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35147:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35189:5:21"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"35152:36:21"},"nodeType":"YulFunctionCall","src":"35152:43:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35140:6:21"},"nodeType":"YulFunctionCall","src":"35140:56:21"},"nodeType":"YulExpressionStatement","src":"35140:56:21"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35118:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"35125:3:21","type":""}],"src":"35059:143:21"},{"body":{"nodeType":"YulBlock","src":"35312:130:21","statements":[{"nodeType":"YulAssignment","src":"35322:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35334:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"35345:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35330:3:21"},"nodeType":"YulFunctionCall","src":"35330:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35322:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35408:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35421:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"35432:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35417:3:21"},"nodeType":"YulFunctionCall","src":"35417:17:21"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"35358:49:21"},"nodeType":"YulFunctionCall","src":"35358:77:21"},"nodeType":"YulExpressionStatement","src":"35358:77:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35284:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35296:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35307:4:21","type":""}],"src":"35208:234:21"},{"body":{"nodeType":"YulBlock","src":"35554:67:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35576:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"35584:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35572:3:21"},"nodeType":"YulFunctionCall","src":"35572:14:21"},{"hexValue":"43616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"35588:25:21","type":"","value":"Caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35565:6:21"},"nodeType":"YulFunctionCall","src":"35565:49:21"},"nodeType":"YulExpressionStatement","src":"35565:49:21"}]},"name":"store_literal_in_memory_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35546:6:21","type":""}],"src":"35448:173:21"},{"body":{"nodeType":"YulBlock","src":"35773:220:21","statements":[{"nodeType":"YulAssignment","src":"35783:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35849:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"35854:2:21","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35790:58:21"},"nodeType":"YulFunctionCall","src":"35790:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35783:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35955:3:21"}],"functionName":{"name":"store_literal_in_memory_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33","nodeType":"YulIdentifier","src":"35866:88:21"},"nodeType":"YulFunctionCall","src":"35866:93:21"},"nodeType":"YulExpressionStatement","src":"35866:93:21"},{"nodeType":"YulAssignment","src":"35968:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35979:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"35984:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35975:3:21"},"nodeType":"YulFunctionCall","src":"35975:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35968:3:21"}]}]},"name":"abi_encode_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35761:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35769:3:21","type":""}],"src":"35627:366:21"},{"body":{"nodeType":"YulBlock","src":"36170:248:21","statements":[{"nodeType":"YulAssignment","src":"36180:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36192:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"36203:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36188:3:21"},"nodeType":"YulFunctionCall","src":"36188:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36180:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36227:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"36238:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36223:3:21"},"nodeType":"YulFunctionCall","src":"36223:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36246:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"36252:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36242:3:21"},"nodeType":"YulFunctionCall","src":"36242:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36216:6:21"},"nodeType":"YulFunctionCall","src":"36216:47:21"},"nodeType":"YulExpressionStatement","src":"36216:47:21"},{"nodeType":"YulAssignment","src":"36272:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36406:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36280:124:21"},"nodeType":"YulFunctionCall","src":"36280:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36272:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36150:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36165:4:21","type":""}],"src":"35999:419:21"},{"body":{"nodeType":"YulBlock","src":"36530:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36552:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"36560:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36548:3:21"},"nodeType":"YulFunctionCall","src":"36548:14:21"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"36564:34:21","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36541:6:21"},"nodeType":"YulFunctionCall","src":"36541:58:21"},"nodeType":"YulExpressionStatement","src":"36541:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36620:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"36628:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36616:3:21"},"nodeType":"YulFunctionCall","src":"36616:15:21"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"36633:8:21","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36609:6:21"},"nodeType":"YulFunctionCall","src":"36609:33:21"},"nodeType":"YulExpressionStatement","src":"36609:33:21"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36522:6:21","type":""}],"src":"36424:225:21"},{"body":{"nodeType":"YulBlock","src":"36801:220:21","statements":[{"nodeType":"YulAssignment","src":"36811:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36877:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"36882:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36818:58:21"},"nodeType":"YulFunctionCall","src":"36818:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36811:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36983:3:21"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"36894:88:21"},"nodeType":"YulFunctionCall","src":"36894:93:21"},"nodeType":"YulExpressionStatement","src":"36894:93:21"},{"nodeType":"YulAssignment","src":"36996:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37007:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"37012:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37003:3:21"},"nodeType":"YulFunctionCall","src":"37003:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36996:3:21"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36789:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36797:3:21","type":""}],"src":"36655:366:21"},{"body":{"nodeType":"YulBlock","src":"37198:248:21","statements":[{"nodeType":"YulAssignment","src":"37208:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37220:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"37231:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37216:3:21"},"nodeType":"YulFunctionCall","src":"37216:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37208:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37255:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"37266:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37251:3:21"},"nodeType":"YulFunctionCall","src":"37251:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37274:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"37280:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37270:3:21"},"nodeType":"YulFunctionCall","src":"37270:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37244:6:21"},"nodeType":"YulFunctionCall","src":"37244:47:21"},"nodeType":"YulExpressionStatement","src":"37244:47:21"},{"nodeType":"YulAssignment","src":"37300:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37434:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37308:124:21"},"nodeType":"YulFunctionCall","src":"37308:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37300:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37178:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37193:4:21","type":""}],"src":"37027:419:21"},{"body":{"nodeType":"YulBlock","src":"37558:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37580:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"37588:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37576:3:21"},"nodeType":"YulFunctionCall","src":"37576:14:21"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"37592:34:21","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37569:6:21"},"nodeType":"YulFunctionCall","src":"37569:58:21"},"nodeType":"YulExpressionStatement","src":"37569:58:21"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37550:6:21","type":""}],"src":"37452:182:21"},{"body":{"nodeType":"YulBlock","src":"37786:220:21","statements":[{"nodeType":"YulAssignment","src":"37796:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37862:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"37867:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37803:58:21"},"nodeType":"YulFunctionCall","src":"37803:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37796:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37968:3:21"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"37879:88:21"},"nodeType":"YulFunctionCall","src":"37879:93:21"},"nodeType":"YulExpressionStatement","src":"37879:93:21"},{"nodeType":"YulAssignment","src":"37981:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37992:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"37997:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37988:3:21"},"nodeType":"YulFunctionCall","src":"37988:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37981:3:21"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37774:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37782:3:21","type":""}],"src":"37640:366:21"},{"body":{"nodeType":"YulBlock","src":"38183:248:21","statements":[{"nodeType":"YulAssignment","src":"38193:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"38216:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38201:3:21"},"nodeType":"YulFunctionCall","src":"38201:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38193:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38240:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"38251:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38236:3:21"},"nodeType":"YulFunctionCall","src":"38236:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38259:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"38265:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38255:3:21"},"nodeType":"YulFunctionCall","src":"38255:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38229:6:21"},"nodeType":"YulFunctionCall","src":"38229:47:21"},"nodeType":"YulExpressionStatement","src":"38229:47:21"},{"nodeType":"YulAssignment","src":"38285:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38419:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38293:124:21"},"nodeType":"YulFunctionCall","src":"38293:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38285:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38163:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38178:4:21","type":""}],"src":"38012:419:21"},{"body":{"nodeType":"YulBlock","src":"38490:32:21","statements":[{"nodeType":"YulAssignment","src":"38500:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"38511:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"38500:7:21"}]}]},"name":"cleanup_t_rational_0_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38472:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"38482:7:21","type":""}],"src":"38437:85:21"},{"body":{"nodeType":"YulBlock","src":"38596:90:21","statements":[{"nodeType":"YulAssignment","src":"38606:74:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38672:5:21"}],"functionName":{"name":"cleanup_t_rational_0_by_1","nodeType":"YulIdentifier","src":"38646:25:21"},"nodeType":"YulFunctionCall","src":"38646:32:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"38637:8:21"},"nodeType":"YulFunctionCall","src":"38637:42:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"38619:17:21"},"nodeType":"YulFunctionCall","src":"38619:61:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"38606:9:21"}]}]},"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38576:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"38586:9:21","type":""}],"src":"38528:158:21"},{"body":{"nodeType":"YulBlock","src":"38765:74:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38782:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38826:5:21"}],"functionName":{"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulIdentifier","src":"38787:38:21"},"nodeType":"YulFunctionCall","src":"38787:45:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38775:6:21"},"nodeType":"YulFunctionCall","src":"38775:58:21"},"nodeType":"YulExpressionStatement","src":"38775:58:21"}]},"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38753:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"38760:3:21","type":""}],"src":"38692:147:21"},{"body":{"nodeType":"YulBlock","src":"39005:294:21","statements":[{"nodeType":"YulAssignment","src":"39015:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39027:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"39038:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39023:3:21"},"nodeType":"YulFunctionCall","src":"39023:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39015:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39093:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39106:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"39117:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39102:3:21"},"nodeType":"YulFunctionCall","src":"39102:17:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"39051:41:21"},"nodeType":"YulFunctionCall","src":"39051:69:21"},"nodeType":"YulExpressionStatement","src":"39051:69:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"39182:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39195:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"39206:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39191:3:21"},"nodeType":"YulFunctionCall","src":"39191:18:21"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"39130:51:21"},"nodeType":"YulFunctionCall","src":"39130:80:21"},"nodeType":"YulExpressionStatement","src":"39130:80:21"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"39264:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39277:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"39288:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39273:3:21"},"nodeType":"YulFunctionCall","src":"39273:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"39220:43:21"},"nodeType":"YulFunctionCall","src":"39220:72:21"},"nodeType":"YulExpressionStatement","src":"39220:72:21"}]},"name":"abi_encode_tuple_t_uint16_t_rational_0_by_1_t_uint256__to_t_uint16_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38961:9:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"38973:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38981:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38989:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39000:4:21","type":""}],"src":"38845:454:21"},{"body":{"nodeType":"YulBlock","src":"39399:413:21","statements":[{"body":{"nodeType":"YulBlock","src":"39445:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"39447:77:21"},"nodeType":"YulFunctionCall","src":"39447:79:21"},"nodeType":"YulExpressionStatement","src":"39447:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"39420:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"39429:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39416:3:21"},"nodeType":"YulFunctionCall","src":"39416:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"39441:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"39412:3:21"},"nodeType":"YulFunctionCall","src":"39412:32:21"},"nodeType":"YulIf","src":"39409:119:21"},{"nodeType":"YulBlock","src":"39538:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"39553:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"39567:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"39557:6:21","type":""}]},{"nodeType":"YulAssignment","src":"39582:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39628:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"39639:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39624:3:21"},"nodeType":"YulFunctionCall","src":"39624:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"39648:7:21"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"39592:31:21"},"nodeType":"YulFunctionCall","src":"39592:64:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"39582:6:21"}]}]},{"nodeType":"YulBlock","src":"39676:129:21","statements":[{"nodeType":"YulVariableDeclaration","src":"39691:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"39705:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"39695:6:21","type":""}]},{"nodeType":"YulAssignment","src":"39721:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39767:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"39778:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39763:3:21"},"nodeType":"YulFunctionCall","src":"39763:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"39787:7:21"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"39731:31:21"},"nodeType":"YulFunctionCall","src":"39731:64:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"39721:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39361:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"39372:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"39384:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"39392:6:21","type":""}],"src":"39305:507:21"},{"body":{"nodeType":"YulBlock","src":"39862:57:21","statements":[{"nodeType":"YulAssignment","src":"39872:41:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39887:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"39894:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39883:3:21"},"nodeType":"YulFunctionCall","src":"39883:30:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"39872:7:21"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39844:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"39854:7:21","type":""}],"src":"39818:101:21"},{"body":{"nodeType":"YulBlock","src":"39967:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"40023:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40032:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"40035:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"40025:6:21"},"nodeType":"YulFunctionCall","src":"40025:12:21"},"nodeType":"YulExpressionStatement","src":"40025:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39990:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40014:5:21"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"39997:16:21"},"nodeType":"YulFunctionCall","src":"39997:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"39987:2:21"},"nodeType":"YulFunctionCall","src":"39987:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"39980:6:21"},"nodeType":"YulFunctionCall","src":"39980:42:21"},"nodeType":"YulIf","src":"39977:62:21"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39960:5:21","type":""}],"src":"39925:120:21"},{"body":{"nodeType":"YulBlock","src":"40113:79:21","statements":[{"nodeType":"YulAssignment","src":"40123:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"40138:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40132:5:21"},"nodeType":"YulFunctionCall","src":"40132:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40123:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40180:5:21"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"40154:25:21"},"nodeType":"YulFunctionCall","src":"40154:32:21"},"nodeType":"YulExpressionStatement","src":"40154:32:21"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40091:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"40099:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40107:5:21","type":""}],"src":"40051:141:21"},{"body":{"nodeType":"YulBlock","src":"40260:79:21","statements":[{"nodeType":"YulAssignment","src":"40270:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"40285:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40279:5:21"},"nodeType":"YulFunctionCall","src":"40279:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40270:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40327:5:21"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"40301:25:21"},"nodeType":"YulFunctionCall","src":"40301:32:21"},"nodeType":"YulExpressionStatement","src":"40301:32:21"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40238:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"40246:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40254:5:21","type":""}],"src":"40198:141:21"},{"body":{"nodeType":"YulBlock","src":"40390:32:21","statements":[{"nodeType":"YulAssignment","src":"40400:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"40411:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"40400:7:21"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40372:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"40382:7:21","type":""}],"src":"40345:77:21"},{"body":{"nodeType":"YulBlock","src":"40471:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"40528:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40537:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"40540:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"40530:6:21"},"nodeType":"YulFunctionCall","src":"40530:12:21"},"nodeType":"YulExpressionStatement","src":"40530:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40494:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40519:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"40501:17:21"},"nodeType":"YulFunctionCall","src":"40501:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"40491:2:21"},"nodeType":"YulFunctionCall","src":"40491:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"40484:6:21"},"nodeType":"YulFunctionCall","src":"40484:43:21"},"nodeType":"YulIf","src":"40481:63:21"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40464:5:21","type":""}],"src":"40428:122:21"},{"body":{"nodeType":"YulBlock","src":"40619:80:21","statements":[{"nodeType":"YulAssignment","src":"40629:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"40644:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40638:5:21"},"nodeType":"YulFunctionCall","src":"40638:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40629:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40687:5:21"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"40660:26:21"},"nodeType":"YulFunctionCall","src":"40660:33:21"},"nodeType":"YulExpressionStatement","src":"40660:33:21"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40597:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"40605:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40613:5:21","type":""}],"src":"40556:143:21"},{"body":{"nodeType":"YulBlock","src":"40845:1404:21","statements":[{"body":{"nodeType":"YulBlock","src":"40889:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"40891:77:21"},"nodeType":"YulFunctionCall","src":"40891:79:21"},"nodeType":"YulExpressionStatement","src":"40891:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"40866:3:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"40871:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40862:3:21"},"nodeType":"YulFunctionCall","src":"40862:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"40883:4:21","type":"","value":"0xe0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"40858:3:21"},"nodeType":"YulFunctionCall","src":"40858:30:21"},"nodeType":"YulIf","src":"40855:117:21"},{"nodeType":"YulAssignment","src":"40981:30:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41006:4:21","type":"","value":"0xe0"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"40990:15:21"},"nodeType":"YulFunctionCall","src":"40990:21:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40981:5:21"}]},{"nodeType":"YulBlock","src":"41021:166:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41061:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41075:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41065:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41101:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41108:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41097:3:21"},"nodeType":"YulFunctionCall","src":"41097:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41151:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"41162:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41147:3:21"},"nodeType":"YulFunctionCall","src":"41147:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"41171:3:21"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"41115:31:21"},"nodeType":"YulFunctionCall","src":"41115:60:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41090:6:21"},"nodeType":"YulFunctionCall","src":"41090:86:21"},"nodeType":"YulExpressionStatement","src":"41090:86:21"}]},{"nodeType":"YulBlock","src":"41197:163:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41234:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41248:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41238:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41275:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41282:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41271:3:21"},"nodeType":"YulFunctionCall","src":"41271:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41324:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"41335:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41320:3:21"},"nodeType":"YulFunctionCall","src":"41320:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"41344:3:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"41289:30:21"},"nodeType":"YulFunctionCall","src":"41289:59:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41264:6:21"},"nodeType":"YulFunctionCall","src":"41264:85:21"},"nodeType":"YulExpressionStatement","src":"41264:85:21"}]},{"nodeType":"YulBlock","src":"41370:167:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41411:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41425:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41415:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41452:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41459:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41448:3:21"},"nodeType":"YulFunctionCall","src":"41448:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41501:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"41512:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41497:3:21"},"nodeType":"YulFunctionCall","src":"41497:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"41521:3:21"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"41466:30:21"},"nodeType":"YulFunctionCall","src":"41466:59:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41441:6:21"},"nodeType":"YulFunctionCall","src":"41441:85:21"},"nodeType":"YulExpressionStatement","src":"41441:85:21"}]},{"nodeType":"YulBlock","src":"41547:163:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41583:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41597:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41587:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41624:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41631:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41620:3:21"},"nodeType":"YulFunctionCall","src":"41620:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41674:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"41685:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41670:3:21"},"nodeType":"YulFunctionCall","src":"41670:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"41694:3:21"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"41638:31:21"},"nodeType":"YulFunctionCall","src":"41638:60:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41613:6:21"},"nodeType":"YulFunctionCall","src":"41613:86:21"},"nodeType":"YulExpressionStatement","src":"41613:86:21"}]},{"nodeType":"YulBlock","src":"41720:169:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41762:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41776:3:21","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41766:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41804:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41811:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41800:3:21"},"nodeType":"YulFunctionCall","src":"41800:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41853:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"41864:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41849:3:21"},"nodeType":"YulFunctionCall","src":"41849:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"41873:3:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"41818:30:21"},"nodeType":"YulFunctionCall","src":"41818:59:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41793:6:21"},"nodeType":"YulFunctionCall","src":"41793:85:21"},"nodeType":"YulExpressionStatement","src":"41793:85:21"}]},{"nodeType":"YulBlock","src":"41899:165:21","statements":[{"nodeType":"YulVariableDeclaration","src":"41937:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"41951:3:21","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41941:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41979:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"41986:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41975:3:21"},"nodeType":"YulFunctionCall","src":"41975:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42028:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"42039:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42024:3:21"},"nodeType":"YulFunctionCall","src":"42024:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"42048:3:21"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"41993:30:21"},"nodeType":"YulFunctionCall","src":"41993:59:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41968:6:21"},"nodeType":"YulFunctionCall","src":"41968:85:21"},"nodeType":"YulExpressionStatement","src":"41968:85:21"}]},{"nodeType":"YulBlock","src":"42074:168:21","statements":[{"nodeType":"YulVariableDeclaration","src":"42114:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"42128:3:21","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"42118:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42156:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"42163:4:21","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42152:3:21"},"nodeType":"YulFunctionCall","src":"42152:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42206:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"42217:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42202:3:21"},"nodeType":"YulFunctionCall","src":"42202:22:21"},{"name":"end","nodeType":"YulIdentifier","src":"42226:3:21"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"42170:31:21"},"nodeType":"YulFunctionCall","src":"42170:60:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42145:6:21"},"nodeType":"YulFunctionCall","src":"42145:86:21"},"nodeType":"YulExpressionStatement","src":"42145:86:21"}]}]},"name":"abi_decode_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40820:9:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"40831:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40839:5:21","type":""}],"src":"40747:1502:21"},{"body":{"nodeType":"YulBlock","src":"42364:307:21","statements":[{"body":{"nodeType":"YulBlock","src":"42411:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"42413:77:21"},"nodeType":"YulFunctionCall","src":"42413:79:21"},"nodeType":"YulExpressionStatement","src":"42413:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"42385:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"42394:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42381:3:21"},"nodeType":"YulFunctionCall","src":"42381:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"42406:3:21","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"42377:3:21"},"nodeType":"YulFunctionCall","src":"42377:33:21"},"nodeType":"YulIf","src":"42374:120:21"},{"nodeType":"YulBlock","src":"42504:160:21","statements":[{"nodeType":"YulVariableDeclaration","src":"42519:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"42533:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"42523:6:21","type":""}]},{"nodeType":"YulAssignment","src":"42548:106:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42626:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"42637:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42622:3:21"},"nodeType":"YulFunctionCall","src":"42622:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"42646:7:21"}],"functionName":{"name":"abi_decode_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"42558:63:21"},"nodeType":"YulFunctionCall","src":"42558:96:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"42548:6:21"}]}]}]},"name":"abi_decode_tuple_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42334:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"42345:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"42357:6:21","type":""}],"src":"42255:416:21"},{"body":{"nodeType":"YulBlock","src":"42783:67:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42805:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"42813:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42801:3:21"},"nodeType":"YulFunctionCall","src":"42801:14:21"},{"hexValue":"4465706f736974206e6f7420696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"42817:25:21","type":"","value":"Deposit not initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42794:6:21"},"nodeType":"YulFunctionCall","src":"42794:49:21"},"nodeType":"YulExpressionStatement","src":"42794:49:21"}]},"name":"store_literal_in_memory_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42775:6:21","type":""}],"src":"42677:173:21"},{"body":{"nodeType":"YulBlock","src":"43002:220:21","statements":[{"nodeType":"YulAssignment","src":"43012:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43078:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"43083:2:21","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43019:58:21"},"nodeType":"YulFunctionCall","src":"43019:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43012:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43184:3:21"}],"functionName":{"name":"store_literal_in_memory_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68","nodeType":"YulIdentifier","src":"43095:88:21"},"nodeType":"YulFunctionCall","src":"43095:93:21"},"nodeType":"YulExpressionStatement","src":"43095:93:21"},{"nodeType":"YulAssignment","src":"43197:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43208:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"43213:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43204:3:21"},"nodeType":"YulFunctionCall","src":"43204:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43197:3:21"}]}]},"name":"abi_encode_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42990:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42998:3:21","type":""}],"src":"42856:366:21"},{"body":{"nodeType":"YulBlock","src":"43399:248:21","statements":[{"nodeType":"YulAssignment","src":"43409:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43421:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"43432:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43417:3:21"},"nodeType":"YulFunctionCall","src":"43417:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43409:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43456:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"43467:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43452:3:21"},"nodeType":"YulFunctionCall","src":"43452:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43475:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"43481:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43471:3:21"},"nodeType":"YulFunctionCall","src":"43471:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43445:6:21"},"nodeType":"YulFunctionCall","src":"43445:47:21"},"nodeType":"YulExpressionStatement","src":"43445:47:21"},{"nodeType":"YulAssignment","src":"43501:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43635:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43509:124:21"},"nodeType":"YulFunctionCall","src":"43509:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43501:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43379:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43394:4:21","type":""}],"src":"43228:419:21"},{"body":{"nodeType":"YulBlock","src":"43745:411:21","statements":[{"body":{"nodeType":"YulBlock","src":"43791:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"43793:77:21"},"nodeType":"YulFunctionCall","src":"43793:79:21"},"nodeType":"YulExpressionStatement","src":"43793:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"43766:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"43775:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43762:3:21"},"nodeType":"YulFunctionCall","src":"43762:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"43787:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"43758:3:21"},"nodeType":"YulFunctionCall","src":"43758:32:21"},"nodeType":"YulIf","src":"43755:119:21"},{"nodeType":"YulBlock","src":"43884:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"43899:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"43913:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"43903:6:21","type":""}]},{"nodeType":"YulAssignment","src":"43928:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43973:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"43984:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43969:3:21"},"nodeType":"YulFunctionCall","src":"43969:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"43993:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"43938:30:21"},"nodeType":"YulFunctionCall","src":"43938:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"43928:6:21"}]}]},{"nodeType":"YulBlock","src":"44021:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"44036:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"44050:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"44040:6:21","type":""}]},{"nodeType":"YulAssignment","src":"44066:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44111:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"44122:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44107:3:21"},"nodeType":"YulFunctionCall","src":"44107:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"44131:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"44076:30:21"},"nodeType":"YulFunctionCall","src":"44076:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"44066:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint64t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43707:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"43718:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"43730:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"43738:6:21","type":""}],"src":"43653:503:21"},{"body":{"nodeType":"YulBlock","src":"44268:116:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44290:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"44298:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44286:3:21"},"nodeType":"YulFunctionCall","src":"44286:14:21"},{"hexValue":"4465706f736974206e6f742066696e616c697a65642062792074686520627269","kind":"string","nodeType":"YulLiteral","src":"44302:34:21","type":"","value":"Deposit not finalized by the bri"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44279:6:21"},"nodeType":"YulFunctionCall","src":"44279:58:21"},"nodeType":"YulExpressionStatement","src":"44279:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44358:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"44366:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44354:3:21"},"nodeType":"YulFunctionCall","src":"44354:15:21"},{"hexValue":"646765","kind":"string","nodeType":"YulLiteral","src":"44371:5:21","type":"","value":"dge"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44347:6:21"},"nodeType":"YulFunctionCall","src":"44347:30:21"},"nodeType":"YulExpressionStatement","src":"44347:30:21"}]},"name":"store_literal_in_memory_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44260:6:21","type":""}],"src":"44162:222:21"},{"body":{"nodeType":"YulBlock","src":"44536:220:21","statements":[{"nodeType":"YulAssignment","src":"44546:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44612:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"44617:2:21","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44553:58:21"},"nodeType":"YulFunctionCall","src":"44553:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44546:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44718:3:21"}],"functionName":{"name":"store_literal_in_memory_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac","nodeType":"YulIdentifier","src":"44629:88:21"},"nodeType":"YulFunctionCall","src":"44629:93:21"},"nodeType":"YulExpressionStatement","src":"44629:93:21"},{"nodeType":"YulAssignment","src":"44731:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44742:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"44747:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44738:3:21"},"nodeType":"YulFunctionCall","src":"44738:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44731:3:21"}]}]},"name":"abi_encode_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44524:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44532:3:21","type":""}],"src":"44390:366:21"},{"body":{"nodeType":"YulBlock","src":"44933:248:21","statements":[{"nodeType":"YulAssignment","src":"44943:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44955:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"44966:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44951:3:21"},"nodeType":"YulFunctionCall","src":"44951:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44943:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44990:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"45001:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44986:3:21"},"nodeType":"YulFunctionCall","src":"44986:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45009:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"45015:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45005:3:21"},"nodeType":"YulFunctionCall","src":"45005:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44979:6:21"},"nodeType":"YulFunctionCall","src":"44979:47:21"},"nodeType":"YulExpressionStatement","src":"44979:47:21"},{"nodeType":"YulAssignment","src":"45035:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45169:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45043:124:21"},"nodeType":"YulFunctionCall","src":"45043:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45035:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44913:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44928:4:21","type":""}],"src":"44762:419:21"},{"body":{"nodeType":"YulBlock","src":"45235:362:21","statements":[{"nodeType":"YulAssignment","src":"45245:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"45268:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"45250:17:21"},"nodeType":"YulFunctionCall","src":"45250:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"45245:1:21"}]},{"nodeType":"YulAssignment","src":"45279:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"45302:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"45284:17:21"},"nodeType":"YulFunctionCall","src":"45284:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"45279:1:21"}]},{"nodeType":"YulVariableDeclaration","src":"45313:28:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"45336:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"45339:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"45332:3:21"},"nodeType":"YulFunctionCall","src":"45332:9:21"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"45317:11:21","type":""}]},{"nodeType":"YulAssignment","src":"45350:41:21","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"45379:11:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"45361:17:21"},"nodeType":"YulFunctionCall","src":"45361:30:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"45350:7:21"}]},{"body":{"nodeType":"YulBlock","src":"45568:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"45570:16:21"},"nodeType":"YulFunctionCall","src":"45570:18:21"},"nodeType":"YulExpressionStatement","src":"45570:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"45501:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"45494:6:21"},"nodeType":"YulFunctionCall","src":"45494:9:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"45524:1:21"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"45531:7:21"},{"name":"x","nodeType":"YulIdentifier","src":"45540:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"45527:3:21"},"nodeType":"YulFunctionCall","src":"45527:15:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"45521:2:21"},"nodeType":"YulFunctionCall","src":"45521:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"45474:2:21"},"nodeType":"YulFunctionCall","src":"45474:83:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"45454:6:21"},"nodeType":"YulFunctionCall","src":"45454:113:21"},"nodeType":"YulIf","src":"45451:139:21"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"45218:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"45221:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"45227:7:21","type":""}],"src":"45187:410:21"},{"body":{"nodeType":"YulBlock","src":"45709:68:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45731:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"45739:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45727:3:21"},"nodeType":"YulFunctionCall","src":"45727:14:21"},{"hexValue":"416d6f756e7420746f6f206c6f7720746f20627269646765","kind":"string","nodeType":"YulLiteral","src":"45743:26:21","type":"","value":"Amount too low to bridge"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45720:6:21"},"nodeType":"YulFunctionCall","src":"45720:50:21"},"nodeType":"YulExpressionStatement","src":"45720:50:21"}]},"name":"store_literal_in_memory_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45701:6:21","type":""}],"src":"45603:174:21"},{"body":{"nodeType":"YulBlock","src":"45929:220:21","statements":[{"nodeType":"YulAssignment","src":"45939:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46005:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"46010:2:21","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45946:58:21"},"nodeType":"YulFunctionCall","src":"45946:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45939:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46111:3:21"}],"functionName":{"name":"store_literal_in_memory_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45","nodeType":"YulIdentifier","src":"46022:88:21"},"nodeType":"YulFunctionCall","src":"46022:93:21"},"nodeType":"YulExpressionStatement","src":"46022:93:21"},{"nodeType":"YulAssignment","src":"46124:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46135:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"46140:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46131:3:21"},"nodeType":"YulFunctionCall","src":"46131:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46124:3:21"}]}]},"name":"abi_encode_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45917:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45925:3:21","type":""}],"src":"45783:366:21"},{"body":{"nodeType":"YulBlock","src":"46326:248:21","statements":[{"nodeType":"YulAssignment","src":"46336:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46348:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"46359:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46344:3:21"},"nodeType":"YulFunctionCall","src":"46344:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46336:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46383:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"46394:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46379:3:21"},"nodeType":"YulFunctionCall","src":"46379:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46402:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"46408:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46398:3:21"},"nodeType":"YulFunctionCall","src":"46398:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46372:6:21"},"nodeType":"YulFunctionCall","src":"46372:47:21"},"nodeType":"YulExpressionStatement","src":"46372:47:21"},{"nodeType":"YulAssignment","src":"46428:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46562:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46436:124:21"},"nodeType":"YulFunctionCall","src":"46436:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46428:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46306:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46321:4:21","type":""}],"src":"46155:419:21"},{"body":{"nodeType":"YulBlock","src":"46686:120:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46708:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"46716:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46704:3:21"},"nodeType":"YulFunctionCall","src":"46704:14:21"},{"hexValue":"5061796d656e7420666f7220576f726d686f6c652052656c6179657220697320","kind":"string","nodeType":"YulLiteral","src":"46720:34:21","type":"","value":"Payment for Wormhole Relayer is "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46697:6:21"},"nodeType":"YulFunctionCall","src":"46697:58:21"},"nodeType":"YulExpressionStatement","src":"46697:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46776:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"46784:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46772:3:21"},"nodeType":"YulFunctionCall","src":"46772:15:21"},{"hexValue":"746f6f206c6f77","kind":"string","nodeType":"YulLiteral","src":"46789:9:21","type":"","value":"too low"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46765:6:21"},"nodeType":"YulFunctionCall","src":"46765:34:21"},"nodeType":"YulExpressionStatement","src":"46765:34:21"}]},"name":"store_literal_in_memory_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46678:6:21","type":""}],"src":"46580:226:21"},{"body":{"nodeType":"YulBlock","src":"46958:220:21","statements":[{"nodeType":"YulAssignment","src":"46968:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47034:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"47039:2:21","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46975:58:21"},"nodeType":"YulFunctionCall","src":"46975:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46968:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47140:3:21"}],"functionName":{"name":"store_literal_in_memory_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc","nodeType":"YulIdentifier","src":"47051:88:21"},"nodeType":"YulFunctionCall","src":"47051:93:21"},"nodeType":"YulExpressionStatement","src":"47051:93:21"},{"nodeType":"YulAssignment","src":"47153:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47164:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"47169:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47160:3:21"},"nodeType":"YulFunctionCall","src":"47160:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47153:3:21"}]}]},"name":"abi_encode_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46946:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46954:3:21","type":""}],"src":"46812:366:21"},{"body":{"nodeType":"YulBlock","src":"47355:248:21","statements":[{"nodeType":"YulAssignment","src":"47365:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47377:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"47388:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47373:3:21"},"nodeType":"YulFunctionCall","src":"47373:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47365:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47412:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"47423:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47408:3:21"},"nodeType":"YulFunctionCall","src":"47408:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47431:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"47437:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47427:3:21"},"nodeType":"YulFunctionCall","src":"47427:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47401:6:21"},"nodeType":"YulFunctionCall","src":"47401:47:21"},"nodeType":"YulExpressionStatement","src":"47401:47:21"},{"nodeType":"YulAssignment","src":"47457:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47591:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47465:124:21"},"nodeType":"YulFunctionCall","src":"47465:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47457:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47335:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47350:4:21","type":""}],"src":"47184:419:21"},{"body":{"nodeType":"YulBlock","src":"47674:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47691:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"47714:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"47696:17:21"},"nodeType":"YulFunctionCall","src":"47696:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47684:6:21"},"nodeType":"YulFunctionCall","src":"47684:37:21"},"nodeType":"YulExpressionStatement","src":"47684:37:21"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47662:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"47669:3:21","type":""}],"src":"47609:118:21"},{"body":{"nodeType":"YulBlock","src":"47831:124:21","statements":[{"nodeType":"YulAssignment","src":"47841:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47853:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"47864:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47849:3:21"},"nodeType":"YulFunctionCall","src":"47849:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47841:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"47921:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47934:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"47945:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47930:3:21"},"nodeType":"YulFunctionCall","src":"47930:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"47877:43:21"},"nodeType":"YulFunctionCall","src":"47877:71:21"},"nodeType":"YulExpressionStatement","src":"47877:71:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47803:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"47815:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47826:4:21","type":""}],"src":"47733:222:21"},{"body":{"nodeType":"YulBlock","src":"48028:89:21","statements":[{"nodeType":"YulAssignment","src":"48038:73:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48103:5:21"}],"functionName":{"name":"cleanup_t_rational_0_by_1","nodeType":"YulIdentifier","src":"48077:25:21"},"nodeType":"YulFunctionCall","src":"48077:32:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"48068:8:21"},"nodeType":"YulFunctionCall","src":"48068:42:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"48051:16:21"},"nodeType":"YulFunctionCall","src":"48051:60:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"48038:9:21"}]}]},"name":"convert_t_rational_0_by_1_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48008:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"48018:9:21","type":""}],"src":"47961:156:21"},{"body":{"nodeType":"YulBlock","src":"48195:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48212:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48255:5:21"}],"functionName":{"name":"convert_t_rational_0_by_1_to_t_uint32","nodeType":"YulIdentifier","src":"48217:37:21"},"nodeType":"YulFunctionCall","src":"48217:44:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48205:6:21"},"nodeType":"YulFunctionCall","src":"48205:57:21"},"nodeType":"YulExpressionStatement","src":"48205:57:21"}]},"name":"abi_encode_t_rational_0_by_1_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48183:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"48190:3:21","type":""}],"src":"48123:145:21"},{"body":{"nodeType":"YulBlock","src":"48332:40:21","statements":[{"nodeType":"YulAssignment","src":"48343:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48359:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"48353:5:21"},"nodeType":"YulFunctionCall","src":"48353:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"48343:6:21"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48315:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"48325:6:21","type":""}],"src":"48274:98:21"},{"body":{"nodeType":"YulBlock","src":"48473:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48490:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"48495:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48483:6:21"},"nodeType":"YulFunctionCall","src":"48483:19:21"},"nodeType":"YulExpressionStatement","src":"48483:19:21"},{"nodeType":"YulAssignment","src":"48511:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48530:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"48535:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48526:3:21"},"nodeType":"YulFunctionCall","src":"48526:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"48511:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48445:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"48450:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"48461:11:21","type":""}],"src":"48378:168:21"},{"body":{"nodeType":"YulBlock","src":"48614:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"48624:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"48633:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"48628:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"48693:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"48718:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"48723:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48714:3:21"},"nodeType":"YulFunctionCall","src":"48714:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"48737:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"48742:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48733:3:21"},"nodeType":"YulFunctionCall","src":"48733:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"48727:5:21"},"nodeType":"YulFunctionCall","src":"48727:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48707:6:21"},"nodeType":"YulFunctionCall","src":"48707:39:21"},"nodeType":"YulExpressionStatement","src":"48707:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"48654:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"48657:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"48651:2:21"},"nodeType":"YulFunctionCall","src":"48651:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"48665:19:21","statements":[{"nodeType":"YulAssignment","src":"48667:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"48676:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"48679:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48672:3:21"},"nodeType":"YulFunctionCall","src":"48672:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"48667:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"48647:3:21","statements":[]},"src":"48643:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"48776:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"48781:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48772:3:21"},"nodeType":"YulFunctionCall","src":"48772:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"48790:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48765:6:21"},"nodeType":"YulFunctionCall","src":"48765:27:21"},"nodeType":"YulExpressionStatement","src":"48765:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"48596:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"48601:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"48606:6:21","type":""}],"src":"48552:246:21"},{"body":{"nodeType":"YulBlock","src":"48894:283:21","statements":[{"nodeType":"YulVariableDeclaration","src":"48904:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"48950:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"48918:31:21"},"nodeType":"YulFunctionCall","src":"48918:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"48908:6:21","type":""}]},{"nodeType":"YulAssignment","src":"48965:77:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49030:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"49035:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48972:57:21"},"nodeType":"YulFunctionCall","src":"48972:70:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48965:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"49090:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"49097:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49086:3:21"},"nodeType":"YulFunctionCall","src":"49086:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"49104:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"49109:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"49051:34:21"},"nodeType":"YulFunctionCall","src":"49051:65:21"},"nodeType":"YulExpressionStatement","src":"49051:65:21"},{"nodeType":"YulAssignment","src":"49125:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49136:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"49163:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"49141:21:21"},"nodeType":"YulFunctionCall","src":"49141:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49132:3:21"},"nodeType":"YulFunctionCall","src":"49132:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49125:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48875:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"48882:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48890:3:21","type":""}],"src":"48804:373:21"},{"body":{"nodeType":"YulBlock","src":"49444:611:21","statements":[{"nodeType":"YulAssignment","src":"49454:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49466:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49477:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49462:3:21"},"nodeType":"YulFunctionCall","src":"49462:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49454:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49535:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49548:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49559:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49544:3:21"},"nodeType":"YulFunctionCall","src":"49544:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"49491:43:21"},"nodeType":"YulFunctionCall","src":"49491:71:21"},"nodeType":"YulExpressionStatement","src":"49491:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"49616:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49629:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49640:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49625:3:21"},"nodeType":"YulFunctionCall","src":"49625:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"49572:43:21"},"nodeType":"YulFunctionCall","src":"49572:72:21"},"nodeType":"YulExpressionStatement","src":"49572:72:21"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"49696:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49709:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49720:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49705:3:21"},"nodeType":"YulFunctionCall","src":"49705:18:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"49654:41:21"},"nodeType":"YulFunctionCall","src":"49654:70:21"},"nodeType":"YulExpressionStatement","src":"49654:70:21"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"49778:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49791:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49802:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49787:3:21"},"nodeType":"YulFunctionCall","src":"49787:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"49734:43:21"},"nodeType":"YulFunctionCall","src":"49734:72:21"},"nodeType":"YulExpressionStatement","src":"49734:72:21"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"49867:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49880:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49891:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49876:3:21"},"nodeType":"YulFunctionCall","src":"49876:19:21"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"49816:50:21"},"nodeType":"YulFunctionCall","src":"49816:80:21"},"nodeType":"YulExpressionStatement","src":"49816:80:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49917:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"49928:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49913:3:21"},"nodeType":"YulFunctionCall","src":"49913:19:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49938:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"49944:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49934:3:21"},"nodeType":"YulFunctionCall","src":"49934:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49906:6:21"},"nodeType":"YulFunctionCall","src":"49906:49:21"},"nodeType":"YulExpressionStatement","src":"49906:49:21"},{"nodeType":"YulAssignment","src":"49964:84:21","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"50034:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"50043:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49972:61:21"},"nodeType":"YulFunctionCall","src":"49972:76:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49964:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint16_t_bytes32_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_bytes32_t_uint32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49376:9:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"49388:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"49396:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"49404:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"49412:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"49420:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49428:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49439:4:21","type":""}],"src":"49183:872:21"},{"body":{"nodeType":"YulBlock","src":"50137:273:21","statements":[{"body":{"nodeType":"YulBlock","src":"50183:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"50185:77:21"},"nodeType":"YulFunctionCall","src":"50185:79:21"},"nodeType":"YulExpressionStatement","src":"50185:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"50158:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"50167:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50154:3:21"},"nodeType":"YulFunctionCall","src":"50154:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"50179:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"50150:3:21"},"nodeType":"YulFunctionCall","src":"50150:32:21"},"nodeType":"YulIf","src":"50147:119:21"},{"nodeType":"YulBlock","src":"50276:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"50291:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"50305:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"50295:6:21","type":""}]},{"nodeType":"YulAssignment","src":"50320:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50365:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"50376:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50361:3:21"},"nodeType":"YulFunctionCall","src":"50361:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"50385:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"50330:30:21"},"nodeType":"YulFunctionCall","src":"50330:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"50320:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50107:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"50118:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"50130:6:21","type":""}],"src":"50061:349:21"},{"body":{"nodeType":"YulBlock","src":"50478:79:21","statements":[{"nodeType":"YulAssignment","src":"50488:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"50503:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"50497:5:21"},"nodeType":"YulFunctionCall","src":"50497:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"50488:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"50545:5:21"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"50519:25:21"},"nodeType":"YulFunctionCall","src":"50519:32:21"},"nodeType":"YulExpressionStatement","src":"50519:32:21"}]},"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"50456:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"50464:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"50472:5:21","type":""}],"src":"50416:141:21"},{"body":{"nodeType":"YulBlock","src":"50639:273:21","statements":[{"body":{"nodeType":"YulBlock","src":"50685:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"50687:77:21"},"nodeType":"YulFunctionCall","src":"50687:79:21"},"nodeType":"YulExpressionStatement","src":"50687:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"50660:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"50669:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50656:3:21"},"nodeType":"YulFunctionCall","src":"50656:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"50681:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"50652:3:21"},"nodeType":"YulFunctionCall","src":"50652:32:21"},"nodeType":"YulIf","src":"50649:119:21"},{"nodeType":"YulBlock","src":"50778:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"50793:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"50807:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"50797:6:21","type":""}]},{"nodeType":"YulAssignment","src":"50822:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50867:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"50878:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50863:3:21"},"nodeType":"YulFunctionCall","src":"50863:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"50887:7:21"}],"functionName":{"name":"abi_decode_t_uint16_fromMemory","nodeType":"YulIdentifier","src":"50832:30:21"},"nodeType":"YulFunctionCall","src":"50832:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"50822:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50609:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"50620:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"50632:6:21","type":""}],"src":"50563:349:21"},{"body":{"nodeType":"YulBlock","src":"50946:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"50963:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"50966:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50956:6:21"},"nodeType":"YulFunctionCall","src":"50956:88:21"},"nodeType":"YulExpressionStatement","src":"50956:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"51060:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"51063:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51053:6:21"},"nodeType":"YulFunctionCall","src":"51053:15:21"},"nodeType":"YulExpressionStatement","src":"51053:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"51084:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"51087:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"51077:6:21"},"nodeType":"YulFunctionCall","src":"51077:15:21"},"nodeType":"YulExpressionStatement","src":"51077:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"50918:180:21"},{"body":{"nodeType":"YulBlock","src":"51202:40:21","statements":[{"nodeType":"YulAssignment","src":"51213:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"51229:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"51223:5:21"},"nodeType":"YulFunctionCall","src":"51223:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"51213:6:21"}]}]},"name":"array_length_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"51185:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"51195:6:21","type":""}],"src":"51104:138:21"},{"body":{"nodeType":"YulBlock","src":"51383:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51400:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"51405:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51393:6:21"},"nodeType":"YulFunctionCall","src":"51393:19:21"},"nodeType":"YulExpressionStatement","src":"51393:19:21"},{"nodeType":"YulAssignment","src":"51421:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51440:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"51445:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51436:3:21"},"nodeType":"YulFunctionCall","src":"51436:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"51421:11:21"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51355:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"51360:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"51371:11:21","type":""}],"src":"51248:208:21"},{"body":{"nodeType":"YulBlock","src":"51558:60:21","statements":[{"nodeType":"YulAssignment","src":"51568:11:21","value":{"name":"ptr","nodeType":"YulIdentifier","src":"51576:3:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"51568:4:21"}]},{"nodeType":"YulAssignment","src":"51589:22:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"51601:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"51606:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51597:3:21"},"nodeType":"YulFunctionCall","src":"51597:14:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"51589:4:21"}]}]},"name":"array_dataslot_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"51545:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"51553:4:21","type":""}],"src":"51462:156:21"},{"body":{"nodeType":"YulBlock","src":"51677:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51694:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"51716:5:21"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"51699:16:21"},"nodeType":"YulFunctionCall","src":"51699:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51687:6:21"},"nodeType":"YulFunctionCall","src":"51687:36:21"},"nodeType":"YulExpressionStatement","src":"51687:36:21"}]},"name":"abi_encode_t_uint16_to_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"51665:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"51672:3:21","type":""}],"src":"51624:105:21"},{"body":{"nodeType":"YulBlock","src":"51790:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51807:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"51830:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"51812:17:21"},"nodeType":"YulFunctionCall","src":"51812:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51800:6:21"},"nodeType":"YulFunctionCall","src":"51800:37:21"},"nodeType":"YulExpressionStatement","src":"51800:37:21"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"51778:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"51785:3:21","type":""}],"src":"51735:108:21"},{"body":{"nodeType":"YulBlock","src":"51902:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51919:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"51941:5:21"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"51924:16:21"},"nodeType":"YulFunctionCall","src":"51924:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51912:6:21"},"nodeType":"YulFunctionCall","src":"51912:36:21"},"nodeType":"YulExpressionStatement","src":"51912:36:21"}]},"name":"abi_encode_t_uint64_to_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"51890:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"51897:3:21","type":""}],"src":"51849:105:21"},{"body":{"nodeType":"YulBlock","src":"52130:578:21","statements":[{"nodeType":"YulVariableDeclaration","src":"52140:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52156:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"52161:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52152:3:21"},"nodeType":"YulFunctionCall","src":"52152:14:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"52144:4:21","type":""}]},{"nodeType":"YulBlock","src":"52176:165:21","statements":[{"nodeType":"YulVariableDeclaration","src":"52214:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"52244:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"52251:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52240:3:21"},"nodeType":"YulFunctionCall","src":"52240:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"52234:5:21"},"nodeType":"YulFunctionCall","src":"52234:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"52218:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"52302:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52320:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"52325:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52316:3:21"},"nodeType":"YulFunctionCall","src":"52316:14:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16","nodeType":"YulIdentifier","src":"52270:31:21"},"nodeType":"YulFunctionCall","src":"52270:61:21"},"nodeType":"YulExpressionStatement","src":"52270:61:21"}]},{"nodeType":"YulBlock","src":"52351:174:21","statements":[{"nodeType":"YulVariableDeclaration","src":"52396:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"52426:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"52433:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52422:3:21"},"nodeType":"YulFunctionCall","src":"52422:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"52416:5:21"},"nodeType":"YulFunctionCall","src":"52416:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"52400:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"52486:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52504:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"52509:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52500:3:21"},"nodeType":"YulFunctionCall","src":"52500:14:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"52452:33:21"},"nodeType":"YulFunctionCall","src":"52452:63:21"},"nodeType":"YulExpressionStatement","src":"52452:63:21"}]},{"nodeType":"YulBlock","src":"52535:166:21","statements":[{"nodeType":"YulVariableDeclaration","src":"52574:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"52604:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"52611:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52600:3:21"},"nodeType":"YulFunctionCall","src":"52600:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"52594:5:21"},"nodeType":"YulFunctionCall","src":"52594:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"52578:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"52662:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52680:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"52685:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52676:3:21"},"nodeType":"YulFunctionCall","src":"52676:14:21"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64","nodeType":"YulIdentifier","src":"52630:31:21"},"nodeType":"YulFunctionCall","src":"52630:61:21"},"nodeType":"YulExpressionStatement","src":"52630:61:21"}]}]},"name":"abi_encode_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"52117:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"52124:3:21","type":""}],"src":"52026:682:21"},{"body":{"nodeType":"YulBlock","src":"52842:147:21","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"52934:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"52942:3:21"}],"functionName":{"name":"abi_encode_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr","nodeType":"YulIdentifier","src":"52852:81:21"},"nodeType":"YulFunctionCall","src":"52852:94:21"},"nodeType":"YulExpressionStatement","src":"52852:94:21"},{"nodeType":"YulAssignment","src":"52955:28:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52973:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"52978:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52969:3:21"},"nodeType":"YulFunctionCall","src":"52969:14:21"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"52955:10:21"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"52815:6:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"52823:3:21","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"52831:10:21","type":""}],"src":"52714:275:21"},{"body":{"nodeType":"YulBlock","src":"53094:38:21","statements":[{"nodeType":"YulAssignment","src":"53104:22:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"53116:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"53121:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53112:3:21"},"nodeType":"YulFunctionCall","src":"53112:14:21"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"53104:4:21"}]}]},"name":"array_nextElement_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"53081:3:21","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"53089:4:21","type":""}],"src":"52995:137:21"},{"body":{"nodeType":"YulBlock","src":"53380:752:21","statements":[{"nodeType":"YulVariableDeclaration","src":"53390:92:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53476:5:21"}],"functionName":{"name":"array_length_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"53404:71:21"},"nodeType":"YulFunctionCall","src":"53404:78:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"53394:6:21","type":""}]},{"nodeType":"YulAssignment","src":"53491:117:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53596:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"53601:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"53498:97:21"},"nodeType":"YulFunctionCall","src":"53498:110:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"53491:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"53617:95:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53706:5:21"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"53632:73:21"},"nodeType":"YulFunctionCall","src":"53632:80:21"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"53621:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"53721:21:21","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"53735:7:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"53725:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"53811:296:21","statements":[{"nodeType":"YulVariableDeclaration","src":"53825:34:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"53852:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"53846:5:21"},"nodeType":"YulFunctionCall","src":"53846:13:21"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"53829:13:21","type":""}]},{"nodeType":"YulAssignment","src":"53872:118:21","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"53971:13:21"},{"name":"pos","nodeType":"YulIdentifier","src":"53986:3:21"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr","nodeType":"YulIdentifier","src":"53879:91:21"},"nodeType":"YulFunctionCall","src":"53879:111:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"53872:3:21"}]},{"nodeType":"YulAssignment","src":"54003:94:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"54090:6:21"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"54013:76:21"},"nodeType":"YulFunctionCall","src":"54013:84:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"54003:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"53773:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"53776:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"53770:2:21"},"nodeType":"YulFunctionCall","src":"53770:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"53784:18:21","statements":[{"nodeType":"YulAssignment","src":"53786:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"53795:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"53798:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53791:3:21"},"nodeType":"YulFunctionCall","src":"53791:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"53786:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"53755:14:21","statements":[{"nodeType":"YulVariableDeclaration","src":"53757:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"53766:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"53761:1:21","type":""}]}]},"src":"53751:356:21"},{"nodeType":"YulAssignment","src":"54116:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"54123:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"54116:3:21"}]}]},"name":"abi_encode_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"53359:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"53366:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53375:3:21","type":""}],"src":"53208:924:21"},{"body":{"nodeType":"YulBlock","src":"54552:925:21","statements":[{"nodeType":"YulAssignment","src":"54562:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54574:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"54585:3:21","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54570:3:21"},"nodeType":"YulFunctionCall","src":"54570:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54562:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"54641:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54654:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"54665:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54650:3:21"},"nodeType":"YulFunctionCall","src":"54650:17:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"54599:41:21"},"nodeType":"YulFunctionCall","src":"54599:69:21"},"nodeType":"YulExpressionStatement","src":"54599:69:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"54722:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54735:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"54746:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54731:3:21"},"nodeType":"YulFunctionCall","src":"54731:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"54678:43:21"},"nodeType":"YulFunctionCall","src":"54678:72:21"},"nodeType":"YulExpressionStatement","src":"54678:72:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54771:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"54782:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54767:3:21"},"nodeType":"YulFunctionCall","src":"54767:18:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"54791:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"54797:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"54787:3:21"},"nodeType":"YulFunctionCall","src":"54787:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"54760:6:21"},"nodeType":"YulFunctionCall","src":"54760:48:21"},"nodeType":"YulExpressionStatement","src":"54760:48:21"},{"nodeType":"YulAssignment","src":"54817:84:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"54887:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"54896:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"54825:61:21"},"nodeType":"YulFunctionCall","src":"54825:76:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"54817:4:21"}]},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"54963:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"54976:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"54987:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"54972:3:21"},"nodeType":"YulFunctionCall","src":"54972:18:21"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"54911:51:21"},"nodeType":"YulFunctionCall","src":"54911:80:21"},"nodeType":"YulExpressionStatement","src":"54911:80:21"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"55045:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55058:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"55069:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55054:3:21"},"nodeType":"YulFunctionCall","src":"55054:19:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"55001:43:21"},"nodeType":"YulFunctionCall","src":"55001:73:21"},"nodeType":"YulExpressionStatement","src":"55001:73:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55095:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"55106:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55091:3:21"},"nodeType":"YulFunctionCall","src":"55091:19:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"55116:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"55122:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"55112:3:21"},"nodeType":"YulFunctionCall","src":"55112:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55084:6:21"},"nodeType":"YulFunctionCall","src":"55084:49:21"},"nodeType":"YulExpressionStatement","src":"55084:49:21"},{"nodeType":"YulAssignment","src":"55142:164:21","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"55292:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"55301:4:21"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"55150:141:21"},"nodeType":"YulFunctionCall","src":"55150:156:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"55142:4:21"}]},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"55358:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55371:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"55382:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55367:3:21"},"nodeType":"YulFunctionCall","src":"55367:19:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"55316:41:21"},"nodeType":"YulFunctionCall","src":"55316:71:21"},"nodeType":"YulExpressionStatement","src":"55316:71:21"},{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"55441:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"55454:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"55465:3:21","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55450:3:21"},"nodeType":"YulFunctionCall","src":"55450:19:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"55397:43:21"},"nodeType":"YulFunctionCall","src":"55397:73:21"},"nodeType":"YulExpressionStatement","src":"55397:73:21"}]},"name":"abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_rational_0_by_1_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__to_t_uint16_t_address_t_bytes_memory_ptr_t_uint256_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"54468:9:21","type":""},{"name":"value7","nodeType":"YulTypedName","src":"54480:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"54488:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"54496:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"54504:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"54512:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"54520:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"54528:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"54536:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"54547:4:21","type":""}],"src":"54138:1339:21"},{"body":{"nodeType":"YulBlock","src":"55511:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"55528:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"55531:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55521:6:21"},"nodeType":"YulFunctionCall","src":"55521:88:21"},"nodeType":"YulExpressionStatement","src":"55521:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"55625:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"55628:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55618:6:21"},"nodeType":"YulFunctionCall","src":"55618:15:21"},"nodeType":"YulExpressionStatement","src":"55618:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"55649:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"55652:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"55642:6:21"},"nodeType":"YulFunctionCall","src":"55642:15:21"},"nodeType":"YulExpressionStatement","src":"55642:15:21"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"55483:180:21"},{"body":{"nodeType":"YulBlock","src":"55711:143:21","statements":[{"nodeType":"YulAssignment","src":"55721:25:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"55744:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"55726:17:21"},"nodeType":"YulFunctionCall","src":"55726:20:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"55721:1:21"}]},{"nodeType":"YulAssignment","src":"55755:25:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"55778:1:21"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"55760:17:21"},"nodeType":"YulFunctionCall","src":"55760:20:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"55755:1:21"}]},{"body":{"nodeType":"YulBlock","src":"55802:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"55804:16:21"},"nodeType":"YulFunctionCall","src":"55804:18:21"},"nodeType":"YulExpressionStatement","src":"55804:18:21"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"55799:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"55792:6:21"},"nodeType":"YulFunctionCall","src":"55792:9:21"},"nodeType":"YulIf","src":"55789:35:21"},{"nodeType":"YulAssignment","src":"55834:14:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"55843:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"55846:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"55839:3:21"},"nodeType":"YulFunctionCall","src":"55839:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"55834:1:21"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"55700:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"55703:1:21","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"55709:1:21","type":""}],"src":"55669:185:21"},{"body":{"nodeType":"YulBlock","src":"55966:66:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"55988:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"55996:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"55984:3:21"},"nodeType":"YulFunctionCall","src":"55984:14:21"},{"hexValue":"5661756c742061646472657373206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"56000:24:21","type":"","value":"Vault address mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"55977:6:21"},"nodeType":"YulFunctionCall","src":"55977:48:21"},"nodeType":"YulExpressionStatement","src":"55977:48:21"}]},"name":"store_literal_in_memory_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"55958:6:21","type":""}],"src":"55860:172:21"},{"body":{"nodeType":"YulBlock","src":"56184:220:21","statements":[{"nodeType":"YulAssignment","src":"56194:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"56260:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"56265:2:21","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"56201:58:21"},"nodeType":"YulFunctionCall","src":"56201:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"56194:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"56366:3:21"}],"functionName":{"name":"store_literal_in_memory_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45","nodeType":"YulIdentifier","src":"56277:88:21"},"nodeType":"YulFunctionCall","src":"56277:93:21"},"nodeType":"YulExpressionStatement","src":"56277:93:21"},{"nodeType":"YulAssignment","src":"56379:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"56390:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"56395:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56386:3:21"},"nodeType":"YulFunctionCall","src":"56386:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"56379:3:21"}]}]},"name":"abi_encode_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"56172:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"56180:3:21","type":""}],"src":"56038:366:21"},{"body":{"nodeType":"YulBlock","src":"56581:248:21","statements":[{"nodeType":"YulAssignment","src":"56591:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56603:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"56614:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56599:3:21"},"nodeType":"YulFunctionCall","src":"56599:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"56591:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"56638:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"56649:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"56634:3:21"},"nodeType":"YulFunctionCall","src":"56634:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"56657:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"56663:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"56653:3:21"},"nodeType":"YulFunctionCall","src":"56653:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56627:6:21"},"nodeType":"YulFunctionCall","src":"56627:47:21"},"nodeType":"YulExpressionStatement","src":"56627:47:21"},{"nodeType":"YulAssignment","src":"56683:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"56817:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"56691:124:21"},"nodeType":"YulFunctionCall","src":"56691:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"56683:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"56561:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"56576:4:21","type":""}],"src":"56410:419:21"},{"body":{"nodeType":"YulBlock","src":"56888:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"56905:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"56927:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"56910:16:21"},"nodeType":"YulFunctionCall","src":"56910:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56898:6:21"},"nodeType":"YulFunctionCall","src":"56898:36:21"},"nodeType":"YulExpressionStatement","src":"56898:36:21"}]},"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"56876:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"56883:3:21","type":""}],"src":"56835:105:21"},{"body":{"nodeType":"YulBlock","src":"57031:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57048:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"57053:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"57041:6:21"},"nodeType":"YulFunctionCall","src":"57041:19:21"},"nodeType":"YulExpressionStatement","src":"57041:19:21"},{"nodeType":"YulAssignment","src":"57069:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57088:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"57093:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57084:3:21"},"nodeType":"YulFunctionCall","src":"57084:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"57069:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"57003:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"57008:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"57019:11:21","type":""}],"src":"56946:158:21"},{"body":{"nodeType":"YulBlock","src":"57190:273:21","statements":[{"nodeType":"YulVariableDeclaration","src":"57200:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"57246:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"57214:31:21"},"nodeType":"YulFunctionCall","src":"57214:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"57204:6:21","type":""}]},{"nodeType":"YulAssignment","src":"57261:67:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57316:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"57321:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"57268:47:21"},"nodeType":"YulFunctionCall","src":"57268:60:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"57261:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"57376:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"57383:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57372:3:21"},"nodeType":"YulFunctionCall","src":"57372:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"57390:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"57395:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"57337:34:21"},"nodeType":"YulFunctionCall","src":"57337:65:21"},"nodeType":"YulExpressionStatement","src":"57337:65:21"},{"nodeType":"YulAssignment","src":"57411:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57422:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"57449:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"57427:21:21"},"nodeType":"YulFunctionCall","src":"57427:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57418:3:21"},"nodeType":"YulFunctionCall","src":"57418:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"57411:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"57171:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"57178:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"57186:3:21","type":""}],"src":"57110:353:21"},{"body":{"nodeType":"YulBlock","src":"57683:915:21","statements":[{"nodeType":"YulVariableDeclaration","src":"57693:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57709:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"57714:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57705:3:21"},"nodeType":"YulFunctionCall","src":"57705:14:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"57697:4:21","type":""}]},{"nodeType":"YulBlock","src":"57729:165:21","statements":[{"nodeType":"YulVariableDeclaration","src":"57767:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"57797:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"57804:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57793:3:21"},"nodeType":"YulFunctionCall","src":"57793:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"57787:5:21"},"nodeType":"YulFunctionCall","src":"57787:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"57771:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"57855:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"57873:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"57878:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57869:3:21"},"nodeType":"YulFunctionCall","src":"57869:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"57823:31:21"},"nodeType":"YulFunctionCall","src":"57823:61:21"},"nodeType":"YulExpressionStatement","src":"57823:61:21"}]},{"nodeType":"YulBlock","src":"57904:240:21","statements":[{"nodeType":"YulVariableDeclaration","src":"57946:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"57976:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"57983:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"57972:3:21"},"nodeType":"YulFunctionCall","src":"57972:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"57966:5:21"},"nodeType":"YulFunctionCall","src":"57966:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"57950:12:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58014:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"58019:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"58010:3:21"},"nodeType":"YulFunctionCall","src":"58010:14:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"58030:4:21"},{"name":"pos","nodeType":"YulIdentifier","src":"58036:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"58026:3:21"},"nodeType":"YulFunctionCall","src":"58026:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"58003:6:21"},"nodeType":"YulFunctionCall","src":"58003:38:21"},"nodeType":"YulExpressionStatement","src":"58003:38:21"},{"nodeType":"YulAssignment","src":"58054:79:21","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"58114:12:21"},{"name":"tail","nodeType":"YulIdentifier","src":"58128:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"58062:51:21"},"nodeType":"YulFunctionCall","src":"58062:71:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"58054:4:21"}]}]},{"nodeType":"YulBlock","src":"58154:241:21","statements":[{"nodeType":"YulVariableDeclaration","src":"58197:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"58227:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"58234:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"58223:3:21"},"nodeType":"YulFunctionCall","src":"58223:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"58217:5:21"},"nodeType":"YulFunctionCall","src":"58217:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"58201:12:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58265:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"58270:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"58261:3:21"},"nodeType":"YulFunctionCall","src":"58261:14:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"58281:4:21"},{"name":"pos","nodeType":"YulIdentifier","src":"58287:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"58277:3:21"},"nodeType":"YulFunctionCall","src":"58277:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"58254:6:21"},"nodeType":"YulFunctionCall","src":"58254:38:21"},"nodeType":"YulExpressionStatement","src":"58254:38:21"},{"nodeType":"YulAssignment","src":"58305:79:21","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"58365:12:21"},{"name":"tail","nodeType":"YulIdentifier","src":"58379:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"58313:51:21"},"nodeType":"YulFunctionCall","src":"58313:71:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"58305:4:21"}]}]},{"nodeType":"YulBlock","src":"58405:166:21","statements":[{"nodeType":"YulVariableDeclaration","src":"58444:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"58474:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"58481:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"58470:3:21"},"nodeType":"YulFunctionCall","src":"58470:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"58464:5:21"},"nodeType":"YulFunctionCall","src":"58464:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"58448:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"58532:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58550:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"58555:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"58546:3:21"},"nodeType":"YulFunctionCall","src":"58546:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"58500:31:21"},"nodeType":"YulFunctionCall","src":"58500:61:21"},"nodeType":"YulExpressionStatement","src":"58500:61:21"}]},{"nodeType":"YulAssignment","src":"58581:11:21","value":{"name":"tail","nodeType":"YulIdentifier","src":"58588:4:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"58581:3:21"}]}]},"name":"abi_encode_t_struct$_BitcoinTxInfo_$4731_memory_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"57662:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"57669:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"57678:3:21","type":""}],"src":"57547:1051:21"},{"body":{"nodeType":"YulBlock","src":"58657:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58674:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"58696:5:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"58679:16:21"},"nodeType":"YulFunctionCall","src":"58679:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"58667:6:21"},"nodeType":"YulFunctionCall","src":"58667:36:21"},"nodeType":"YulExpressionStatement","src":"58667:36:21"}]},"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"58645:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"58652:3:21","type":""}],"src":"58604:105:21"},{"body":{"nodeType":"YulBlock","src":"58768:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58785:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"58807:5:21"}],"functionName":{"name":"cleanup_t_bytes8","nodeType":"YulIdentifier","src":"58790:16:21"},"nodeType":"YulFunctionCall","src":"58790:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"58778:6:21"},"nodeType":"YulFunctionCall","src":"58778:36:21"},"nodeType":"YulExpressionStatement","src":"58778:36:21"}]},"name":"abi_encode_t_bytes8_to_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"58756:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"58763:3:21","type":""}],"src":"58715:105:21"},{"body":{"nodeType":"YulBlock","src":"58881:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"58898:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"58921:5:21"}],"functionName":{"name":"cleanup_t_bytes20","nodeType":"YulIdentifier","src":"58903:17:21"},"nodeType":"YulFunctionCall","src":"58903:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"58891:6:21"},"nodeType":"YulFunctionCall","src":"58891:37:21"},"nodeType":"YulExpressionStatement","src":"58891:37:21"}]},"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"58869:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"58876:3:21","type":""}],"src":"58826:108:21"},{"body":{"nodeType":"YulBlock","src":"58995:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"59012:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"59035:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"59017:17:21"},"nodeType":"YulFunctionCall","src":"59017:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"59005:6:21"},"nodeType":"YulFunctionCall","src":"59005:37:21"},"nodeType":"YulExpressionStatement","src":"59005:37:21"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"58983:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"58990:3:21","type":""}],"src":"58940:108:21"},{"body":{"nodeType":"YulBlock","src":"59276:1140:21","statements":[{"nodeType":"YulVariableDeclaration","src":"59286:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"59302:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"59307:4:21","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59298:3:21"},"nodeType":"YulFunctionCall","src":"59298:14:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"59290:4:21","type":""}]},{"nodeType":"YulBlock","src":"59322:176:21","statements":[{"nodeType":"YulVariableDeclaration","src":"59371:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"59401:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"59408:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59397:3:21"},"nodeType":"YulFunctionCall","src":"59397:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"59391:5:21"},"nodeType":"YulFunctionCall","src":"59391:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"59375:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"59459:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"59477:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"59482:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59473:3:21"},"nodeType":"YulFunctionCall","src":"59473:14:21"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulIdentifier","src":"59427:31:21"},"nodeType":"YulFunctionCall","src":"59427:61:21"},"nodeType":"YulExpressionStatement","src":"59427:61:21"}]},{"nodeType":"YulBlock","src":"59508:172:21","statements":[{"nodeType":"YulVariableDeclaration","src":"59553:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"59583:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"59590:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59579:3:21"},"nodeType":"YulFunctionCall","src":"59579:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"59573:5:21"},"nodeType":"YulFunctionCall","src":"59573:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"59557:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"59641:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"59659:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"59664:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59655:3:21"},"nodeType":"YulFunctionCall","src":"59655:14:21"}],"functionName":{"name":"abi_encode_t_bytes8_to_t_bytes8","nodeType":"YulIdentifier","src":"59609:31:21"},"nodeType":"YulFunctionCall","src":"59609:61:21"},"nodeType":"YulExpressionStatement","src":"59609:61:21"}]},{"nodeType":"YulBlock","src":"59690:176:21","statements":[{"nodeType":"YulVariableDeclaration","src":"59737:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"59767:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"59774:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59763:3:21"},"nodeType":"YulFunctionCall","src":"59763:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"59757:5:21"},"nodeType":"YulFunctionCall","src":"59757:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"59741:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"59827:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"59845:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"59850:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59841:3:21"},"nodeType":"YulFunctionCall","src":"59841:14:21"}],"functionName":{"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulIdentifier","src":"59793:33:21"},"nodeType":"YulFunctionCall","src":"59793:63:21"},"nodeType":"YulExpressionStatement","src":"59793:63:21"}]},{"nodeType":"YulBlock","src":"59876:176:21","statements":[{"nodeType":"YulVariableDeclaration","src":"59923:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"59953:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"59960:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"59949:3:21"},"nodeType":"YulFunctionCall","src":"59949:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"59943:5:21"},"nodeType":"YulFunctionCall","src":"59943:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"59927:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"60013:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"60031:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"60036:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60027:3:21"},"nodeType":"YulFunctionCall","src":"60027:14:21"}],"functionName":{"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulIdentifier","src":"59979:33:21"},"nodeType":"YulFunctionCall","src":"59979:63:21"},"nodeType":"YulExpressionStatement","src":"59979:63:21"}]},{"nodeType":"YulBlock","src":"60062:172:21","statements":[{"nodeType":"YulVariableDeclaration","src":"60107:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"60137:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"60144:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60133:3:21"},"nodeType":"YulFunctionCall","src":"60133:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"60127:5:21"},"nodeType":"YulFunctionCall","src":"60127:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"60111:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"60195:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"60213:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"60218:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60209:3:21"},"nodeType":"YulFunctionCall","src":"60209:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"60163:31:21"},"nodeType":"YulFunctionCall","src":"60163:61:21"},"nodeType":"YulExpressionStatement","src":"60163:61:21"}]},{"nodeType":"YulBlock","src":"60244:165:21","statements":[{"nodeType":"YulVariableDeclaration","src":"60280:43:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"60310:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"60317:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60306:3:21"},"nodeType":"YulFunctionCall","src":"60306:16:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"60300:5:21"},"nodeType":"YulFunctionCall","src":"60300:23:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"60284:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"60370:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"60388:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"60393:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60384:3:21"},"nodeType":"YulFunctionCall","src":"60384:14:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"60336:33:21"},"nodeType":"YulFunctionCall","src":"60336:63:21"},"nodeType":"YulExpressionStatement","src":"60336:63:21"}]}]},"name":"abi_encode_t_struct$_DepositRevealInfo_$4744_memory_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"59263:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"59270:3:21","type":""}],"src":"59140:1276:21"},{"body":{"nodeType":"YulBlock","src":"60708:473:21","statements":[{"nodeType":"YulAssignment","src":"60718:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"60730:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"60741:3:21","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60726:3:21"},"nodeType":"YulFunctionCall","src":"60726:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"60718:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"60766:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"60777:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"60762:3:21"},"nodeType":"YulFunctionCall","src":"60762:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"60785:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"60791:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"60781:3:21"},"nodeType":"YulFunctionCall","src":"60781:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"60755:6:21"},"nodeType":"YulFunctionCall","src":"60755:47:21"},"nodeType":"YulExpressionStatement","src":"60755:47:21"},{"nodeType":"YulAssignment","src":"60811:128:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"60925:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"60934:4:21"}],"functionName":{"name":"abi_encode_t_struct$_BitcoinTxInfo_$4731_memory_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"60819:105:21"},"nodeType":"YulFunctionCall","src":"60819:120:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"60811:4:21"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"61063:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"61076:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"61087:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61072:3:21"},"nodeType":"YulFunctionCall","src":"61072:18:21"}],"functionName":{"name":"abi_encode_t_struct$_DepositRevealInfo_$4744_memory_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"60949:113:21"},"nodeType":"YulFunctionCall","src":"60949:142:21"},"nodeType":"YulExpressionStatement","src":"60949:142:21"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"61145:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"61158:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"61169:3:21","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61154:3:21"},"nodeType":"YulFunctionCall","src":"61154:19:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"61101:43:21"},"nodeType":"YulFunctionCall","src":"61101:73:21"},"nodeType":"YulExpressionStatement","src":"61101:73:21"}]},"name":"abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"60664:9:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"60676:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"60684:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"60692:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"60703:4:21","type":""}],"src":"60422:759:21"},{"body":{"nodeType":"YulBlock","src":"61293:122:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"61315:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"61323:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61311:3:21"},"nodeType":"YulFunctionCall","src":"61311:14:21"},{"hexValue":"4162737472616374544254434465706f7369746f7220616c726561647920696e","kind":"string","nodeType":"YulLiteral","src":"61327:34:21","type":"","value":"AbstractTBTCDepositor already in"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"61304:6:21"},"nodeType":"YulFunctionCall","src":"61304:58:21"},"nodeType":"YulExpressionStatement","src":"61304:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"61383:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"61391:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61379:3:21"},"nodeType":"YulFunctionCall","src":"61379:15:21"},{"hexValue":"697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"61396:11:21","type":"","value":"itialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"61372:6:21"},"nodeType":"YulFunctionCall","src":"61372:36:21"},"nodeType":"YulExpressionStatement","src":"61372:36:21"}]},"name":"store_literal_in_memory_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"61285:6:21","type":""}],"src":"61187:228:21"},{"body":{"nodeType":"YulBlock","src":"61567:220:21","statements":[{"nodeType":"YulAssignment","src":"61577:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"61643:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"61648:2:21","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"61584:58:21"},"nodeType":"YulFunctionCall","src":"61584:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"61577:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"61749:3:21"}],"functionName":{"name":"store_literal_in_memory_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506","nodeType":"YulIdentifier","src":"61660:88:21"},"nodeType":"YulFunctionCall","src":"61660:93:21"},"nodeType":"YulExpressionStatement","src":"61660:93:21"},{"nodeType":"YulAssignment","src":"61762:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"61773:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"61778:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61769:3:21"},"nodeType":"YulFunctionCall","src":"61769:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"61762:3:21"}]}]},"name":"abi_encode_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"61555:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"61563:3:21","type":""}],"src":"61421:366:21"},{"body":{"nodeType":"YulBlock","src":"61964:248:21","statements":[{"nodeType":"YulAssignment","src":"61974:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"61986:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"61997:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"61982:3:21"},"nodeType":"YulFunctionCall","src":"61982:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"61974:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"62021:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"62032:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"62017:3:21"},"nodeType":"YulFunctionCall","src":"62017:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"62040:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"62046:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"62036:3:21"},"nodeType":"YulFunctionCall","src":"62036:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"62010:6:21"},"nodeType":"YulFunctionCall","src":"62010:47:21"},"nodeType":"YulExpressionStatement","src":"62010:47:21"},{"nodeType":"YulAssignment","src":"62066:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"62200:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"62074:124:21"},"nodeType":"YulFunctionCall","src":"62074:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"62066:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61944:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"61959:4:21","type":""}],"src":"61793:419:21"},{"body":{"nodeType":"YulBlock","src":"62324:73:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"62346:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"62354:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"62342:3:21"},"nodeType":"YulFunctionCall","src":"62342:14:21"},{"hexValue":"42726964676520616464726573732063616e6e6f74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"62358:31:21","type":"","value":"Bridge address cannot be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"62335:6:21"},"nodeType":"YulFunctionCall","src":"62335:55:21"},"nodeType":"YulExpressionStatement","src":"62335:55:21"}]},"name":"store_literal_in_memory_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"62316:6:21","type":""}],"src":"62218:179:21"},{"body":{"nodeType":"YulBlock","src":"62549:220:21","statements":[{"nodeType":"YulAssignment","src":"62559:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"62625:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"62630:2:21","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"62566:58:21"},"nodeType":"YulFunctionCall","src":"62566:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"62559:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"62731:3:21"}],"functionName":{"name":"store_literal_in_memory_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4","nodeType":"YulIdentifier","src":"62642:88:21"},"nodeType":"YulFunctionCall","src":"62642:93:21"},"nodeType":"YulExpressionStatement","src":"62642:93:21"},{"nodeType":"YulAssignment","src":"62744:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"62755:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"62760:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"62751:3:21"},"nodeType":"YulFunctionCall","src":"62751:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"62744:3:21"}]}]},"name":"abi_encode_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"62537:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"62545:3:21","type":""}],"src":"62403:366:21"},{"body":{"nodeType":"YulBlock","src":"62946:248:21","statements":[{"nodeType":"YulAssignment","src":"62956:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"62968:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"62979:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"62964:3:21"},"nodeType":"YulFunctionCall","src":"62964:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"62956:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"63003:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"63014:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"62999:3:21"},"nodeType":"YulFunctionCall","src":"62999:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"63022:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"63028:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"63018:3:21"},"nodeType":"YulFunctionCall","src":"63018:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"62992:6:21"},"nodeType":"YulFunctionCall","src":"62992:47:21"},"nodeType":"YulExpressionStatement","src":"62992:47:21"},{"nodeType":"YulAssignment","src":"63048:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"63182:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"63056:124:21"},"nodeType":"YulFunctionCall","src":"63056:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"63048:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"62926:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"62941:4:21","type":""}],"src":"62775:419:21"},{"body":{"nodeType":"YulBlock","src":"63306:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"63328:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"63336:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"63324:3:21"},"nodeType":"YulFunctionCall","src":"63324:14:21"},{"hexValue":"544254435661756c7420616464726573732063616e6e6f74206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"63340:34:21","type":"","value":"TBTCVault address cannot be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"63317:6:21"},"nodeType":"YulFunctionCall","src":"63317:58:21"},"nodeType":"YulExpressionStatement","src":"63317:58:21"}]},"name":"store_literal_in_memory_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"63298:6:21","type":""}],"src":"63200:182:21"},{"body":{"nodeType":"YulBlock","src":"63534:220:21","statements":[{"nodeType":"YulAssignment","src":"63544:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"63610:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"63615:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"63551:58:21"},"nodeType":"YulFunctionCall","src":"63551:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"63544:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"63716:3:21"}],"functionName":{"name":"store_literal_in_memory_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4","nodeType":"YulIdentifier","src":"63627:88:21"},"nodeType":"YulFunctionCall","src":"63627:93:21"},"nodeType":"YulExpressionStatement","src":"63627:93:21"},{"nodeType":"YulAssignment","src":"63729:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"63740:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"63745:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"63736:3:21"},"nodeType":"YulFunctionCall","src":"63736:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"63729:3:21"}]}]},"name":"abi_encode_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"63522:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"63530:3:21","type":""}],"src":"63388:366:21"},{"body":{"nodeType":"YulBlock","src":"63931:248:21","statements":[{"nodeType":"YulAssignment","src":"63941:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"63953:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"63964:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"63949:3:21"},"nodeType":"YulFunctionCall","src":"63949:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"63941:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"63988:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"63999:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"63984:3:21"},"nodeType":"YulFunctionCall","src":"63984:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"64007:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"64013:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"64003:3:21"},"nodeType":"YulFunctionCall","src":"64003:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"63977:6:21"},"nodeType":"YulFunctionCall","src":"63977:47:21"},"nodeType":"YulExpressionStatement","src":"63977:47:21"},{"nodeType":"YulAssignment","src":"64033:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"64167:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"64041:124:21"},"nodeType":"YulFunctionCall","src":"64041:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"64033:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"63911:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"63926:4:21","type":""}],"src":"63760:419:21"},{"body":{"nodeType":"YulBlock","src":"64291:124:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"64313:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"64321:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"64309:3:21"},"nodeType":"YulFunctionCall","src":"64309:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"64325:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"64302:6:21"},"nodeType":"YulFunctionCall","src":"64302:58:21"},"nodeType":"YulExpressionStatement","src":"64302:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"64381:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"64389:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"64377:3:21"},"nodeType":"YulFunctionCall","src":"64377:15:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"64394:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"64370:6:21"},"nodeType":"YulFunctionCall","src":"64370:38:21"},"nodeType":"YulExpressionStatement","src":"64370:38:21"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"64283:6:21","type":""}],"src":"64185:230:21"},{"body":{"nodeType":"YulBlock","src":"64567:220:21","statements":[{"nodeType":"YulAssignment","src":"64577:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"64643:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"64648:2:21","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"64584:58:21"},"nodeType":"YulFunctionCall","src":"64584:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"64577:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"64749:3:21"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"64660:88:21"},"nodeType":"YulFunctionCall","src":"64660:93:21"},"nodeType":"YulExpressionStatement","src":"64660:93:21"},{"nodeType":"YulAssignment","src":"64762:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"64773:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"64778:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"64769:3:21"},"nodeType":"YulFunctionCall","src":"64769:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"64762:3:21"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"64555:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"64563:3:21","type":""}],"src":"64421:366:21"},{"body":{"nodeType":"YulBlock","src":"64964:248:21","statements":[{"nodeType":"YulAssignment","src":"64974:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"64986:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"64997:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"64982:3:21"},"nodeType":"YulFunctionCall","src":"64982:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"64974:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"65021:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"65032:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"65017:3:21"},"nodeType":"YulFunctionCall","src":"65017:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"65040:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"65046:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"65036:3:21"},"nodeType":"YulFunctionCall","src":"65036:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"65010:6:21"},"nodeType":"YulFunctionCall","src":"65010:47:21"},"nodeType":"YulExpressionStatement","src":"65010:47:21"},{"nodeType":"YulAssignment","src":"65066:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"65200:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"65074:124:21"},"nodeType":"YulFunctionCall","src":"65074:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"65066:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"64944:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"64959:4:21","type":""}],"src":"64793:419:21"},{"body":{"nodeType":"YulBlock","src":"65262:164:21","statements":[{"nodeType":"YulAssignment","src":"65272:24:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"65294:1:21"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"65277:16:21"},"nodeType":"YulFunctionCall","src":"65277:19:21"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"65272:1:21"}]},{"nodeType":"YulAssignment","src":"65305:24:21","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"65327:1:21"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"65310:16:21"},"nodeType":"YulFunctionCall","src":"65310:19:21"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"65305:1:21"}]},{"nodeType":"YulAssignment","src":"65338:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"65350:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"65353:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"65346:3:21"},"nodeType":"YulFunctionCall","src":"65346:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"65338:4:21"}]},{"body":{"nodeType":"YulBlock","src":"65397:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"65399:16:21"},"nodeType":"YulFunctionCall","src":"65399:18:21"},"nodeType":"YulExpressionStatement","src":"65399:18:21"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"65371:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"65377:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"65368:2:21"},"nodeType":"YulFunctionCall","src":"65368:28:21"},"nodeType":"YulIf","src":"65365:54:21"}]},"name":"checked_sub_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"65248:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"65251:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"65257:4:21","type":""}],"src":"65218:208:21"},{"body":{"nodeType":"YulBlock","src":"65508:273:21","statements":[{"body":{"nodeType":"YulBlock","src":"65554:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"65556:77:21"},"nodeType":"YulFunctionCall","src":"65556:79:21"},"nodeType":"YulExpressionStatement","src":"65556:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"65529:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"65538:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"65525:3:21"},"nodeType":"YulFunctionCall","src":"65525:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"65550:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"65521:3:21"},"nodeType":"YulFunctionCall","src":"65521:32:21"},"nodeType":"YulIf","src":"65518:119:21"},{"nodeType":"YulBlock","src":"65647:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"65662:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"65676:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"65666:6:21","type":""}]},{"nodeType":"YulAssignment","src":"65691:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"65736:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"65747:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"65732:3:21"},"nodeType":"YulFunctionCall","src":"65732:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"65756:7:21"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"65701:30:21"},"nodeType":"YulFunctionCall","src":"65701:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"65691:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"65478:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"65489:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"65501:6:21","type":""}],"src":"65432:349:21"},{"body":{"nodeType":"YulBlock","src":"65911:688:21","statements":[{"body":{"nodeType":"YulBlock","src":"65958:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"65960:77:21"},"nodeType":"YulFunctionCall","src":"65960:79:21"},"nodeType":"YulExpressionStatement","src":"65960:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"65932:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"65941:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"65928:3:21"},"nodeType":"YulFunctionCall","src":"65928:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"65953:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"65924:3:21"},"nodeType":"YulFunctionCall","src":"65924:33:21"},"nodeType":"YulIf","src":"65921:120:21"},{"nodeType":"YulBlock","src":"66051:127:21","statements":[{"nodeType":"YulVariableDeclaration","src":"66066:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"66080:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"66070:6:21","type":""}]},{"nodeType":"YulAssignment","src":"66095:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66140:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"66151:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66136:3:21"},"nodeType":"YulFunctionCall","src":"66136:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"66160:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"66105:30:21"},"nodeType":"YulFunctionCall","src":"66105:63:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"66095:6:21"}]}]},{"nodeType":"YulBlock","src":"66188:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"66203:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"66217:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"66207:6:21","type":""}]},{"nodeType":"YulAssignment","src":"66233:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66278:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"66289:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66274:3:21"},"nodeType":"YulFunctionCall","src":"66274:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"66298:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"66243:30:21"},"nodeType":"YulFunctionCall","src":"66243:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"66233:6:21"}]}]},{"nodeType":"YulBlock","src":"66326:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"66341:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"66355:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"66345:6:21","type":""}]},{"nodeType":"YulAssignment","src":"66371:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66416:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"66427:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66412:3:21"},"nodeType":"YulFunctionCall","src":"66412:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"66436:7:21"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"66381:30:21"},"nodeType":"YulFunctionCall","src":"66381:63:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"66371:6:21"}]}]},{"nodeType":"YulBlock","src":"66464:128:21","statements":[{"nodeType":"YulVariableDeclaration","src":"66479:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"66493:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"66483:6:21","type":""}]},{"nodeType":"YulAssignment","src":"66509:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66554:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"66565:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66550:3:21"},"nodeType":"YulFunctionCall","src":"66550:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"66574:7:21"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"66519:30:21"},"nodeType":"YulFunctionCall","src":"66519:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"66509:6:21"}]}]}]},"name":"abi_decode_tuple_t_uint64t_uint64t_uint64t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"65857:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"65868:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"65880:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"65888:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"65896:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"65904:6:21","type":""}],"src":"65787:812:21"},{"body":{"nodeType":"YulBlock","src":"66731:206:21","statements":[{"nodeType":"YulAssignment","src":"66741:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66753:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"66764:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66749:3:21"},"nodeType":"YulFunctionCall","src":"66749:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"66741:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"66821:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66834:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"66845:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66830:3:21"},"nodeType":"YulFunctionCall","src":"66830:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"66777:43:21"},"nodeType":"YulFunctionCall","src":"66777:71:21"},"nodeType":"YulExpressionStatement","src":"66777:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"66902:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"66915:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"66926:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"66911:3:21"},"nodeType":"YulFunctionCall","src":"66911:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"66858:43:21"},"nodeType":"YulFunctionCall","src":"66858:72:21"},"nodeType":"YulExpressionStatement","src":"66858:72:21"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"66695:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"66707:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"66715:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"66726:4:21","type":""}],"src":"66605:332:21"},{"body":{"nodeType":"YulBlock","src":"67069:206:21","statements":[{"nodeType":"YulAssignment","src":"67079:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"67091:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"67102:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"67087:3:21"},"nodeType":"YulFunctionCall","src":"67087:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"67079:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"67159:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"67172:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"67183:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"67168:3:21"},"nodeType":"YulFunctionCall","src":"67168:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"67115:43:21"},"nodeType":"YulFunctionCall","src":"67115:71:21"},"nodeType":"YulExpressionStatement","src":"67115:71:21"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"67240:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"67253:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"67264:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"67249:3:21"},"nodeType":"YulFunctionCall","src":"67249:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"67196:43:21"},"nodeType":"YulFunctionCall","src":"67196:72:21"},"nodeType":"YulExpressionStatement","src":"67196:72:21"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"67033:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"67045:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"67053:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"67064:4:21","type":""}],"src":"66943:332:21"},{"body":{"nodeType":"YulBlock","src":"67327:32:21","statements":[{"nodeType":"YulAssignment","src":"67337:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"67348:5:21"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"67337:7:21"}]}]},"name":"leftAlign_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"67309:5:21","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"67319:7:21","type":""}],"src":"67281:78:21"},{"body":{"nodeType":"YulBlock","src":"67446:72:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"67463:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"67504:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"67487:16:21"},"nodeType":"YulFunctionCall","src":"67487:23:21"}],"functionName":{"name":"leftAlign_t_bytes4","nodeType":"YulIdentifier","src":"67468:18:21"},"nodeType":"YulFunctionCall","src":"67468:43:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"67456:6:21"},"nodeType":"YulFunctionCall","src":"67456:56:21"},"nodeType":"YulExpressionStatement","src":"67456:56:21"}]},"name":"abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"67434:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"67441:3:21","type":""}],"src":"67365:153:21"},{"body":{"nodeType":"YulBlock","src":"67637:34:21","statements":[{"nodeType":"YulAssignment","src":"67647:18:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"67662:3:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"67647:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"67609:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"67614:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"67625:11:21","type":""}],"src":"67524:147:21"},{"body":{"nodeType":"YulBlock","src":"67785:278:21","statements":[{"nodeType":"YulVariableDeclaration","src":"67795:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"67841:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"67809:31:21"},"nodeType":"YulFunctionCall","src":"67809:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"67799:6:21","type":""}]},{"nodeType":"YulAssignment","src":"67856:95:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"67939:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"67944:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"67863:75:21"},"nodeType":"YulFunctionCall","src":"67863:88:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"67856:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"67999:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"68006:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"67995:3:21"},"nodeType":"YulFunctionCall","src":"67995:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"68013:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"68018:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"67960:34:21"},"nodeType":"YulFunctionCall","src":"67960:65:21"},"nodeType":"YulExpressionStatement","src":"67960:65:21"},{"nodeType":"YulAssignment","src":"68034:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"68045:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"68050:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"68041:3:21"},"nodeType":"YulFunctionCall","src":"68041:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"68034:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"67766:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"67773:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"67781:3:21","type":""}],"src":"67677:386:21"},{"body":{"nodeType":"YulBlock","src":"68301:467:21","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"68372:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"68381:3:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"68312:59:21"},"nodeType":"YulFunctionCall","src":"68312:73:21"},"nodeType":"YulExpressionStatement","src":"68312:73:21"},{"nodeType":"YulAssignment","src":"68394:18:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"68405:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"68410:1:21","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"68401:3:21"},"nodeType":"YulFunctionCall","src":"68401:11:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"68394:3:21"}]},{"nodeType":"YulAssignment","src":"68422:100:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"68509:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"68518:3:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"68429:79:21"},"nodeType":"YulFunctionCall","src":"68429:93:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"68422:3:21"}]},{"nodeType":"YulAssignment","src":"68532:100:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"68619:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"68628:3:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"68539:79:21"},"nodeType":"YulFunctionCall","src":"68539:93:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"68532:3:21"}]},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"68702:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"68711:3:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"68642:59:21"},"nodeType":"YulFunctionCall","src":"68642:73:21"},"nodeType":"YulExpressionStatement","src":"68642:73:21"},{"nodeType":"YulAssignment","src":"68724:18:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"68735:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"68740:1:21","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"68731:3:21"},"nodeType":"YulFunctionCall","src":"68731:11:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"68724:3:21"}]},{"nodeType":"YulAssignment","src":"68752:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"68759:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"68752:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__to_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"68256:3:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"68262:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"68270:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"68278:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"68286:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"68297:3:21","type":""}],"src":"68069:699:21"},{"body":{"nodeType":"YulBlock","src":"68821:32:21","statements":[{"nodeType":"YulAssignment","src":"68831:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"68842:5:21"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"68831:7:21"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"68803:5:21","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"68813:7:21","type":""}],"src":"68774:79:21"},{"body":{"nodeType":"YulBlock","src":"68942:74:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"68959:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"69002:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"68984:17:21"},"nodeType":"YulFunctionCall","src":"68984:24:21"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"68964:19:21"},"nodeType":"YulFunctionCall","src":"68964:45:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"68952:6:21"},"nodeType":"YulFunctionCall","src":"68952:58:21"},"nodeType":"YulExpressionStatement","src":"68952:58:21"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"68930:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"68937:3:21","type":""}],"src":"68859:157:21"},{"body":{"nodeType":"YulBlock","src":"69065:53:21","statements":[{"nodeType":"YulAssignment","src":"69075:36:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"69100:3:21","type":"","value":"224"},{"name":"value","nodeType":"YulIdentifier","src":"69105:5:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"69096:3:21"},"nodeType":"YulFunctionCall","src":"69096:15:21"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"69075:8:21"}]}]},"name":"shift_left_224","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"69046:5:21","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"69056:8:21","type":""}],"src":"69022:96:21"},{"body":{"nodeType":"YulBlock","src":"69170:48:21","statements":[{"nodeType":"YulAssignment","src":"69180:32:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"69206:5:21"}],"functionName":{"name":"shift_left_224","nodeType":"YulIdentifier","src":"69191:14:21"},"nodeType":"YulFunctionCall","src":"69191:21:21"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"69180:7:21"}]}]},"name":"leftAlign_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"69152:5:21","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"69162:7:21","type":""}],"src":"69124:94:21"},{"body":{"nodeType":"YulBlock","src":"69305:72:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"69322:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"69363:5:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"69346:16:21"},"nodeType":"YulFunctionCall","src":"69346:23:21"}],"functionName":{"name":"leftAlign_t_uint32","nodeType":"YulIdentifier","src":"69327:18:21"},"nodeType":"YulFunctionCall","src":"69327:43:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"69315:6:21"},"nodeType":"YulFunctionCall","src":"69315:56:21"},"nodeType":"YulExpressionStatement","src":"69315:56:21"}]},"name":"abi_encode_t_uint32_to_t_uint32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"69293:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"69300:3:21","type":""}],"src":"69224:153:21"},{"body":{"nodeType":"YulBlock","src":"69525:250:21","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"69598:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"69607:3:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"69536:61:21"},"nodeType":"YulFunctionCall","src":"69536:75:21"},"nodeType":"YulExpressionStatement","src":"69536:75:21"},{"nodeType":"YulAssignment","src":"69620:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"69631:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"69636:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"69627:3:21"},"nodeType":"YulFunctionCall","src":"69627:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"69620:3:21"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"69709:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"69718:3:21"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"69649:59:21"},"nodeType":"YulFunctionCall","src":"69649:73:21"},"nodeType":"YulExpressionStatement","src":"69649:73:21"},{"nodeType":"YulAssignment","src":"69731:18:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"69742:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"69747:1:21","type":"","value":"4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"69738:3:21"},"nodeType":"YulFunctionCall","src":"69738:11:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"69731:3:21"}]},{"nodeType":"YulAssignment","src":"69759:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"69766:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"69759:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"69496:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"69502:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"69510:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"69521:3:21","type":""}],"src":"69383:392:21"},{"body":{"nodeType":"YulBlock","src":"69841:77:21","statements":[{"nodeType":"YulAssignment","src":"69851:22:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"69866:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"69860:5:21"},"nodeType":"YulFunctionCall","src":"69860:13:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"69851:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"69906:5:21"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"69882:23:21"},"nodeType":"YulFunctionCall","src":"69882:30:21"},"nodeType":"YulExpressionStatement","src":"69882:30:21"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"69819:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"69827:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"69835:5:21","type":""}],"src":"69781:137:21"},{"body":{"nodeType":"YulBlock","src":"69998:271:21","statements":[{"body":{"nodeType":"YulBlock","src":"70044:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"70046:77:21"},"nodeType":"YulFunctionCall","src":"70046:79:21"},"nodeType":"YulExpressionStatement","src":"70046:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"70019:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"70028:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"70015:3:21"},"nodeType":"YulFunctionCall","src":"70015:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"70040:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"70011:3:21"},"nodeType":"YulFunctionCall","src":"70011:32:21"},"nodeType":"YulIf","src":"70008:119:21"},{"nodeType":"YulBlock","src":"70137:125:21","statements":[{"nodeType":"YulVariableDeclaration","src":"70152:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"70166:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"70156:6:21","type":""}]},{"nodeType":"YulAssignment","src":"70181:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"70224:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"70235:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"70220:3:21"},"nodeType":"YulFunctionCall","src":"70220:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"70244:7:21"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"70191:28:21"},"nodeType":"YulFunctionCall","src":"70191:61:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"70181:6:21"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"69968:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"69979:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"69991:6:21","type":""}],"src":"69924:345:21"},{"body":{"nodeType":"YulBlock","src":"70381:123:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"70403:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"70411:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"70399:3:21"},"nodeType":"YulFunctionCall","src":"70399:14:21"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"70415:34:21","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"70392:6:21"},"nodeType":"YulFunctionCall","src":"70392:58:21"},"nodeType":"YulExpressionStatement","src":"70392:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"70471:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"70479:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"70467:3:21"},"nodeType":"YulFunctionCall","src":"70467:15:21"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"70484:12:21","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"70460:6:21"},"nodeType":"YulFunctionCall","src":"70460:37:21"},"nodeType":"YulExpressionStatement","src":"70460:37:21"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"70373:6:21","type":""}],"src":"70275:229:21"},{"body":{"nodeType":"YulBlock","src":"70656:220:21","statements":[{"nodeType":"YulAssignment","src":"70666:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"70732:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"70737:2:21","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"70673:58:21"},"nodeType":"YulFunctionCall","src":"70673:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"70666:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"70838:3:21"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"70749:88:21"},"nodeType":"YulFunctionCall","src":"70749:93:21"},"nodeType":"YulExpressionStatement","src":"70749:93:21"},{"nodeType":"YulAssignment","src":"70851:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"70862:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"70867:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"70858:3:21"},"nodeType":"YulFunctionCall","src":"70858:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"70851:3:21"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"70644:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"70652:3:21","type":""}],"src":"70510:366:21"},{"body":{"nodeType":"YulBlock","src":"71053:248:21","statements":[{"nodeType":"YulAssignment","src":"71063:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"71075:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"71086:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"71071:3:21"},"nodeType":"YulFunctionCall","src":"71071:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"71063:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"71110:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"71121:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"71106:3:21"},"nodeType":"YulFunctionCall","src":"71106:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"71129:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"71135:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"71125:3:21"},"nodeType":"YulFunctionCall","src":"71125:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"71099:6:21"},"nodeType":"YulFunctionCall","src":"71099:47:21"},"nodeType":"YulExpressionStatement","src":"71099:47:21"},{"nodeType":"YulAssignment","src":"71155:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"71289:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"71163:124:21"},"nodeType":"YulFunctionCall","src":"71163:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"71155:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"71033:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"71048:4:21","type":""}],"src":"70882:419:21"},{"body":{"nodeType":"YulBlock","src":"71413:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"71435:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"71443:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"71431:3:21"},"nodeType":"YulFunctionCall","src":"71431:14:21"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"71447:34:21","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"71424:6:21"},"nodeType":"YulFunctionCall","src":"71424:58:21"},"nodeType":"YulExpressionStatement","src":"71424:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"71503:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"71511:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"71499:3:21"},"nodeType":"YulFunctionCall","src":"71499:15:21"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"71516:8:21","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"71492:6:21"},"nodeType":"YulFunctionCall","src":"71492:33:21"},"nodeType":"YulExpressionStatement","src":"71492:33:21"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"71405:6:21","type":""}],"src":"71307:225:21"},{"body":{"nodeType":"YulBlock","src":"71684:220:21","statements":[{"nodeType":"YulAssignment","src":"71694:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"71760:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"71765:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"71701:58:21"},"nodeType":"YulFunctionCall","src":"71701:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"71694:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"71866:3:21"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"71777:88:21"},"nodeType":"YulFunctionCall","src":"71777:93:21"},"nodeType":"YulExpressionStatement","src":"71777:93:21"},{"nodeType":"YulAssignment","src":"71879:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"71890:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"71895:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"71886:3:21"},"nodeType":"YulFunctionCall","src":"71886:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"71879:3:21"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"71672:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"71680:3:21","type":""}],"src":"71538:366:21"},{"body":{"nodeType":"YulBlock","src":"72081:248:21","statements":[{"nodeType":"YulAssignment","src":"72091:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"72103:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"72114:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"72099:3:21"},"nodeType":"YulFunctionCall","src":"72099:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"72091:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"72138:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"72149:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"72134:3:21"},"nodeType":"YulFunctionCall","src":"72134:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"72157:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"72163:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"72153:3:21"},"nodeType":"YulFunctionCall","src":"72153:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"72127:6:21"},"nodeType":"YulFunctionCall","src":"72127:47:21"},"nodeType":"YulExpressionStatement","src":"72127:47:21"},{"nodeType":"YulAssignment","src":"72183:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"72317:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"72191:124:21"},"nodeType":"YulFunctionCall","src":"72191:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"72183:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"72061:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"72076:4:21","type":""}],"src":"71910:419:21"},{"body":{"nodeType":"YulBlock","src":"72469:137:21","statements":[{"nodeType":"YulAssignment","src":"72480:100:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"72567:6:21"},{"name":"pos","nodeType":"YulIdentifier","src":"72576:3:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"72487:79:21"},"nodeType":"YulFunctionCall","src":"72487:93:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"72480:3:21"}]},{"nodeType":"YulAssignment","src":"72590:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"72597:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"72590:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"72448:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"72454:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"72465:3:21","type":""}],"src":"72335:271:21"},{"body":{"nodeType":"YulBlock","src":"72718:73:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"72740:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"72748:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"72736:3:21"},"nodeType":"YulFunctionCall","src":"72736:14:21"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"72752:31:21","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"72729:6:21"},"nodeType":"YulFunctionCall","src":"72729:55:21"},"nodeType":"YulExpressionStatement","src":"72729:55:21"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"72710:6:21","type":""}],"src":"72612:179:21"},{"body":{"nodeType":"YulBlock","src":"72943:220:21","statements":[{"nodeType":"YulAssignment","src":"72953:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"73019:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"73024:2:21","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"72960:58:21"},"nodeType":"YulFunctionCall","src":"72960:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"72953:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"73125:3:21"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"73036:88:21"},"nodeType":"YulFunctionCall","src":"73036:93:21"},"nodeType":"YulExpressionStatement","src":"73036:93:21"},{"nodeType":"YulAssignment","src":"73138:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"73149:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"73154:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"73145:3:21"},"nodeType":"YulFunctionCall","src":"73145:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"73138:3:21"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"72931:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"72939:3:21","type":""}],"src":"72797:366:21"},{"body":{"nodeType":"YulBlock","src":"73340:248:21","statements":[{"nodeType":"YulAssignment","src":"73350:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"73362:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"73373:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"73358:3:21"},"nodeType":"YulFunctionCall","src":"73358:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"73350:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"73397:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"73408:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"73393:3:21"},"nodeType":"YulFunctionCall","src":"73393:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"73416:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"73422:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"73412:3:21"},"nodeType":"YulFunctionCall","src":"73412:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"73386:6:21"},"nodeType":"YulFunctionCall","src":"73386:47:21"},"nodeType":"YulExpressionStatement","src":"73386:47:21"},{"nodeType":"YulAssignment","src":"73442:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"73576:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"73450:124:21"},"nodeType":"YulFunctionCall","src":"73450:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"73442:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"73320:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"73335:4:21","type":""}],"src":"73169:419:21"},{"body":{"nodeType":"YulBlock","src":"73653:40:21","statements":[{"nodeType":"YulAssignment","src":"73664:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"73680:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"73674:5:21"},"nodeType":"YulFunctionCall","src":"73674:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"73664:6:21"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"73636:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"73646:6:21","type":""}],"src":"73594:99:21"},{"body":{"nodeType":"YulBlock","src":"73791:285:21","statements":[{"nodeType":"YulVariableDeclaration","src":"73801:53:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"73848:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"73815:32:21"},"nodeType":"YulFunctionCall","src":"73815:39:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"73805:6:21","type":""}]},{"nodeType":"YulAssignment","src":"73863:78:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"73929:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"73934:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"73870:58:21"},"nodeType":"YulFunctionCall","src":"73870:71:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"73863:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"73989:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"73996:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"73985:3:21"},"nodeType":"YulFunctionCall","src":"73985:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"74003:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"74008:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"73950:34:21"},"nodeType":"YulFunctionCall","src":"73950:65:21"},"nodeType":"YulExpressionStatement","src":"73950:65:21"},{"nodeType":"YulAssignment","src":"74024:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"74035:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"74062:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"74040:21:21"},"nodeType":"YulFunctionCall","src":"74040:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"74031:3:21"},"nodeType":"YulFunctionCall","src":"74031:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"74024:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"73772:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"73779:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"73787:3:21","type":""}],"src":"73699:377:21"},{"body":{"nodeType":"YulBlock","src":"74200:195:21","statements":[{"nodeType":"YulAssignment","src":"74210:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"74222:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"74233:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"74218:3:21"},"nodeType":"YulFunctionCall","src":"74218:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"74210:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"74257:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"74268:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"74253:3:21"},"nodeType":"YulFunctionCall","src":"74253:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"74276:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"74282:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"74272:3:21"},"nodeType":"YulFunctionCall","src":"74272:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"74246:6:21"},"nodeType":"YulFunctionCall","src":"74246:47:21"},"nodeType":"YulExpressionStatement","src":"74246:47:21"},{"nodeType":"YulAssignment","src":"74302:86:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"74374:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"74383:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"74310:63:21"},"nodeType":"YulFunctionCall","src":"74310:78:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"74302:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"74172:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"74184:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"74195:4:21","type":""}],"src":"74082:313:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ITBTCVault_$4821_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ITBTCVault_$4821_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ITBTCVault_$4821_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ITBTCVault_$4821__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ITBTCVault_$4821_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct IBridgeTypes.BitcoinTxInfo\n    function abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 128) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    // struct IBridgeTypes.DepositRevealInfo\n    function abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 192) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 256) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint16(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_ReimbursementPool_$2999(value) -> cleaned {\n        cleaned := cleanup_t_address_payable(value)\n    }\n\n    function validator_revert_t_contract$_ReimbursementPool_$2999(value) {\n        if iszero(eq(value, cleanup_t_contract$_ReimbursementPool_$2999(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_ReimbursementPool_$2999(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_contract$_ReimbursementPool_$2999(value)\n    }\n\n    function abi_decode_tuple_t_contract$_ReimbursementPool_$2999(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_ReimbursementPool_$2999(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint96_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function convert_t_contract$_IWormhole_$5888_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IWormhole_$5888_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IWormhole_$5888_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IWormhole_$5888__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IWormhole_$5888_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_DepositState_$4848(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_DepositState_$4848(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_DepositState_$4848(value)\n    }\n\n    function convert_t_enum$_DepositState_$4848_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_DepositState_$4848(value)\n    }\n\n    function abi_encode_t_enum$_DepositState_$4848_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_DepositState_$4848_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_DepositState_$4848__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_DepositState_$4848_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_uint160_to_t_address_payable(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ReimbursementPool_$2999_to_t_address_payable(value) -> converted {\n        converted := convert_t_uint160_to_t_address_payable(value)\n    }\n\n    function abi_encode_t_contract$_ReimbursementPool_$2999_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ReimbursementPool_$2999_to_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ReimbursementPool_$2999__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ReimbursementPool_$2999_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IWormholeRelayer_$5928_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IWormholeRelayer_$5928_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IERC20Upgradeable_$3379_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20Upgradeable_$3379_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20Upgradeable_$3379_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20Upgradeable_$3379__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20Upgradeable_$3379_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IBridge_$4795_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IBridge_$4795_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IBridge_$4795_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IBridge_$4795__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IBridge_$4795_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IWormholeTokenBridge_$6013_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IWormholeTokenBridge_$6013_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IWormholeTokenBridge_$6013_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IWormholeTokenBridge_$6013__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IWormholeTokenBridge_$6013_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c(memPtr) {\n\n        mstore(add(memPtr, 0), \"L2 Bitcoin Depositor already set\")\n\n    }\n\n    function abi_encode_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_428006517f9332a5d5c5526a85e54b3944a33cf20dc1d6a6c0c0d73b13dade9c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627(memPtr) {\n\n        mstore(add(memPtr, 0), \"L2 Bitcoin Depositor must not be\")\n\n        mstore(add(memPtr, 32), \" 0x0\")\n\n    }\n\n    function abi_encode_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_77d34e0e1f9086bda84cd42af1695a558fbe415c11245e394b3fc683f76fd627_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Wrong deposit state\")\n\n    }\n\n    function abi_encode_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4c64d718b6c6d1c3b24ccbce0486c47bbc06ecd56febcbf3db5ee41b7c9f7f3b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint96_t_address__to_t_uint256_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542(memPtr) {\n\n        mstore(add(memPtr, 0), \"L2 deposit owner must not be 0x0\")\n\n    }\n\n    function abi_encode_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_227314aaa9e3e6974bb006fef6ac0dd3763633c2d357422e750027a345aec542_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // struct IBridgeTypes.BitcoinTxInfo\n    function abi_decode_t_struct$_BitcoinTxInfo_$4731_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x80) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x80)\n\n        {\n            // version\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes4(add(headStart, offset), end))\n\n        }\n\n        {\n            // inputVector\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x20), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // outputVector\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x40), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // locktime\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_bytes4(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function convert_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr(value) -> converted {\n\n        converted := abi_decode_t_struct$_BitcoinTxInfo_$4731_memory_ptr(value, calldatasize())\n\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function cleanup_t_bytes8(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes8(value) {\n        if iszero(eq(value, cleanup_t_bytes8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes8(value)\n    }\n\n    function cleanup_t_bytes20(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes20(value) {\n        if iszero(eq(value, cleanup_t_bytes20(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes20(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes20(value)\n    }\n\n    // struct IBridgeTypes.DepositRevealInfo\n    function abi_decode_t_struct$_DepositRevealInfo_$4744_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0xc0)\n\n        {\n            // fundingOutputIndex\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_uint32(add(headStart, offset), end))\n\n        }\n\n        {\n            // blindingFactor\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes8(add(headStart, offset), end))\n\n        }\n\n        {\n            // walletPubKeyHash\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_bytes20(add(headStart, offset), end))\n\n        }\n\n        {\n            // refundPubKeyHash\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_bytes20(add(headStart, offset), end))\n\n        }\n\n        {\n            // refundLocktime\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_bytes4(add(headStart, offset), end))\n\n        }\n\n        {\n            // vault\n\n            let offset := 160\n\n            mstore(add(value, 0xa0), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_DepositRevealInfo_$4744_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_DepositRevealInfo_$4744_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9(memPtr) {\n\n        mstore(add(memPtr, 0), \"Wormhole address cannot be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c52127d694d30759dc116d5f1b5ff47bbd84c39311e193f9acd2b89db09f69f9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0(memPtr) {\n\n        mstore(add(memPtr, 0), \"WormholeRelayer address cannot b\")\n\n        mstore(add(memPtr, 32), \"e zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9(memPtr) {\n\n        mstore(add(memPtr, 0), \"WormholeTokenBridge address cann\")\n\n        mstore(add(memPtr, 32), \"ot be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5a8d124bd1facf1a24afa096295757a1bcf758fda3636b2163501c2a4daa9ef9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349(memPtr) {\n\n        mstore(add(memPtr, 0), \"L2WormholeGateway address cannot\")\n\n        mstore(add(memPtr, 32), \" be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33(memPtr) {\n\n        mstore(add(memPtr, 0), \"Caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_15ed5034391ed5ef65b8bb8dbcb08f9b6c4034ebcf89f76344a17e1651e92b33_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_0_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n    }\n\n    function abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_0_by_1_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint16_t_rational_0_by_1_t_uint256__to_t_uint16_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // struct IBridgeTypes.DepositRequest\n    function abi_decode_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0xe0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0xe0)\n\n        {\n            // depositor\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // amount\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint64_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // revealedAt\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // vault\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // treasuryFee\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_uint64_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // sweptAt\n\n            let offset := 160\n\n            mstore(add(value, 0xa0), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // extraData\n\n            let offset := 192\n\n            mstore(add(value, 0xc0), abi_decode_t_bytes32_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_DepositRequest_$4759_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68(memPtr) {\n\n        mstore(add(memPtr, 0), \"Deposit not initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a22c5492e3bbf62628c3639d146ef6d29404a8ed681d7570aefcb4c9a127dc68_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_tuple_t_uint64t_uint64_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac(memPtr) {\n\n        mstore(add(memPtr, 0), \"Deposit not finalized by the bri\")\n\n        mstore(add(memPtr, 32), \"dge\")\n\n    }\n\n    function abi_encode_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b141f897042002a7b18c2cb3ee0657fc4f93a1f92d795d1d0e33417fc6d4ecac_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45(memPtr) {\n\n        mstore(add(memPtr, 0), \"Amount too low to bridge\")\n\n    }\n\n    function abi_encode_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ba640e435c555a02532729119f63519f39ed6b1dbfc2465c9bdee1f365eecc45_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc(memPtr) {\n\n        mstore(add(memPtr, 0), \"Payment for Wormhole Relayer is \")\n\n        mstore(add(memPtr, 32), \"too low\")\n\n    }\n\n    function abi_encode_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f3764fd3684cbcf21e02de7bd25763e0e1490fe0d95f81c2696d95a9d89deefc_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_rational_0_by_1_to_t_uint32(value) -> converted {\n        converted := cleanup_t_uint32(identity(cleanup_t_rational_0_by_1(value)))\n    }\n\n    function abi_encode_t_rational_0_by_1_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_0_by_1_to_t_uint32(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint16_t_bytes32_t_rational_0_by_1_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint16_t_bytes32_t_uint32_t_bytes_memory_ptr__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_rational_0_by_1_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n        mstore(add(headStart, 160), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value5,  tail)\n\n    }\n\n    function abi_decode_tuple_t_uint64_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_uint16_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_uint16_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint16_to_t_uint16(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    // struct WormholeTypes.VaaKey -> struct WormholeTypes.VaaKey\n    function abi_encode_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x60)\n\n        {\n            // chainId\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint16_to_t_uint16(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // emitterAddress\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // sequence\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint64_to_t_uint64(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x60)\n    }\n\n    function array_nextElement_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct WormholeTypes.VaaKey[] -> struct WormholeTypes.VaaKey[]\n    function abi_encode_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_VaaKey_$5873_memory_ptr_to_t_struct$_VaaKey_$5873_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint16_t_address_t_bytes_memory_ptr_t_rational_0_by_1_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__to_t_uint16_t_address_t_bytes_memory_ptr_t_uint256_t_uint256_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_t_uint16_t_address__fromStack_reversed(headStart , value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 256)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        mstore(add(headStart, 160), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VaaKey_$5873_memory_ptr_$dyn_memory_ptr_fromStack(value5,  tail)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value6,  add(headStart, 192))\n\n        abi_encode_t_address_to_t_address_fromStack(value7,  add(headStart, 224))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45(memPtr) {\n\n        mstore(add(memPtr, 0), \"Vault address mismatch\")\n\n    }\n\n    function abi_encode_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_155f2acb252e9cd4e5b6c8544663ca266aba5552dccb43cd5c1473dbc7793b45_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // struct IBridgeTypes.BitcoinTxInfo -> struct IBridgeTypes.BitcoinTxInfo\n    function abi_encode_t_struct$_BitcoinTxInfo_$4731_memory_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // version\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // inputVector\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // outputVector\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // locktime\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x60))\n        }\n\n        end := tail\n    }\n\n    function abi_encode_t_uint32_to_t_uint32(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_bytes8_to_t_bytes8(value, pos) {\n        mstore(pos, cleanup_t_bytes8(value))\n    }\n\n    function abi_encode_t_bytes20_to_t_bytes20(value, pos) {\n        mstore(pos, cleanup_t_bytes20(value))\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct IBridgeTypes.DepositRevealInfo -> struct IBridgeTypes.DepositRevealInfo\n    function abi_encode_t_struct$_DepositRevealInfo_$4744_memory_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xc0)\n\n        {\n            // fundingOutputIndex\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // blindingFactor\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes8_to_t_bytes8(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // walletPubKeyHash\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_bytes20_to_t_bytes20(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // refundPubKeyHash\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bytes20_to_t_bytes20(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // refundLocktime\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // vault\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xa0))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr_t_bytes32__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 256)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_BitcoinTxInfo_$4731_memory_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_struct$_DepositRevealInfo_$4744_memory_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 224))\n\n    }\n\n    function store_literal_in_memory_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506(memPtr) {\n\n        mstore(add(memPtr, 0), \"AbstractTBTCDepositor already in\")\n\n        mstore(add(memPtr, 32), \"itialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45f2cc3b255224882f5d9af05bbaa3771518b0897ed3457c2482ace4f87da506_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Bridge address cannot be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a5f2df3278bec3ff851d28fa758b66b508d6c4f2d86d45f7673a2e1832345ad4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4(memPtr) {\n\n        mstore(add(memPtr, 0), \"TBTCVault address cannot be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_eae8f1cb8e043fbf871567251d6d99f91d8da87f290d40b67fbb5d9db58dffc4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint64(x, y) -> diff {\n        x := cleanup_t_uint64(x)\n        y := cleanup_t_uint64(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function abi_decode_tuple_t_uint32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint64t_uint64t_uint64t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function leftAlign_t_bytes4(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes4(cleanup_t_bytes4(value)))\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__to_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__nonPadded_inplace_fromStack_reversed(pos , value3, value2, value1, value0) -> end {\n\n        abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 4)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        abi_encode_t_bytes4_to_t_bytes4_nonPadded_inplace_fromStack(value3,  pos)\n        pos := add(pos, 4)\n\n        end := pos\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function shift_left_224(value) -> newValue {\n        newValue :=\n\n        shl(224, value)\n\n    }\n\n    function leftAlign_t_uint32(value) -> aligned {\n        aligned := shift_left_224(value)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint32(cleanup_t_uint32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32_t_uint32__to_t_bytes32_t_uint32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_uint32_to_t_uint32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 4)\n\n        end := pos\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101c25760003560e01c80637c9e9ffb116100f7578063c7ba034711610095578063e5d3d71411610064578063e5d3d71414610600578063e78cea921461062b578063f11df69d14610656578063f2fde38b14610681576101c2565b8063c7ba034714610554578063c81ef1681461057f578063d6ae3cd5146105aa578063da25b725146105d5576101c2565b80639e0e4e2f116100d15780639e0e4e2f14610498578063aa82e33b146104c1578063b02c43d0146104ec578063c09975cd14610529576101c2565b80637c9e9ffb1461040457806384acd1bb146104425780638da5cb5b1461046d576101c2565b806360ec23dd11610164578063715018a61161013e578063715018a614610370578063715468311461038757806371c654ee146103b25780637b35b4e6146103db576101c2565b806360ec23dd146102e1578063642dc0331461030a57806366b58a0114610333576101c2565b80631159bef0116101a05780631159bef01461024657806313b38cce1461026f57806327ce36c61461029a57806346d9d49a146102c5576101c2565b80630515f0c1146101c75780630f36403a146101f05780630fa1ba441461021b575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613218565b6106aa565b005b3480156101fc57600080fd5b506102056107f6565b60405161021291906132a4565b60405180910390f35b34801561022757600080fd5b5061023061081c565b60405161023d91906132d8565b60405180910390f35b34801561025257600080fd5b5061026d6004803603810190610268919061331f565b610822565b005b34801561027b57600080fd5b5061028461086b565b60405161029191906132d8565b60405180910390f35b3480156102a657600080fd5b506102af61090b565b6040516102bc91906132d8565b60405180910390f35b6102df60048036038101906102da919061331f565b610911565b005b3480156102ed57600080fd5b5061030860048036038101906103039190613384565b610dbb565b005b34801561031657600080fd5b50610331600480360381019061032c9190613407565b610e6c565b005b34801561033f57600080fd5b5061035a60048036038101906103559190613218565b6111f5565b6040516103679190613486565b60405180910390f35b34801561037c57600080fd5b50610385611215565b005b34801561039357600080fd5b5061039c611229565b6040516103a991906132d8565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d491906134db565b61122f565b005b3480156103e757600080fd5b5061040260048036038101906103fd91906135cd565b611726565b005b34801561041057600080fd5b5061042b6004803603810190610426919061331f565b611816565b604051610439929190613630565b60405180910390f35b34801561044e57600080fd5b50610457611872565b604051610464919061367a565b60405180910390f35b34801561047957600080fd5b50610482611898565b60405161048f9190613695565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba91906136b0565b6118c2565b005b3480156104cd57600080fd5b506104d6611915565b6040516104e39190613695565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e919061331f565b61193b565b6040516105209190613767565b60405180910390f35b34801561053557600080fd5b5061053e61195b565b60405161054b91906137b5565b60405180910390f35b34801561056057600080fd5b50610569611981565b60405161057691906132d8565b60405180910390f35b34801561058b57600080fd5b5061059461198a565b6040516105a19190613695565b60405180910390f35b3480156105b657600080fd5b506105bf6119b0565b6040516105cc91906137df565b60405180910390f35b3480156105e157600080fd5b506105ea6119c4565b6040516105f7919061381b565b60405180910390f35b34801561060c57600080fd5b506106156119ea565b6040516106229190613857565b60405180910390f35b34801561063757600080fd5b50610640611a10565b60405161064d9190613893565b60405180910390f35b34801561066257600080fd5b5061066b611a36565b60405161067891906138cf565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190613218565b611a5c565b005b6106b2611adf565b600073ffffffffffffffffffffffffffffffffffffffff1660cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90613947565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906139d9565b60405180910390fd5b8060cd60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60d15481565b61082a611adf565b8060ce819055507f6ed5a3ddedc64e149e68b8bbc09d35489452528ae70487ee4f8832837c5c01058160405161086091906132d8565b60405180910390a150565b600061090660c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a90a2196040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190613a0e565b611b5d565b905090565b60d05481565b60005a90506001600281111561092a576109296136f0565b5b60c7600084815260200190815260200160002060009054906101000a900460ff16600281111561095d5761095c6136f0565b5b1461099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099490613a87565b60405180910390fd5b600260c7600084815260200190815260200160002060006101000a81548160ff021916908360028111156109d4576109d36136f0565b5b021790555060008060006109e785611c29565b9250925092503373ffffffffffffffffffffffffffffffffffffffff16610a0d82611e65565b73ffffffffffffffffffffffffffffffffffffffff16867f94d36bc0d9bf5adbd2dec8bd125b7bf12eecc6e5539fc8f2bd57a831d9995af78686604051610a55929190613aa7565b60405180910390a4610a678282611e72565b600073ffffffffffffffffffffffffffffffffffffffff16609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610db457600060cf60008781526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610c9f5760cf6000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ad226dc826020015183600001516040518363ffffffff1660e01b8152600401610c6c929190613b01565b600060405180830381600087803b158015610c8657600080fd5b505af1158015610c9a573d6000803e3d6000fd5b505050505b60d260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610db2576000610cfc346123ac565b9050609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ad226dc60d154835a8a610d4c9190613b59565b610d569190613b8d565b610d609190613b8d565b336040518363ffffffff1660e01b8152600401610d7e929190613bc1565b600060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b50505050505b505b5050505050565b610dc3611adf565b8173ffffffffffffffffffffffffffffffffffffffff167f1fff4aae494aaedff71ff8b04de50a56543bb83ce05b033c3fb4a93e065c05fc82604051610e099190613486565b60405180910390a28060d260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60005a9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790613c36565b60405180910390fd5b6000610eeb8361253b565b90506000610f1386610efc90613eae565b86803603810190610f0d919061404d565b8461255e565b50905060006002811115610f2a57610f296136f0565b5b60c7600083815260200190815260200160002060009054906101000a900460ff166002811115610f5d57610f5c6136f0565b5b14610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490613a87565b60405180910390fd5b600160c7600083815260200190815260200160002060006101000a81548160ff02191690836002811115610fd457610fd36136f0565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16827f04870363995d5b750bccca9d95e57044d630524aec2ef09ebdb820ac11d866b460405160405180910390a4600073ffffffffffffffffffffffffffffffffffffffff16609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156110dc575060d260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156111ec57600060d0545a856110f29190613b59565b6110fc9190613b8d565b90506bffffffffffffffffffffffff801681111561111d57505050506111f0565b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681525060cf600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505b5050505b505050565b60d26020528060005260406000206000915054906101000a900460ff1681565b61121d611adf565b6112276000612762565b565b60ce5481565b60008060019054906101000a900460ff161590508080156112605750600160008054906101000a900460ff1660ff16105b8061128d575061126f30612828565b15801561128c5750600160008054906101000a900460ff1660ff16145b5b6112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c3906140ec565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611309576001600060016101000a81548160ff0219169083151502179055505b611313888861284b565b61131b612a9a565b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190614158565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f0906141ea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145f9061427c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce9061430e565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663e5d3d7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115469190614343565b60c860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cc60146101000a81548161ffff021916908361ffff1602179055506207a12060ce8190555061ea6060d081905550614e2060d181905550801561171c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161171391906143b8565b60405180910390a15b5050505050505050565b61172e611898565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117929061441f565b60405180910390fd5b7f0e2d2343d31b085b7c4e56d1c8a6ec79f7ab07460386f1c9a1756239fe2533ac816040516117ca9190613695565b60405180910390a180609560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60cf6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a90046bffffffffffffffffffffffff16905082565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6118ca611adf565b8160d0819055508060d1819055507fb8df1fba472926f296225c210e366f62b21fec23b8e1b6b0a375724798ca9c0a8282604051611909929190613aa7565b60405180910390a15050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60c76020528060005260406000206000915054906101000a900460ff1681565b609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6402540be40081565b60cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc60149054906101000a900461ffff1681565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a64611adf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca906144b1565b60405180910390fd5b611adc81612762565b50565b611ae7612af3565b73ffffffffffffffffffffffffffffffffffffffff16611b05611898565b73ffffffffffffffffffffffffffffffffffffffff1614611b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b529061451d565b60405180910390fd5b565b60008060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23ee3c360cc60149054906101000a900461ffff16600060ce546040518463ffffffff1660e01b8152600401611bd293929190614578565b6040805180830381865afa158015611bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1291906145af565b5090508281611c219190613b8d565b915050919050565b600080600080600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b02c43d0866040518263ffffffff1660e01b8152600401611c8a91906132d8565b60e060405180830381865afa158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb919061472e565b90506000816040015163ffffffff1603611d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d11906147a7565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c626aa4876040518263ffffffff1660e01b8152600401611d7791906132d8565b60408051808303816000875af1158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db991906147c7565b91505060008260a0015163ffffffff16141580611de1575060008167ffffffffffffffff1614155b611e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1790614879565b60405180910390fd5b6402540be400826020015167ffffffffffffffff16611e3f9190614899565b9450611e5382602001518360800151612afb565b93508160c00151925050509193909250565b60008160001c9050919050565b611e7b82612cba565b915060008211611ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb790614927565b60405180910390fd5b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a90a2196040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190613a0e565b90506000611f6082611b5d565b9050803414611fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9b906149b9565b60405180910390fd5b61201360cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612cea9092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5a5ebda8460c860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860cc60149054906101000a900461ffff166120b460cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661253b565b60008b6040516020016120c791906149e8565b6040516020818303038152906040526040518863ffffffff1660e01b81526004016120f796959493929190614ab3565b60206040518083038185885af1158015612115573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061213a9190614b1b565b90506000600167ffffffffffffffff81111561215957612158613c6c565b5b60405190808252806020026020018201604052801561219257816020015b61217f613174565b8152602001906001900390816121775790505b509050604051806060016040528060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a8a05926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122319190614b5d565b61ffff16815260200161226560cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661253b565b81526020018367ffffffffffffffff168152508160008151811061228c5761228b614b8a565b5b602002602001018190525060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332b2fc0e85856122e19190613b59565b60cc60149054906101000a900461ffff1660cd60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180602001604052806000815250600060ce548860cc60149054906101000a900461ffff16336040518a63ffffffff1660e01b8152600401612360989796959493929190614cd7565b60206040518083038185885af115801561237e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123a39190614b1b565b50505050505050565b600080609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633de39c116040518163ffffffff1660e01b8152600401602060405180830381865afa15801561241c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124409190613a0e565b90506000609560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e25b53456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190613a0e565b90506000823a106124e657826124e8565b3a5b9050600081036124fe5760009350505050612536565b6000818661250c9190614d92565b905080831115612523576000945050505050612536565b828161252f9190613b59565b9450505050505b919050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16146125f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ec90614e0f565b60405180910390fd5b61260b61260186612dfc565b8560000151612e43565b9150600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f014398686866040518463ffffffff1660e01b815260040161266c93929190614fa9565b600060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506402540be400600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b02c43d0846040518263ffffffff1660e01b81526004016126ff91906132d8565b60e060405180830381865afa15801561271c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612740919061472e565b6020015167ffffffffffffffff166127589190614899565b9050935093915050565b6000606360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156128f75750600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b612936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292d9061505a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036129a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299c906150c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0b90615132565b60405180910390fd5b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060019054906101000a900460ff16612ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae0906151c4565b60405180910390fd5b612af1612e79565b565b600033905090565b6000806402540be4008385612b1091906151e4565b67ffffffffffffffff16612b249190614899565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309b53f516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb99190615220565b63ffffffff1690506000808211612bd1576000612bde565b8183612bdd9190614d92565b5b905060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c42b64d06040518163ffffffff1660e01b8152600401608060405180830381865afa158015612c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c72919061524d565b509250505060006402540be4008267ffffffffffffffff16612c949190614899565b9050808386612ca39190613b59565b612cad9190613b59565b9550505050505092915050565b60006402540be40082612ccd9190614d92565b91506402540be40082612ce09190614899565b9150819050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612d279291906152b4565b602060405180830381865afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d689190613a0e565b9050612df68463095ea7b360e01b858585612d839190613b8d565b604051602401612d949291906152dd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eda565b50505050565b6000612e3c8260000151836020015184604001518560600151604051602001612e289493929190615363565b604051602081830303815290604052612fa2565b9050919050565b60008282604051602001612e58929190615400565b6040516020818303038152906040528051906020012060001c905092915050565b600060019054906101000a900460ff16612ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebf906151c4565b60405180910390fd5b612ed8612ed3612af3565b612762565b565b6000612f3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612fca9092919063ffffffff16565b9050600081511480612f5e575080806020019051810190612f5d9190615441565b5b612f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f94906154e0565b60405180910390fd5b505050565b60006020600083516020850160025afa50602060006020600060025afa506000519050919050565b6060612fd98484600085612fe2565b90509392505050565b606082471015613027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301e90615572565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516130509190615592565b60006040518083038185875af1925050503d806000811461308d576040519150601f19603f3d011682016040523d82523d6000602084013e613092565b606091505b50915091506130a3878383876130af565b92505050949350505050565b60608315613111576000835103613109576130c985612828565b613108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ff906155f5565b60405180910390fd5b5b82905061311c565b61311b8383613124565b5b949350505050565b6000825111156131375781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316b9190615659565b60405180910390fd5b6040518060600160405280600061ffff16815260200160008019168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131e5826131ba565b9050919050565b6131f5816131da565b811461320057600080fd5b50565b600081359050613212816131ec565b92915050565b60006020828403121561322e5761322d6131b0565b5b600061323c84828501613203565b91505092915050565b6000819050919050565b600061326a613265613260846131ba565b613245565b6131ba565b9050919050565b600061327c8261324f565b9050919050565b600061328e82613271565b9050919050565b61329e81613283565b82525050565b60006020820190506132b96000830184613295565b92915050565b6000819050919050565b6132d2816132bf565b82525050565b60006020820190506132ed60008301846132c9565b92915050565b6132fc816132bf565b811461330757600080fd5b50565b600081359050613319816132f3565b92915050565b600060208284031215613335576133346131b0565b5b60006133438482850161330a565b91505092915050565b60008115159050919050565b6133618161334c565b811461336c57600080fd5b50565b60008135905061337e81613358565b92915050565b6000806040838503121561339b5761339a6131b0565b5b60006133a985828601613203565b92505060206133ba8582860161336f565b9150509250929050565b600080fd5b6000608082840312156133df576133de6133c4565b5b81905092915050565b600060c082840312156133fe576133fd6133c4565b5b81905092915050565b60008060006101008486031215613421576134206131b0565b5b600084013567ffffffffffffffff81111561343f5761343e6131b5565b5b61344b868287016133c9565b935050602061345c868287016133e8565b92505060e061346d86828701613203565b9150509250925092565b6134808161334c565b82525050565b600060208201905061349b6000830184613477565b92915050565b600061ffff82169050919050565b6134b8816134a1565b81146134c357600080fd5b50565b6000813590506134d5816134af565b92915050565b600080600080600080600060e0888a0312156134fa576134f96131b0565b5b60006135088a828b01613203565b97505060206135198a828b01613203565b965050604061352a8a828b01613203565b955050606061353b8a828b01613203565b945050608061354c8a828b01613203565b93505060a061355d8a828b01613203565b92505060c061356e8a828b016134c6565b91505092959891949750929550565b6000613588826131ba565b9050919050565b600061359a8261357d565b9050919050565b6135aa8161358f565b81146135b557600080fd5b50565b6000813590506135c7816135a1565b92915050565b6000602082840312156135e3576135e26131b0565b5b60006135f1848285016135b8565b91505092915050565b613603816131da565b82525050565b60006bffffffffffffffffffffffff82169050919050565b61362a81613609565b82525050565b600060408201905061364560008301856135fa565b6136526020830184613621565b9392505050565b600061366482613271565b9050919050565b61367481613659565b82525050565b600060208201905061368f600083018461366b565b92915050565b60006020820190506136aa60008301846135fa565b92915050565b600080604083850312156136c7576136c66131b0565b5b60006136d58582860161330a565b92505060206136e68582860161330a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137305761372f6136f0565b5b50565b60008190506137418261371f565b919050565b600061375182613733565b9050919050565b61376181613746565b82525050565b600060208201905061377c6000830184613758565b92915050565b600061378d8261324f565b9050919050565b600061379f82613782565b9050919050565b6137af81613794565b82525050565b60006020820190506137ca60008301846137a6565b92915050565b6137d9816134a1565b82525050565b60006020820190506137f460008301846137d0565b92915050565b600061380582613271565b9050919050565b613815816137fa565b82525050565b6000602082019050613830600083018461380c565b92915050565b600061384182613271565b9050919050565b61385181613836565b82525050565b600060208201905061386c6000830184613848565b92915050565b600061387d82613271565b9050919050565b61388d81613872565b82525050565b60006020820190506138a86000830184613884565b92915050565b60006138b982613271565b9050919050565b6138c9816138ae565b82525050565b60006020820190506138e460008301846138c0565b92915050565b600082825260208201905092915050565b7f4c3220426974636f696e204465706f7369746f7220616c726561647920736574600082015250565b60006139316020836138ea565b915061393c826138fb565b602082019050919050565b6000602082019050818103600083015261396081613924565b9050919050565b7f4c3220426974636f696e204465706f7369746f72206d757374206e6f7420626560008201527f2030783000000000000000000000000000000000000000000000000000000000602082015250565b60006139c36024836138ea565b91506139ce82613967565b604082019050919050565b600060208201905081810360008301526139f2816139b6565b9050919050565b600081519050613a08816132f3565b92915050565b600060208284031215613a2457613a236131b0565b5b6000613a32848285016139f9565b91505092915050565b7f57726f6e67206465706f73697420737461746500000000000000000000000000600082015250565b6000613a716013836138ea565b9150613a7c82613a3b565b602082019050919050565b60006020820190508181036000830152613aa081613a64565b9050919050565b6000604082019050613abc60008301856132c9565b613ac960208301846132c9565b9392505050565b6000613aeb613ae6613ae184613609565b613245565b6132bf565b9050919050565b613afb81613ad0565b82525050565b6000604082019050613b166000830185613af2565b613b2360208301846135fa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b64826132bf565b9150613b6f836132bf565b9250828203905081811115613b8757613b86613b2a565b5b92915050565b6000613b98826132bf565b9150613ba3836132bf565b9250828201905080821115613bbb57613bba613b2a565b5b92915050565b6000604082019050613bd660008301856132c9565b613be360208301846135fa565b9392505050565b7f4c32206465706f736974206f776e6572206d757374206e6f7420626520307830600082015250565b6000613c206020836138ea565b9150613c2b82613bea565b602082019050919050565b60006020820190508181036000830152613c4f81613c13565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ca482613c5b565b810181811067ffffffffffffffff82111715613cc357613cc2613c6c565b5b80604052505050565b6000613cd66131a6565b9050613ce28282613c9b565b919050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d2181613cec565b8114613d2c57600080fd5b50565b600081359050613d3e81613d18565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115613d6957613d68613c6c565b5b613d7282613c5b565b9050602081019050919050565b82818337600083830152505050565b6000613da1613d9c84613d4e565b613ccc565b905082815260208101848484011115613dbd57613dbc613d49565b5b613dc8848285613d7f565b509392505050565b600082601f830112613de557613de4613d44565b5b8135613df5848260208601613d8e565b91505092915050565b600060808284031215613e1457613e13613c56565b5b613e1e6080613ccc565b90506000613e2e84828501613d2f565b600083015250602082013567ffffffffffffffff811115613e5257613e51613ce7565b5b613e5e84828501613dd0565b602083015250604082013567ffffffffffffffff811115613e8257613e81613ce7565b5b613e8e84828501613dd0565b6040830152506060613ea284828501613d2f565b60608301525092915050565b6000613eba3683613dfe565b9050919050565b600063ffffffff82169050919050565b613eda81613ec1565b8114613ee557600080fd5b50565b600081359050613ef781613ed1565b92915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b613f3281613efd565b8114613f3d57600080fd5b50565b600081359050613f4f81613f29565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b613f8a81613f55565b8114613f9557600080fd5b50565b600081359050613fa781613f81565b92915050565b600060c08284031215613fc357613fc2613c56565b5b613fcd60c0613ccc565b90506000613fdd84828501613ee8565b6000830152506020613ff184828501613f40565b602083015250604061400584828501613f98565b604083015250606061401984828501613f98565b606083015250608061402d84828501613d2f565b60808301525060a061404184828501613203565b60a08301525092915050565b600060c08284031215614063576140626131b0565b5b600061407184828501613fad565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006140d6602e836138ea565b91506140e18261407a565b604082019050919050565b60006020820190508181036000830152614105816140c9565b9050919050565b7f576f726d686f6c6520616464726573732063616e6e6f74206265207a65726f00600082015250565b6000614142601f836138ea565b915061414d8261410c565b602082019050919050565b6000602082019050818103600083015261417181614135565b9050919050565b7f576f726d686f6c6552656c6179657220616464726573732063616e6e6f74206260008201527f65207a65726f0000000000000000000000000000000000000000000000000000602082015250565b60006141d46026836138ea565b91506141df82614178565b604082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b7f576f726d686f6c65546f6b656e42726964676520616464726573732063616e6e60008201527f6f74206265207a65726f00000000000000000000000000000000000000000000602082015250565b6000614266602a836138ea565b91506142718261420a565b604082019050919050565b6000602082019050818103600083015261429581614259565b9050919050565b7f4c32576f726d686f6c654761746577617920616464726573732063616e6e6f7460008201527f206265207a65726f000000000000000000000000000000000000000000000000602082015250565b60006142f86028836138ea565b91506143038261429c565b604082019050919050565b60006020820190508181036000830152614327816142eb565b9050919050565b60008151905061433d816131ec565b92915050565b600060208284031215614359576143586131b0565b5b60006143678482850161432e565b91505092915050565b6000819050919050565b600060ff82169050919050565b60006143a261439d61439884614370565b613245565b61437a565b9050919050565b6143b281614387565b82525050565b60006020820190506143cd60008301846143a9565b92915050565b7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b60006144096017836138ea565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061449b6026836138ea565b91506144a68261443f565b604082019050919050565b600060208201905081810360008301526144ca8161448e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006145076020836138ea565b9150614512826144d1565b602082019050919050565b60006020820190508181036000830152614536816144fa565b9050919050565b6000819050919050565b600061456261455d6145588461453d565b613245565b6132bf565b9050919050565b61457281614547565b82525050565b600060608201905061458d60008301866137d0565b61459a6020830185614569565b6145a760408301846132c9565b949350505050565b600080604083850312156145c6576145c56131b0565b5b60006145d4858286016139f9565b92505060206145e5858286016139f9565b9150509250929050565b600067ffffffffffffffff82169050919050565b61460c816145ef565b811461461757600080fd5b50565b60008151905061462981614603565b92915050565b60008151905061463e81613ed1565b92915050565b6000819050919050565b61465781614644565b811461466257600080fd5b50565b6000815190506146748161464e565b92915050565b600060e082840312156146905761468f613c56565b5b61469a60e0613ccc565b905060006146aa8482850161432e565b60008301525060206146be8482850161461a565b60208301525060406146d28482850161462f565b60408301525060606146e68482850161432e565b60608301525060806146fa8482850161461a565b60808301525060a061470e8482850161462f565b60a08301525060c061472284828501614665565b60c08301525092915050565b600060e08284031215614744576147436131b0565b5b60006147528482850161467a565b91505092915050565b7f4465706f736974206e6f7420696e697469616c697a6564000000000000000000600082015250565b60006147916017836138ea565b915061479c8261475b565b602082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b600080604083850312156147de576147dd6131b0565b5b60006147ec8582860161461a565b92505060206147fd8582860161461a565b9150509250929050565b7f4465706f736974206e6f742066696e616c697a6564206279207468652062726960008201527f6467650000000000000000000000000000000000000000000000000000000000602082015250565b60006148636023836138ea565b915061486e82614807565b604082019050919050565b6000602082019050818103600083015261489281614856565b9050919050565b60006148a4826132bf565b91506148af836132bf565b92508282026148bd816132bf565b915082820484148315176148d4576148d3613b2a565b5b5092915050565b7f416d6f756e7420746f6f206c6f7720746f206272696467650000000000000000600082015250565b60006149116018836138ea565b915061491c826148db565b602082019050919050565b6000602082019050818103600083015261494081614904565b9050919050565b7f5061796d656e7420666f7220576f726d686f6c652052656c617965722069732060008201527f746f6f206c6f7700000000000000000000000000000000000000000000000000602082015250565b60006149a36027836138ea565b91506149ae82614947565b604082019050919050565b600060208201905081810360008301526149d281614996565b9050919050565b6149e281614644565b82525050565b60006020820190506149fd60008301846149d9565b92915050565b6000614a1e614a19614a148461453d565b613245565b613ec1565b9050919050565b614a2e81614a03565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614a6e578082015181840152602081019050614a53565b60008484015250505050565b6000614a8582614a34565b614a8f8185614a3f565b9350614a9f818560208601614a50565b614aa881613c5b565b840191505092915050565b600060c082019050614ac860008301896135fa565b614ad560208301886132c9565b614ae260408301876137d0565b614aef60608301866149d9565b614afc6080830185614a25565b81810360a0830152614b0e8184614a7a565b9050979650505050505050565b600060208284031215614b3157614b306131b0565b5b6000614b3f8482850161461a565b91505092915050565b600081519050614b57816134af565b92915050565b600060208284031215614b7357614b726131b0565b5b6000614b8184828501614b48565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614bee816134a1565b82525050565b614bfd81614644565b82525050565b614c0c816145ef565b82525050565b606082016000820151614c286000850182614be5565b506020820151614c3b6020850182614bf4565b506040820151614c4e6040850182614c03565b50505050565b6000614c608383614c12565b60608301905092915050565b6000602082019050919050565b6000614c8482614bb9565b614c8e8185614bc4565b9350614c9983614bd5565b8060005b83811015614cca578151614cb18882614c54565b9750614cbc83614c6c565b925050600181019050614c9d565b5085935050505092915050565b600061010082019050614ced600083018b6137d0565b614cfa602083018a6135fa565b8181036040830152614d0c8189614a7a565b9050614d1b6060830188614569565b614d2860808301876132c9565b81810360a0830152614d3a8186614c79565b9050614d4960c08301856137d0565b614d5660e08301846135fa565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614d9d826132bf565b9150614da8836132bf565b925082614db857614db7614d63565b5b828204905092915050565b7f5661756c742061646472657373206d69736d6174636800000000000000000000600082015250565b6000614df96016836138ea565b9150614e0482614dc3565b602082019050919050565b60006020820190508181036000830152614e2881614dec565b9050919050565b614e3881613cec565b82525050565b600082825260208201905092915050565b6000614e5a82614a34565b614e648185614e3e565b9350614e74818560208601614a50565b614e7d81613c5b565b840191505092915050565b6000608083016000830151614ea06000860182614e2f565b5060208301518482036020860152614eb88282614e4f565b91505060408301518482036040860152614ed28282614e4f565b9150506060830151614ee76060860182614e2f565b508091505092915050565b614efb81613ec1565b82525050565b614f0a81613efd565b82525050565b614f1981613f55565b82525050565b614f28816131da565b82525050565b60c082016000820151614f446000850182614ef2565b506020820151614f576020850182614f01565b506040820151614f6a6040850182614f10565b506060820151614f7d6060850182614f10565b506080820151614f906080850182614e2f565b5060a0820151614fa360a0850182614f1f565b50505050565b6000610100820190508181036000830152614fc48186614e88565b9050614fd36020830185614f2e565b614fe060e08301846149d9565b949350505050565b7f4162737472616374544254434465706f7369746f7220616c726561647920696e60008201527f697469616c697a65640000000000000000000000000000000000000000000000602082015250565b60006150446029836138ea565b915061504f82614fe8565b604082019050919050565b6000602082019050818103600083015261507381615037565b9050919050565b7f42726964676520616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006150b0601d836138ea565b91506150bb8261507a565b602082019050919050565b600060208201905081810360008301526150df816150a3565b9050919050565b7f544254435661756c7420616464726573732063616e6e6f74206265207a65726f600082015250565b600061511c6020836138ea565b9150615127826150e6565b602082019050919050565b6000602082019050818103600083015261514b8161510f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006151ae602b836138ea565b91506151b982615152565b604082019050919050565b600060208201905081810360008301526151dd816151a1565b9050919050565b60006151ef826145ef565b91506151fa836145ef565b9250828203905067ffffffffffffffff81111561521a57615219613b2a565b5b92915050565b600060208284031215615236576152356131b0565b5b60006152448482850161462f565b91505092915050565b60008060008060808587031215615267576152666131b0565b5b60006152758782880161461a565b94505060206152868782880161461a565b93505060406152978782880161461a565b92505060606152a88782880161462f565b91505092959194509250565b60006040820190506152c960008301856135fa565b6152d660208301846135fa565b9392505050565b60006040820190506152f260008301856135fa565b6152ff60208301846132c9565b9392505050565b6000819050919050565b61532161531c82613cec565b615306565b82525050565b600081905092915050565b600061533d82614a34565b6153478185615327565b9350615357818560208601614a50565b80840191505092915050565b600061536f8287615310565b60048201915061537f8286615332565b915061538b8285615332565b91506153978284615310565b60048201915081905095945050505050565b6000819050919050565b6153c46153bf82614644565b6153a9565b82525050565b60008160e01b9050919050565b60006153e2826153ca565b9050919050565b6153fa6153f582613ec1565b6153d7565b82525050565b600061540c82856153b3565b60208201915061541c82846153e9565b6004820191508190509392505050565b60008151905061543b81613358565b92915050565b600060208284031215615457576154566131b0565b5b60006154658482850161542c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006154ca602a836138ea565b91506154d58261546e565b604082019050919050565b600060208201905081810360008301526154f9816154bd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061555c6026836138ea565b915061556782615500565b604082019050919050565b6000602082019050818103600083015261558b8161554f565b9050919050565b600061559e8284615332565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006155df601d836138ea565b91506155ea826155a9565b602082019050919050565b6000602082019050818103600083015261560e816155d2565b9050919050565b600081519050919050565b600061562b82615615565b61563581856138ea565b9350615645818560208601614a50565b61564e81613c5b565b840191505092915050565b600060208201905081810360008301526156738184615620565b90509291505056fea2646970667358221220c7b9a6d1c3adbf3895240b6a0f7a30681fa41f5d6f89a5a7c0c3d0a084bde36864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C9E9FFB GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC7BA0347 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE5D3D714 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE5D3D714 EQ PUSH2 0x600 JUMPI DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xF11DF69D EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x681 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xC7BA0347 EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0xC81EF168 EQ PUSH2 0x57F JUMPI DUP1 PUSH4 0xD6AE3CD5 EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0xDA25B725 EQ PUSH2 0x5D5 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x9E0E4E2F GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9E0E4E2F EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xAA82E33B EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0xC09975CD EQ PUSH2 0x529 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x7C9E9FFB EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x84ACD1BB EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x60EC23DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x71546831 EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x71C654EE EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x7B35B4E6 EQ PUSH2 0x3DB JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x60EC23DD EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x642DC033 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x66B58A01 EQ PUSH2 0x333 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1159BEF0 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x1159BEF0 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x13B38CCE EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x27CE36C6 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x46D9D49A EQ PUSH2 0x2C5 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x515F0C1 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xF36403A EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xFA1BA44 EQ PUSH2 0x21B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x212 SWAP2 SWAP1 PUSH2 0x32A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x822 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x284 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x90B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x911 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x331 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32C SWAP2 SWAP1 PUSH2 0x3407 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x355 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x11F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x367 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x385 PUSH2 0x1215 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39C PUSH2 0x1229 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D4 SWAP2 SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x35CD JUMP JUMPDEST PUSH2 0x1726 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x426 SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x1816 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x439 SWAP3 SWAP2 SWAP1 PUSH2 0x3630 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x457 PUSH2 0x1872 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x367A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x482 PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x48F SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BA SWAP2 SWAP1 PUSH2 0x36B0 JUMP JUMPDEST PUSH2 0x18C2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D6 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E3 SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x513 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50E SWAP2 SWAP1 PUSH2 0x331F JUMP JUMPDEST PUSH2 0x193B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x53E PUSH2 0x195B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54B SWAP2 SWAP1 PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x569 PUSH2 0x1981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x594 PUSH2 0x198A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A1 SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BF PUSH2 0x19B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5CC SWAP2 SWAP1 PUSH2 0x37DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5EA PUSH2 0x19C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F7 SWAP2 SWAP1 PUSH2 0x381B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x615 PUSH2 0x19EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x3857 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x640 PUSH2 0x1A10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x64D SWAP2 SWAP1 PUSH2 0x3893 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66B PUSH2 0x1A36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x678 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6A3 SWAP2 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH2 0x1A5C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6B2 PUSH2 0x1ADF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x743 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x73A SWAP1 PUSH2 0x3947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A9 SWAP1 PUSH2 0x39D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xCD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xD1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x82A PUSH2 0x1ADF JUMP JUMPDEST DUP1 PUSH1 0xCE DUP2 SWAP1 SSTORE POP PUSH32 0x6ED5A3DDEDC64E149E68B8BBC09D35489452528AE70487EE4F8832837C5C0105 DUP2 PUSH1 0x40 MLOAD PUSH2 0x860 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x906 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A90A219 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x901 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xD0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x92A JUMPI PUSH2 0x929 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST PUSH1 0xC7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x95D JUMPI PUSH2 0x95C PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x99D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x994 SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9D4 JUMPI PUSH2 0x9D3 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x9E7 DUP6 PUSH2 0x1C29 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA0D DUP3 PUSH2 0x1E65 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x94D36BC0D9BF5ADBD2DEC8BD125B7BF12EECC6E5539FC8F2BD57A831D9995AF7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xA55 SWAP3 SWAP2 SWAP1 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA67 DUP3 DUP3 PUSH2 0x1E72 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDB4 JUMPI PUSH1 0x0 PUSH1 0xCF PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC9F JUMPI PUSH1 0xCF PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7AD226DC DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6C SWAP3 SWAP2 SWAP1 PUSH2 0x3B01 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0xD2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 PUSH2 0xCFC CALLVALUE PUSH2 0x23AC JUMP JUMPDEST SWAP1 POP PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7AD226DC PUSH1 0xD1 SLOAD DUP4 GAS DUP11 PUSH2 0xD4C SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0xD56 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST PUSH2 0xD60 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD7E SWAP3 SWAP2 SWAP1 PUSH2 0x3BC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDC3 PUSH2 0x1ADF JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1FFF4AAE494AAEDFF71FF8B04DE50A56543BB83CE05B033C3FB4A93E065C05FC DUP3 PUSH1 0x40 MLOAD PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0xD2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED7 SWAP1 PUSH2 0x3C36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEEB DUP4 PUSH2 0x253B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF13 DUP7 PUSH2 0xEFC SWAP1 PUSH2 0x3EAE JUMP JUMPDEST DUP7 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF0D SWAP2 SWAP1 PUSH2 0x404D JUMP JUMPDEST DUP5 PUSH2 0x255E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF2A JUMPI PUSH2 0xF29 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST PUSH1 0xC7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF5D JUMPI PUSH2 0xF5C PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST EQ PUSH2 0xF9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF94 SWAP1 PUSH2 0x3A87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFD4 JUMPI PUSH2 0xFD3 PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH32 0x4870363995D5B750BCCCA9D95E57044D630524AEC2EF09EBDB820AC11D866B4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x10DC JUMPI POP PUSH1 0xD2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x11EC JUMPI PUSH1 0x0 PUSH1 0xD0 SLOAD GAS DUP6 PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x10FC SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 GT ISZERO PUSH2 0x111D JUMPI POP POP POP POP PUSH2 0x11F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0xCF PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x121D PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x1227 PUSH1 0x0 PUSH2 0x2762 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xCE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1260 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x128D JUMPI POP PUSH2 0x126F ADDRESS PUSH2 0x2828 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x128C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x12CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C3 SWAP1 PUSH2 0x40EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1309 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1313 DUP9 DUP9 PUSH2 0x284B JUMP JUMPDEST PUSH2 0x131B PUSH2 0x2A9A JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x138A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1381 SWAP1 PUSH2 0x4158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F0 SWAP1 PUSH2 0x41EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1468 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145F SWAP1 PUSH2 0x427C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14CE SWAP1 PUSH2 0x430E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE5D3D714 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1522 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1546 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0xC8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0xC9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0xCA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0xCB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xCC PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x7A120 PUSH1 0xCE DUP2 SWAP1 SSTORE POP PUSH2 0xEA60 PUSH1 0xD0 DUP2 SWAP1 SSTORE POP PUSH2 0x4E20 PUSH1 0xD1 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x171C JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x43B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x172E PUSH2 0x1898 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x179B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1792 SWAP1 PUSH2 0x441F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE2D2343D31B085B7C4E56D1C8A6EC79F7AB07460386F1C9A1756239FE2533AC DUP2 PUSH1 0x40 MLOAD PUSH2 0x17CA SWAP2 SWAP1 PUSH2 0x3695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 PUSH1 0x95 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0xCF PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x63 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18CA PUSH2 0x1ADF JUMP JUMPDEST DUP2 PUSH1 0xD0 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xD1 DUP2 SWAP1 SSTORE POP PUSH32 0xB8DF1FBA472926F296225C210E366F62B21FEC23B8E1B6B0A375724798CA9C0A DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1909 SWAP3 SWAP2 SWAP1 PUSH2 0x3AA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH5 0x2540BE400 DUP2 JUMP JUMPDEST PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1A64 PUSH2 0x1ADF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1AD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ACA SWAP1 PUSH2 0x44B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1ADC DUP2 PUSH2 0x2762 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AE7 PUSH2 0x2AF3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B05 PUSH2 0x1898 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B52 SWAP1 PUSH2 0x451D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC23EE3C3 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0x0 PUSH1 0xCE SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BD2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4578 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C12 SWAP2 SWAP1 PUSH2 0x45AF JUMP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH2 0x1C21 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB02C43D0 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8A SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CCB SWAP2 SWAP1 PUSH2 0x472E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1D1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D11 SWAP1 PUSH2 0x47A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6C626AA4 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D77 SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DB9 SWAP2 SWAP1 PUSH2 0x47C7 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP3 PUSH1 0xA0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x1DE1 JUMPI POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x1E20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E17 SWAP1 PUSH2 0x4879 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH5 0x2540BE400 DUP3 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x1E3F SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP5 POP PUSH2 0x1E53 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x2AFB JUMP JUMPDEST SWAP4 POP DUP2 PUSH1 0xC0 ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E7B DUP3 PUSH2 0x2CBA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT PUSH2 0x1EC0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EB7 SWAP1 PUSH2 0x4927 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1A90A219 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F53 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1F60 DUP3 PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE EQ PUSH2 0x1FA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9B SWAP1 PUSH2 0x49B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2013 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2CEA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC5A5EBDA DUP5 PUSH1 0xC8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0x20B4 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x253B JUMP JUMPDEST PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20C7 SWAP2 SWAP1 PUSH2 0x49E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20F7 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4AB3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x213A SWAP2 SWAP1 PUSH2 0x4B1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2159 JUMPI PUSH2 0x2158 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2192 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x217F PUSH2 0x3174 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2177 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC9 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A8A0592 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x220D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2231 SWAP2 SWAP1 PUSH2 0x4B5D JUMP JUMPDEST PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2265 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x253B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x228C JUMPI PUSH2 0x228B PUSH2 0x4B8A JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0xCA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x32B2FC0E DUP6 DUP6 PUSH2 0x22E1 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH1 0xCD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH1 0xCE SLOAD DUP9 PUSH1 0xCC PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND CALLER PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2360 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CD7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x237E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23A3 SWAP2 SWAP1 PUSH2 0x4B1B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3DE39C11 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x241C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2440 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x95 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE25B5345 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24D5 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GASPRICE LT PUSH2 0x24E6 JUMPI DUP3 PUSH2 0x24E8 JUMP JUMPDEST GASPRICE JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x24FE JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2536 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 PUSH2 0x250C SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x2536 JUMP JUMPDEST DUP3 DUP2 PUSH2 0x252F SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25EC SWAP1 PUSH2 0x4E0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x260B PUSH2 0x2601 DUP7 PUSH2 0x2DFC JUMP JUMPDEST DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x2E43 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x86F01439 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4FA9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x269A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH5 0x2540BE400 PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB02C43D0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26FF SWAP2 SWAP1 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x271C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2740 SWAP2 SWAP1 PUSH2 0x472E JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2758 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x63 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x63 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x28F7 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2936 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x292D SWAP1 PUSH2 0x505A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x29A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x299C SWAP1 PUSH2 0x50C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A0B SWAP1 PUSH2 0x5132 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2AE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE0 SWAP1 PUSH2 0x51C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AF1 PUSH2 0x2E79 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH5 0x2540BE400 DUP4 DUP6 PUSH2 0x2B10 SWAP2 SWAP1 PUSH2 0x51E4 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2B24 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9B53F51 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BB9 SWAP2 SWAP1 PUSH2 0x5220 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2BD1 JUMPI PUSH1 0x0 PUSH2 0x2BDE JUMP JUMPDEST DUP2 DUP4 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC42B64D0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C72 SWAP2 SWAP1 PUSH2 0x524D JUMP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x0 PUSH5 0x2540BE400 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2C94 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP7 PUSH2 0x2CA3 SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x2CAD SWAP2 SWAP1 PUSH2 0x3B59 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0x2540BE400 DUP3 PUSH2 0x2CCD SWAP2 SWAP1 PUSH2 0x4D92 JUMP JUMPDEST SWAP2 POP PUSH5 0x2540BE400 DUP3 PUSH2 0x2CE0 SWAP2 SWAP1 PUSH2 0x4899 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D27 SWAP3 SWAP2 SWAP1 PUSH2 0x52B4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D68 SWAP2 SWAP1 PUSH2 0x3A0E JUMP JUMPDEST SWAP1 POP PUSH2 0x2DF6 DUP5 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH2 0x2D83 SWAP2 SWAP1 PUSH2 0x3B8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D94 SWAP3 SWAP2 SWAP1 PUSH2 0x52DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x2EDA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E3C DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E28 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5363 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2FA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E58 SWAP3 SWAP2 SWAP1 PUSH2 0x5400 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2EC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EBF SWAP1 PUSH2 0x51C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2ED8 PUSH2 0x2ED3 PUSH2 0x2AF3 JUMP JUMPDEST PUSH2 0x2762 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F3C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2FCA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x2F5E JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2F5D SWAP2 SWAP1 PUSH2 0x5441 JUMP JUMPDEST JUMPDEST PUSH2 0x2F9D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F94 SWAP1 PUSH2 0x54E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH1 0x2 GAS STATICCALL POP PUSH1 0x20 PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 PUSH1 0x2 GAS STATICCALL POP PUSH1 0x0 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2FD9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2FE2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3027 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301E SWAP1 PUSH2 0x5572 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3050 SWAP2 SWAP1 PUSH2 0x5592 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x308D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3092 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x30A3 DUP8 DUP4 DUP4 DUP8 PUSH2 0x30AF JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3111 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x3109 JUMPI PUSH2 0x30C9 DUP6 PUSH2 0x2828 JUMP JUMPDEST PUSH2 0x3108 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30FF SWAP1 PUSH2 0x55F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x311C JUMP JUMPDEST PUSH2 0x311B DUP4 DUP4 PUSH2 0x3124 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x3137 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x316B SWAP2 SWAP1 PUSH2 0x5659 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E5 DUP3 PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31F5 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP2 EQ PUSH2 0x3200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3212 DUP2 PUSH2 0x31EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322E JUMPI PUSH2 0x322D PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x323C DUP5 DUP3 DUP6 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x326A PUSH2 0x3265 PUSH2 0x3260 DUP5 PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C DUP3 PUSH2 0x324F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328E DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329E DUP2 PUSH2 0x3283 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3295 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D2 DUP2 PUSH2 0x32BF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32FC DUP2 PUSH2 0x32BF JUMP JUMPDEST DUP2 EQ PUSH2 0x3307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3319 DUP2 PUSH2 0x32F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3335 JUMPI PUSH2 0x3334 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3343 DUP5 DUP3 DUP6 ADD PUSH2 0x330A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3361 DUP2 PUSH2 0x334C JUMP JUMPDEST DUP2 EQ PUSH2 0x336C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x337E DUP2 PUSH2 0x3358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x339B JUMPI PUSH2 0x339A PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33A9 DUP6 DUP3 DUP7 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x33BA DUP6 DUP3 DUP7 ADD PUSH2 0x336F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33DF JUMPI PUSH2 0x33DE PUSH2 0x33C4 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33FE JUMPI PUSH2 0x33FD PUSH2 0x33C4 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3421 JUMPI PUSH2 0x3420 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x343F JUMPI PUSH2 0x343E PUSH2 0x31B5 JUMP JUMPDEST JUMPDEST PUSH2 0x344B DUP7 DUP3 DUP8 ADD PUSH2 0x33C9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x345C DUP7 DUP3 DUP8 ADD PUSH2 0x33E8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x346D DUP7 DUP3 DUP8 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x3480 DUP2 PUSH2 0x334C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x349B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34B8 DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x34C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x34D5 DUP2 PUSH2 0x34AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x34FA JUMPI PUSH2 0x34F9 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3508 DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x3519 DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x352A DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x353B DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x354C DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x355D DUP11 DUP3 DUP12 ADD PUSH2 0x3203 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x356E DUP11 DUP3 DUP12 ADD PUSH2 0x34C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3588 DUP3 PUSH2 0x31BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359A DUP3 PUSH2 0x357D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35AA DUP2 PUSH2 0x358F JUMP JUMPDEST DUP2 EQ PUSH2 0x35B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35C7 DUP2 PUSH2 0x35A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x35E3 JUMPI PUSH2 0x35E2 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35F1 DUP5 DUP3 DUP6 ADD PUSH2 0x35B8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3603 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x362A DUP2 PUSH2 0x3609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3645 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x3652 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3621 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3664 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3674 DUP2 PUSH2 0x3659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x368F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x366B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36C7 JUMPI PUSH2 0x36C6 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36D5 DUP6 DUP3 DUP7 ADD PUSH2 0x330A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36E6 DUP6 DUP3 DUP7 ADD PUSH2 0x330A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x3730 JUMPI PUSH2 0x372F PUSH2 0x36F0 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x3741 DUP3 PUSH2 0x371F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3751 DUP3 PUSH2 0x3733 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3761 DUP2 PUSH2 0x3746 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x377C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3758 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378D DUP3 PUSH2 0x324F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379F DUP3 PUSH2 0x3782 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37AF DUP2 PUSH2 0x3794 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37CA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x37D9 DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x37F4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3805 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3815 DUP2 PUSH2 0x37FA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3830 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x380C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3841 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3851 DUP2 PUSH2 0x3836 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x386C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3848 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387D DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x388D DUP2 PUSH2 0x3872 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3884 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38B9 DUP3 PUSH2 0x3271 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x38C9 DUP2 PUSH2 0x38AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38E4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x38C0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4C3220426974636F696E204465706F7369746F7220616C726561647920736574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3931 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x393C DUP3 PUSH2 0x38FB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3960 DUP2 PUSH2 0x3924 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C3220426974636F696E204465706F7369746F72206D757374206E6F74206265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030783000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39C3 PUSH1 0x24 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x39CE DUP3 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39F2 DUP2 PUSH2 0x39B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3A08 DUP2 PUSH2 0x32F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A24 JUMPI PUSH2 0x3A23 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A32 DUP5 DUP3 DUP6 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x57726F6E67206465706F73697420737461746500000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A71 PUSH1 0x13 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7C DUP3 PUSH2 0x3A3B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AA0 DUP2 PUSH2 0x3A64 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3ABC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x3AC9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AEB PUSH2 0x3AE6 PUSH2 0x3AE1 DUP5 PUSH2 0x3609 JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x32BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AFB DUP2 PUSH2 0x3AD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B16 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3AF2 JUMP JUMPDEST PUSH2 0x3B23 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B64 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B6F DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B87 JUMPI PUSH2 0x3B86 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B98 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x3BA3 DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3BBB JUMPI PUSH2 0x3BBA PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3BD6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x3BE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4C32206465706F736974206F776E6572206D757374206E6F7420626520307830 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C20 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3C2B DUP3 PUSH2 0x3BEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C4F DUP2 PUSH2 0x3C13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3CA4 DUP3 PUSH2 0x3C5B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3CC3 JUMPI PUSH2 0x3CC2 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD6 PUSH2 0x31A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CE2 DUP3 DUP3 PUSH2 0x3C9B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D21 DUP2 PUSH2 0x3CEC JUMP JUMPDEST DUP2 EQ PUSH2 0x3D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3D3E DUP2 PUSH2 0x3D18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3D69 JUMPI PUSH2 0x3D68 PUSH2 0x3C6C JUMP JUMPDEST JUMPDEST PUSH2 0x3D72 DUP3 PUSH2 0x3C5B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA1 PUSH2 0x3D9C DUP5 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3DBD JUMPI PUSH2 0x3DBC PUSH2 0x3D49 JUMP JUMPDEST JUMPDEST PUSH2 0x3DC8 DUP5 DUP3 DUP6 PUSH2 0x3D7F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DE5 JUMPI PUSH2 0x3DE4 PUSH2 0x3D44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DF5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3D8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E14 JUMPI PUSH2 0x3E13 PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x3E1E PUSH1 0x80 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E2E DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E52 JUMPI PUSH2 0x3E51 PUSH2 0x3CE7 JUMP JUMPDEST JUMPDEST PUSH2 0x3E5E DUP5 DUP3 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E82 JUMPI PUSH2 0x3E81 PUSH2 0x3CE7 JUMP JUMPDEST JUMPDEST PUSH2 0x3E8E DUP5 DUP3 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x3EA2 DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EBA CALLDATASIZE DUP4 PUSH2 0x3DFE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EDA DUP2 PUSH2 0x3EC1 JUMP JUMPDEST DUP2 EQ PUSH2 0x3EE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3EF7 DUP2 PUSH2 0x3ED1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F32 DUP2 PUSH2 0x3EFD JUMP JUMPDEST DUP2 EQ PUSH2 0x3F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3F4F DUP2 PUSH2 0x3F29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F8A DUP2 PUSH2 0x3F55 JUMP JUMPDEST DUP2 EQ PUSH2 0x3F95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3FA7 DUP2 PUSH2 0x3F81 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FC3 JUMPI PUSH2 0x3FC2 PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x3FCD PUSH1 0xC0 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3FDD DUP5 DUP3 DUP6 ADD PUSH2 0x3EE8 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x3FF1 DUP5 DUP3 DUP6 ADD PUSH2 0x3F40 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x4005 DUP5 DUP3 DUP6 ADD PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x4019 DUP5 DUP3 DUP6 ADD PUSH2 0x3F98 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x402D DUP5 DUP3 DUP6 ADD PUSH2 0x3D2F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x4041 DUP5 DUP3 DUP6 ADD PUSH2 0x3203 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4063 JUMPI PUSH2 0x4062 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4071 DUP5 DUP3 DUP6 ADD PUSH2 0x3FAD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40D6 PUSH1 0x2E DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x40E1 DUP3 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4105 DUP2 PUSH2 0x40C9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6520616464726573732063616E6E6F74206265207A65726F00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4142 PUSH1 0x1F DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x414D DUP3 PUSH2 0x410C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4171 DUP2 PUSH2 0x4135 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6552656C6179657220616464726573732063616E6E6F742062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65207A65726F0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D4 PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x41DF DUP3 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4203 DUP2 PUSH2 0x41C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C65546F6B656E42726964676520616464726573732063616E6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206265207A65726F00000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4266 PUSH1 0x2A DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4271 DUP3 PUSH2 0x420A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4295 DUP2 PUSH2 0x4259 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C32576F726D686F6C654761746577617920616464726573732063616E6E6F74 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265207A65726F000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F8 PUSH1 0x28 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4303 DUP3 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4327 DUP2 PUSH2 0x42EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x433D DUP2 PUSH2 0x31EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4359 JUMPI PUSH2 0x4358 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4367 DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43A2 PUSH2 0x439D PUSH2 0x4398 DUP5 PUSH2 0x4370 JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x437A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x43B2 DUP2 PUSH2 0x4387 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x43CD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4409 PUSH1 0x17 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4414 DUP3 PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4438 DUP2 PUSH2 0x43FC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449B PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x44A6 DUP3 PUSH2 0x443F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44CA DUP2 PUSH2 0x448E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4507 PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4512 DUP3 PUSH2 0x44D1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4536 DUP2 PUSH2 0x44FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4562 PUSH2 0x455D PUSH2 0x4558 DUP5 PUSH2 0x453D JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x32BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4572 DUP2 PUSH2 0x4547 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x458D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x459A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4569 JUMP JUMPDEST PUSH2 0x45A7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x45C6 JUMPI PUSH2 0x45C5 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x45D4 DUP6 DUP3 DUP7 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x45E5 DUP6 DUP3 DUP7 ADD PUSH2 0x39F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x460C DUP2 PUSH2 0x45EF JUMP JUMPDEST DUP2 EQ PUSH2 0x4617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4629 DUP2 PUSH2 0x4603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x463E DUP2 PUSH2 0x3ED1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4657 DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP2 EQ PUSH2 0x4662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4674 DUP2 PUSH2 0x464E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4690 JUMPI PUSH2 0x468F PUSH2 0x3C56 JUMP JUMPDEST JUMPDEST PUSH2 0x469A PUSH1 0xE0 PUSH2 0x3CCC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x46AA DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x46BE DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x46D2 DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x46E6 DUP5 DUP3 DUP6 ADD PUSH2 0x432E JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x46FA DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x470E DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x4722 DUP5 DUP3 DUP6 ADD PUSH2 0x4665 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4744 JUMPI PUSH2 0x4743 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4752 DUP5 DUP3 DUP6 ADD PUSH2 0x467A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4465706F736974206E6F7420696E697469616C697A6564000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4791 PUSH1 0x17 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x479C DUP3 PUSH2 0x475B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x47C0 DUP2 PUSH2 0x4784 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47DE JUMPI PUSH2 0x47DD PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x47EC DUP6 DUP3 DUP7 ADD PUSH2 0x461A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x47FD DUP6 DUP3 DUP7 ADD PUSH2 0x461A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4465706F736974206E6F742066696E616C697A65642062792074686520627269 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6467650000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4863 PUSH1 0x23 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x486E DUP3 PUSH2 0x4807 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4892 DUP2 PUSH2 0x4856 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A4 DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x48AF DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x48BD DUP2 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x48D4 JUMPI PUSH2 0x48D3 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416D6F756E7420746F6F206C6F7720746F206272696467650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4911 PUSH1 0x18 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x491C DUP3 PUSH2 0x48DB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4940 DUP2 PUSH2 0x4904 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061796D656E7420666F7220576F726D686F6C652052656C6179657220697320 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x746F6F206C6F7700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49A3 PUSH1 0x27 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x49AE DUP3 PUSH2 0x4947 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x49D2 DUP2 PUSH2 0x4996 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x49E2 DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x49FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x49D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A1E PUSH2 0x4A19 PUSH2 0x4A14 DUP5 PUSH2 0x453D JUMP JUMPDEST PUSH2 0x3245 JUMP JUMPDEST PUSH2 0x3EC1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4A2E DUP2 PUSH2 0x4A03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A6E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A53 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A85 DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x4A8F DUP2 DUP6 PUSH2 0x4A3F JUMP JUMPDEST SWAP4 POP PUSH2 0x4A9F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x4AA8 DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x4AC8 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x4AD5 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x32C9 JUMP JUMPDEST PUSH2 0x4AE2 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4AEF PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x49D9 JUMP JUMPDEST PUSH2 0x4AFC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x4A25 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4B0E DUP2 DUP5 PUSH2 0x4A7A JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B31 JUMPI PUSH2 0x4B30 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4B3F DUP5 DUP3 DUP6 ADD PUSH2 0x461A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4B57 DUP2 PUSH2 0x34AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B73 JUMPI PUSH2 0x4B72 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4B81 DUP5 DUP3 DUP6 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4BEE DUP2 PUSH2 0x34A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4BFD DUP2 PUSH2 0x4644 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4C0C DUP2 PUSH2 0x45EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x4C28 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x4BE5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4C3B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4BF4 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4C4E PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4C03 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C60 DUP4 DUP4 PUSH2 0x4C12 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C84 DUP3 PUSH2 0x4BB9 JUMP JUMPDEST PUSH2 0x4C8E DUP2 DUP6 PUSH2 0x4BC4 JUMP JUMPDEST SWAP4 POP PUSH2 0x4C99 DUP4 PUSH2 0x4BD5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4CCA JUMPI DUP2 MLOAD PUSH2 0x4CB1 DUP9 DUP3 PUSH2 0x4C54 JUMP JUMPDEST SWAP8 POP PUSH2 0x4CBC DUP4 PUSH2 0x4C6C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4C9D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP PUSH2 0x4CED PUSH1 0x0 DUP4 ADD DUP12 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4CFA PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x35FA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4D0C DUP2 DUP10 PUSH2 0x4A7A JUMP JUMPDEST SWAP1 POP PUSH2 0x4D1B PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0x4569 JUMP JUMPDEST PUSH2 0x4D28 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x32C9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4D3A DUP2 DUP7 PUSH2 0x4C79 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D49 PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0x37D0 JUMP JUMPDEST PUSH2 0x4D56 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D9D DUP3 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP PUSH2 0x4DA8 DUP4 PUSH2 0x32BF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4DB8 JUMPI PUSH2 0x4DB7 PUSH2 0x4D63 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5661756C742061646472657373206D69736D6174636800000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DF9 PUSH1 0x16 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x4E04 DUP3 PUSH2 0x4DC3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4E28 DUP2 PUSH2 0x4DEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4E38 DUP2 PUSH2 0x3CEC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E5A DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x4E64 DUP2 DUP6 PUSH2 0x4E3E JUMP JUMPDEST SWAP4 POP PUSH2 0x4E74 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x4E7D DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x4EA0 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x4EB8 DUP3 DUP3 PUSH2 0x4E4F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x4ED2 DUP3 DUP3 PUSH2 0x4E4F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4EE7 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4EFB DUP2 PUSH2 0x3EC1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F0A DUP2 PUSH2 0x3EFD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F19 DUP2 PUSH2 0x3F55 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x4F28 DUP2 PUSH2 0x31DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x4F44 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x4EF2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4F57 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x4F01 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4F6A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x4F10 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x4F7D PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4F10 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x4F90 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x4E2F JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x4FA3 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x4F1F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4FC4 DUP2 DUP7 PUSH2 0x4E88 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FD3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4F2E JUMP JUMPDEST PUSH2 0x4FE0 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x49D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4162737472616374544254434465706F7369746F7220616C726561647920696E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x697469616C697A65640000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5044 PUSH1 0x29 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x504F DUP3 PUSH2 0x4FE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5073 DUP2 PUSH2 0x5037 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x42726964676520616464726573732063616E6E6F74206265207A65726F000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50B0 PUSH1 0x1D DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x50BB DUP3 PUSH2 0x507A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x50DF DUP2 PUSH2 0x50A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x544254435661756C7420616464726573732063616E6E6F74206265207A65726F PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x511C PUSH1 0x20 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x5127 DUP3 PUSH2 0x50E6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x514B DUP2 PUSH2 0x510F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51AE PUSH1 0x2B DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x51B9 DUP3 PUSH2 0x5152 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x51DD DUP2 PUSH2 0x51A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51EF DUP3 PUSH2 0x45EF JUMP JUMPDEST SWAP2 POP PUSH2 0x51FA DUP4 PUSH2 0x45EF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x521A JUMPI PUSH2 0x5219 PUSH2 0x3B2A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5236 JUMPI PUSH2 0x5235 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5244 DUP5 DUP3 DUP6 ADD PUSH2 0x462F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5267 JUMPI PUSH2 0x5266 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5275 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x5286 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x5297 DUP8 DUP3 DUP9 ADD PUSH2 0x461A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x52A8 DUP8 DUP3 DUP9 ADD PUSH2 0x462F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x52C9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x52D6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x35FA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x52F2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x35FA JUMP JUMPDEST PUSH2 0x52FF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32C9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5321 PUSH2 0x531C DUP3 PUSH2 0x3CEC JUMP JUMPDEST PUSH2 0x5306 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x533D DUP3 PUSH2 0x4A34 JUMP JUMPDEST PUSH2 0x5347 DUP2 DUP6 PUSH2 0x5327 JUMP JUMPDEST SWAP4 POP PUSH2 0x5357 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x536F DUP3 DUP8 PUSH2 0x5310 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP PUSH2 0x537F DUP3 DUP7 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP PUSH2 0x538B DUP3 DUP6 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP PUSH2 0x5397 DUP3 DUP5 PUSH2 0x5310 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53C4 PUSH2 0x53BF DUP3 PUSH2 0x4644 JUMP JUMPDEST PUSH2 0x53A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53E2 DUP3 PUSH2 0x53CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53FA PUSH2 0x53F5 DUP3 PUSH2 0x3EC1 JUMP JUMPDEST PUSH2 0x53D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x540C DUP3 DUP6 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x541C DUP3 DUP5 PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x543B DUP2 PUSH2 0x3358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5457 JUMPI PUSH2 0x5456 PUSH2 0x31B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5465 DUP5 DUP3 DUP6 ADD PUSH2 0x542C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54CA PUSH1 0x2A DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x54D5 DUP3 PUSH2 0x546E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x54F9 DUP2 PUSH2 0x54BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555C PUSH1 0x26 DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x5567 DUP3 PUSH2 0x5500 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x558B DUP2 PUSH2 0x554F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x559E DUP3 DUP5 PUSH2 0x5332 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x55DF PUSH1 0x1D DUP4 PUSH2 0x38EA JUMP JUMPDEST SWAP2 POP PUSH2 0x55EA DUP3 PUSH2 0x55A9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x560E DUP2 PUSH2 0x55D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x562B DUP3 PUSH2 0x5615 JUMP JUMPDEST PUSH2 0x5635 DUP2 DUP6 PUSH2 0x38EA JUMP JUMPDEST SWAP4 POP PUSH2 0x5645 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A50 JUMP JUMPDEST PUSH2 0x564E DUP2 PUSH2 0x3C5B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5673 DUP2 DUP5 PUSH2 0x5620 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xB9 0xA6 0xD1 0xC3 0xAD 0xBF CODESIZE SWAP6 0x24 SIGNEXTEND PUSH11 0xF7A30681FA41F5D6F89A5 0xA7 0xC0 0xC3 0xD0 LOG0 DUP5 0xBD 0xE3 PUSH9 0x64736F6C6343000811 STOP CALLER ","sourceMap":"4405:27135:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11136:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3747:27:15;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7812:39:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11805:262;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;25792:137;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7594:41;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;21339:2849;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13111:264;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;16828:2987;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8069:59;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2085:101:5;;;;;;;;;;;;;:::i;:::-;;6722:40:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9210:1355;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2772:246:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7354:61:18;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;5817:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1462:85:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12407:415:18;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6132:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5629:48;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2125:42:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3577:51:15;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6346:33:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6235:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5898:39;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5729:34;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3676:21:15;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5998:47:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2335:198:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;11136:406:18;1355:13:5;:11;:13::i;:::-;11299:1:18::1;11269:32;;:18;;;;;;;;;;;:32;;;11248:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;11421:1;11390:33;;:19;:33;;::::0;11369:116:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;11516:19;11495:18;;:40;;;;;;;;;;;;;;;;;;11136:406:::0;:::o;3747:27:15:-;;;;;;;;;;;;;:::o;7812:39:18:-;;;;:::o;11805:262::-;1355:13:5;:11;:13::i;:::-;11959:26:18::1;11931:25;:54;;;;12000:60;12033:26;12000:60;;;;;;:::i;:::-;;;;;;;;11805:262:::0;:::o;25792:137::-;25847:12;25878:44;25900:8;;;;;;;;;;;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25878;:44::i;:::-;25871:51;;25792:137;:::o;7594:41::-;;;;:::o;21339:2849::-;21411:16;21430:9;21411:28;;21495:24;21471:48;;;;;;;;:::i;:::-;;:8;:20;21480:10;21471:20;;;;;;;;;;;;;;;;;;;;;:48;;;;;;;;:::i;:::-;;;21450:114;;;;;;;;;;;;:::i;:::-;;;;;;;;;21598:22;21575:8;:20;21584:10;21575:20;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;21645:28;21687:18;21829:22;21864:28;21881:10;21864:16;:28::i;:::-;21631:261;;;;;;22080:10;21963:195;;22017:49;22051:14;22017:33;:49::i;:::-;21963:195;;21993:10;21963:195;22104:20;22138:10;21963:195;;;;;;;:::i;:::-;;;;;;;;22169:41;22183:10;22195:14;22169:13;:41::i;:::-;22567:1;22529:40;;22537:17;;;;;;;;;;;22529:40;;;22525:1657;;22915:37;22955:17;:59;22990:10;22955:59;;;;;;;;;;;22915:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23066:1;23032:36;;:13;:22;;;:36;;;23028:260;;23095:17;:29;23113:10;23095:29;;;;;;;;;;;;23088:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23143:17;;;;;;;;;;;:24;;;23189:13;:22;;;23233:13;:22;;;23143:130;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23028:260;23442:27;:39;23470:10;23442:39;;;;;;;;;;;;;;;;;;;;;;;;;23438:734;;;23876:22;23901:28;23919:9;23901:17;:28::i;:::-;23876:53;;23947:17;;;;;;;;;;;:24;;;24083;;24042:14;24005:9;23994:8;:20;;;;:::i;:::-;23993:63;;;;:::i;:::-;:114;;;;:::i;:::-;24129:10;23947:210;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23483:689;23438:734;22571:1611;22525:1657;21401:2787;;;;21339:2849;:::o;13111:264::-;1355:13:5;:11;:13::i;:::-;13281:8:18::1;13247:58;;;13291:13;13247:58;;;;;;:::i;:::-;;;;;;;;13355:13;13315:27;:37;13343:8;13315:37;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;13111:264:::0;;:::o;16828:2987::-;17023:16;17042:9;17023:28;;17109:1;17083:28;;:14;:28;;;17062:107;;;;;;;;;;;;:::i;:::-;;;;;;;;;17301:17;17321:47;17353:14;17321:31;:47::i;:::-;17301:67;;17890:18;17914:94;17946:9;17914:94;;;:::i;:::-;17969:6;17914:94;;;;;;;;;;:::i;:::-;17989:9;17914:18;:94::i;:::-;17889:119;;;18064:20;18040:44;;;;;;;;:::i;:::-;;:8;:20;18049:10;18040:20;;;;;;;;;;;;;;;;;;;;;:44;;;;;;;;:::i;:::-;;;18019:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;18218:24;18195:8;:20;18204:10;18195:20;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;18360:10;18313:58;;18344:14;18313:58;;18332:10;18313:58;;;;;;;;;;18589:1;18551:40;;18559:17;;;;;;;;;;;18551:40;;;;:95;;;;;18607:27;:39;18635:10;18607:39;;;;;;;;;;;;;;;;;;;;;;;;;18551:95;18534:1275;;;18671:16;18731:26;;18702:9;18691:8;:20;;;;:::i;:::-;18690:67;;;;:::i;:::-;18671:86;;19003:16;18992:27;;:8;:27;18988:72;;;19039:7;;;;;;18988:72;19684:114;;;;;;;;19729:10;19684:114;;;;;;19774:8;19684:114;;;;;19652:17;:29;19670:10;19652:29;;;;;;;;;;;:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18657:1152;18534:1275;17013:2802;;;16828:2987;;;;:::o;8069:59::-;;;;;;;;;;;;;;;;;;;;;;:::o;2085:101:5:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;:::-;2085:101::o:0;6722:40:18:-;;;;:::o;9210:1355::-;3279:19:6;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;9486:59:18::1;9521:11;9534:10;9486:34;:59::i;:::-;9555:16;:14;:16::i;:::-;9611:1;9590:23;;:9;:23;;::::0;9582:67:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;9708:1;9680:30;;:16;:30;;::::0;9659:115:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;9837:1;9805:34;;:20;:34;;::::0;9784:123:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;9968:1;9938:32;;:18;:32;;::::0;9917:119:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;10088:10;10077:32;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10047:9;;:65;;;;;;;;;;;;;;;;;;10143:9;10122:8;;:31;;;;;;;;;;;;;;;;;;10198:16;10163:15;;:52;;;;;;;;;;;;;;;;;;10268:20;10225:19;;:64;;;;;;;;;;;;;;;;;;10375:18;10355:17;;:38;;;;;;;;;;;;;;;;;;10415:10;10403:9;;:22;;;;;;;;;;;;;;;;;;10463:7;10435:25;:35;;;;10509:6;10480:26;:35;;;;10552:6;10525:24;:33;;;;3651:14:6::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;9210:1355:18;;;;;;;:::o;2772:246:3:-;9039:7:18;:5;:7::i;:::-;9025:21;;:10;:21;;;9017:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;2909:53:3::1;2942:18;2909:53;;;;;;:::i;:::-;;;;;;;;2993:18;2973:17;;:38;;;;;;;;;;;;;;;;;;2772:246:::0;:::o;7354:61:18:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5817:25::-;;;;;;;;;;;;;:::o;1462:85:5:-;1508:7;1534:6;;;;;;;;;;;1527:13;;1462:85;:::o;12407:415:18:-;1355:13:5;:11;:13::i;:::-;12594:27:18::1;12565:26;:56;;;;12658:25;12631:24;:52;;;;12699:116;12739:27;12780:25;12699:116;;;;;;;:::i;:::-;;;;;;;;12407:415:::0;;:::o;6132:32::-;;;;;;;;;;;;;:::o;5629:48::-;;;;;;;;;;;;;;;;;;;;;;:::o;2125:42:3:-;;;;;;;;;;;;;:::o;3577:51:15:-;3622:6;3577:51;:::o;6346:33:18:-;;;;;;;;;;;;;:::o;6235:23::-;;;;;;;;;;;;;:::o;5898:39::-;;;;;;;;;;;;;:::o;5729:34::-;;;;;;;;;;;;;:::o;3676:21:15:-;;;;;;;;;;;;;:::o;5998:47:18:-;;;;;;;;;;;;;:::o;2335:198:5:-;1355:13;:11;:13::i;:::-;2443:1:::1;2423:22;;:8;:22;;::::0;2415:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2498:28;2517:8;2498:18;:28::i;:::-;2335:198:::0;:::o;1620:130::-;1694:12;:10;:12::i;:::-;1683:23;;:7;:5;:7::i;:::-;:23;;;1675:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1620:130::o;26446:499:18:-;26544:12;26637:20;26663:15;;;;;;;;;;;:37;;;26714:9;;;;;;;;;;;26737:1;26752:25;;26663:124;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;26636:151;;;26928:10;26913:12;:25;;;;:::i;:::-;26906:32;;26562:383;26446:499;;;:::o;8226:807:15:-;8319:28;8361:18;8393:17;8435:42;8480:6;;;;;;;;;;;:15;;;8509:10;8480:49;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8435:94;;8569:1;8547:7;:18;;;:23;;;8539:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;8612:18;8634:9;;;;;;;;;;;:35;;;8683:10;8634:69;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8609:94;;;8754:1;8735:7;:15;;;:20;;;;:40;;;;8774:1;8759:11;:16;;;;8735:40;8714:122;;;;;;;;;;;;:::i;:::-;;;;;;;;;3622:6;8870:7;:14;;;:35;;;;;;:::i;:::-;8847:58;;8929:57;8950:7;:14;;;8966:7;:19;;;8929:20;:57::i;:::-;8916:70;;9009:7;:17;;;8997:29;;8425:608;;8226:807;;;;;:::o;5651:166:20:-;5745:7;5799:8;5791:17;;5768:42;;5651:166;;;:::o;28437:3101:18:-;28642:31;28666:6;28642:23;:31::i;:::-;28633:40;;28701:1;28692:6;:10;28684:47;;;;;;;;;;;;:::i;:::-;;;;;;;;;28886:26;28915:8;;;;;;;;;;;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28886:50;;28946:12;28961:41;28983:18;28961:21;:41::i;:::-;28946:56;;29034:4;29021:9;:17;29013:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;29226;29266:19;;;;;;;;;;;29288:6;29226:9;;;;;;;;;;;:31;;;;:69;;;;;:::i;:::-;29582:23;29608:19;;;;;;;;;;;:45;;;29674:18;29724:9;;;;;;;;;;;29748:6;29768:9;;;;;;;;;;;29791:50;29823:17;;;;;;;;;;;29791:31;:50::i;:::-;29855:1;29944:10;29933:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;29608:413;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;29582:439;;30117:56;30203:1;30176:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;30117:88;;30235:234;;;;;;;;30279:8;;;;;;;;;;;:16;;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;30235:234;;;;;;30327:91;30384:19;;;;;;;;;;;30327:31;:91::i;:::-;30235:234;;;;30442:16;30235:234;;;;;30215:14;30230:1;30215:17;;;;;;;;:::i;:::-;;;;;;;:254;;;;31005:15;;;;;;;;;;;:29;;;31049:18;31042:4;:25;;;;:::i;:::-;31082:9;;;;;;;;;;;31105:18;;;;;;;;;;;31137:9;;;;;;;;;;;;31265:1;31309:25;;31348:14;31376:9;;;;;;;;;;;31469:10;31005:526;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;28505:3033;;;;28437:3101;;:::o;24673:734::-;24734:7;24753:19;24775:17;;;;;;;;;;;:29;;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24753:53;;24816:17;24836;;;;;;;;;;;:27;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24816:49;;24876:16;24909:11;24895;:25;:77;;24961:11;24895:77;;;24935:11;24895:77;24876:96;;25104:1;25092:8;:13;25088:52;;25128:1;25121:8;;;;;;;25088:52;25150:16;25179:8;25170:6;:17;;;;:::i;:::-;25150:38;;25320:8;25308:9;:20;25304:59;;;25351:1;25344:8;;;;;;;;25304:59;25391:9;25380:8;:20;;;;:::i;:::-;25373:27;;;;;;24673:734;;;;:::o;5369:164:20:-;5461:7;5515:8;5499:26;;5491:35;;5484:42;;5369:164;;;:::o;6034:915:15:-;6220:18;6240:28;6312:9;;;;;;;;;;;6288:34;;:6;:12;;;:34;;;6280:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;6373:117;6407:34;6431:9;6407:23;:34::i;:::-;6455:6;:25;;;6373:20;:117::i;:::-;6360:130;;6766:6;;;;;;;;;;;:33;;;6800:9;6811:6;6819:9;6766:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3622:6;6875;;;;;;;;;;;:15;;;6891:10;6875:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:34;;;:67;;;;;;:::i;:::-;6840:102;;6034:915;;;;;;:::o;2687:187:5:-;2760:16;2779:6;;;;;;;;;;;2760:25;;2804:8;2795:6;;:17;;;;;;;;;;;;;;;;;;2858:8;2827:40;;2848:8;2827:40;;;;;;;;;;;;2750:124;2687:187;:::o;1423:320:10:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;4425:515:15:-;4595:1;4568:29;;4576:6;;;;;;;;;;;4568:29;;;:65;;;;;4631:1;4601:32;;4609:9;;;;;;;;;;;4601:32;;;4568:65;4547:153;;;;;;;;;;;;:::i;:::-;;;;;;;;;4738:1;4719:21;;:7;:21;;;4711:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;4814:1;4792:24;;:10;:24;;;4784:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;4881:7;4864:6;;:25;;;;;;;;;;;;;;;;;;4922:10;4899:9;;:34;;;;;;;;;;;;;;;;;;4425:515;;:::o;1024:95:5:-;5374:13:6;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1086:26:5::1;:24;:26::i;:::-;1024:95::o:0;886:96:11:-;939:7;965:10;958:17;;886:96;:::o;11092:920:15:-;11230:7;11394:25;3622:6;11442:21;11423:16;:40;;;;:::i;:::-;11422:75;;;;;;:::i;:::-;11394:103;;11508:20;11531:9;;;;;;;;;;;:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11508:62;;;;11580:13;11611:1;11596:12;:16;:81;;11676:1;11596:81;;;11648:12;11628:17;:32;;;;:::i;:::-;11596:81;11580:97;;11832:22;11860:6;;;;;;;;;;;:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11827:59;;;;;11896:16;3622:6;11915:15;:36;;;;;;:::i;:::-;11896:55;;11997:8;11989:5;11969:17;:25;;;;:::i;:::-;:36;;;;:::i;:::-;11962:43;;;;;;;11092:920;;;;:::o;6122:209:20:-;6180:7;6269:6;6259:16;;;;;:::i;:::-;;;6295:6;6285:16;;;;;:::i;:::-;;;6318:6;6311:13;;6122:209;;;:::o;2670:291:9:-;2777:20;2800:5;:15;;;2824:4;2831:7;2800:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2777:62;;2849:105;2869:5;2899:22;;;2923:7;2947:5;2932:12;:20;;;;:::i;:::-;2876:77;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:19;:105::i;:::-;2767:194;2670:291;;;:::o;13105:407:15:-;13227:7;13269:236;13324:6;:14;;;13360:6;:18;;;13400:6;:19;;;13441:6;:15;;;13269:205;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:234;:236::i;:::-;13250:255;;13105:407;;;:::o;12535:271::-;12660:7;12750:13;12765:18;12733:51;;;;;;;;;:::i;:::-;;;;;;;;;;;;;12723:62;;;;;;12698:101;;12679:120;;12535:271;;;;:::o;1125:111:5:-;5374:13:6;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1197:32:5::1;1216:12;:10;:12::i;:::-;1197:18;:32::i;:::-;1125:111::o:0;5328:653:9:-;5758:23;5784:69;5812:4;5784:69;;;;;;;;;;;;;;;;;5792:5;5784:27;;;;:69;;;;;:::i;:::-;5758:95;;5892:1;5871:10;:17;:22;:56;;;;5908:10;5897:30;;;;;;;;;;;;:::i;:::-;5871:56;5863:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5409:572;5328:653;;:::o;9609:335:0:-;9670:11;9835:2;9829:4;9824:2;9818:9;9813:2;9809;9805:11;9802:1;9795:5;9784:54;9780:59;9893:2;9887:4;9883:2;9877:4;9874:1;9867:5;9856:40;9852:45;9923:4;9917:11;9910:18;;9609:335;;;:::o;4119:223:10:-;4252:12;4283:52;4305:6;4313:4;4319:1;4322:12;4283:21;:52::i;:::-;4276:59;;4119:223;;;;;:::o;5176:446::-;5341:12;5398:5;5373:21;:30;;5365:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5457:12;5471:23;5498:6;:11;;5517:5;5524:4;5498:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5456:73;;;;5546:69;5573:6;5581:7;5590:10;5602:12;5546:26;:69::i;:::-;5539:76;;;;5176:446;;;;;;:::o;7682:628::-;7862:12;7890:7;7886:418;;;7938:1;7917:10;:17;:22;7913:286;;8132:18;8143:6;8132:10;:18::i;:::-;8124:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7913:286;8219:10;8212:17;;;;7886:418;8260:33;8268:10;8280:12;8260:7;:33::i;:::-;7682:628;;;;;;;:::o;8832:540::-;9011:1;8991:10;:17;:21;8987:379;;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;8987:379;9342:12;9335:20;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:21:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:60::-;1204:3;1225:5;1218:12;;1176:60;;;:::o;1242:142::-;1292:9;1325:53;1343:34;1352:24;1370:5;1352:24;:::i;:::-;1343:34;:::i;:::-;1325:53;:::i;:::-;1312:66;;1242:142;;;:::o;1390:126::-;1440:9;1473:37;1504:5;1473:37;:::i;:::-;1460:50;;1390:126;;;:::o;1522:145::-;1591:9;1624:37;1655:5;1624:37;:::i;:::-;1611:50;;1522:145;;;:::o;1673:169::-;1779:56;1829:5;1779:56;:::i;:::-;1774:3;1767:69;1673:169;;:::o;1848:260::-;1960:4;1998:2;1987:9;1983:18;1975:26;;2011:90;2098:1;2087:9;2083:17;2074:6;2011:90;:::i;:::-;1848:260;;;;:::o;2114:77::-;2151:7;2180:5;2169:16;;2114:77;;;:::o;2197:118::-;2284:24;2302:5;2284:24;:::i;:::-;2279:3;2272:37;2197:118;;:::o;2321:222::-;2414:4;2452:2;2441:9;2437:18;2429:26;;2465:71;2533:1;2522:9;2518:17;2509:6;2465:71;:::i;:::-;2321:222;;;;:::o;2549:122::-;2622:24;2640:5;2622:24;:::i;:::-;2615:5;2612:35;2602:63;;2661:1;2658;2651:12;2602:63;2549:122;:::o;2677:139::-;2723:5;2761:6;2748:20;2739:29;;2777:33;2804:5;2777:33;:::i;:::-;2677:139;;;;:::o;2822:329::-;2881:6;2930:2;2918:9;2909:7;2905:23;2901:32;2898:119;;;2936:79;;:::i;:::-;2898:119;3056:1;3081:53;3126:7;3117:6;3106:9;3102:22;3081:53;:::i;:::-;3071:63;;3027:117;2822:329;;;;:::o;3157:90::-;3191:7;3234:5;3227:13;3220:21;3209:32;;3157:90;;;:::o;3253:116::-;3323:21;3338:5;3323:21;:::i;:::-;3316:5;3313:32;3303:60;;3359:1;3356;3349:12;3303:60;3253:116;:::o;3375:133::-;3418:5;3456:6;3443:20;3434:29;;3472:30;3496:5;3472:30;:::i;:::-;3375:133;;;;:::o;3514:468::-;3579:6;3587;3636:2;3624:9;3615:7;3611:23;3607:32;3604:119;;;3642:79;;:::i;:::-;3604:119;3762:1;3787:53;3832:7;3823:6;3812:9;3808:22;3787:53;:::i;:::-;3777:63;;3733:117;3889:2;3915:50;3957:7;3948:6;3937:9;3933:22;3915:50;:::i;:::-;3905:60;;3860:115;3514:468;;;;;:::o;3988:117::-;4097:1;4094;4087:12;4152:238;4231:5;4272:3;4263:6;4258:3;4254:16;4250:26;4247:113;;;4279:79;;:::i;:::-;4247:113;4378:6;4369:15;;4152:238;;;;:::o;4441:242::-;4524:5;4565:3;4556:6;4551:3;4547:16;4543:26;4540:113;;;4572:79;;:::i;:::-;4540:113;4671:6;4662:15;;4441:242;;;;:::o;4689:921::-;4836:6;4844;4852;4901:3;4889:9;4880:7;4876:23;4872:33;4869:120;;;4908:79;;:::i;:::-;4869:120;5056:1;5045:9;5041:17;5028:31;5086:18;5078:6;5075:30;5072:117;;;5108:79;;:::i;:::-;5072:117;5213:86;5291:7;5282:6;5271:9;5267:22;5213:86;:::i;:::-;5203:96;;4999:310;5348:2;5374:90;5456:7;5447:6;5436:9;5432:22;5374:90;:::i;:::-;5364:100;;5319:155;5513:3;5540:53;5585:7;5576:6;5565:9;5561:22;5540:53;:::i;:::-;5530:63;;5484:119;4689:921;;;;;:::o;5616:109::-;5697:21;5712:5;5697:21;:::i;:::-;5692:3;5685:34;5616:109;;:::o;5731:210::-;5818:4;5856:2;5845:9;5841:18;5833:26;;5869:65;5931:1;5920:9;5916:17;5907:6;5869:65;:::i;:::-;5731:210;;;;:::o;5947:89::-;5983:7;6023:6;6016:5;6012:18;6001:29;;5947:89;;;:::o;6042:120::-;6114:23;6131:5;6114:23;:::i;:::-;6107:5;6104:34;6094:62;;6152:1;6149;6142:12;6094:62;6042:120;:::o;6168:137::-;6213:5;6251:6;6238:20;6229:29;;6267:32;6293:5;6267:32;:::i;:::-;6168:137;;;;:::o;6311:1201::-;6423:6;6431;6439;6447;6455;6463;6471;6520:3;6508:9;6499:7;6495:23;6491:33;6488:120;;;6527:79;;:::i;:::-;6488:120;6647:1;6672:53;6717:7;6708:6;6697:9;6693:22;6672:53;:::i;:::-;6662:63;;6618:117;6774:2;6800:53;6845:7;6836:6;6825:9;6821:22;6800:53;:::i;:::-;6790:63;;6745:118;6902:2;6928:53;6973:7;6964:6;6953:9;6949:22;6928:53;:::i;:::-;6918:63;;6873:118;7030:2;7056:53;7101:7;7092:6;7081:9;7077:22;7056:53;:::i;:::-;7046:63;;7001:118;7158:3;7185:53;7230:7;7221:6;7210:9;7206:22;7185:53;:::i;:::-;7175:63;;7129:119;7287:3;7314:53;7359:7;7350:6;7339:9;7335:22;7314:53;:::i;:::-;7304:63;;7258:119;7416:3;7443:52;7487:7;7478:6;7467:9;7463:22;7443:52;:::i;:::-;7433:62;;7387:118;6311:1201;;;;;;;;;;:::o;7518:104::-;7563:7;7592:24;7610:5;7592:24;:::i;:::-;7581:35;;7518:104;;;:::o;7628:130::-;7691:7;7720:32;7746:5;7720:32;:::i;:::-;7709:43;;7628:130;;;:::o;7764:174::-;7863:50;7907:5;7863:50;:::i;:::-;7856:5;7853:61;7843:89;;7928:1;7925;7918:12;7843:89;7764:174;:::o;7944:191::-;8016:5;8054:6;8041:20;8032:29;;8070:59;8123:5;8070:59;:::i;:::-;7944:191;;;;:::o;8141:381::-;8226:6;8275:2;8263:9;8254:7;8250:23;8246:32;8243:119;;;8281:79;;:::i;:::-;8243:119;8401:1;8426:79;8497:7;8488:6;8477:9;8473:22;8426:79;:::i;:::-;8416:89;;8372:143;8141:381;;;;:::o;8528:118::-;8615:24;8633:5;8615:24;:::i;:::-;8610:3;8603:37;8528:118;;:::o;8652:109::-;8688:7;8728:26;8721:5;8717:38;8706:49;;8652:109;;;:::o;8767:115::-;8852:23;8869:5;8852:23;:::i;:::-;8847:3;8840:36;8767:115;;:::o;8888:328::-;9007:4;9045:2;9034:9;9030:18;9022:26;;9058:71;9126:1;9115:9;9111:17;9102:6;9058:71;:::i;:::-;9139:70;9205:2;9194:9;9190:18;9181:6;9139:70;:::i;:::-;8888:328;;;;;:::o;9222:144::-;9290:9;9323:37;9354:5;9323:37;:::i;:::-;9310:50;;9222:144;;;:::o;9372:167::-;9477:55;9526:5;9477:55;:::i;:::-;9472:3;9465:68;9372:167;;:::o;9545:258::-;9656:4;9694:2;9683:9;9679:18;9671:26;;9707:89;9793:1;9782:9;9778:17;9769:6;9707:89;:::i;:::-;9545:258;;;;:::o;9809:222::-;9902:4;9940:2;9929:9;9925:18;9917:26;;9953:71;10021:1;10010:9;10006:17;9997:6;9953:71;:::i;:::-;9809:222;;;;:::o;10037:474::-;10105:6;10113;10162:2;10150:9;10141:7;10137:23;10133:32;10130:119;;;10168:79;;:::i;:::-;10130:119;10288:1;10313:53;10358:7;10349:6;10338:9;10334:22;10313:53;:::i;:::-;10303:63;;10259:117;10415:2;10441:53;10486:7;10477:6;10466:9;10462:22;10441:53;:::i;:::-;10431:63;;10386:118;10037:474;;;;;:::o;10517:180::-;10565:77;10562:1;10555:88;10662:4;10659:1;10652:15;10686:4;10683:1;10676:15;10703:122;10793:1;10786:5;10783:12;10773:46;;10799:18;;:::i;:::-;10773:46;10703:122;:::o;10831:145::-;10885:7;10914:5;10903:16;;10920:50;10964:5;10920:50;:::i;:::-;10831:145;;;:::o;10982:::-;11047:9;11080:41;11115:5;11080:41;:::i;:::-;11067:54;;10982:145;;;:::o;11133:161::-;11235:52;11281:5;11235:52;:::i;:::-;11230:3;11223:65;11133:161;;:::o;11300:252::-;11408:4;11446:2;11435:9;11431:18;11423:26;;11459:86;11542:1;11531:9;11527:17;11518:6;11459:86;:::i;:::-;11300:252;;;;:::o;11558:134::-;11616:9;11649:37;11680:5;11649:37;:::i;:::-;11636:50;;11558:134;;;:::o;11698:168::-;11782:9;11815:45;11854:5;11815:45;:::i;:::-;11802:58;;11698:168;;;:::o;11872:199::-;11993:71;12058:5;11993:71;:::i;:::-;11988:3;11981:84;11872:199;;:::o;12077:290::-;12204:4;12242:2;12231:9;12227:18;12219:26;;12255:105;12357:1;12346:9;12342:17;12333:6;12255:105;:::i;:::-;12077:290;;;;:::o;12373:115::-;12458:23;12475:5;12458:23;:::i;:::-;12453:3;12446:36;12373:115;;:::o;12494:218::-;12585:4;12623:2;12612:9;12608:18;12600:26;;12636:69;12702:1;12691:9;12687:17;12678:6;12636:69;:::i;:::-;12494:218;;;;:::o;12718:151::-;12793:9;12826:37;12857:5;12826:37;:::i;:::-;12813:50;;12718:151;;;:::o;12875:181::-;12987:62;13043:5;12987:62;:::i;:::-;12982:3;12975:75;12875:181;;:::o;13062:272::-;13180:4;13218:2;13207:9;13203:18;13195:26;;13231:96;13324:1;13313:9;13309:17;13300:6;13231:96;:::i;:::-;13062:272;;;;:::o;13340:152::-;13416:9;13449:37;13480:5;13449:37;:::i;:::-;13436:50;;13340:152;;;:::o;13498:183::-;13611:63;13668:5;13611:63;:::i;:::-;13606:3;13599:76;13498:183;;:::o;13687:274::-;13806:4;13844:2;13833:9;13829:18;13821:26;;13857:97;13951:1;13940:9;13936:17;13927:6;13857:97;:::i;:::-;13687:274;;;;:::o;13967:142::-;14033:9;14066:37;14097:5;14066:37;:::i;:::-;14053:50;;13967:142;;;:::o;14115:163::-;14218:53;14265:5;14218:53;:::i;:::-;14213:3;14206:66;14115:163;;:::o;14284:254::-;14393:4;14431:2;14420:9;14416:18;14408:26;;14444:87;14528:1;14517:9;14513:17;14504:6;14444:87;:::i;:::-;14284:254;;;;:::o;14544:155::-;14623:9;14656:37;14687:5;14656:37;:::i;:::-;14643:50;;14544:155;;;:::o;14705:189::-;14821:66;14881:5;14821:66;:::i;:::-;14816:3;14809:79;14705:189;;:::o;14900:280::-;15022:4;15060:2;15049:9;15045:18;15037:26;;15073:100;15170:1;15159:9;15155:17;15146:6;15073:100;:::i;:::-;14900:280;;;;:::o;15186:169::-;15270:11;15304:6;15299:3;15292:19;15344:4;15339:3;15335:14;15320:29;;15186:169;;;;:::o;15361:182::-;15501:34;15497:1;15489:6;15485:14;15478:58;15361:182;:::o;15549:366::-;15691:3;15712:67;15776:2;15771:3;15712:67;:::i;:::-;15705:74;;15788:93;15877:3;15788:93;:::i;:::-;15906:2;15901:3;15897:12;15890:19;;15549:366;;;:::o;15921:419::-;16087:4;16125:2;16114:9;16110:18;16102:26;;16174:9;16168:4;16164:20;16160:1;16149:9;16145:17;16138:47;16202:131;16328:4;16202:131;:::i;:::-;16194:139;;15921:419;;;:::o;16346:223::-;16486:34;16482:1;16474:6;16470:14;16463:58;16555:6;16550:2;16542:6;16538:15;16531:31;16346:223;:::o;16575:366::-;16717:3;16738:67;16802:2;16797:3;16738:67;:::i;:::-;16731:74;;16814:93;16903:3;16814:93;:::i;:::-;16932:2;16927:3;16923:12;16916:19;;16575:366;;;:::o;16947:419::-;17113:4;17151:2;17140:9;17136:18;17128:26;;17200:9;17194:4;17190:20;17186:1;17175:9;17171:17;17164:47;17228:131;17354:4;17228:131;:::i;:::-;17220:139;;16947:419;;;:::o;17372:143::-;17429:5;17460:6;17454:13;17445:22;;17476:33;17503:5;17476:33;:::i;:::-;17372:143;;;;:::o;17521:351::-;17591:6;17640:2;17628:9;17619:7;17615:23;17611:32;17608:119;;;17646:79;;:::i;:::-;17608:119;17766:1;17791:64;17847:7;17838:6;17827:9;17823:22;17791:64;:::i;:::-;17781:74;;17737:128;17521:351;;;;:::o;17878:169::-;18018:21;18014:1;18006:6;18002:14;17995:45;17878:169;:::o;18053:366::-;18195:3;18216:67;18280:2;18275:3;18216:67;:::i;:::-;18209:74;;18292:93;18381:3;18292:93;:::i;:::-;18410:2;18405:3;18401:12;18394:19;;18053:366;;;:::o;18425:419::-;18591:4;18629:2;18618:9;18614:18;18606:26;;18678:9;18672:4;18668:20;18664:1;18653:9;18649:17;18642:47;18706:131;18832:4;18706:131;:::i;:::-;18698:139;;18425:419;;;:::o;18850:332::-;18971:4;19009:2;18998:9;18994:18;18986:26;;19022:71;19090:1;19079:9;19075:17;19066:6;19022:71;:::i;:::-;19103:72;19171:2;19160:9;19156:18;19147:6;19103:72;:::i;:::-;18850:332;;;;;:::o;19188:140::-;19237:9;19270:52;19288:33;19297:23;19314:5;19297:23;:::i;:::-;19288:33;:::i;:::-;19270:52;:::i;:::-;19257:65;;19188:140;;;:::o;19334:129::-;19420:36;19450:5;19420:36;:::i;:::-;19415:3;19408:49;19334:129;;:::o;19469:330::-;19589:4;19627:2;19616:9;19612:18;19604:26;;19640:70;19707:1;19696:9;19692:17;19683:6;19640:70;:::i;:::-;19720:72;19788:2;19777:9;19773:18;19764:6;19720:72;:::i;:::-;19469:330;;;;;:::o;19805:180::-;19853:77;19850:1;19843:88;19950:4;19947:1;19940:15;19974:4;19971:1;19964:15;19991:194;20031:4;20051:20;20069:1;20051:20;:::i;:::-;20046:25;;20085:20;20103:1;20085:20;:::i;:::-;20080:25;;20129:1;20126;20122:9;20114:17;;20153:1;20147:4;20144:11;20141:37;;;20158:18;;:::i;:::-;20141:37;19991:194;;;;:::o;20191:191::-;20231:3;20250:20;20268:1;20250:20;:::i;:::-;20245:25;;20284:20;20302:1;20284:20;:::i;:::-;20279:25;;20327:1;20324;20320:9;20313:16;;20348:3;20345:1;20342:10;20339:36;;;20355:18;;:::i;:::-;20339:36;20191:191;;;;:::o;20388:332::-;20509:4;20547:2;20536:9;20532:18;20524:26;;20560:71;20628:1;20617:9;20613:17;20604:6;20560:71;:::i;:::-;20641:72;20709:2;20698:9;20694:18;20685:6;20641:72;:::i;:::-;20388:332;;;;;:::o;20726:182::-;20866:34;20862:1;20854:6;20850:14;20843:58;20726:182;:::o;20914:366::-;21056:3;21077:67;21141:2;21136:3;21077:67;:::i;:::-;21070:74;;21153:93;21242:3;21153:93;:::i;:::-;21271:2;21266:3;21262:12;21255:19;;20914:366;;;:::o;21286:419::-;21452:4;21490:2;21479:9;21475:18;21467:26;;21539:9;21533:4;21529:20;21525:1;21514:9;21510:17;21503:47;21567:131;21693:4;21567:131;:::i;:::-;21559:139;;21286:419;;;:::o;21711:117::-;21820:1;21817;21810:12;21834:102;21875:6;21926:2;21922:7;21917:2;21910:5;21906:14;21902:28;21892:38;;21834:102;;;:::o;21942:180::-;21990:77;21987:1;21980:88;22087:4;22084:1;22077:15;22111:4;22108:1;22101:15;22128:281;22211:27;22233:4;22211:27;:::i;:::-;22203:6;22199:40;22341:6;22329:10;22326:22;22305:18;22293:10;22290:34;22287:62;22284:88;;;22352:18;;:::i;:::-;22284:88;22392:10;22388:2;22381:22;22171:238;22128:281;;:::o;22415:129::-;22449:6;22476:20;;:::i;:::-;22466:30;;22505:33;22533:4;22525:6;22505:33;:::i;:::-;22415:129;;;:::o;22550:117::-;22659:1;22656;22649:12;22673:149;22709:7;22749:66;22742:5;22738:78;22727:89;;22673:149;;;:::o;22828:120::-;22900:23;22917:5;22900:23;:::i;:::-;22893:5;22890:34;22880:62;;22938:1;22935;22928:12;22880:62;22828:120;:::o;22954:137::-;22999:5;23037:6;23024:20;23015:29;;23053:32;23079:5;23053:32;:::i;:::-;22954:137;;;;:::o;23097:117::-;23206:1;23203;23196:12;23220:117;23329:1;23326;23319:12;23343:307;23404:4;23494:18;23486:6;23483:30;23480:56;;;23516:18;;:::i;:::-;23480:56;23554:29;23576:6;23554:29;:::i;:::-;23546:37;;23638:4;23632;23628:15;23620:23;;23343:307;;;:::o;23656:146::-;23753:6;23748:3;23743;23730:30;23794:1;23785:6;23780:3;23776:16;23769:27;23656:146;;;:::o;23808:423::-;23885:5;23910:65;23926:48;23967:6;23926:48;:::i;:::-;23910:65;:::i;:::-;23901:74;;23998:6;23991:5;23984:21;24036:4;24029:5;24025:16;24074:3;24065:6;24060:3;24056:16;24053:25;24050:112;;;24081:79;;:::i;:::-;24050:112;24171:54;24218:6;24213:3;24208;24171:54;:::i;:::-;23891:340;23808:423;;;;;:::o;24250:338::-;24305:5;24354:3;24347:4;24339:6;24335:17;24331:27;24321:122;;24362:79;;:::i;:::-;24321:122;24479:6;24466:20;24504:78;24578:3;24570:6;24563:4;24555:6;24551:17;24504:78;:::i;:::-;24495:87;;24311:277;24250:338;;;;:::o;24635:1260::-;24715:5;24759:4;24747:9;24742:3;24738:19;24734:30;24731:117;;;24767:79;;:::i;:::-;24731:117;24866:21;24882:4;24866:21;:::i;:::-;24857:30;;24949:1;24989:48;25033:3;25024:6;25013:9;25009:22;24989:48;:::i;:::-;24982:4;24975:5;24971:16;24964:74;24897:152;25143:2;25132:9;25128:18;25115:32;25174:18;25166:6;25163:30;25160:117;;;25196:79;;:::i;:::-;25160:117;25316:58;25370:3;25361:6;25350:9;25346:22;25316:58;:::i;:::-;25309:4;25302:5;25298:16;25291:84;25059:327;25481:2;25470:9;25466:18;25453:32;25512:18;25504:6;25501:30;25498:117;;;25534:79;;:::i;:::-;25498:117;25654:58;25708:3;25699:6;25688:9;25684:22;25654:58;:::i;:::-;25647:4;25640:5;25636:16;25629:84;25396:328;25787:2;25828:48;25872:3;25863:6;25852:9;25848:22;25828:48;:::i;:::-;25821:4;25814:5;25810:16;25803:74;25734:154;24635:1260;;;;:::o;25901:229::-;26015:9;26049:74;26108:14;26101:5;26049:74;:::i;:::-;26036:87;;25901:229;;;:::o;26136:93::-;26172:7;26212:10;26205:5;26201:22;26190:33;;26136:93;;;:::o;26235:120::-;26307:23;26324:5;26307:23;:::i;:::-;26300:5;26297:34;26287:62;;26345:1;26342;26335:12;26287:62;26235:120;:::o;26361:137::-;26406:5;26444:6;26431:20;26422:29;;26460:32;26486:5;26460:32;:::i;:::-;26361:137;;;;:::o;26504:149::-;26540:7;26580:66;26573:5;26569:78;26558:89;;26504:149;;;:::o;26659:120::-;26731:23;26748:5;26731:23;:::i;:::-;26724:5;26721:34;26711:62;;26769:1;26766;26759:12;26711:62;26659:120;:::o;26785:137::-;26830:5;26868:6;26855:20;26846:29;;26884:32;26910:5;26884:32;:::i;:::-;26785:137;;;;:::o;26928:150::-;26965:7;27005:66;26998:5;26994:78;26983:89;;26928:150;;;:::o;27084:122::-;27157:24;27175:5;27157:24;:::i;:::-;27150:5;27147:35;27137:63;;27196:1;27193;27186:12;27137:63;27084:122;:::o;27212:139::-;27258:5;27296:6;27283:20;27274:29;;27312:33;27339:5;27312:33;:::i;:::-;27212:139;;;;:::o;27402:1286::-;27486:5;27530:4;27518:9;27513:3;27509:19;27505:30;27502:117;;;27538:79;;:::i;:::-;27502:117;27637:21;27653:4;27637:21;:::i;:::-;27628:30;;27731:1;27771:48;27815:3;27806:6;27795:9;27791:22;27771:48;:::i;:::-;27764:4;27757:5;27753:16;27746:74;27668:163;27900:2;27941:48;27985:3;27976:6;27965:9;27961:22;27941:48;:::i;:::-;27934:4;27927:5;27923:16;27916:74;27841:160;28072:2;28113:49;28158:3;28149:6;28138:9;28134:22;28113:49;:::i;:::-;28106:4;28099:5;28095:16;28088:75;28011:163;28245:2;28286:49;28331:3;28322:6;28311:9;28307:22;28286:49;:::i;:::-;28279:4;28272:5;28268:16;28261:75;28184:163;28416:3;28458:48;28502:3;28493:6;28482:9;28478:22;28458:48;:::i;:::-;28451:4;28444:5;28440:16;28433:74;28357:161;28578:3;28620:49;28665:3;28656:6;28645:9;28641:22;28620:49;:::i;:::-;28613:4;28606:5;28602:16;28595:75;28528:153;27402:1286;;;;:::o;28694:400::-;28788:6;28837:3;28825:9;28816:7;28812:23;28808:33;28805:120;;;28844:79;;:::i;:::-;28805:120;28964:1;28989:88;29069:7;29060:6;29049:9;29045:22;28989:88;:::i;:::-;28979:98;;28935:152;28694:400;;;;:::o;29100:233::-;29240:34;29236:1;29228:6;29224:14;29217:58;29309:16;29304:2;29296:6;29292:15;29285:41;29100:233;:::o;29339:366::-;29481:3;29502:67;29566:2;29561:3;29502:67;:::i;:::-;29495:74;;29578:93;29667:3;29578:93;:::i;:::-;29696:2;29691:3;29687:12;29680:19;;29339:366;;;:::o;29711:419::-;29877:4;29915:2;29904:9;29900:18;29892:26;;29964:9;29958:4;29954:20;29950:1;29939:9;29935:17;29928:47;29992:131;30118:4;29992:131;:::i;:::-;29984:139;;29711:419;;;:::o;30136:181::-;30276:33;30272:1;30264:6;30260:14;30253:57;30136:181;:::o;30323:366::-;30465:3;30486:67;30550:2;30545:3;30486:67;:::i;:::-;30479:74;;30562:93;30651:3;30562:93;:::i;:::-;30680:2;30675:3;30671:12;30664:19;;30323:366;;;:::o;30695:419::-;30861:4;30899:2;30888:9;30884:18;30876:26;;30948:9;30942:4;30938:20;30934:1;30923:9;30919:17;30912:47;30976:131;31102:4;30976:131;:::i;:::-;30968:139;;30695:419;;;:::o;31120:225::-;31260:34;31256:1;31248:6;31244:14;31237:58;31329:8;31324:2;31316:6;31312:15;31305:33;31120:225;:::o;31351:366::-;31493:3;31514:67;31578:2;31573:3;31514:67;:::i;:::-;31507:74;;31590:93;31679:3;31590:93;:::i;:::-;31708:2;31703:3;31699:12;31692:19;;31351:366;;;:::o;31723:419::-;31889:4;31927:2;31916:9;31912:18;31904:26;;31976:9;31970:4;31966:20;31962:1;31951:9;31947:17;31940:47;32004:131;32130:4;32004:131;:::i;:::-;31996:139;;31723:419;;;:::o;32148:229::-;32288:34;32284:1;32276:6;32272:14;32265:58;32357:12;32352:2;32344:6;32340:15;32333:37;32148:229;:::o;32383:366::-;32525:3;32546:67;32610:2;32605:3;32546:67;:::i;:::-;32539:74;;32622:93;32711:3;32622:93;:::i;:::-;32740:2;32735:3;32731:12;32724:19;;32383:366;;;:::o;32755:419::-;32921:4;32959:2;32948:9;32944:18;32936:26;;33008:9;33002:4;32998:20;32994:1;32983:9;32979:17;32972:47;33036:131;33162:4;33036:131;:::i;:::-;33028:139;;32755:419;;;:::o;33180:227::-;33320:34;33316:1;33308:6;33304:14;33297:58;33389:10;33384:2;33376:6;33372:15;33365:35;33180:227;:::o;33413:366::-;33555:3;33576:67;33640:2;33635:3;33576:67;:::i;:::-;33569:74;;33652:93;33741:3;33652:93;:::i;:::-;33770:2;33765:3;33761:12;33754:19;;33413:366;;;:::o;33785:419::-;33951:4;33989:2;33978:9;33974:18;33966:26;;34038:9;34032:4;34028:20;34024:1;34013:9;34009:17;34002:47;34066:131;34192:4;34066:131;:::i;:::-;34058:139;;33785:419;;;:::o;34210:143::-;34267:5;34298:6;34292:13;34283:22;;34314:33;34341:5;34314:33;:::i;:::-;34210:143;;;;:::o;34359:351::-;34429:6;34478:2;34466:9;34457:7;34453:23;34449:32;34446:119;;;34484:79;;:::i;:::-;34446:119;34604:1;34629:64;34685:7;34676:6;34665:9;34661:22;34629:64;:::i;:::-;34619:74;;34575:128;34359:351;;;;:::o;34716:85::-;34761:7;34790:5;34779:16;;34716:85;;;:::o;34807:86::-;34842:7;34882:4;34875:5;34871:16;34860:27;;34807:86;;;:::o;34899:154::-;34955:9;34988:59;35004:42;35013:32;35039:5;35013:32;:::i;:::-;35004:42;:::i;:::-;34988:59;:::i;:::-;34975:72;;34899:154;;;:::o;35059:143::-;35152:43;35189:5;35152:43;:::i;:::-;35147:3;35140:56;35059:143;;:::o;35208:234::-;35307:4;35345:2;35334:9;35330:18;35322:26;;35358:77;35432:1;35421:9;35417:17;35408:6;35358:77;:::i;:::-;35208:234;;;;:::o;35448:173::-;35588:25;35584:1;35576:6;35572:14;35565:49;35448:173;:::o;35627:366::-;35769:3;35790:67;35854:2;35849:3;35790:67;:::i;:::-;35783:74;;35866:93;35955:3;35866:93;:::i;:::-;35984:2;35979:3;35975:12;35968:19;;35627:366;;;:::o;35999:419::-;36165:4;36203:2;36192:9;36188:18;36180:26;;36252:9;36246:4;36242:20;36238:1;36227:9;36223:17;36216:47;36280:131;36406:4;36280:131;:::i;:::-;36272:139;;35999:419;;;:::o;36424:225::-;36564:34;36560:1;36552:6;36548:14;36541:58;36633:8;36628:2;36620:6;36616:15;36609:33;36424:225;:::o;36655:366::-;36797:3;36818:67;36882:2;36877:3;36818:67;:::i;:::-;36811:74;;36894:93;36983:3;36894:93;:::i;:::-;37012:2;37007:3;37003:12;36996:19;;36655:366;;;:::o;37027:419::-;37193:4;37231:2;37220:9;37216:18;37208:26;;37280:9;37274:4;37270:20;37266:1;37255:9;37251:17;37244:47;37308:131;37434:4;37308:131;:::i;:::-;37300:139;;37027:419;;;:::o;37452:182::-;37592:34;37588:1;37580:6;37576:14;37569:58;37452:182;:::o;37640:366::-;37782:3;37803:67;37867:2;37862:3;37803:67;:::i;:::-;37796:74;;37879:93;37968:3;37879:93;:::i;:::-;37997:2;37992:3;37988:12;37981:19;;37640:366;;;:::o;38012:419::-;38178:4;38216:2;38205:9;38201:18;38193:26;;38265:9;38259:4;38255:20;38251:1;38240:9;38236:17;38229:47;38293:131;38419:4;38293:131;:::i;:::-;38285:139;;38012:419;;;:::o;38437:85::-;38482:7;38511:5;38500:16;;38437:85;;;:::o;38528:158::-;38586:9;38619:61;38637:42;38646:32;38672:5;38646:32;:::i;:::-;38637:42;:::i;:::-;38619:61;:::i;:::-;38606:74;;38528:158;;;:::o;38692:147::-;38787:45;38826:5;38787:45;:::i;:::-;38782:3;38775:58;38692:147;;:::o;38845:454::-;39000:4;39038:2;39027:9;39023:18;39015:26;;39051:69;39117:1;39106:9;39102:17;39093:6;39051:69;:::i;:::-;39130:80;39206:2;39195:9;39191:18;39182:6;39130:80;:::i;:::-;39220:72;39288:2;39277:9;39273:18;39264:6;39220:72;:::i;:::-;38845:454;;;;;;:::o;39305:507::-;39384:6;39392;39441:2;39429:9;39420:7;39416:23;39412:32;39409:119;;;39447:79;;:::i;:::-;39409:119;39567:1;39592:64;39648:7;39639:6;39628:9;39624:22;39592:64;:::i;:::-;39582:74;;39538:128;39705:2;39731:64;39787:7;39778:6;39767:9;39763:22;39731:64;:::i;:::-;39721:74;;39676:129;39305:507;;;;;:::o;39818:101::-;39854:7;39894:18;39887:5;39883:30;39872:41;;39818:101;;;:::o;39925:120::-;39997:23;40014:5;39997:23;:::i;:::-;39990:5;39987:34;39977:62;;40035:1;40032;40025:12;39977:62;39925:120;:::o;40051:141::-;40107:5;40138:6;40132:13;40123:22;;40154:32;40180:5;40154:32;:::i;:::-;40051:141;;;;:::o;40198:::-;40254:5;40285:6;40279:13;40270:22;;40301:32;40327:5;40301:32;:::i;:::-;40198:141;;;;:::o;40345:77::-;40382:7;40411:5;40400:16;;40345:77;;;:::o;40428:122::-;40501:24;40519:5;40501:24;:::i;:::-;40494:5;40491:35;40481:63;;40540:1;40537;40530:12;40481:63;40428:122;:::o;40556:143::-;40613:5;40644:6;40638:13;40629:22;;40660:33;40687:5;40660:33;:::i;:::-;40556:143;;;;:::o;40747:1502::-;40839:5;40883:4;40871:9;40866:3;40862:19;40858:30;40855:117;;;40891:79;;:::i;:::-;40855:117;40990:21;41006:4;40990:21;:::i;:::-;40981:30;;41075:1;41115:60;41171:3;41162:6;41151:9;41147:22;41115:60;:::i;:::-;41108:4;41101:5;41097:16;41090:86;41021:166;41248:2;41289:59;41344:3;41335:6;41324:9;41320:22;41289:59;:::i;:::-;41282:4;41275:5;41271:16;41264:85;41197:163;41425:2;41466:59;41521:3;41512:6;41501:9;41497:22;41466:59;:::i;:::-;41459:4;41452:5;41448:16;41441:85;41370:167;41597:2;41638:60;41694:3;41685:6;41674:9;41670:22;41638:60;:::i;:::-;41631:4;41624:5;41620:16;41613:86;41547:163;41776:3;41818:59;41873:3;41864:6;41853:9;41849:22;41818:59;:::i;:::-;41811:4;41804:5;41800:16;41793:85;41720:169;41951:3;41993:59;42048:3;42039:6;42028:9;42024:22;41993:59;:::i;:::-;41986:4;41979:5;41975:16;41968:85;41899:165;42128:3;42170:60;42226:3;42217:6;42206:9;42202:22;42170:60;:::i;:::-;42163:4;42156:5;42152:16;42145:86;42074:168;40747:1502;;;;:::o;42255:416::-;42357:6;42406:3;42394:9;42385:7;42381:23;42377:33;42374:120;;;42413:79;;:::i;:::-;42374:120;42533:1;42558:96;42646:7;42637:6;42626:9;42622:22;42558:96;:::i;:::-;42548:106;;42504:160;42255:416;;;;:::o;42677:173::-;42817:25;42813:1;42805:6;42801:14;42794:49;42677:173;:::o;42856:366::-;42998:3;43019:67;43083:2;43078:3;43019:67;:::i;:::-;43012:74;;43095:93;43184:3;43095:93;:::i;:::-;43213:2;43208:3;43204:12;43197:19;;42856:366;;;:::o;43228:419::-;43394:4;43432:2;43421:9;43417:18;43409:26;;43481:9;43475:4;43471:20;43467:1;43456:9;43452:17;43445:47;43509:131;43635:4;43509:131;:::i;:::-;43501:139;;43228:419;;;:::o;43653:503::-;43730:6;43738;43787:2;43775:9;43766:7;43762:23;43758:32;43755:119;;;43793:79;;:::i;:::-;43755:119;43913:1;43938:63;43993:7;43984:6;43973:9;43969:22;43938:63;:::i;:::-;43928:73;;43884:127;44050:2;44076:63;44131:7;44122:6;44111:9;44107:22;44076:63;:::i;:::-;44066:73;;44021:128;43653:503;;;;;:::o;44162:222::-;44302:34;44298:1;44290:6;44286:14;44279:58;44371:5;44366:2;44358:6;44354:15;44347:30;44162:222;:::o;44390:366::-;44532:3;44553:67;44617:2;44612:3;44553:67;:::i;:::-;44546:74;;44629:93;44718:3;44629:93;:::i;:::-;44747:2;44742:3;44738:12;44731:19;;44390:366;;;:::o;44762:419::-;44928:4;44966:2;44955:9;44951:18;44943:26;;45015:9;45009:4;45005:20;45001:1;44990:9;44986:17;44979:47;45043:131;45169:4;45043:131;:::i;:::-;45035:139;;44762:419;;;:::o;45187:410::-;45227:7;45250:20;45268:1;45250:20;:::i;:::-;45245:25;;45284:20;45302:1;45284:20;:::i;:::-;45279:25;;45339:1;45336;45332:9;45361:30;45379:11;45361:30;:::i;:::-;45350:41;;45540:1;45531:7;45527:15;45524:1;45521:22;45501:1;45494:9;45474:83;45451:139;;45570:18;;:::i;:::-;45451:139;45235:362;45187:410;;;;:::o;45603:174::-;45743:26;45739:1;45731:6;45727:14;45720:50;45603:174;:::o;45783:366::-;45925:3;45946:67;46010:2;46005:3;45946:67;:::i;:::-;45939:74;;46022:93;46111:3;46022:93;:::i;:::-;46140:2;46135:3;46131:12;46124:19;;45783:366;;;:::o;46155:419::-;46321:4;46359:2;46348:9;46344:18;46336:26;;46408:9;46402:4;46398:20;46394:1;46383:9;46379:17;46372:47;46436:131;46562:4;46436:131;:::i;:::-;46428:139;;46155:419;;;:::o;46580:226::-;46720:34;46716:1;46708:6;46704:14;46697:58;46789:9;46784:2;46776:6;46772:15;46765:34;46580:226;:::o;46812:366::-;46954:3;46975:67;47039:2;47034:3;46975:67;:::i;:::-;46968:74;;47051:93;47140:3;47051:93;:::i;:::-;47169:2;47164:3;47160:12;47153:19;;46812:366;;;:::o;47184:419::-;47350:4;47388:2;47377:9;47373:18;47365:26;;47437:9;47431:4;47427:20;47423:1;47412:9;47408:17;47401:47;47465:131;47591:4;47465:131;:::i;:::-;47457:139;;47184:419;;;:::o;47609:118::-;47696:24;47714:5;47696:24;:::i;:::-;47691:3;47684:37;47609:118;;:::o;47733:222::-;47826:4;47864:2;47853:9;47849:18;47841:26;;47877:71;47945:1;47934:9;47930:17;47921:6;47877:71;:::i;:::-;47733:222;;;;:::o;47961:156::-;48018:9;48051:60;48068:42;48077:32;48103:5;48077:32;:::i;:::-;48068:42;:::i;:::-;48051:60;:::i;:::-;48038:73;;47961:156;;;:::o;48123:145::-;48217:44;48255:5;48217:44;:::i;:::-;48212:3;48205:57;48123:145;;:::o;48274:98::-;48325:6;48359:5;48353:12;48343:22;;48274:98;;;:::o;48378:168::-;48461:11;48495:6;48490:3;48483:19;48535:4;48530:3;48526:14;48511:29;;48378:168;;;;:::o;48552:246::-;48633:1;48643:113;48657:6;48654:1;48651:13;48643:113;;;48742:1;48737:3;48733:11;48727:18;48723:1;48718:3;48714:11;48707:39;48679:2;48676:1;48672:10;48667:15;;48643:113;;;48790:1;48781:6;48776:3;48772:16;48765:27;48614:184;48552:246;;;:::o;48804:373::-;48890:3;48918:38;48950:5;48918:38;:::i;:::-;48972:70;49035:6;49030:3;48972:70;:::i;:::-;48965:77;;49051:65;49109:6;49104:3;49097:4;49090:5;49086:16;49051:65;:::i;:::-;49141:29;49163:6;49141:29;:::i;:::-;49136:3;49132:39;49125:46;;48894:283;48804:373;;;;:::o;49183:872::-;49439:4;49477:3;49466:9;49462:19;49454:27;;49491:71;49559:1;49548:9;49544:17;49535:6;49491:71;:::i;:::-;49572:72;49640:2;49629:9;49625:18;49616:6;49572:72;:::i;:::-;49654:70;49720:2;49709:9;49705:18;49696:6;49654:70;:::i;:::-;49734:72;49802:2;49791:9;49787:18;49778:6;49734:72;:::i;:::-;49816:80;49891:3;49880:9;49876:19;49867:6;49816:80;:::i;:::-;49944:9;49938:4;49934:20;49928:3;49917:9;49913:19;49906:49;49972:76;50043:4;50034:6;49972:76;:::i;:::-;49964:84;;49183:872;;;;;;;;;:::o;50061:349::-;50130:6;50179:2;50167:9;50158:7;50154:23;50150:32;50147:119;;;50185:79;;:::i;:::-;50147:119;50305:1;50330:63;50385:7;50376:6;50365:9;50361:22;50330:63;:::i;:::-;50320:73;;50276:127;50061:349;;;;:::o;50416:141::-;50472:5;50503:6;50497:13;50488:22;;50519:32;50545:5;50519:32;:::i;:::-;50416:141;;;;:::o;50563:349::-;50632:6;50681:2;50669:9;50660:7;50656:23;50652:32;50649:119;;;50687:79;;:::i;:::-;50649:119;50807:1;50832:63;50887:7;50878:6;50867:9;50863:22;50832:63;:::i;:::-;50822:73;;50778:127;50563:349;;;;:::o;50918:180::-;50966:77;50963:1;50956:88;51063:4;51060:1;51053:15;51087:4;51084:1;51077:15;51104:138;51195:6;51229:5;51223:12;51213:22;;51104:138;;;:::o;51248:208::-;51371:11;51405:6;51400:3;51393:19;51445:4;51440:3;51436:14;51421:29;;51248:208;;;;:::o;51462:156::-;51553:4;51576:3;51568:11;;51606:4;51601:3;51597:14;51589:22;;51462:156;;;:::o;51624:105::-;51699:23;51716:5;51699:23;:::i;:::-;51694:3;51687:36;51624:105;;:::o;51735:108::-;51812:24;51830:5;51812:24;:::i;:::-;51807:3;51800:37;51735:108;;:::o;51849:105::-;51924:23;51941:5;51924:23;:::i;:::-;51919:3;51912:36;51849:105;;:::o;52026:682::-;52161:4;52156:3;52152:14;52251:4;52244:5;52240:16;52234:23;52270:61;52325:4;52320:3;52316:14;52302:12;52270:61;:::i;:::-;52176:165;52433:4;52426:5;52422:16;52416:23;52452:63;52509:4;52504:3;52500:14;52486:12;52452:63;:::i;:::-;52351:174;52611:4;52604:5;52600:16;52594:23;52630:61;52685:4;52680:3;52676:14;52662:12;52630:61;:::i;:::-;52535:166;52130:578;52026:682;;:::o;52714:275::-;52831:10;52852:94;52942:3;52934:6;52852:94;:::i;:::-;52978:4;52973:3;52969:14;52955:28;;52714:275;;;;:::o;52995:137::-;53089:4;53121;53116:3;53112:14;53104:22;;52995:137;;;:::o;53208:924::-;53375:3;53404:78;53476:5;53404:78;:::i;:::-;53498:110;53601:6;53596:3;53498:110;:::i;:::-;53491:117;;53632:80;53706:5;53632:80;:::i;:::-;53735:7;53766:1;53751:356;53776:6;53773:1;53770:13;53751:356;;;53852:6;53846:13;53879:111;53986:3;53971:13;53879:111;:::i;:::-;53872:118;;54013:84;54090:6;54013:84;:::i;:::-;54003:94;;53811:296;53798:1;53795;53791:9;53786:14;;53751:356;;;53755:14;54123:3;54116:10;;53380:752;;;53208:924;;;;:::o;54138:1339::-;54547:4;54585:3;54574:9;54570:19;54562:27;;54599:69;54665:1;54654:9;54650:17;54641:6;54599:69;:::i;:::-;54678:72;54746:2;54735:9;54731:18;54722:6;54678:72;:::i;:::-;54797:9;54791:4;54787:20;54782:2;54771:9;54767:18;54760:48;54825:76;54896:4;54887:6;54825:76;:::i;:::-;54817:84;;54911:80;54987:2;54976:9;54972:18;54963:6;54911:80;:::i;:::-;55001:73;55069:3;55058:9;55054:19;55045:6;55001:73;:::i;:::-;55122:9;55116:4;55112:20;55106:3;55095:9;55091:19;55084:49;55150:156;55301:4;55292:6;55150:156;:::i;:::-;55142:164;;55316:71;55382:3;55371:9;55367:19;55358:6;55316:71;:::i;:::-;55397:73;55465:3;55454:9;55450:19;55441:6;55397:73;:::i;:::-;54138:1339;;;;;;;;;;;:::o;55483:180::-;55531:77;55528:1;55521:88;55628:4;55625:1;55618:15;55652:4;55649:1;55642:15;55669:185;55709:1;55726:20;55744:1;55726:20;:::i;:::-;55721:25;;55760:20;55778:1;55760:20;:::i;:::-;55755:25;;55799:1;55789:35;;55804:18;;:::i;:::-;55789:35;55846:1;55843;55839:9;55834:14;;55669:185;;;;:::o;55860:172::-;56000:24;55996:1;55988:6;55984:14;55977:48;55860:172;:::o;56038:366::-;56180:3;56201:67;56265:2;56260:3;56201:67;:::i;:::-;56194:74;;56277:93;56366:3;56277:93;:::i;:::-;56395:2;56390:3;56386:12;56379:19;;56038:366;;;:::o;56410:419::-;56576:4;56614:2;56603:9;56599:18;56591:26;;56663:9;56657:4;56653:20;56649:1;56638:9;56634:17;56627:47;56691:131;56817:4;56691:131;:::i;:::-;56683:139;;56410:419;;;:::o;56835:105::-;56910:23;56927:5;56910:23;:::i;:::-;56905:3;56898:36;56835:105;;:::o;56946:158::-;57019:11;57053:6;57048:3;57041:19;57093:4;57088:3;57084:14;57069:29;;56946:158;;;;:::o;57110:353::-;57186:3;57214:38;57246:5;57214:38;:::i;:::-;57268:60;57321:6;57316:3;57268:60;:::i;:::-;57261:67;;57337:65;57395:6;57390:3;57383:4;57376:5;57372:16;57337:65;:::i;:::-;57427:29;57449:6;57427:29;:::i;:::-;57422:3;57418:39;57411:46;;57190:273;57110:353;;;;:::o;57547:1051::-;57678:3;57714:4;57709:3;57705:14;57804:4;57797:5;57793:16;57787:23;57823:61;57878:4;57873:3;57869:14;57855:12;57823:61;:::i;:::-;57729:165;57983:4;57976:5;57972:16;57966:23;58036:3;58030:4;58026:14;58019:4;58014:3;58010:14;58003:38;58062:71;58128:4;58114:12;58062:71;:::i;:::-;58054:79;;57904:240;58234:4;58227:5;58223:16;58217:23;58287:3;58281:4;58277:14;58270:4;58265:3;58261:14;58254:38;58313:71;58379:4;58365:12;58313:71;:::i;:::-;58305:79;;58154:241;58481:4;58474:5;58470:16;58464:23;58500:61;58555:4;58550:3;58546:14;58532:12;58500:61;:::i;:::-;58405:166;58588:4;58581:11;;57683:915;57547:1051;;;;:::o;58604:105::-;58679:23;58696:5;58679:23;:::i;:::-;58674:3;58667:36;58604:105;;:::o;58715:::-;58790:23;58807:5;58790:23;:::i;:::-;58785:3;58778:36;58715:105;;:::o;58826:108::-;58903:24;58921:5;58903:24;:::i;:::-;58898:3;58891:37;58826:108;;:::o;58940:::-;59017:24;59035:5;59017:24;:::i;:::-;59012:3;59005:37;58940:108;;:::o;59140:1276::-;59307:4;59302:3;59298:14;59408:4;59401:5;59397:16;59391:23;59427:61;59482:4;59477:3;59473:14;59459:12;59427:61;:::i;:::-;59322:176;59590:4;59583:5;59579:16;59573:23;59609:61;59664:4;59659:3;59655:14;59641:12;59609:61;:::i;:::-;59508:172;59774:4;59767:5;59763:16;59757:23;59793:63;59850:4;59845:3;59841:14;59827:12;59793:63;:::i;:::-;59690:176;59960:4;59953:5;59949:16;59943:23;59979:63;60036:4;60031:3;60027:14;60013:12;59979:63;:::i;:::-;59876:176;60144:4;60137:5;60133:16;60127:23;60163:61;60218:4;60213:3;60209:14;60195:12;60163:61;:::i;:::-;60062:172;60317:4;60310:5;60306:16;60300:23;60336:63;60393:4;60388:3;60384:14;60370:12;60336:63;:::i;:::-;60244:165;59276:1140;59140:1276;;:::o;60422:759::-;60703:4;60741:3;60730:9;60726:19;60718:27;;60791:9;60785:4;60781:20;60777:1;60766:9;60762:17;60755:47;60819:120;60934:4;60925:6;60819:120;:::i;:::-;60811:128;;60949:142;61087:2;61076:9;61072:18;61063:6;60949:142;:::i;:::-;61101:73;61169:3;61158:9;61154:19;61145:6;61101:73;:::i;:::-;60422:759;;;;;;:::o;61187:228::-;61327:34;61323:1;61315:6;61311:14;61304:58;61396:11;61391:2;61383:6;61379:15;61372:36;61187:228;:::o;61421:366::-;61563:3;61584:67;61648:2;61643:3;61584:67;:::i;:::-;61577:74;;61660:93;61749:3;61660:93;:::i;:::-;61778:2;61773:3;61769:12;61762:19;;61421:366;;;:::o;61793:419::-;61959:4;61997:2;61986:9;61982:18;61974:26;;62046:9;62040:4;62036:20;62032:1;62021:9;62017:17;62010:47;62074:131;62200:4;62074:131;:::i;:::-;62066:139;;61793:419;;;:::o;62218:179::-;62358:31;62354:1;62346:6;62342:14;62335:55;62218:179;:::o;62403:366::-;62545:3;62566:67;62630:2;62625:3;62566:67;:::i;:::-;62559:74;;62642:93;62731:3;62642:93;:::i;:::-;62760:2;62755:3;62751:12;62744:19;;62403:366;;;:::o;62775:419::-;62941:4;62979:2;62968:9;62964:18;62956:26;;63028:9;63022:4;63018:20;63014:1;63003:9;62999:17;62992:47;63056:131;63182:4;63056:131;:::i;:::-;63048:139;;62775:419;;;:::o;63200:182::-;63340:34;63336:1;63328:6;63324:14;63317:58;63200:182;:::o;63388:366::-;63530:3;63551:67;63615:2;63610:3;63551:67;:::i;:::-;63544:74;;63627:93;63716:3;63627:93;:::i;:::-;63745:2;63740:3;63736:12;63729:19;;63388:366;;;:::o;63760:419::-;63926:4;63964:2;63953:9;63949:18;63941:26;;64013:9;64007:4;64003:20;63999:1;63988:9;63984:17;63977:47;64041:131;64167:4;64041:131;:::i;:::-;64033:139;;63760:419;;;:::o;64185:230::-;64325:34;64321:1;64313:6;64309:14;64302:58;64394:13;64389:2;64381:6;64377:15;64370:38;64185:230;:::o;64421:366::-;64563:3;64584:67;64648:2;64643:3;64584:67;:::i;:::-;64577:74;;64660:93;64749:3;64660:93;:::i;:::-;64778:2;64773:3;64769:12;64762:19;;64421:366;;;:::o;64793:419::-;64959:4;64997:2;64986:9;64982:18;64974:26;;65046:9;65040:4;65036:20;65032:1;65021:9;65017:17;65010:47;65074:131;65200:4;65074:131;:::i;:::-;65066:139;;64793:419;;;:::o;65218:208::-;65257:4;65277:19;65294:1;65277:19;:::i;:::-;65272:24;;65310:19;65327:1;65310:19;:::i;:::-;65305:24;;65353:1;65350;65346:9;65338:17;;65377:18;65371:4;65368:28;65365:54;;;65399:18;;:::i;:::-;65365:54;65218:208;;;;:::o;65432:349::-;65501:6;65550:2;65538:9;65529:7;65525:23;65521:32;65518:119;;;65556:79;;:::i;:::-;65518:119;65676:1;65701:63;65756:7;65747:6;65736:9;65732:22;65701:63;:::i;:::-;65691:73;;65647:127;65432:349;;;;:::o;65787:812::-;65880:6;65888;65896;65904;65953:3;65941:9;65932:7;65928:23;65924:33;65921:120;;;65960:79;;:::i;:::-;65921:120;66080:1;66105:63;66160:7;66151:6;66140:9;66136:22;66105:63;:::i;:::-;66095:73;;66051:127;66217:2;66243:63;66298:7;66289:6;66278:9;66274:22;66243:63;:::i;:::-;66233:73;;66188:128;66355:2;66381:63;66436:7;66427:6;66416:9;66412:22;66381:63;:::i;:::-;66371:73;;66326:128;66493:2;66519:63;66574:7;66565:6;66554:9;66550:22;66519:63;:::i;:::-;66509:73;;66464:128;65787:812;;;;;;;:::o;66605:332::-;66726:4;66764:2;66753:9;66749:18;66741:26;;66777:71;66845:1;66834:9;66830:17;66821:6;66777:71;:::i;:::-;66858:72;66926:2;66915:9;66911:18;66902:6;66858:72;:::i;:::-;66605:332;;;;;:::o;66943:::-;67064:4;67102:2;67091:9;67087:18;67079:26;;67115:71;67183:1;67172:9;67168:17;67159:6;67115:71;:::i;:::-;67196:72;67264:2;67253:9;67249:18;67240:6;67196:72;:::i;:::-;66943:332;;;;;:::o;67281:78::-;67319:7;67348:5;67337:16;;67281:78;;;:::o;67365:153::-;67468:43;67487:23;67504:5;67487:23;:::i;:::-;67468:43;:::i;:::-;67463:3;67456:56;67365:153;;:::o;67524:147::-;67625:11;67662:3;67647:18;;67524:147;;;;:::o;67677:386::-;67781:3;67809:38;67841:5;67809:38;:::i;:::-;67863:88;67944:6;67939:3;67863:88;:::i;:::-;67856:95;;67960:65;68018:6;68013:3;68006:4;67999:5;67995:16;67960:65;:::i;:::-;68050:6;68045:3;68041:16;68034:23;;67785:278;67677:386;;;;:::o;68069:699::-;68297:3;68312:73;68381:3;68372:6;68312:73;:::i;:::-;68410:1;68405:3;68401:11;68394:18;;68429:93;68518:3;68509:6;68429:93;:::i;:::-;68422:100;;68539:93;68628:3;68619:6;68539:93;:::i;:::-;68532:100;;68642:73;68711:3;68702:6;68642:73;:::i;:::-;68740:1;68735:3;68731:11;68724:18;;68759:3;68752:10;;68069:699;;;;;;;:::o;68774:79::-;68813:7;68842:5;68831:16;;68774:79;;;:::o;68859:157::-;68964:45;68984:24;69002:5;68984:24;:::i;:::-;68964:45;:::i;:::-;68959:3;68952:58;68859:157;;:::o;69022:96::-;69056:8;69105:5;69100:3;69096:15;69075:36;;69022:96;;;:::o;69124:94::-;69162:7;69191:21;69206:5;69191:21;:::i;:::-;69180:32;;69124:94;;;:::o;69224:153::-;69327:43;69346:23;69363:5;69346:23;:::i;:::-;69327:43;:::i;:::-;69322:3;69315:56;69224:153;;:::o;69383:392::-;69521:3;69536:75;69607:3;69598:6;69536:75;:::i;:::-;69636:2;69631:3;69627:12;69620:19;;69649:73;69718:3;69709:6;69649:73;:::i;:::-;69747:1;69742:3;69738:11;69731:18;;69766:3;69759:10;;69383:392;;;;;:::o;69781:137::-;69835:5;69866:6;69860:13;69851:22;;69882:30;69906:5;69882:30;:::i;:::-;69781:137;;;;:::o;69924:345::-;69991:6;70040:2;70028:9;70019:7;70015:23;70011:32;70008:119;;;70046:79;;:::i;:::-;70008:119;70166:1;70191:61;70244:7;70235:6;70224:9;70220:22;70191:61;:::i;:::-;70181:71;;70137:125;69924:345;;;;:::o;70275:229::-;70415:34;70411:1;70403:6;70399:14;70392:58;70484:12;70479:2;70471:6;70467:15;70460:37;70275:229;:::o;70510:366::-;70652:3;70673:67;70737:2;70732:3;70673:67;:::i;:::-;70666:74;;70749:93;70838:3;70749:93;:::i;:::-;70867:2;70862:3;70858:12;70851:19;;70510:366;;;:::o;70882:419::-;71048:4;71086:2;71075:9;71071:18;71063:26;;71135:9;71129:4;71125:20;71121:1;71110:9;71106:17;71099:47;71163:131;71289:4;71163:131;:::i;:::-;71155:139;;70882:419;;;:::o;71307:225::-;71447:34;71443:1;71435:6;71431:14;71424:58;71516:8;71511:2;71503:6;71499:15;71492:33;71307:225;:::o;71538:366::-;71680:3;71701:67;71765:2;71760:3;71701:67;:::i;:::-;71694:74;;71777:93;71866:3;71777:93;:::i;:::-;71895:2;71890:3;71886:12;71879:19;;71538:366;;;:::o;71910:419::-;72076:4;72114:2;72103:9;72099:18;72091:26;;72163:9;72157:4;72153:20;72149:1;72138:9;72134:17;72127:47;72191:131;72317:4;72191:131;:::i;:::-;72183:139;;71910:419;;;:::o;72335:271::-;72465:3;72487:93;72576:3;72567:6;72487:93;:::i;:::-;72480:100;;72597:3;72590:10;;72335:271;;;;:::o;72612:179::-;72752:31;72748:1;72740:6;72736:14;72729:55;72612:179;:::o;72797:366::-;72939:3;72960:67;73024:2;73019:3;72960:67;:::i;:::-;72953:74;;73036:93;73125:3;73036:93;:::i;:::-;73154:2;73149:3;73145:12;73138:19;;72797:366;;;:::o;73169:419::-;73335:4;73373:2;73362:9;73358:18;73350:26;;73422:9;73416:4;73412:20;73408:1;73397:9;73393:17;73386:47;73450:131;73576:4;73450:131;:::i;:::-;73442:139;;73169:419;;;:::o;73594:99::-;73646:6;73680:5;73674:12;73664:22;;73594:99;;;:::o;73699:377::-;73787:3;73815:39;73848:5;73815:39;:::i;:::-;73870:71;73934:6;73929:3;73870:71;:::i;:::-;73863:78;;73950:65;74008:6;74003:3;73996:4;73989:5;73985:16;73950:65;:::i;:::-;74040:29;74062:6;74040:29;:::i;:::-;74035:3;74031:39;74024:46;;73791:285;73699:377;;;;:::o;74082:313::-;74195:4;74233:2;74222:9;74218:18;74210:26;;74282:9;74276:4;74272:20;74268:1;74257:9;74253:17;74246:47;74310:78;74383:4;74374:6;74310:78;:::i;:::-;74302:86;;74082:313;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4438600","executionCost":"infinite","totalCost":"infinite"},"external":{"SATOSHI_MULTIPLIER()":"374","attachL2BitcoinDepositor(address)":"29239","bridge()":"infinite","deposits(uint256)":"2974","finalizeDeposit(uint256)":"infinite","finalizeDepositGasOffset()":"2520","gasReimbursements(uint256)":"5214","initialize(address,address,address,address,address,address,uint16)":"infinite","initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":"infinite","initializeDepositGasOffset()":"2519","l2BitcoinDepositor()":"2581","l2ChainId()":"2610","l2FinalizeDepositGasLimit()":"2496","l2WormholeGateway()":"2581","owner()":"2612","quoteFinalizeDeposit()":"infinite","reimbursementAuthorizations(address)":"2935","reimbursementPool()":"infinite","renounceOwnership()":"30443","tbtcToken()":"infinite","tbtcVault()":"infinite","transferOwnership(address)":"30854","updateGasOffsetParameters(uint256,uint256)":"infinite","updateL2FinalizeDepositGasLimit(uint256)":"infinite","updateReimbursementAuthorization(address,bool)":"infinite","updateReimbursementPool(address)":"infinite","wormhole()":"infinite","wormholeRelayer()":"infinite","wormholeTokenBridge()":"infinite"},"internal":{"_quoteFinalizeDeposit(uint256)":"infinite","_refundToGasSpent(uint256)":"infinite","_transferTbtc(uint256,bytes32)":"infinite"}},"methodIdentifiers":{"SATOSHI_MULTIPLIER()":"c7ba0347","attachL2BitcoinDepositor(address)":"0515f0c1","bridge()":"e78cea92","deposits(uint256)":"b02c43d0","finalizeDeposit(uint256)":"46d9d49a","finalizeDepositGasOffset()":"0fa1ba44","gasReimbursements(uint256)":"7c9e9ffb","initialize(address,address,address,address,address,address,uint16)":"71c654ee","initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":"642dc033","initializeDepositGasOffset()":"27ce36c6","l2BitcoinDepositor()":"c81ef168","l2ChainId()":"d6ae3cd5","l2FinalizeDepositGasLimit()":"71546831","l2WormholeGateway()":"aa82e33b","owner()":"8da5cb5b","quoteFinalizeDeposit()":"13b38cce","reimbursementAuthorizations(address)":"66b58a01","reimbursementPool()":"c09975cd","renounceOwnership()":"715018a6","tbtcToken()":"e5d3d714","tbtcVault()":"0f36403a","transferOwnership(address)":"f2fde38b","updateGasOffsetParameters(uint256,uint256)":"9e0e4e2f","updateL2FinalizeDepositGasLimit(uint256)":"1159bef0","updateReimbursementAuthorization(address,bool)":"60ec23dd","updateReimbursementPool(address)":"7b35b4e6","wormhole()":"84acd1bb","wormholeRelayer()":"da25b725","wormholeTokenBridge()":"f11df69d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2DepositOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tbtcAmount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2DepositOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Sender\",\"type\":\"address\"}],\"name\":\"DepositInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initializeDepositGasOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalizeDepositGasOffset\",\"type\":\"uint256\"}],\"name\":\"GasOffsetParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2FinalizeDepositGasLimit\",\"type\":\"uint256\"}],\"name\":\"L2FinalizeDepositGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"ReimbursementAuthorizationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReimbursementPool\",\"type\":\"address\"}],\"name\":\"ReimbursementPoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SATOSHI_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2BitcoinDepositor\",\"type\":\"address\"}],\"name\":\"attachL2BitcoinDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"enum L1BitcoinDepositor.DepositState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"finalizeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeDepositGasOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gasReimbursements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"gasSpent\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tbtcBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tbtcVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormhole\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormholeRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormholeTokenBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2WormholeGateway\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_l2ChainId\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"inputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"}],\"internalType\":\"struct IBridgeTypes.BitcoinTxInfo\",\"name\":\"fundingTx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes8\",\"name\":\"blindingFactor\",\"type\":\"bytes8\"},{\"internalType\":\"bytes20\",\"name\":\"walletPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"refundPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes4\",\"name\":\"refundLocktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct IBridgeTypes.DepositRevealInfo\",\"name\":\"reveal\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"l2DepositOwner\",\"type\":\"address\"}],\"name\":\"initializeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDepositGasOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BitcoinDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2FinalizeDepositGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2WormholeGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteFinalizeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reimbursementAuthorizations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimbursementPool\",\"outputs\":[{\"internalType\":\"contract ReimbursementPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcVault\",\"outputs\":[{\"internalType\":\"contract ITBTCVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initializeDepositGasOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finalizeDepositGasOffset\",\"type\":\"uint256\"}],\"name\":\"updateGasOffsetParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2FinalizeDepositGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateL2FinalizeDepositGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorization\",\"type\":\"bool\"}],\"name\":\"updateReimbursementAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ReimbursementPool\",\"name\":\"_reimbursementPool\",\"type\":\"address\"}],\"name\":\"updateReimbursementPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeTokenBridge\",\"outputs\":[{\"internalType\":\"contract IWormholeTokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attachL2BitcoinDepositor(address)\":{\"details\":\"Requirements:      - Can be called only by the contract owner,      - The address must not be set yet,      - The new address must not be 0x0.\",\"params\":{\"_l2BitcoinDepositor\":\"Address of the `L2BitcoinDepositor` contract.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"finalizeDeposit(uint256)\":{\"details\":\"Requirements:      - `initializeDeposit` was called for the given deposit before,      - ERC20 L1 TBTC was minted by tBTC Bridge to this contract,      - The function was not called for the given deposit before,      - The call must carry a payment for the Wormhole Relayer that        is responsible for executing the deposit finalization on the        corresponding L2 chain. The payment must be equal to the        value returned by the `quoteFinalizeDeposit` function.\",\"params\":{\"depositKey\":\"The deposit key, as emitted in the `DepositInitialized`        event emitted by the `initializeDeposit` function for the deposit.\"}},\"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)\":{\"details\":\"Requirements:      - The L2 deposit owner address must not be 0x0,      - The function can be called only one time for the given Bitcoin        funding transaction,      - The L2 deposit owner must be embedded in the Bitcoin P2(W)SH        deposit script as the <depositor-extra-data> field. The 20-byte        address must be expressed as a 32-byte value left-padded with 0.        If the value in the Bitcoin script and the value passed as        parameter do not match, the function will revert,      - All the requirements of tBTC Bridge.revealDepositWithExtraData        must be met.\",\"params\":{\"fundingTx\":\"Bitcoin funding transaction data.\",\"l2DepositOwner\":\"Address of the L2 deposit owner.\",\"reveal\":\"Deposit reveal data.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteFinalizeDeposit()\":{\"returns\":{\"cost\":\"The cost of the `finalizeDeposit` function call in WEI.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGasOffsetParameters(uint256,uint256)\":{\"details\":\"Can be called only by the contract owner. The caller is responsible      for validating parameters.\",\"params\":{\"_finalizeDepositGasOffset\":\"New finalize deposit gas offset.\",\"_initializeDepositGasOffset\":\"New initialize deposit gas offset.\"}},\"updateL2FinalizeDepositGasLimit(uint256)\":{\"details\":\"Requirements:      - Can be called only by the contract owner.\",\"params\":{\"_l2FinalizeDepositGasLimit\":\"New gas limit.\"}},\"updateReimbursementAuthorization(address,bool)\":{\"details\":\"Requirements:      - Can be called only by the contract owner.\",\"params\":{\"_address\":\"Address to update the authorization for.\",\"authorization\":\"New authorization status.\"}}},\"title\":\"L1BitcoinDepositor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SATOSHI_MULTIPLIER()\":{\"notice\":\"Multiplier to convert satoshi to TBTC token units.\"},\"attachL2BitcoinDepositor(address)\":{\"notice\":\"Sets the address of the `L2BitcoinDepositor` contract on the         corresponding L2 chain. This function solves the chicken-and-egg         problem of setting the `L2BitcoinDepositor` contract address         on the `L1BitcoinDepositor` contract and vice versa.\"},\"bridge()\":{\"notice\":\"Bridge contract address.\"},\"deposits(uint256)\":{\"notice\":\"Holds the deposit state, keyed by the deposit key calculated for         the individual deposit during the call to `initializeDeposit`         function.\"},\"finalizeDeposit(uint256)\":{\"notice\":\"Finalizes the deposit process by transferring ERC20 L1 TBTC         to the L2 deposit owner. This function should be called after         the deposit was initialized with a call to `initializeDeposit`         function and after ERC20 L1 TBTC was minted by the tBTC Bridge         to the `L1BitcoinDepositor` contract. Please note several hours         may pass between `initializeDeposit`and `finalizeDeposit`.         If the reimbursement pool is attached, the function pays out         a gas and call's value refund to the caller (if the given         caller is authorized for refunds) as well as the deferred gas         refund to the caller of `initializeDeposit` corresponding to         the finalized deposit.\"},\"finalizeDepositGasOffset()\":{\"notice\":\"Gas that is meant to balance the overall cost of deposit finalization.         Can be updated by the owner based on the current market conditions.\"},\"gasReimbursements(uint256)\":{\"notice\":\"Holds deferred gas reimbursements for deposit initialization         (indexed by deposit key). Reimbursement for deposit         initialization is paid out upon deposit finalization. This is         because the tBTC Bridge accepts all (even invalid) deposits but         mints ERC20 TBTC only for the valid ones. Paying out the         reimbursement directly upon initialization would make the         reimbursement pool vulnerable to malicious actors that could         drain it by initializing invalid deposits.\"},\"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)\":{\"notice\":\"Initializes the deposit process on L1 by revealing the deposit         data (funding transaction and components of the P2(W)SH deposit         address) to the tBTC Bridge. Once tBTC minting is completed,         this call should be followed by a call to `finalizeDeposit`.         Callers of `initializeDeposit` are eligible for a gas refund         that is paid out upon deposit finalization (only if the         reimbursement pool is attached and the given caller is         authorized for refunds).         The Bitcoin funding transaction must transfer funds to a P2(W)SH         deposit address whose underlying script is built from the         following components:         <depositor-address> DROP         <depositor-extra-data> DROP         <blinding-factor> DROP         DUP HASH160 <signingGroupPubkeyHash> EQUAL         IF           CHECKSIG         ELSE           DUP HASH160 <refundPubkeyHash> EQUALVERIFY           <locktime> CHECKLOCKTIMEVERIFY DROP           CHECKSIG         ENDIF         Where:         <depositor-address> 20-byte L1 address of the         `L1BitcoinDepositor` contract.         <depositor-extra-data> L2 deposit owner address in the Wormhole         format, i.e. 32-byte value left-padded with 0.         <blinding-factor> 8-byte deposit blinding factor, as used in the         tBTC bridge.         <signingGroupPubkeyHash> The compressed Bitcoin public key (33         bytes and 02 or 03 prefix) of the deposit's wallet hashed in the         HASH160 Bitcoin opcode style. This must point to the active tBTC         bridge wallet.         <refundPubkeyHash> The compressed Bitcoin public key (33 bytes         and 02 or 03 prefix) that can be used to make the deposit refund         after the tBTC bridge refund locktime passed. Hashed in the         HASH160 Bitcoin opcode style. This is needed only as a security         measure protecting the user in case tBTC bridge completely stops         functioning.         <locktime> The Bitcoin script refund locktime (4-byte LE),         according to tBTC bridge rules.         Please consult tBTC `Bridge.revealDepositWithExtraData` function         documentation for more information.\"},\"initializeDepositGasOffset()\":{\"notice\":\"Gas that is meant to balance the overall cost of deposit initialization.         Can be updated by the owner based on the current market conditions.\"},\"l2BitcoinDepositor()\":{\"notice\":\"tBTC `L2BitcoinDepositor` contract on the corresponding L2 chain.\"},\"l2ChainId()\":{\"notice\":\"Wormhole chain ID of the corresponding L2 chain.\"},\"l2FinalizeDepositGasLimit()\":{\"notice\":\"Gas limit necessary to execute the L2 part of the deposit         finalization. This value is used to calculate the payment for         the Wormhole Relayer that is responsible to execute the         deposit finalization on the corresponding L2 chain. Can be         updated by the owner.\"},\"l2WormholeGateway()\":{\"notice\":\"tBTC `L2WormholeGateway` contract on the corresponding L2 chain.\"},\"quoteFinalizeDeposit()\":{\"notice\":\"Quotes the payment that must be attached to the `finalizeDeposit`         function call. The payment is necessary to cover the cost of         the Wormhole Relayer that is responsible for executing the         deposit finalization on the corresponding L2 chain.\"},\"reimbursementAuthorizations(address)\":{\"notice\":\"Set of addresses that are authorized to receive gas reimbursements         for deposit initialization and finalization. The authorization is         granted by the contract owner.\"},\"tbtcToken()\":{\"notice\":\"ERC20 L1 TBTC token contract.\"},\"tbtcVault()\":{\"notice\":\"TBTCVault contract address.\"},\"updateGasOffsetParameters(uint256,uint256)\":{\"notice\":\"Updates the values of gas offset parameters.\"},\"updateL2FinalizeDepositGasLimit(uint256)\":{\"notice\":\"Updates the gas limit necessary to execute the L2 part of the         deposit finalization.\"},\"updateReimbursementAuthorization(address,bool)\":{\"notice\":\"Updates the reimbursement authorization for the given address.\"},\"wormhole()\":{\"notice\":\"`Wormhole` core contract on L1.\"},\"wormholeRelayer()\":{\"notice\":\"`WormholeRelayer` contract on L1.\"},\"wormholeTokenBridge()\":{\"notice\":\"Wormhole `TokenBridge` contract on L1.\"}},\"notice\":\"This contract is part of the direct bridging mechanism allowing         users to obtain ERC20 TBTC on supported L2 chains, without the need         to interact with the L1 tBTC ledger chain where minting occurs.         `L1BitcoinDepositor` is deployed on the L1 chain and interacts with         their L2 counterpart, the `L2BitcoinDepositor`, deployed on the given         L2 chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor` pair is         responsible for a specific L2 chain.         The outline of the direct bridging mechanism is as follows:         1. An L2 user issues a Bitcoin funding transaction to a P2(W)SH            deposit address that embeds the `L1BitcoinDepositor` contract            and L2 user addresses. The `L1BitcoinDepositor` contract serves            as the actual depositor on the L1 chain while the L2 user            address is set as the deposit owner who will receive the            minted ERC20 TBTC.         2. The data about the Bitcoin funding transaction and deposit            address are passed to the relayer. In the first iteration of            the direct bridging mechanism, this is achieved using an            on-chain event emitted by the `L2BitcoinDepositor` contract.            Further iterations assumes those data are passed off-chain, e.g.            through a REST API exposed by the relayer.         3. The relayer uses the data to initialize a deposit on the L1            chain by calling the `initializeDeposit` function of the            `L1BitcoinDepositor` contract. The `initializeDeposit` function            reveals the deposit to the tBTC Bridge so minting of ERC20 L1 TBTC            can occur.         4. Once minting is complete, the `L1BitcoinDepositor` contract            receives minted ERC20 L1 TBTC. The relayer then calls the            `finalizeDeposit` function of the `L1BitcoinDepositor` contract            to transfer the minted ERC20 L1 TBTC to the L2 user address. This            is achieved using the Wormhole protocol. First, the `finalizeDeposit`            function initiates a Wormhole token transfer that locks the ERC20            L1 TBTC within the Wormhole Token Bridge contract and assigns            Wormhole-wrapped L2 TBTC to the corresponding `L2WormholeGateway`            contract. Then, `finalizeDeposit` notifies the `L2BitcoinDepositor`            contract by sending a Wormhole message containing the VAA            of the Wormhole token transfer. The `L2BitcoinDepositor` contract            receives the Wormhole message, and calls the `L2WormholeGateway`            contract that redeems Wormhole-wrapped L2 TBTC from the Wormhole            Token Bridge and uses it to mint canonical L2 TBTC to the L2 user            address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/L1BitcoinDepositor.sol\":\"L1BitcoinDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/** @title BitcoinSPV */\\n/** @author Summa (https://summa.one) */\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary BTCUtils {\\n    using BytesLib for bytes;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /* ***** */\\n    /* UTILS */\\n    /* ***** */\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _flag    The first byte of a VarInt\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\\n        return determineVarIntDataLengthAt(_flag, 0);\\n    }\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _b       The byte array containing a VarInt\\n    /// @param _at      The position of the VarInt in the array\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLengthAt(bytes memory _b, uint256 _at) internal pure returns (uint8) {\\n        if (uint8(_b[_at]) == 0xff) {\\n            return 8;  // one-byte flag, 8 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfe) {\\n            return 4;  // one-byte flag, 4 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfd) {\\n            return 2;  // one-byte flag, 2 bytes data\\n        }\\n\\n        return 0;  // flag is data\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string starting with a VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\\n        return parseVarIntAt(_b, 0);\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string containing a VarInt\\n    /// @param _at  The position of the VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarIntAt(bytes memory _b, uint256 _at) internal pure returns (uint256, uint256) {\\n        uint8 _dataLen = determineVarIntDataLengthAt(_b, _at);\\n\\n        if (_dataLen == 0) {\\n            return (0, uint8(_b[_at]));\\n        }\\n        if (_b.length < 1 + _dataLen + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n        uint256 _number;\\n        if (_dataLen == 2) {\\n            _number = reverseUint16(uint16(_b.slice2(1 + _at)));\\n        } else if (_dataLen == 4) {\\n            _number = reverseUint32(uint32(_b.slice4(1 + _at)));\\n        } else if (_dataLen == 8) {\\n            _number = reverseUint64(uint64(_b.slice8(1 + _at)));\\n        }\\n        return (_dataLen, _number);\\n    }\\n\\n    /// @notice          Changes the endianness of a byte array\\n    /// @dev             Returns a new, backwards, bytes\\n    /// @param _b        The bytes to reverse\\n    /// @return          The reversed bytes\\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\\n        bytes memory _newValue = new bytes(_b.length);\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _newValue[_b.length - i - 1] = _b[i];\\n        }\\n\\n        return _newValue;\\n    }\\n\\n    /// @notice          Changes the endianness of a uint256\\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint64\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint64(uint64 _b) internal pure returns (uint64 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint32\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint32(uint32 _b) internal pure returns (uint32 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF) |\\n            ((v & 0x00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint24\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint24(uint24 _b) internal pure returns (uint24 v) {\\n        v =  (_b << 16) | (_b & 0x00FF00) | (_b >> 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint16\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint16(uint16 _b) internal pure returns (uint16 v) {\\n        v =  (_b << 8) | (_b >> 8);\\n    }\\n\\n\\n    /// @notice          Converts big-endian bytes to a uint\\n    /// @dev             Traverses the byte array and sums the bytes\\n    /// @param _b        The big-endian bytes-encoded integer\\n    /// @return          The integer representation\\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\\n        uint256 _number;\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\\n        }\\n\\n        return _number;\\n    }\\n\\n    /// @notice          Get the last _num bytes from a byte array\\n    /// @param _b        The byte array to slice\\n    /// @param _num      The number of bytes to extract from the end\\n    /// @return          The last _num bytes of _b\\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\\n        uint256 _start = _b.length.sub(_num);\\n\\n        return _b.slice(_start, _num);\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (sha2 + ripemd160)\\n    /// @dev             sha2 precompile at address(2), ripemd160 at address(3)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash160View(bytes memory _b) internal view returns (bytes20 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 3, 0x00, 32, 0x00, 32))\\n            // read from position 12 = 0c\\n            res := mload(0x0c)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(sha256(_b)));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 on a pair of bytes32\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _a        The first bytes32 of the pre-image\\n    /// @param _b        The second bytes32 of the pre-image\\n    /// @return res      The digest\\n    function hash256Pair(bytes32 _a, bytes32 _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            mstore(0x00, _a)\\n            mstore(0x20, _b)\\n            pop(staticcall(gas(), 2, 0x00, 64, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The array containing the pre-image\\n    /// @param at        The start of the pre-image\\n    /// @param len       The length of the pre-image\\n    /// @return res      The digest\\n    function hash256Slice(\\n        bytes memory _b,\\n        uint256 at,\\n        uint256 len\\n    ) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, add(32, at)), len, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /* ************ */\\n    /* Legacy Input */\\n    /* ************ */\\n\\n    /// @notice          Extracts the nth input from the vin (0-indexed)\\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\\n    /// @param _vin      The vin as a tightly-packed byte array\\n    /// @param _index    The 0-indexed location of the input to extract\\n    /// @return          The input as a byte array\\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineInputLengthAt(_vin, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n            _offset = _offset + _len;\\n        }\\n\\n        _len = determineInputLengthAt(_vin, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _vin.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Determines whether an input is legacy\\n    /// @dev             False if no scriptSig, otherwise True\\n    /// @param _input    The input\\n    /// @return          True for legacy, False for witness\\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\\n        return _input[36] != hex\\\"00\\\";\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The LEGACY input\\n    /// @return          The length of the script sig\\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\\n        return extractScriptSigLenAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    ///                  starting at the specified position\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The byte array containing the LEGACY input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the script sig\\n    function extractScriptSigLenAt(bytes memory _input, uint256 _at) internal pure returns (uint256, uint256) {\\n        if (_input.length < 37 + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = parseVarIntAt(_input, _at + 36);\\n\\n        return (_varIntDataLen, _scriptSigLen);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The input\\n    /// @return          The length of the input in bytes\\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\\n        return determineInputLengthAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig,\\n    ///                  starting at the specified position\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the input in bytes\\n    function determineInputLengthAt(bytes memory _input, uint256 _at) internal pure returns (uint256) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLenAt(_input, _at);\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\\n    }\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes4) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice4(36 + 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLELegacy(_input));\\n        uint32 _beSequence = reverseUint32(_leSeqence);\\n        return _beSequence;\\n    }\\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\\n    /// @dev             Will return hex\\\"00\\\" if passed a witness input\\n    /// @param _input    The LEGACY input\\n    /// @return          The length-prepended scriptSig\\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n\\n    /* ************* */\\n    /* Witness Input */\\n    /* ************* */\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(37);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input in a tx\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLEWitness(_input));\\n        uint32 _inputeSequence = reverseUint32(_leSeqence);\\n        return _inputeSequence;\\n    }\\n\\n    /// @notice          Extracts the outpoint from the input in a tx\\n    /// @dev             32-byte tx id with 4-byte index\\n    /// @param _input    The input\\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\\n        return _input.slice(0, 36);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    /// @dev             32-byte tx id\\n    /// @param _input    The input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\\n        return _input.slice32(0);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    ///                  starting at the specified position\\n    /// @dev             32-byte tx id\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes32) {\\n        return _input.slice32(_at);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    /// @dev             4-byte tx index\\n    /// @param _input    The input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(32);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    ///                  starting at the specified position\\n    /// @dev             4-byte tx index\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes4) {\\n        return _input.slice4(32 + _at);\\n    }\\n\\n    /* ****** */\\n    /* Output */\\n    /* ****** */\\n\\n    /// @notice          Determines the length of an output\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\\n        return determineOutputLengthAt(_output, 0);\\n    }\\n\\n    /// @notice          Determines the length of an output\\n    ///                  starting at the specified position\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The position of the output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLengthAt(bytes memory _output, uint256 _at) internal pure returns (uint256) {\\n        if (_output.length < 9 + _at) {\\n            return ERR_BAD_ARG;\\n        }\\n        uint256 _varIntDataLen;\\n        uint256 _scriptPubkeyLength;\\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarIntAt(_output, 8 + _at);\\n\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        // 8-byte value, 1-byte for tag itself\\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\\n    }\\n\\n    /// @notice          Extracts the output at a given index in the TxOuts vector\\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\\n    /// @param _vout     The _vout to extract from\\n    /// @param _index    The 0-indexed location of the output to extract\\n    /// @return          The specified output\\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineOutputLengthAt(_vout, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n            _offset += _len;\\n        }\\n\\n        _len = determineOutputLengthAt(_vout, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n        return _vout.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Extracts the value bytes from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value as LE bytes\\n    function extractValueLE(bytes memory _output) internal pure returns (bytes8) {\\n        return _output.slice8(0);\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value\\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(extractValueLE(_output));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output in the array\\n    /// @return          The output value\\n    function extractValueAt(bytes memory _output, uint256 _at) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(_output.slice8(_at));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the data from an op return output\\n    /// @dev             Returns hex\\\"\\\" if no data or not an op return\\n    /// @param _output   The output\\n    /// @return          Any data contained in the opreturn output, null if not an op return\\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\\n        if (_output[9] != hex\\\"6a\\\") {\\n            return hex\\\"\\\";\\n        }\\n        bytes1 _dataLen = _output[10];\\n        return _output.slice(11, uint256(uint8(_dataLen)));\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The output\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\\n        return extractHashAt(_output, 8, _output.length - 8);\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output script in the array\\n    ///                  (output start + 8)\\n    /// @param _len      The length of the output script\\n    ///                  (output length - 8)\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHashAt(\\n        bytes memory _output,\\n        uint256 _at,\\n        uint256 _len\\n    ) internal pure returns (bytes memory) {\\n        uint8 _scriptLen = uint8(_output[_at]);\\n\\n        // don't have to worry about overflow here.\\n        // if _scriptLen + 1 overflows, then output length would have to be < 1\\n        // for this check to pass. if it's < 1, then we errored when assigning\\n        // _scriptLen\\n        if (_scriptLen + 1 != _len) {\\n            return hex\\\"\\\";\\n        }\\n\\n        if (uint8(_output[_at + 1]) == 0) {\\n            if (_scriptLen < 2) {\\n                return hex\\\"\\\";\\n            }\\n            uint256 _payloadLen = uint8(_output[_at + 2]);\\n            // Check for maliciously formatted witness outputs.\\n            // No need to worry about underflow as long b/c of the `< 2` check\\n            if (_payloadLen != _scriptLen - 2 || (_payloadLen != 0x20 && _payloadLen != 0x14)) {\\n                return hex\\\"\\\";\\n            }\\n            return _output.slice(_at + 3, _payloadLen);\\n        } else {\\n            bytes3 _tag = _output.slice3(_at);\\n            // p2pkh\\n            if (_tag == hex\\\"1976a9\\\") {\\n                // Check for maliciously formatted p2pkh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + 3]) != 0x14 ||\\n                    _output.slice2(_at + _len - 2) != hex\\\"88ac\\\") {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 4, 20);\\n            //p2sh\\n            } else if (_tag == hex\\\"17a914\\\") {\\n                // Check for maliciously formatted p2sh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + _len - 1]) != 0x87) {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 3, 20);\\n            }\\n        }\\n        return hex\\\"\\\";  /* NB: will trigger on OPRETURN and any non-standard that doesn't overrun */\\n    }\\n\\n    /* ********** */\\n    /* Witness TX */\\n    /* ********** */\\n\\n\\n    /// @notice      Checks that the vin passed up is properly formatted\\n    /// @dev         Consider a vin with a valid vout in its scriptsig\\n    /// @param _vin  Raw bytes length-prefixed input vector\\n    /// @return      True if it represents a validly formatted vin\\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n\\n        // Not valid if it says there are too many or no inputs\\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vin.length) {\\n                return false;\\n            }\\n\\n            // Grab the next input and determine its length.\\n            uint256 _nextLen = determineInputLengthAt(_vin, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            // Increase the offset by that much\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vin.length;\\n    }\\n\\n    /// @notice      Checks that the vout passed up is properly formatted\\n    /// @dev         Consider a vout with a valid scriptpubkey\\n    /// @param _vout Raw bytes length-prefixed output vector\\n    /// @return      True if it represents a validly formatted vout\\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n\\n        // Not valid if it says there are too many or no outputs\\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vout.length) {\\n                return false;\\n            }\\n\\n            // Grab the next output and determine its length.\\n            // Increase the offset by that much\\n            uint256 _nextLen = determineOutputLengthAt(_vout, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vout.length;\\n    }\\n\\n\\n\\n    /* ************ */\\n    /* Block Header */\\n    /* ************ */\\n\\n    /// @notice          Extracts the transaction merkle root from a block header\\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\\n    /// @param _header   The header\\n    /// @return          The merkle root (little-endian)\\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(36);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The header\\n    /// @return          The target threshold\\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\\n        return extractTargetAt(_header, 0);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The target threshold\\n    function extractTargetAt(bytes memory _header, uint256 at) internal pure returns (uint256) {\\n        uint24 _m = uint24(_header.slice3(72 + at));\\n        uint8 _e = uint8(_header[75 + at]);\\n        uint256 _mantissa = uint256(reverseUint24(_m));\\n        uint _exponent = _e - 3;\\n\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\\n    /// @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _target   The current target\\n    /// @return          The block difficulty (bdiff)\\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\\n        // Difficulty 1 calculated from 0x1d00ffff\\n        return DIFF1_TARGET.div(_target);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(4);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLEAt(\\n        bytes memory _header,\\n        uint256 at\\n    ) internal pure returns (bytes32) {\\n        return _header.slice32(4 + at);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (little-endian bytes)\\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes4) {\\n        return _header.slice4(68);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (uint)\\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\\n        return reverseUint32(uint32(extractTimestampLE(_header)));\\n    }\\n\\n    /// @notice          Extracts the expected difficulty from a block header\\n    /// @dev             Does NOT verify the work\\n    /// @param _header   The header\\n    /// @return          The difficulty as an integer\\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\\n        return calculateDifficulty(extractTarget(_header));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal view returns (bytes32) {\\n        return hash256View(abi.encodePacked(_a, _b));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32) {\\n        return hash256Pair(_a, _b);\\n    }\\n\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Inefficient version.\\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_proof.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Special case for coinbase-only blocks\\n        if (_proof.length == 32) {\\n            return true;\\n        }\\n\\n        // Should never occur\\n        if (_proof.length == 64) {\\n            return false;\\n        }\\n\\n        bytes32 _root = _proof.slice32(_proof.length - 32);\\n        bytes32 _current = _proof.slice32(0);\\n        bytes memory _tree = _proof.slice(32, _proof.length - 64);\\n\\n        return verifyHash256Merkle(_current, _tree, _root, _index);\\n    }\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Efficient version.\\n    /// @param _leaf     The leaf of the proof. LE sha256 hash.\\n    /// @param _tree     The intermediate nodes in the proof.\\n    ///                  Tightly packed LE sha256 hashes.\\n    /// @param _root     The root of the proof. LE sha256 hash.\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(\\n        bytes32 _leaf,\\n        bytes memory _tree,\\n        bytes32 _root,\\n        uint _index\\n    ) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_tree.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Should never occur\\n        if (_tree.length == 0) {\\n            return false;\\n        }\\n\\n        uint _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        // i moves in increments of 32\\n        for (uint i = 0; i < _tree.length; i += 32) {\\n            if (_idx % 2 == 1) {\\n                _current = _hash256MerkleStep(_tree.slice32(i), _current);\\n            } else {\\n                _current = _hash256MerkleStep(_current, _tree.slice32(i));\\n            }\\n            _idx = _idx >> 1;\\n        }\\n        return _current == _root;\\n    }\\n\\n    /*\\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\\n    NB: We get a full-bitlength target from this. For comparison with\\n        header-encoded targets we need to mask it with the header target\\n        e.g. (full & truncated) == truncated\\n    */\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\\n            _elapsedTime = RETARGET_PERIOD.div(4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\\n            _elapsedTime = RETARGET_PERIOD.mul(4);\\n        }\\n\\n        /*\\n          NB: high targets e.g. ffff0020 can cause overflows here\\n              so we divide it by 256**2, then multiply by 256**2 later\\n              we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n\\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\\n    }\\n}\\n\",\"keccak256\":\"0x439eaa97e9239705f3d31e8d39dccbad32311f1f119e295d53c65e0ae3c5a5fc\"},\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\n\\nhttps://github.com/GNSPS/solidity-bytes-utils/\\n\\nThis is free and unencumbered software released into the public domain.\\n\\nAnyone is free to copy, modify, publish, use, compile, sell, or\\ndistribute this software, either in source code form or as a compiled\\nbinary, for any purpose, commercial or non-commercial, and by any\\nmeans.\\n\\nIn jurisdictions that recognize copyright laws, the author or authors\\nof this software dedicate any and all copyright interest in the\\nsoftware to the public domain. We make this dedication for the benefit\\nof the public at large and to the detriment of our heirs and\\nsuccessors. We intend this dedication to be an overt act of\\nrelinquishment in perpetuity of all present and future rights to this\\nsoftware under copyright law.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\nOTHER DEALINGS IN THE SOFTWARE.\\n\\nFor more information, please refer to <https://unlicense.org>\\n*/\\n\\n\\n/** @title BytesLib **/\\n/** @author https://github.com/GNSPS **/\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                        ),\\n                        // and now shift left the number of bytes to\\n                        // leave space for the length in the slot\\n                        exp(0x100, sub(32, newlength))\\n                        ),\\n                        // increase length by the double of the memory\\n                        // bytes length\\n                        mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                    ),\\n                    and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\\n        if (_length == 0) {\\n            return hex\\\"\\\";\\n        }\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\\n            res := mload(0x40)\\n            mstore(0x40, add(add(res, 64), _length))\\n            mstore(res, _length)\\n\\n            // Compute distance between source and destination pointers\\n            let diff := sub(res, add(_bytes, _start))\\n\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n            } {\\n                mstore(add(src, diff), mload(src))\\n            }\\n        }\\n    }\\n\\n    /// @notice Take a slice of the byte array, overwriting the destination.\\n    /// The length of the slice will equal the length of the destination array.\\n    /// @dev Make sure the destination array has afterspace if required.\\n    /// @param _bytes The source array\\n    /// @param _dest The destination array.\\n    /// @param _start The location to start in the source array.\\n    function sliceInPlace(\\n        bytes memory _bytes,\\n        bytes memory _dest,\\n        uint _start\\n    ) internal pure {\\n        uint _length = _dest.length;\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let res := add(_dest, 32)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n                res := add(res, 32)\\n            } {\\n                mstore(res, mload(src))\\n            }\\n        }\\n    }\\n\\n    // Static slice functions, no bounds checking\\n    /// @notice take a 32-byte slice from the specified position\\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(_bytes, 32), _start))\\n        }\\n    }\\n\\n    /// @notice take a 20-byte slice from the specified position\\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\\n        return bytes20(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 8-byte slice from the specified position\\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\\n        return bytes8(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 4-byte slice from the specified position\\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\\n        return bytes4(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 3-byte slice from the specified position\\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\\n        return bytes3(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 2-byte slice from the specified position\\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\\n        return bytes2(slice32(_bytes, _start));\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        uint _totalLen = _start + 20;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Address conversion out of bounds.\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        uint _totalLen = _start + 32;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Uint conversion out of bounds.\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\\n        if (_source.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            result := keccak256(add(add(_bytes, 32), _start), _length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e0f3b3b23c861bd031588bf410dfdd02e2af17941a89aa38d70e534e0380d1\"},\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x35930d982394c7ffde439b82e5e696c5b21a6f09699d44861dfe409ef64084a3\"},\"@keep-network/random-beacon/contracts/Reimbursable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ReimbursementPool.sol\\\";\\n\\nabstract contract Reimbursable {\\n    // The variable should be initialized by the implementing contract.\\n    // slither-disable-next-line uninitialized-state\\n    ReimbursementPool public reimbursementPool;\\n\\n    // Reserved storage space in case we need to add more variables,\\n    // since there are upgradeable contracts that inherit from this one.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[49] private __gap;\\n\\n    event ReimbursementPoolUpdated(address newReimbursementPool);\\n\\n    modifier refundable(address receiver) {\\n        uint256 gasStart = gasleft();\\n        _;\\n        reimbursementPool.refund(gasStart - gasleft(), receiver);\\n    }\\n\\n    modifier onlyReimbursableAdmin() virtual {\\n        _;\\n    }\\n\\n    function updateReimbursementPool(ReimbursementPool _reimbursementPool)\\n        external\\n        onlyReimbursableAdmin\\n    {\\n        emit ReimbursementPoolUpdated(address(_reimbursementPool));\\n\\n        reimbursementPool = _reimbursementPool;\\n    }\\n}\\n\",\"keccak256\":\"0x6b01344c1ec13aaab1dc432d3afabe08d6dd0d1a9248be8b36a0747ac22e5d9f\",\"license\":\"GPL-3.0-only\"},\"@keep-network/random-beacon/contracts/ReimbursementPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ReimbursementPool is Ownable, ReentrancyGuard {\\n    /// @notice Authorized contracts that can interact with the reimbursment pool.\\n    ///         Authorization can be granted and removed by the owner.\\n    mapping(address => bool) public isAuthorized;\\n\\n    /// @notice Static gas includes:\\n    ///         - cost of the refund function\\n    ///         - base transaction cost\\n    uint256 public staticGas;\\n\\n    /// @notice Max gas price used to reimburse a transaction submitter. Protects\\n    ///         against malicious operator-miners.\\n    uint256 public maxGasPrice;\\n\\n    event StaticGasUpdated(uint256 newStaticGas);\\n\\n    event MaxGasPriceUpdated(uint256 newMaxGasPrice);\\n\\n    event SendingEtherFailed(uint256 refundAmount, address receiver);\\n\\n    event AuthorizedContract(address thirdPartyContract);\\n\\n    event UnauthorizedContract(address thirdPartyContract);\\n\\n    event FundsWithdrawn(uint256 withdrawnAmount, address receiver);\\n\\n    constructor(uint256 _staticGas, uint256 _maxGasPrice) {\\n        staticGas = _staticGas;\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    /// @notice Receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Refunds ETH to a spender for executing specific transactions.\\n    /// @dev Ignoring the result of sending ETH to a receiver is made on purpose.\\n    ///      For EOA receiving ETH should always work. If a receiver is a smart\\n    ///      contract, then we do not want to fail a transaction, because in some\\n    ///      cases the refund is done at the very end of multiple calls where all\\n    ///      the previous calls were already paid off. It is a receiver's smart\\n    ///      contract resposibility to make sure it can receive ETH.\\n    /// @dev Only authorized contracts are allowed calling this function.\\n    /// @param gasSpent Gas spent on a transaction that needs to be reimbursed.\\n    /// @param receiver Address where the reimbursment is sent.\\n    function refund(uint256 gasSpent, address receiver) external nonReentrant {\\n        require(\\n            isAuthorized[msg.sender],\\n            \\\"Contract is not authorized for a refund\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        uint256 gasPrice = tx.gasprice < maxGasPrice\\n            ? tx.gasprice\\n            : maxGasPrice;\\n\\n        uint256 refundAmount = (gasSpent + staticGas) * gasPrice;\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,unchecked-lowlevel\\n        (bool sent, ) = receiver.call{value: refundAmount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        if (!sent) {\\n            // slither-disable-next-line reentrancy-events\\n            emit SendingEtherFailed(refundAmount, receiver);\\n        }\\n    }\\n\\n    /// @notice Authorize a contract that can interact with this reimbursment pool.\\n    ///         Can be authorized by the owner only.\\n    /// @param _contract Authorized contract.\\n    function authorize(address _contract) external onlyOwner {\\n        isAuthorized[_contract] = true;\\n\\n        emit AuthorizedContract(_contract);\\n    }\\n\\n    /// @notice Unauthorize a contract that was previously authorized to interact\\n    ///         with this reimbursment pool. Can be unauthorized by the\\n    ///         owner only.\\n    /// @param _contract Authorized contract.\\n    function unauthorize(address _contract) external onlyOwner {\\n        delete isAuthorized[_contract];\\n\\n        emit UnauthorizedContract(_contract);\\n    }\\n\\n    /// @notice Setting a static gas cost for executing a transaction. Can be set\\n    ///         by the owner only.\\n    /// @param _staticGas Static gas cost.\\n    function setStaticGas(uint256 _staticGas) external onlyOwner {\\n        staticGas = _staticGas;\\n\\n        emit StaticGasUpdated(_staticGas);\\n    }\\n\\n    /// @notice Setting a max gas price for transactions. Can be set by the\\n    ///         owner only.\\n    /// @param _maxGasPrice Max gas price used to reimburse tx submitters.\\n    function setMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\\n        maxGasPrice = _maxGasPrice;\\n\\n        emit MaxGasPriceUpdated(_maxGasPrice);\\n    }\\n\\n    /// @notice Withdraws all ETH from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param receiver An address where ETH is sent.\\n    function withdrawAll(address receiver) external onlyOwner {\\n        withdraw(address(this).balance, receiver);\\n    }\\n\\n    /// @notice Withdraws ETH amount from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param amount Amount to withdraw from the pool.\\n    /// @param receiver An address where ETH is sent.\\n    function withdraw(uint256 amount, address receiver) public onlyOwner {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        emit FundsWithdrawn(amount, receiver);\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,arbitrary-send\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd6c24368cc4c6349b8b614e878ca961cad8254b8e8db1cc0abe452a70022ce50\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/integrator/AbstractTBTCDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\nimport {BTCUtils} from \\\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\\\";\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./ITBTCVault.sol\\\";\\n\\n/// @title Abstract AbstractTBTCDepositor contract.\\n/// @notice This abstract contract is meant to facilitate integration of protocols\\n///         aiming to use tBTC as an underlying Bitcoin bridge.\\n///\\n///         Such an integrator is supposed to:\\n///         - Create a child contract inheriting from this abstract contract\\n///         - Call the `__AbstractTBTCDepositor_initialize` initializer function\\n///         - Use the `_initializeDeposit` and `_finalizeDeposit` as part of their\\n///           business logic in order to initialize and finalize deposits.\\n///\\n/// @dev Example usage:\\n///      ```\\n///      // Example upgradeable integrator contract.\\n///      contract ExampleTBTCIntegrator is AbstractTBTCDepositor, Initializable {\\n///          /// @custom:oz-upgrades-unsafe-allow constructor\\n///          constructor() {\\n///              // Prevents the contract from being initialized again.\\n///              _disableInitializers();\\n///          }\\n///\\n///          function initialize(\\n///              address _bridge,\\n///              address _tbtcVault\\n///          ) external initializer {\\n///              __AbstractTBTCDepositor_initialize(_bridge, _tbtcVault);\\n///          }\\n///\\n///          function startProcess(\\n///              IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n///              IBridgeTypes.DepositRevealInfo calldata reveal\\n///          ) external {\\n///              // Embed necessary context as extra data.\\n///              bytes32 extraData = ...;\\n///\\n///              (uint256 depositKey, uint256 initialDepositAmount) = _initializeDeposit(\\n///                  fundingTx,\\n///                  reveal,\\n///                  extraData\\n///              );\\n///\\n///              // Use the depositKey to track the process.\\n///          }\\n///\\n///          function finalizeProcess(uint256 depositKey) external {\\n///              // Ensure the function cannot be called for the same deposit\\n///              // twice.\\n///\\n///              (\\n///                  uint256 initialDepositAmount,\\n///                  uint256 tbtcAmount,\\n///                  bytes32 extraData\\n///              ) = _finalizeDeposit(depositKey);\\n///\\n///              // Do something with the minted TBTC using context\\n///              // embedded in the extraData.\\n///          }\\n///      }\\nabstract contract AbstractTBTCDepositor {\\n    using BTCUtils for bytes;\\n\\n    /// @notice Multiplier to convert satoshi to TBTC token units.\\n    uint256 public constant SATOSHI_MULTIPLIER = 10**10;\\n\\n    /// @notice Bridge contract address.\\n    IBridge public bridge;\\n    /// @notice TBTCVault contract address.\\n    ITBTCVault public tbtcVault;\\n\\n    // Reserved storage space that allows adding more variables without affecting\\n    // the storage layout of the child contracts. The convention from OpenZeppelin\\n    // suggests the storage space should add up to 50 slots. If more variables are\\n    // added in the upcoming versions one need to reduce the array size accordingly.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[47] private __gap;\\n\\n    /// @notice Initializes the contract. MUST BE CALLED from the child\\n    ///         contract initializer.\\n    // slither-disable-next-line dead-code\\n    function __AbstractTBTCDepositor_initialize(\\n        address _bridge,\\n        address _tbtcVault\\n    ) internal {\\n        require(\\n            address(bridge) == address(0) && address(tbtcVault) == address(0),\\n            \\\"AbstractTBTCDepositor already initialized\\\"\\n        );\\n\\n        require(_bridge != address(0), \\\"Bridge address cannot be zero\\\");\\n        require(_tbtcVault != address(0), \\\"TBTCVault address cannot be zero\\\");\\n\\n        bridge = IBridge(_bridge);\\n        tbtcVault = ITBTCVault(_tbtcVault);\\n    }\\n\\n    /// @notice Initializes a deposit by revealing it to the Bridge.\\n    /// @param fundingTx Bitcoin funding transaction data, see `IBridgeTypes.BitcoinTxInfo`.\\n    /// @param reveal Deposit reveal data, see `IBridgeTypes.DepositRevealInfo` struct.\\n    /// @param extraData 32-byte deposit extra data.\\n    /// @return depositKey Deposit key computed as\\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\\n    ///         key can be used to refer to the deposit in the Bridge and\\n    ///         TBTCVault contracts.\\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @dev Requirements:\\n    ///      - The revealed vault address must match the TBTCVault address,\\n    ///      - All requirements from {Bridge#revealDepositWithExtraData}\\n    ///        function must be met.\\n    /// @dev This function doesn't validate if a deposit has been initialized before,\\n    ///      as the Bridge won't allow the same deposit to be revealed twice.\\n    // slither-disable-next-line dead-code\\n    function _initializeDeposit(\\n        IBridgeTypes.BitcoinTxInfo memory fundingTx,\\n        IBridgeTypes.DepositRevealInfo memory reveal,\\n        bytes32 extraData\\n    ) internal returns (uint256 depositKey, uint256 initialDepositAmount) {\\n        require(reveal.vault == address(tbtcVault), \\\"Vault address mismatch\\\");\\n\\n        depositKey = _calculateDepositKey(\\n            _calculateBitcoinTxHash(fundingTx),\\n            reveal.fundingOutputIndex\\n        );\\n\\n        // The Bridge does not allow to reveal the same deposit twice and\\n        // revealed deposits stay there forever. The transaction will revert\\n        // if the deposit has already been revealed so, there is no need to do\\n        // an explicit check here.\\n        bridge.revealDepositWithExtraData(fundingTx, reveal, extraData);\\n\\n        initialDepositAmount =\\n            bridge.deposits(depositKey).amount *\\n            SATOSHI_MULTIPLIER;\\n    }\\n\\n    /// @notice Finalizes a deposit by calculating the amount of TBTC minted\\n    ///         for the deposit.\\n    /// @param depositKey Deposit key identifying the deposit.\\n    /// @return initialDepositAmount Amount of funding transaction deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit. In\\n    ///         TBTC token decimals precision.\\n    /// @return extraData 32-byte deposit extra data.\\n    /// @dev Requirements:\\n    ///      - The deposit must be initialized but not finalized\\n    ///        (in the context of this contract) yet.\\n    ///      - The deposit must be finalized on the Bridge side. That means the\\n    ///        deposit must be either swept or optimistically minted.\\n    /// @dev THIS FUNCTION DOESN'T VALIDATE IF A DEPOSIT HAS BEEN FINALIZED BEFORE,\\n    ///      IT IS A RESPONSIBILITY OF THE IMPLEMENTING CONTRACT TO ENSURE THIS\\n    ///      FUNCTION WON'T BE CALLED TWICE FOR THE SAME DEPOSIT.\\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function is an\\n    ///      approximation. See documentation of the `calculateTbtcAmount`\\n    ///      responsible for calculating this value for more details.\\n    // slither-disable-next-line dead-code\\n    function _finalizeDeposit(uint256 depositKey)\\n        internal\\n        returns (\\n            uint256 initialDepositAmount,\\n            uint256 tbtcAmount,\\n            bytes32 extraData\\n        )\\n    {\\n        IBridgeTypes.DepositRequest memory deposit = bridge.deposits(\\n            depositKey\\n        );\\n        require(deposit.revealedAt != 0, \\\"Deposit not initialized\\\");\\n\\n        (, uint64 finalizedAt) = tbtcVault.optimisticMintingRequests(\\n            depositKey\\n        );\\n\\n        require(\\n            deposit.sweptAt != 0 || finalizedAt != 0,\\n            \\\"Deposit not finalized by the bridge\\\"\\n        );\\n\\n        initialDepositAmount = deposit.amount * SATOSHI_MULTIPLIER;\\n\\n        tbtcAmount = _calculateTbtcAmount(deposit.amount, deposit.treasuryFee);\\n\\n        extraData = deposit.extraData;\\n    }\\n\\n    /// @notice Calculates the amount of TBTC minted for the deposit.\\n    /// @param depositAmountSat Deposit amount in satoshi (1e8 precision).\\n    ///        This is the actual amount deposited by the deposit creator, i.e.\\n    ///        the gross amount the Bridge's fees are cut from.\\n    /// @param depositTreasuryFeeSat Deposit treasury fee in satoshi (1e8 precision).\\n    ///        This is an accurate value of the treasury fee that was actually\\n    ///        cut upon minting.\\n    /// @return tbtcAmount Approximate amount of TBTC minted for the deposit.\\n    /// @dev IMPORTANT NOTE: The tbtcAmount returned by this function may\\n    ///      not correspond to the actual amount of TBTC minted for the deposit.\\n    ///      Although the treasury fee cut upon minting is known precisely,\\n    ///      this is not the case for the optimistic minting fee and the Bitcoin\\n    ///      transaction fee. To overcome that problem, this function just takes\\n    ///      the current maximum allowed values of both fees, at the moment of deposit\\n    ///      finalization. For the great majority of the deposits, such an\\n    ///      algorithm will return a tbtcAmount slightly lesser than the\\n    ///      actual amount of TBTC minted for the deposit. This will cause\\n    ///      some TBTC to be left in the contract and ensure there is enough\\n    ///      liquidity to finalize the deposit. However, in some rare cases,\\n    ///      where the actual values of those fees change between the deposit\\n    ///      minting and finalization, the tbtcAmount returned by this function\\n    ///      may be greater than the actual amount of TBTC minted for the deposit.\\n    ///      If this happens and the reserve coming from previous deposits\\n    ///      leftovers does not provide enough liquidity, the deposit will have\\n    ///      to wait for finalization until the reserve is refilled by subsequent\\n    ///      deposits or a manual top-up. The integrator is responsible for\\n    ///      handling such cases.\\n    // slither-disable-next-line dead-code\\n    function _calculateTbtcAmount(\\n        uint64 depositAmountSat,\\n        uint64 depositTreasuryFeeSat\\n    ) internal view virtual returns (uint256) {\\n        // Both deposit amount and treasury fee are in the 1e8 satoshi precision.\\n        // We need to convert them to the 1e18 TBTC precision.\\n        uint256 amountSubTreasury = (depositAmountSat - depositTreasuryFeeSat) *\\n            SATOSHI_MULTIPLIER;\\n\\n        uint256 omFeeDivisor = tbtcVault.optimisticMintingFeeDivisor();\\n        uint256 omFee = omFeeDivisor > 0\\n            ? (amountSubTreasury / omFeeDivisor)\\n            : 0;\\n\\n        // The deposit transaction max fee is in the 1e8 satoshi precision.\\n        // We need to convert them to the 1e18 TBTC precision.\\n        (, , uint64 depositTxMaxFee, ) = bridge.depositParameters();\\n        uint256 txMaxFee = depositTxMaxFee * SATOSHI_MULTIPLIER;\\n\\n        return amountSubTreasury - omFee - txMaxFee;\\n    }\\n\\n    /// @notice Calculates the deposit key for the given funding transaction\\n    ///         hash and funding output index.\\n    /// @param fundingTxHash Funding transaction hash.\\n    /// @param fundingOutputIndex Funding output index.\\n    /// @return depositKey Deposit key computed as\\n    ///         `keccak256(fundingTxHash | reveal.fundingOutputIndex)`. This\\n    ///         key can be used to refer to the deposit in the Bridge and\\n    ///         TBTCVault contracts.\\n    // slither-disable-next-line dead-code\\n    function _calculateDepositKey(\\n        bytes32 fundingTxHash,\\n        uint32 fundingOutputIndex\\n    ) internal pure returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(abi.encodePacked(fundingTxHash, fundingOutputIndex))\\n            );\\n    }\\n\\n    /// @notice Calculates the Bitcoin transaction hash for the given Bitcoin\\n    ///         transaction data.\\n    /// @param txInfo Bitcoin transaction data, see `IBridgeTypes.BitcoinTxInfo` struct.\\n    /// @return txHash Bitcoin transaction hash.\\n    // slither-disable-next-line dead-code\\n    function _calculateBitcoinTxHash(IBridgeTypes.BitcoinTxInfo memory txInfo)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            abi\\n                .encodePacked(\\n                    txInfo.version,\\n                    txInfo.inputVector,\\n                    txInfo.outputVector,\\n                    txInfo.locktime\\n                )\\n                .hash256View();\\n    }\\n\\n    /// @notice Returns minimum deposit amount.\\n    /// @return Minimum deposit amount. In TBTC token decimals precision.\\n    // slither-disable-next-line dead-code\\n    function _minDepositAmount() internal view returns (uint256) {\\n        // Read tBTC Bridge Deposit Dust Threshold in satoshi precision.\\n        (uint64 bridgeDepositDustThresholdSat, , , ) = bridge\\n            .depositParameters();\\n\\n        // Convert tBTC Bridge Deposit Dust Threshold to TBTC token precision.\\n        return bridgeDepositDustThresholdSat * SATOSHI_MULTIPLIER;\\n    }\\n}\\n\",\"keccak256\":\"0x24dd42ef0aa2dd54ba02f3fea63a1e2a6663dd0b6ba745f28098164d1c31c359\",\"license\":\"GPL-3.0-only\"},\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"},\"contracts/integrator/ITBTCVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface of the TBTCVault contract.\\n/// @dev See vault/TBTCVault.sol\\ninterface ITBTCVault {\\n    /// @dev See {TBTCVault#optimisticMintingRequests}\\n    function optimisticMintingRequests(uint256 depositKey)\\n        external\\n        returns (uint64 requestedAt, uint64 finalizedAt);\\n\\n    /// @dev See {TBTCVault#optimisticMintingFeeDivisor}\\n    function optimisticMintingFeeDivisor() external view returns (uint32);\\n\\n    /// @dev See {TBTCVault#tbtcToken}\\n    function tbtcToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ccf20f2a2e32fa544adb84a17aaa80cefef626888d1f2cfc71e11789ba98674\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/L1BitcoinDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@keep-network/random-beacon/contracts/Reimbursable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../integrator/AbstractTBTCDepositor.sol\\\";\\nimport \\\"../integrator/IBridge.sol\\\";\\nimport \\\"../integrator/ITBTCVault.sol\\\";\\nimport \\\"./Wormhole.sol\\\";\\n\\n/// @title L1BitcoinDepositor\\n/// @notice This contract is part of the direct bridging mechanism allowing\\n///         users to obtain ERC20 TBTC on supported L2 chains, without the need\\n///         to interact with the L1 tBTC ledger chain where minting occurs.\\n///\\n///         `L1BitcoinDepositor` is deployed on the L1 chain and interacts with\\n///         their L2 counterpart, the `L2BitcoinDepositor`, deployed on the given\\n///         L2 chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor` pair is\\n///         responsible for a specific L2 chain.\\n///\\n///         The outline of the direct bridging mechanism is as follows:\\n///         1. An L2 user issues a Bitcoin funding transaction to a P2(W)SH\\n///            deposit address that embeds the `L1BitcoinDepositor` contract\\n///            and L2 user addresses. The `L1BitcoinDepositor` contract serves\\n///            as the actual depositor on the L1 chain while the L2 user\\n///            address is set as the deposit owner who will receive the\\n///            minted ERC20 TBTC.\\n///         2. The data about the Bitcoin funding transaction and deposit\\n///            address are passed to the relayer. In the first iteration of\\n///            the direct bridging mechanism, this is achieved using an\\n///            on-chain event emitted by the `L2BitcoinDepositor` contract.\\n///            Further iterations assumes those data are passed off-chain, e.g.\\n///            through a REST API exposed by the relayer.\\n///         3. The relayer uses the data to initialize a deposit on the L1\\n///            chain by calling the `initializeDeposit` function of the\\n///            `L1BitcoinDepositor` contract. The `initializeDeposit` function\\n///            reveals the deposit to the tBTC Bridge so minting of ERC20 L1 TBTC\\n///            can occur.\\n///         4. Once minting is complete, the `L1BitcoinDepositor` contract\\n///            receives minted ERC20 L1 TBTC. The relayer then calls the\\n///            `finalizeDeposit` function of the `L1BitcoinDepositor` contract\\n///            to transfer the minted ERC20 L1 TBTC to the L2 user address. This\\n///            is achieved using the Wormhole protocol. First, the `finalizeDeposit`\\n///            function initiates a Wormhole token transfer that locks the ERC20\\n///            L1 TBTC within the Wormhole Token Bridge contract and assigns\\n///            Wormhole-wrapped L2 TBTC to the corresponding `L2WormholeGateway`\\n///            contract. Then, `finalizeDeposit` notifies the `L2BitcoinDepositor`\\n///            contract by sending a Wormhole message containing the VAA\\n///            of the Wormhole token transfer. The `L2BitcoinDepositor` contract\\n///            receives the Wormhole message, and calls the `L2WormholeGateway`\\n///            contract that redeems Wormhole-wrapped L2 TBTC from the Wormhole\\n///            Token Bridge and uses it to mint canonical L2 TBTC to the L2 user\\n///            address.\\ncontract L1BitcoinDepositor is\\n    Initializable,\\n    AbstractTBTCDepositor,\\n    OwnableUpgradeable,\\n    Reimbursable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Reflects the deposit state:\\n    ///         - Unknown deposit has not been initialized yet.\\n    ///         - Initialized deposit has been initialized with a call to\\n    ///           `initializeDeposit` function and is known to this contract.\\n    ///         - Finalized deposit led to TBTC ERC20 minting and was finalized\\n    ///           with a call to `finalizeDeposit` function that transferred\\n    ///           TBTC ERC20 to the L2 deposit owner.\\n    enum DepositState {\\n        Unknown,\\n        Initialized,\\n        Finalized\\n    }\\n\\n    /// @notice Holds information about a deferred gas reimbursement.\\n    struct GasReimbursement {\\n        /// @notice Receiver that is supposed to receive the reimbursement.\\n        address receiver;\\n        /// @notice Gas expenditure that is meant to be reimbursed.\\n        uint96 gasSpent;\\n    }\\n\\n    /// @notice Holds the deposit state, keyed by the deposit key calculated for\\n    ///         the individual deposit during the call to `initializeDeposit`\\n    ///         function.\\n    mapping(uint256 => DepositState) public deposits;\\n    /// @notice ERC20 L1 TBTC token contract.\\n    IERC20Upgradeable public tbtcToken;\\n    /// @notice `Wormhole` core contract on L1.\\n    IWormhole public wormhole;\\n    /// @notice `WormholeRelayer` contract on L1.\\n    IWormholeRelayer public wormholeRelayer;\\n    /// @notice Wormhole `TokenBridge` contract on L1.\\n    IWormholeTokenBridge public wormholeTokenBridge;\\n    /// @notice tBTC `L2WormholeGateway` contract on the corresponding L2 chain.\\n    address public l2WormholeGateway;\\n    /// @notice Wormhole chain ID of the corresponding L2 chain.\\n    uint16 public l2ChainId;\\n    /// @notice tBTC `L2BitcoinDepositor` contract on the corresponding L2 chain.\\n    address public l2BitcoinDepositor;\\n    /// @notice Gas limit necessary to execute the L2 part of the deposit\\n    ///         finalization. This value is used to calculate the payment for\\n    ///         the Wormhole Relayer that is responsible to execute the\\n    ///         deposit finalization on the corresponding L2 chain. Can be\\n    ///         updated by the owner.\\n    uint256 public l2FinalizeDepositGasLimit;\\n    /// @notice Holds deferred gas reimbursements for deposit initialization\\n    ///         (indexed by deposit key). Reimbursement for deposit\\n    ///         initialization is paid out upon deposit finalization. This is\\n    ///         because the tBTC Bridge accepts all (even invalid) deposits but\\n    ///         mints ERC20 TBTC only for the valid ones. Paying out the\\n    ///         reimbursement directly upon initialization would make the\\n    ///         reimbursement pool vulnerable to malicious actors that could\\n    ///         drain it by initializing invalid deposits.\\n    mapping(uint256 => GasReimbursement) public gasReimbursements;\\n    /// @notice Gas that is meant to balance the overall cost of deposit initialization.\\n    ///         Can be updated by the owner based on the current market conditions.\\n    uint256 public initializeDepositGasOffset;\\n    /// @notice Gas that is meant to balance the overall cost of deposit finalization.\\n    ///         Can be updated by the owner based on the current market conditions.\\n    uint256 public finalizeDepositGasOffset;\\n    /// @notice Set of addresses that are authorized to receive gas reimbursements\\n    ///         for deposit initialization and finalization. The authorization is\\n    ///         granted by the contract owner.\\n    mapping(address => bool) public reimbursementAuthorizations;\\n\\n    event DepositInitialized(\\n        uint256 indexed depositKey,\\n        address indexed l2DepositOwner,\\n        address indexed l1Sender\\n    );\\n\\n    event DepositFinalized(\\n        uint256 indexed depositKey,\\n        address indexed l2DepositOwner,\\n        address indexed l1Sender,\\n        uint256 initialAmount,\\n        uint256 tbtcAmount\\n    );\\n\\n    event L2FinalizeDepositGasLimitUpdated(uint256 l2FinalizeDepositGasLimit);\\n\\n    event GasOffsetParametersUpdated(\\n        uint256 initializeDepositGasOffset,\\n        uint256 finalizeDepositGasOffset\\n    );\\n\\n    event ReimbursementAuthorizationUpdated(\\n        address indexed _address,\\n        bool authorization\\n    );\\n\\n    /// @dev This modifier comes from the `Reimbursable` base contract and\\n    ///      must be overridden to protect the `updateReimbursementPool` call.\\n    modifier onlyReimbursableAdmin() override {\\n        require(msg.sender == owner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _tbtcBridge,\\n        address _tbtcVault,\\n        address _wormhole,\\n        address _wormholeRelayer,\\n        address _wormholeTokenBridge,\\n        address _l2WormholeGateway,\\n        uint16 _l2ChainId\\n    ) external initializer {\\n        __AbstractTBTCDepositor_initialize(_tbtcBridge, _tbtcVault);\\n        __Ownable_init();\\n\\n        require(_wormhole != address(0), \\\"Wormhole address cannot be zero\\\");\\n        require(\\n            _wormholeRelayer != address(0),\\n            \\\"WormholeRelayer address cannot be zero\\\"\\n        );\\n        require(\\n            _wormholeTokenBridge != address(0),\\n            \\\"WormholeTokenBridge address cannot be zero\\\"\\n        );\\n        require(\\n            _l2WormholeGateway != address(0),\\n            \\\"L2WormholeGateway address cannot be zero\\\"\\n        );\\n\\n        tbtcToken = IERC20Upgradeable(ITBTCVault(_tbtcVault).tbtcToken());\\n        wormhole = IWormhole(_wormhole);\\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\\n        wormholeTokenBridge = IWormholeTokenBridge(_wormholeTokenBridge);\\n        // slither-disable-next-line missing-zero-check\\n        l2WormholeGateway = _l2WormholeGateway;\\n        l2ChainId = _l2ChainId;\\n        l2FinalizeDepositGasLimit = 500_000;\\n        initializeDepositGasOffset = 60_000;\\n        finalizeDepositGasOffset = 20_000;\\n    }\\n\\n    /// @notice Sets the address of the `L2BitcoinDepositor` contract on the\\n    ///         corresponding L2 chain. This function solves the chicken-and-egg\\n    ///         problem of setting the `L2BitcoinDepositor` contract address\\n    ///         on the `L1BitcoinDepositor` contract and vice versa.\\n    /// @param _l2BitcoinDepositor Address of the `L2BitcoinDepositor` contract.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the contract owner,\\n    ///      - The address must not be set yet,\\n    ///      - The new address must not be 0x0.\\n    function attachL2BitcoinDepositor(address _l2BitcoinDepositor)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            l2BitcoinDepositor == address(0),\\n            \\\"L2 Bitcoin Depositor already set\\\"\\n        );\\n        require(\\n            _l2BitcoinDepositor != address(0),\\n            \\\"L2 Bitcoin Depositor must not be 0x0\\\"\\n        );\\n        l2BitcoinDepositor = _l2BitcoinDepositor;\\n    }\\n\\n    /// @notice Updates the gas limit necessary to execute the L2 part of the\\n    ///         deposit finalization.\\n    /// @param _l2FinalizeDepositGasLimit New gas limit.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the contract owner.\\n    function updateL2FinalizeDepositGasLimit(uint256 _l2FinalizeDepositGasLimit)\\n        external\\n        onlyOwner\\n    {\\n        l2FinalizeDepositGasLimit = _l2FinalizeDepositGasLimit;\\n        emit L2FinalizeDepositGasLimitUpdated(_l2FinalizeDepositGasLimit);\\n    }\\n\\n    /// @notice Updates the values of gas offset parameters.\\n    /// @dev Can be called only by the contract owner. The caller is responsible\\n    ///      for validating parameters.\\n    /// @param _initializeDepositGasOffset New initialize deposit gas offset.\\n    /// @param _finalizeDepositGasOffset New finalize deposit gas offset.\\n    function updateGasOffsetParameters(\\n        uint256 _initializeDepositGasOffset,\\n        uint256 _finalizeDepositGasOffset\\n    ) external onlyOwner {\\n        initializeDepositGasOffset = _initializeDepositGasOffset;\\n        finalizeDepositGasOffset = _finalizeDepositGasOffset;\\n\\n        emit GasOffsetParametersUpdated(\\n            _initializeDepositGasOffset,\\n            _finalizeDepositGasOffset\\n        );\\n    }\\n\\n    /// @notice Updates the reimbursement authorization for the given address.\\n    /// @param _address Address to update the authorization for.\\n    /// @param authorization New authorization status.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the contract owner.\\n    function updateReimbursementAuthorization(\\n        address _address,\\n        bool authorization\\n    ) external onlyOwner {\\n        emit ReimbursementAuthorizationUpdated(_address, authorization);\\n        reimbursementAuthorizations[_address] = authorization;\\n    }\\n\\n    /// @notice Initializes the deposit process on L1 by revealing the deposit\\n    ///         data (funding transaction and components of the P2(W)SH deposit\\n    ///         address) to the tBTC Bridge. Once tBTC minting is completed,\\n    ///         this call should be followed by a call to `finalizeDeposit`.\\n    ///         Callers of `initializeDeposit` are eligible for a gas refund\\n    ///         that is paid out upon deposit finalization (only if the\\n    ///         reimbursement pool is attached and the given caller is\\n    ///         authorized for refunds).\\n    ///\\n    ///         The Bitcoin funding transaction must transfer funds to a P2(W)SH\\n    ///         deposit address whose underlying script is built from the\\n    ///         following components:\\n    ///\\n    ///         <depositor-address> DROP\\n    ///         <depositor-extra-data> DROP\\n    ///         <blinding-factor> DROP\\n    ///         DUP HASH160 <signingGroupPubkeyHash> EQUAL\\n    ///         IF\\n    ///           CHECKSIG\\n    ///         ELSE\\n    ///           DUP HASH160 <refundPubkeyHash> EQUALVERIFY\\n    ///           <locktime> CHECKLOCKTIMEVERIFY DROP\\n    ///           CHECKSIG\\n    ///         ENDIF\\n    ///\\n    ///         Where:\\n    ///\\n    ///         <depositor-address> 20-byte L1 address of the\\n    ///         `L1BitcoinDepositor` contract.\\n    ///\\n    ///         <depositor-extra-data> L2 deposit owner address in the Wormhole\\n    ///         format, i.e. 32-byte value left-padded with 0.\\n    ///\\n    ///         <blinding-factor> 8-byte deposit blinding factor, as used in the\\n    ///         tBTC bridge.\\n    ///\\n    ///         <signingGroupPubkeyHash> The compressed Bitcoin public key (33\\n    ///         bytes and 02 or 03 prefix) of the deposit's wallet hashed in the\\n    ///         HASH160 Bitcoin opcode style. This must point to the active tBTC\\n    ///         bridge wallet.\\n    ///\\n    ///         <refundPubkeyHash> The compressed Bitcoin public key (33 bytes\\n    ///         and 02 or 03 prefix) that can be used to make the deposit refund\\n    ///         after the tBTC bridge refund locktime passed. Hashed in the\\n    ///         HASH160 Bitcoin opcode style. This is needed only as a security\\n    ///         measure protecting the user in case tBTC bridge completely stops\\n    ///         functioning.\\n    ///\\n    ///         <locktime> The Bitcoin script refund locktime (4-byte LE),\\n    ///         according to tBTC bridge rules.\\n    ///\\n    ///         Please consult tBTC `Bridge.revealDepositWithExtraData` function\\n    ///         documentation for more information.\\n    /// @param fundingTx Bitcoin funding transaction data.\\n    /// @param reveal Deposit reveal data.\\n    /// @param l2DepositOwner Address of the L2 deposit owner.\\n    /// @dev Requirements:\\n    ///      - The L2 deposit owner address must not be 0x0,\\n    ///      - The function can be called only one time for the given Bitcoin\\n    ///        funding transaction,\\n    ///      - The L2 deposit owner must be embedded in the Bitcoin P2(W)SH\\n    ///        deposit script as the <depositor-extra-data> field. The 20-byte\\n    ///        address must be expressed as a 32-byte value left-padded with 0.\\n    ///        If the value in the Bitcoin script and the value passed as\\n    ///        parameter do not match, the function will revert,\\n    ///      - All the requirements of tBTC Bridge.revealDepositWithExtraData\\n    ///        must be met.\\n    function initializeDeposit(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        address l2DepositOwner\\n    ) external {\\n        uint256 gasStart = gasleft();\\n\\n        require(\\n            l2DepositOwner != address(0),\\n            \\\"L2 deposit owner must not be 0x0\\\"\\n        );\\n\\n        // Convert the L2 deposit owner address into the Wormhole format and\\n        // encode it as deposit extra data.\\n        bytes32 extraData = WormholeUtils.toWormholeAddress(l2DepositOwner);\\n\\n        // Input parameters do not have to be validated in any way.\\n        // The tBTC Bridge is responsible for validating whether the provided\\n        // Bitcoin funding transaction transfers funds to the P2(W)SH deposit\\n        // address built from the reveal data. Despite the tBTC Bridge accepts\\n        // all transactions that meet the format requirements, it mints ERC20\\n        // L1 TBTC only for the ones that actually occurred on the Bitcoin\\n        // network and gathered enough confirmations.\\n        (uint256 depositKey, ) = _initializeDeposit(\\n            fundingTx,\\n            reveal,\\n            extraData\\n        );\\n\\n        require(\\n            deposits[depositKey] == DepositState.Unknown,\\n            \\\"Wrong deposit state\\\"\\n        );\\n\\n        // slither-disable-next-line reentrancy-benign\\n        deposits[depositKey] = DepositState.Initialized;\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit DepositInitialized(depositKey, l2DepositOwner, msg.sender);\\n\\n        // Record a deferred gas reimbursement if the reimbursement pool is\\n        // attached and the caller is authorized to receive reimbursements.\\n        if (\\n            address(reimbursementPool) != address(0) &&\\n            reimbursementAuthorizations[msg.sender]\\n        ) {\\n            uint256 gasSpent = (gasStart - gasleft()) +\\n                initializeDepositGasOffset;\\n\\n            // Should not happen as long as initializeDepositGasOffset is\\n            // set to a reasonable value. If it happens, it's better to\\n            // omit the reimbursement than to revert the transaction.\\n            if (gasSpent > type(uint96).max) {\\n                return;\\n            }\\n\\n            // Do not issue a reimbursement immediately. Record\\n            // a deferred reimbursement that will be paid out upon deposit\\n            // finalization. This is because the tBTC Bridge accepts all\\n            // (even invalid) deposits but mints ERC20 TBTC only for the valid\\n            // ones. Paying out the reimbursement directly upon initialization\\n            // would make the reimbursement pool vulnerable to malicious actors\\n            // that could drain it by initializing invalid deposits.\\n            // slither-disable-next-line reentrancy-benign\\n            gasReimbursements[depositKey] = GasReimbursement({\\n                receiver: msg.sender,\\n                gasSpent: uint96(gasSpent)\\n            });\\n        }\\n    }\\n\\n    /// @notice Finalizes the deposit process by transferring ERC20 L1 TBTC\\n    ///         to the L2 deposit owner. This function should be called after\\n    ///         the deposit was initialized with a call to `initializeDeposit`\\n    ///         function and after ERC20 L1 TBTC was minted by the tBTC Bridge\\n    ///         to the `L1BitcoinDepositor` contract. Please note several hours\\n    ///         may pass between `initializeDeposit`and `finalizeDeposit`.\\n    ///         If the reimbursement pool is attached, the function pays out\\n    ///         a gas and call's value refund to the caller (if the given\\n    ///         caller is authorized for refunds) as well as the deferred gas\\n    ///         refund to the caller of `initializeDeposit` corresponding to\\n    ///         the finalized deposit.\\n    /// @param depositKey The deposit key, as emitted in the `DepositInitialized`\\n    ///        event emitted by the `initializeDeposit` function for the deposit.\\n    /// @dev Requirements:\\n    ///      - `initializeDeposit` was called for the given deposit before,\\n    ///      - ERC20 L1 TBTC was minted by tBTC Bridge to this contract,\\n    ///      - The function was not called for the given deposit before,\\n    ///      - The call must carry a payment for the Wormhole Relayer that\\n    ///        is responsible for executing the deposit finalization on the\\n    ///        corresponding L2 chain. The payment must be equal to the\\n    ///        value returned by the `quoteFinalizeDeposit` function.\\n    function finalizeDeposit(uint256 depositKey) external payable {\\n        uint256 gasStart = gasleft();\\n\\n        require(\\n            deposits[depositKey] == DepositState.Initialized,\\n            \\\"Wrong deposit state\\\"\\n        );\\n\\n        deposits[depositKey] = DepositState.Finalized;\\n\\n        (\\n            uint256 initialDepositAmount,\\n            uint256 tbtcAmount,\\n            // Deposit extra data is actually the L2 deposit owner\\n            // address in Wormhole format.\\n            bytes32 l2DepositOwner\\n        ) = _finalizeDeposit(depositKey);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit DepositFinalized(\\n            depositKey,\\n            WormholeUtils.fromWormholeAddress(l2DepositOwner),\\n            msg.sender,\\n            initialDepositAmount,\\n            tbtcAmount\\n        );\\n\\n        _transferTbtc(tbtcAmount, l2DepositOwner);\\n\\n        // `ReimbursementPool` calls the untrusted receiver address using a\\n        // low-level call. Reentrancy risk is mitigated by making sure that\\n        // `ReimbursementPool.refund` is a non-reentrant function and executing\\n        // reimbursements as the last step of the deposit finalization.\\n        if (address(reimbursementPool) != address(0)) {\\n            // If there is a deferred reimbursement for this deposit\\n            // initialization, pay it out now. No need to check reimbursement\\n            // authorization for the initialization caller. If the deferred\\n            // reimbursement is here, that implies the caller was authorized\\n            // to receive it.\\n            GasReimbursement memory reimbursement = gasReimbursements[\\n                depositKey\\n            ];\\n            if (reimbursement.receiver != address(0)) {\\n                delete gasReimbursements[depositKey];\\n\\n                reimbursementPool.refund(\\n                    reimbursement.gasSpent,\\n                    reimbursement.receiver\\n                );\\n            }\\n\\n            // Pay out the reimbursement for deposit finalization if the caller\\n            // is authorized to receive reimbursements.\\n            if (reimbursementAuthorizations[msg.sender]) {\\n                // As this call is payable and this transaction carries out a\\n                // msg.value that covers Wormhole cost, we need to reimburse\\n                // that as well. However, the `ReimbursementPool` issues refunds\\n                // based on gas spent. We need to convert msg.value accordingly\\n                // using the `_refundToGasSpent` function.\\n                uint256 msgValueOffset = _refundToGasSpent(msg.value);\\n                reimbursementPool.refund(\\n                    (gasStart - gasleft()) +\\n                        msgValueOffset +\\n                        finalizeDepositGasOffset,\\n                    msg.sender\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice The `ReimbursementPool` contract issues refunds based on\\n    ///         gas spent. If there is a need to get a specific refund based\\n    ///         on WEI value, such a value must be first converted to gas spent.\\n    ///         This function does such a conversion.\\n    /// @param refund Refund value in WEI.\\n    /// @return Refund value as gas spent.\\n    /// @dev This function is the reverse of the logic used\\n    ///      within `ReimbursementPool.refund`.\\n    function _refundToGasSpent(uint256 refund) internal returns (uint256) {\\n        uint256 maxGasPrice = reimbursementPool.maxGasPrice();\\n        uint256 staticGas = reimbursementPool.staticGas();\\n\\n        uint256 gasPrice = tx.gasprice < maxGasPrice\\n            ? tx.gasprice\\n            : maxGasPrice;\\n\\n        // Should not happen but check just in case of weird ReimbursementPool\\n        // configuration.\\n        if (gasPrice == 0) {\\n            return 0;\\n        }\\n\\n        uint256 gasSpent = (refund / gasPrice);\\n\\n        // Should not happen but check just in case of weird ReimbursementPool\\n        // configuration.\\n        if (staticGas > gasSpent) {\\n            return 0;\\n        }\\n\\n        return gasSpent - staticGas;\\n    }\\n\\n    /// @notice Quotes the payment that must be attached to the `finalizeDeposit`\\n    ///         function call. The payment is necessary to cover the cost of\\n    ///         the Wormhole Relayer that is responsible for executing the\\n    ///         deposit finalization on the corresponding L2 chain.\\n    /// @return cost The cost of the `finalizeDeposit` function call in WEI.\\n    function quoteFinalizeDeposit() external view returns (uint256 cost) {\\n        cost = _quoteFinalizeDeposit(wormhole.messageFee());\\n    }\\n\\n    /// @notice Internal version of the `quoteFinalizeDeposit` function that\\n    ///         works with a custom Wormhole message fee.\\n    /// @param messageFee Custom Wormhole message fee.\\n    /// @return cost The cost of the `finalizeDeposit` function call in WEI.\\n    /// @dev Implemented based on examples presented as part of the Wormhole SDK:\\n    ///      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L23\\n    function _quoteFinalizeDeposit(uint256 messageFee)\\n        internal\\n        view\\n        returns (uint256 cost)\\n    {\\n        // Cost of delivering token and payload to `l2ChainId`.\\n        (uint256 deliveryCost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\\n            l2ChainId,\\n            0,\\n            l2FinalizeDepositGasLimit\\n        );\\n\\n        // Total cost = delivery cost + cost of publishing the `sending token`\\n        // Wormhole message.\\n        cost = deliveryCost + messageFee;\\n    }\\n\\n    /// @notice Transfers ERC20 L1 TBTC to the L2 deposit owner using the Wormhole\\n    ///         protocol. The function initiates a Wormhole token transfer that\\n    ///         locks the ERC20 L1 TBTC within the Wormhole Token Bridge contract\\n    ///         and assigns Wormhole-wrapped L2 TBTC to the corresponding\\n    ///         `L2WormholeGateway` contract. Then, the function notifies the\\n    ///         `L2BitcoinDepositor` contract by sending a Wormhole message\\n    ///         containing the VAA of the Wormhole token transfer. The\\n    ///         `L2BitcoinDepositor` contract receives the Wormhole message,\\n    ///         and calls the `L2WormholeGateway` contract that redeems\\n    ///         Wormhole-wrapped L2 TBTC from the Wormhole Token Bridge and\\n    ///         uses it to mint canonical L2 TBTC to the L2 deposit owner address.\\n    /// @param amount Amount of TBTC L1 ERC20 to transfer (1e18 precision).\\n    /// @param l2Receiver Address of the L2 deposit owner.\\n    /// @dev Requirements:\\n    ///      - The normalized amount (1e8 precision) must be greater than 0,\\n    ///      - The appropriate payment for the Wormhole Relayer must be\\n    ///        attached to the call (as calculated by `quoteFinalizeDeposit`).\\n    /// @dev Implemented based on examples presented as part of the Wormhole SDK:\\n    ///      https://github.com/wormhole-foundation/hello-token/blob/8ec757248788dc12183f13627633e1d6fd1001bb/src/example-extensions/HelloTokenWithoutSDK.sol#L29\\n    function _transferTbtc(uint256 amount, bytes32 l2Receiver) internal {\\n        // Wormhole supports the 1e8 precision at most. TBTC is 1e18 so\\n        // the amount needs to be normalized.\\n        amount = WormholeUtils.normalize(amount);\\n\\n        require(amount > 0, \\\"Amount too low to bridge\\\");\\n\\n        // Cost of requesting a `finalizeDeposit` message to be sent to\\n        //  `l2ChainId` with a gasLimit of `l2FinalizeDepositGasLimit`.\\n        uint256 wormholeMessageFee = wormhole.messageFee();\\n        uint256 cost = _quoteFinalizeDeposit(wormholeMessageFee);\\n\\n        require(msg.value == cost, \\\"Payment for Wormhole Relayer is too low\\\");\\n\\n        // The Wormhole Token Bridge will pull the TBTC amount\\n        // from this contract. We need to approve the transfer first.\\n        tbtcToken.safeIncreaseAllowance(address(wormholeTokenBridge), amount);\\n\\n        // Initiate a Wormhole token transfer that will lock L1 TBTC within\\n        // the Wormhole Token Bridge contract and assign Wormhole-wrapped\\n        // L2 TBTC to the corresponding `L2WormholeGateway` contract.\\n        // slither-disable-next-line arbitrary-send-eth\\n        uint64 transferSequence = wormholeTokenBridge.transferTokensWithPayload{\\n            value: wormholeMessageFee\\n        }(\\n            address(tbtcToken),\\n            amount,\\n            l2ChainId,\\n            WormholeUtils.toWormholeAddress(l2WormholeGateway),\\n            0, // Nonce is a free field that is not relevant in this context.\\n            abi.encode(l2Receiver) // Set the L2 receiver address as the transfer payload.\\n        );\\n\\n        // Construct the VAA key corresponding to the above Wormhole token transfer.\\n        WormholeTypes.VaaKey[]\\n            memory additionalVaas = new WormholeTypes.VaaKey[](1);\\n        additionalVaas[0] = WormholeTypes.VaaKey({\\n            chainId: wormhole.chainId(),\\n            emitterAddress: WormholeUtils.toWormholeAddress(\\n                address(wormholeTokenBridge)\\n            ),\\n            sequence: transferSequence\\n        });\\n\\n        // The Wormhole token transfer initiated above must be finalized on\\n        // the L2 chain. We achieve that by sending the transfer's VAA to the\\n        // `L2BitcoinDepositor` contract. Once, the `L2BitcoinDepositor`\\n        // contract receives it, it calls the `L2WormholeGateway` contract\\n        // that redeems Wormhole-wrapped L2 TBTC from the Wormhole Token\\n        // Bridge and use it to mint canonical L2 TBTC to the receiver address.\\n        // slither-disable-next-line arbitrary-send-eth,unused-return\\n        wormholeRelayer.sendVaasToEvm{value: cost - wormholeMessageFee}(\\n            l2ChainId,\\n            l2BitcoinDepositor,\\n            bytes(\\\"\\\"), // No payload needed. The L2 receiver address is already encoded in the Wormhole token transfer payload.\\n            0, // No receiver value needed.\\n            l2FinalizeDepositGasLimit,\\n            additionalVaas,\\n            l2ChainId, // Set the L2 chain as the refund chain to avoid cross-chain refunds.\\n            msg.sender // Set the caller as the refund receiver.\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x333bc3f65a24b538df99b7059e32da676da3f0d76061000f786c1865f29b6041\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3139,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3142,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":4400,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"bridge","offset":2,"slot":"0","type":"t_contract(IBridge)4795"},{"astId":4404,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"tbtcVault","offset":0,"slot":"1","type":"t_contract(ITBTCVault)4821"},{"astId":4408,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)47_storage"},{"astId":4171,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"__gap","offset":0,"slot":"49","type":"t_array(t_uint256)50_storage"},{"astId":3011,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"_owner","offset":0,"slot":"99","type":"t_address"},{"astId":3131,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"__gap","offset":0,"slot":"100","type":"t_array(t_uint256)49_storage"},{"astId":2669,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"reimbursementPool","offset":0,"slot":"149","type":"t_contract(ReimbursementPool)2999"},{"astId":2673,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"__gap","offset":0,"slot":"150","type":"t_array(t_uint256)49_storage"},{"astId":4861,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"deposits","offset":0,"slot":"199","type":"t_mapping(t_uint256,t_enum(DepositState)4848)"},{"astId":4865,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"tbtcToken","offset":0,"slot":"200","type":"t_contract(IERC20Upgradeable)3379"},{"astId":4869,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"wormhole","offset":0,"slot":"201","type":"t_contract(IWormhole)5888"},{"astId":4873,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"wormholeRelayer","offset":0,"slot":"202","type":"t_contract(IWormholeRelayer)5928"},{"astId":4877,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"wormholeTokenBridge","offset":0,"slot":"203","type":"t_contract(IWormholeTokenBridge)6013"},{"astId":4880,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"l2WormholeGateway","offset":0,"slot":"204","type":"t_address"},{"astId":4883,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"l2ChainId","offset":20,"slot":"204","type":"t_uint16"},{"astId":4886,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"l2BitcoinDepositor","offset":0,"slot":"205","type":"t_address"},{"astId":4889,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"l2FinalizeDepositGasLimit","offset":0,"slot":"206","type":"t_uint256"},{"astId":4895,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"gasReimbursements","offset":0,"slot":"207","type":"t_mapping(t_uint256,t_struct(GasReimbursement)4855_storage)"},{"astId":4898,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"initializeDepositGasOffset","offset":0,"slot":"208","type":"t_uint256"},{"astId":4901,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"finalizeDepositGasOffset","offset":0,"slot":"209","type":"t_uint256"},{"astId":4906,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"reimbursementAuthorizations","offset":0,"slot":"210","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IBridge)4795":{"encoding":"inplace","label":"contract IBridge","numberOfBytes":"20"},"t_contract(IERC20Upgradeable)3379":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_contract(ITBTCVault)4821":{"encoding":"inplace","label":"contract ITBTCVault","numberOfBytes":"20"},"t_contract(IWormhole)5888":{"encoding":"inplace","label":"contract IWormhole","numberOfBytes":"20"},"t_contract(IWormholeRelayer)5928":{"encoding":"inplace","label":"contract IWormholeRelayer","numberOfBytes":"20"},"t_contract(IWormholeTokenBridge)6013":{"encoding":"inplace","label":"contract IWormholeTokenBridge","numberOfBytes":"20"},"t_contract(ReimbursementPool)2999":{"encoding":"inplace","label":"contract ReimbursementPool","numberOfBytes":"20"},"t_enum(DepositState)4848":{"encoding":"inplace","label":"enum L1BitcoinDepositor.DepositState","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_enum(DepositState)4848)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => enum L1BitcoinDepositor.DepositState)","numberOfBytes":"32","value":"t_enum(DepositState)4848"},"t_mapping(t_uint256,t_struct(GasReimbursement)4855_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct L1BitcoinDepositor.GasReimbursement)","numberOfBytes":"32","value":"t_struct(GasReimbursement)4855_storage"},"t_struct(GasReimbursement)4855_storage":{"encoding":"inplace","label":"struct L1BitcoinDepositor.GasReimbursement","members":[{"astId":4851,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"receiver","offset":0,"slot":"0","type":"t_address"},{"astId":4854,"contract":"contracts/l2/L1BitcoinDepositor.sol:L1BitcoinDepositor","label":"gasSpent","offset":20,"slot":"0","type":"t_uint96"}],"numberOfBytes":"32"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{"SATOSHI_MULTIPLIER()":{"notice":"Multiplier to convert satoshi to TBTC token units."},"attachL2BitcoinDepositor(address)":{"notice":"Sets the address of the `L2BitcoinDepositor` contract on the         corresponding L2 chain. This function solves the chicken-and-egg         problem of setting the `L2BitcoinDepositor` contract address         on the `L1BitcoinDepositor` contract and vice versa."},"bridge()":{"notice":"Bridge contract address."},"deposits(uint256)":{"notice":"Holds the deposit state, keyed by the deposit key calculated for         the individual deposit during the call to `initializeDeposit`         function."},"finalizeDeposit(uint256)":{"notice":"Finalizes the deposit process by transferring ERC20 L1 TBTC         to the L2 deposit owner. This function should be called after         the deposit was initialized with a call to `initializeDeposit`         function and after ERC20 L1 TBTC was minted by the tBTC Bridge         to the `L1BitcoinDepositor` contract. Please note several hours         may pass between `initializeDeposit`and `finalizeDeposit`.         If the reimbursement pool is attached, the function pays out         a gas and call's value refund to the caller (if the given         caller is authorized for refunds) as well as the deferred gas         refund to the caller of `initializeDeposit` corresponding to         the finalized deposit."},"finalizeDepositGasOffset()":{"notice":"Gas that is meant to balance the overall cost of deposit finalization.         Can be updated by the owner based on the current market conditions."},"gasReimbursements(uint256)":{"notice":"Holds deferred gas reimbursements for deposit initialization         (indexed by deposit key). Reimbursement for deposit         initialization is paid out upon deposit finalization. This is         because the tBTC Bridge accepts all (even invalid) deposits but         mints ERC20 TBTC only for the valid ones. Paying out the         reimbursement directly upon initialization would make the         reimbursement pool vulnerable to malicious actors that could         drain it by initializing invalid deposits."},"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":{"notice":"Initializes the deposit process on L1 by revealing the deposit         data (funding transaction and components of the P2(W)SH deposit         address) to the tBTC Bridge. Once tBTC minting is completed,         this call should be followed by a call to `finalizeDeposit`.         Callers of `initializeDeposit` are eligible for a gas refund         that is paid out upon deposit finalization (only if the         reimbursement pool is attached and the given caller is         authorized for refunds).         The Bitcoin funding transaction must transfer funds to a P2(W)SH         deposit address whose underlying script is built from the         following components:         <depositor-address> DROP         <depositor-extra-data> DROP         <blinding-factor> DROP         DUP HASH160 <signingGroupPubkeyHash> EQUAL         IF           CHECKSIG         ELSE           DUP HASH160 <refundPubkeyHash> EQUALVERIFY           <locktime> CHECKLOCKTIMEVERIFY DROP           CHECKSIG         ENDIF         Where:         <depositor-address> 20-byte L1 address of the         `L1BitcoinDepositor` contract.         <depositor-extra-data> L2 deposit owner address in the Wormhole         format, i.e. 32-byte value left-padded with 0.         <blinding-factor> 8-byte deposit blinding factor, as used in the         tBTC bridge.         <signingGroupPubkeyHash> The compressed Bitcoin public key (33         bytes and 02 or 03 prefix) of the deposit's wallet hashed in the         HASH160 Bitcoin opcode style. This must point to the active tBTC         bridge wallet.         <refundPubkeyHash> The compressed Bitcoin public key (33 bytes         and 02 or 03 prefix) that can be used to make the deposit refund         after the tBTC bridge refund locktime passed. Hashed in the         HASH160 Bitcoin opcode style. This is needed only as a security         measure protecting the user in case tBTC bridge completely stops         functioning.         <locktime> The Bitcoin script refund locktime (4-byte LE),         according to tBTC bridge rules.         Please consult tBTC `Bridge.revealDepositWithExtraData` function         documentation for more information."},"initializeDepositGasOffset()":{"notice":"Gas that is meant to balance the overall cost of deposit initialization.         Can be updated by the owner based on the current market conditions."},"l2BitcoinDepositor()":{"notice":"tBTC `L2BitcoinDepositor` contract on the corresponding L2 chain."},"l2ChainId()":{"notice":"Wormhole chain ID of the corresponding L2 chain."},"l2FinalizeDepositGasLimit()":{"notice":"Gas limit necessary to execute the L2 part of the deposit         finalization. This value is used to calculate the payment for         the Wormhole Relayer that is responsible to execute the         deposit finalization on the corresponding L2 chain. Can be         updated by the owner."},"l2WormholeGateway()":{"notice":"tBTC `L2WormholeGateway` contract on the corresponding L2 chain."},"quoteFinalizeDeposit()":{"notice":"Quotes the payment that must be attached to the `finalizeDeposit`         function call. The payment is necessary to cover the cost of         the Wormhole Relayer that is responsible for executing the         deposit finalization on the corresponding L2 chain."},"reimbursementAuthorizations(address)":{"notice":"Set of addresses that are authorized to receive gas reimbursements         for deposit initialization and finalization. The authorization is         granted by the contract owner."},"tbtcToken()":{"notice":"ERC20 L1 TBTC token contract."},"tbtcVault()":{"notice":"TBTCVault contract address."},"updateGasOffsetParameters(uint256,uint256)":{"notice":"Updates the values of gas offset parameters."},"updateL2FinalizeDepositGasLimit(uint256)":{"notice":"Updates the gas limit necessary to execute the L2 part of the         deposit finalization."},"updateReimbursementAuthorization(address,bool)":{"notice":"Updates the reimbursement authorization for the given address."},"wormhole()":{"notice":"`Wormhole` core contract on L1."},"wormholeRelayer()":{"notice":"`WormholeRelayer` contract on L1."},"wormholeTokenBridge()":{"notice":"Wormhole `TokenBridge` contract on L1."}},"notice":"This contract is part of the direct bridging mechanism allowing         users to obtain ERC20 TBTC on supported L2 chains, without the need         to interact with the L1 tBTC ledger chain where minting occurs.         `L1BitcoinDepositor` is deployed on the L1 chain and interacts with         their L2 counterpart, the `L2BitcoinDepositor`, deployed on the given         L2 chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor` pair is         responsible for a specific L2 chain.         The outline of the direct bridging mechanism is as follows:         1. An L2 user issues a Bitcoin funding transaction to a P2(W)SH            deposit address that embeds the `L1BitcoinDepositor` contract            and L2 user addresses. The `L1BitcoinDepositor` contract serves            as the actual depositor on the L1 chain while the L2 user            address is set as the deposit owner who will receive the            minted ERC20 TBTC.         2. The data about the Bitcoin funding transaction and deposit            address are passed to the relayer. In the first iteration of            the direct bridging mechanism, this is achieved using an            on-chain event emitted by the `L2BitcoinDepositor` contract.            Further iterations assumes those data are passed off-chain, e.g.            through a REST API exposed by the relayer.         3. The relayer uses the data to initialize a deposit on the L1            chain by calling the `initializeDeposit` function of the            `L1BitcoinDepositor` contract. The `initializeDeposit` function            reveals the deposit to the tBTC Bridge so minting of ERC20 L1 TBTC            can occur.         4. Once minting is complete, the `L1BitcoinDepositor` contract            receives minted ERC20 L1 TBTC. The relayer then calls the            `finalizeDeposit` function of the `L1BitcoinDepositor` contract            to transfer the minted ERC20 L1 TBTC to the L2 user address. This            is achieved using the Wormhole protocol. First, the `finalizeDeposit`            function initiates a Wormhole token transfer that locks the ERC20            L1 TBTC within the Wormhole Token Bridge contract and assigns            Wormhole-wrapped L2 TBTC to the corresponding `L2WormholeGateway`            contract. Then, `finalizeDeposit` notifies the `L2BitcoinDepositor`            contract by sending a Wormhole message containing the VAA            of the Wormhole token transfer. The `L2BitcoinDepositor` contract            receives the Wormhole message, and calls the `L2WormholeGateway`            contract that redeems Wormhole-wrapped L2 TBTC from the Wormhole            Token Bridge and uses it to mint canonical L2 TBTC to the L2 user            address.","version":1}}},"contracts/l2/L2BitcoinDepositor.sol":{"IL2WormholeGateway":{"abi":[{"inputs":[{"internalType":"bytes","name":"vaa","type":"bytes"}],"name":"receiveTbtc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"receiveTbtc(bytes)":{"details":"See ./L2WormholeGateway.sol#receiveTbtc"}},"title":"IL2WormholeGateway","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"receiveTbtc(bytes)":"5d21a596"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"vaa\",\"type\":\"bytes\"}],\"name\":\"receiveTbtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveTbtc(bytes)\":{\"details\":\"See ./L2WormholeGateway.sol#receiveTbtc\"}},\"title\":\"IL2WormholeGateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface to the `L2WormholeGateway` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/L2BitcoinDepositor.sol\":\"IL2WormholeGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/L2BitcoinDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../integrator/IBridge.sol\\\";\\nimport \\\"./Wormhole.sol\\\";\\n\\n/// @title IL2WormholeGateway\\n/// @notice Interface to the `L2WormholeGateway` contract.\\ninterface IL2WormholeGateway {\\n    /// @dev See ./L2WormholeGateway.sol#receiveTbtc\\n    function receiveTbtc(bytes memory vaa) external;\\n}\\n\\n/// @title L2BitcoinDepositor\\n/// @notice This contract is part of the direct bridging mechanism allowing\\n///         users to obtain ERC20 TBTC on supported L2 chains, without the need\\n///         to interact with the L1 tBTC ledger chain where minting occurs.\\n///\\n///         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with\\n///         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the\\n///         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`\\n///         pair is responsible for a specific L2 chain.\\n///\\n///         Please consult the `L1BitcoinDepositor` docstring for an\\n///         outline of the direct bridging mechanism\\n// slither-disable-next-line locked-ether\\ncontract L2BitcoinDepositor is IWormholeReceiver, OwnableUpgradeable {\\n    /// @notice `WormholeRelayer` contract on L2.\\n    IWormholeRelayer public wormholeRelayer;\\n    /// @notice tBTC `L2WormholeGateway` contract on L2.\\n    IL2WormholeGateway public l2WormholeGateway;\\n    /// @notice Wormhole chain ID of the corresponding L1 chain.\\n    uint16 public l1ChainId;\\n    /// @notice tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain.\\n    address public l1BitcoinDepositor;\\n\\n    event DepositInitialized(\\n        IBridgeTypes.BitcoinTxInfo fundingTx,\\n        IBridgeTypes.DepositRevealInfo reveal,\\n        address indexed l2DepositOwner,\\n        address indexed l2Sender\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _wormholeRelayer,\\n        address _l2WormholeGateway,\\n        uint16 _l1ChainId\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        require(\\n            _wormholeRelayer != address(0),\\n            \\\"WormholeRelayer address cannot be zero\\\"\\n        );\\n        require(\\n            _l2WormholeGateway != address(0),\\n            \\\"L2WormholeGateway address cannot be zero\\\"\\n        );\\n\\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\\n        l2WormholeGateway = IL2WormholeGateway(_l2WormholeGateway);\\n        l1ChainId = _l1ChainId;\\n    }\\n\\n    /// @notice Sets the address of the `L1BitcoinDepositor` contract on the\\n    ///         corresponding L1 chain. This function solves the chicken-and-egg\\n    ///         problem of setting the `L1BitcoinDepositor` contract address\\n    ///         on the `L2BitcoinDepositor` contract and vice versa.\\n    /// @param _l1BitcoinDepositor Address of the `L1BitcoinDepositor` contract.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the contract owner,\\n    ///      - The address must not be set yet,\\n    ///      - The new address must not be 0x0.\\n    function attachL1BitcoinDepositor(address _l1BitcoinDepositor)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            l1BitcoinDepositor == address(0),\\n            \\\"L1 Bitcoin Depositor already set\\\"\\n        );\\n        require(\\n            _l1BitcoinDepositor != address(0),\\n            \\\"L1 Bitcoin Depositor must not be 0x0\\\"\\n        );\\n        l1BitcoinDepositor = _l1BitcoinDepositor;\\n    }\\n\\n    /// @notice Initializes the deposit process on L2 by emitting an event\\n    ///         containing the deposit data (funding transaction and\\n    ///         components of the P2(W)SH deposit address). The event is\\n    ///         supposed to be picked up by the relayer and used to initialize\\n    ///         the deposit on L1 through the `L1BitcoinDepositor` contract.\\n    /// @param fundingTx Bitcoin funding transaction data.\\n    /// @param reveal Deposit reveal data.\\n    /// @param l2DepositOwner Address of the L2 deposit owner.\\n    /// @dev The alternative approach of using Wormhole Relayer to send the\\n    ///      deposit data to L1 was considered. However, it turned out to be\\n    ///      too expensive. For example, relying deposit data from Base L2 to\\n    ///      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).\\n    ///      Moreover, the next iteration of the direct bridging mechanism\\n    ///      assumes that no L2 transaction will be required to initialize the\\n    ///      deposit and the relayer should obtain the deposit data off-chain.\\n    ///      There is a high chance this function will be removed then.\\n    ///      That said, there was no sense to explore another cross-chain\\n    ///      messaging solutions. Relying on simple on-chain event and custom\\n    ///      off-chain relayer seems to be the most reasonable way to go. It\\n    ///      also aligns with the future direction of the direct bridging mechanism.\\n    function initializeDeposit(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        address l2DepositOwner\\n    ) external {\\n        emit DepositInitialized(fundingTx, reveal, l2DepositOwner, msg.sender);\\n    }\\n\\n    /// @notice Receives Wormhole messages originating from the corresponding\\n    ///         `L1BitcoinDepositor` contract that lives on the L1 chain.\\n    ///         Messages are issued upon deposit finalization on L1 and\\n    ///         are supposed to carry the VAA of the Wormhole token transfer of\\n    ///         ERC20 L1 TBTC to the L2 chain. This contract performs some basic\\n    ///         checks and forwards the VAA to the `L2WormholeGateway` contract\\n    ///         that is authorized to withdraw the Wormhole-wrapped L2 TBTC\\n    ///         from the Wormhole Token Bridge (representing the ERC20 TBTC\\n    ///         locked on L1) and use it to mint the canonical L2 TBTC for the\\n    ///         deposit owner.\\n    /// @param additionalVaas Additional VAAs that are part of the Wormhole message.\\n    /// @param sourceAddress Address of the source of the message (in Wormhole format).\\n    /// @param sourceChain Wormhole chain ID of the source chain.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the Wormhole Relayer contract,\\n    ///      - The source chain must be the expected L1 chain,\\n    ///      - The source address must be the corresponding\\n    ///        `L1BitcoinDepositor` contract,\\n    ///      - The message must carry exactly 1 additional VAA key representing\\n    ///        the token transfer.\\n    function receiveWormholeMessages(\\n        bytes memory,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32\\n    ) external payable {\\n        require(\\n            msg.sender == address(wormholeRelayer),\\n            \\\"Caller is not Wormhole Relayer\\\"\\n        );\\n\\n        require(\\n            sourceChain == l1ChainId,\\n            \\\"Source chain is not the expected L1 chain\\\"\\n        );\\n\\n        require(\\n            WormholeUtils.fromWormholeAddress(sourceAddress) ==\\n                l1BitcoinDepositor,\\n            \\\"Source address is not the expected L1 Bitcoin depositor\\\"\\n        );\\n\\n        require(\\n            additionalVaas.length == 1,\\n            \\\"Expected 1 additional VAA key for token transfer\\\"\\n        );\\n\\n        l2WormholeGateway.receiveTbtc(additionalVaas[0]);\\n    }\\n}\\n\",\"keccak256\":\"0xcdca450675748cbcbd948ccdca051bd1bf361d75b658fc516eab327837324ce6\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface to the `L2WormholeGateway` contract.","version":1}},"L2BitcoinDepositor":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"components":[{"internalType":"bytes4","name":"version","type":"bytes4"},{"internalType":"bytes","name":"inputVector","type":"bytes"},{"internalType":"bytes","name":"outputVector","type":"bytes"},{"internalType":"bytes4","name":"locktime","type":"bytes4"}],"indexed":false,"internalType":"struct IBridgeTypes.BitcoinTxInfo","name":"fundingTx","type":"tuple"},{"components":[{"internalType":"uint32","name":"fundingOutputIndex","type":"uint32"},{"internalType":"bytes8","name":"blindingFactor","type":"bytes8"},{"internalType":"bytes20","name":"walletPubKeyHash","type":"bytes20"},{"internalType":"bytes20","name":"refundPubKeyHash","type":"bytes20"},{"internalType":"bytes4","name":"refundLocktime","type":"bytes4"},{"internalType":"address","name":"vault","type":"address"}],"indexed":false,"internalType":"struct IBridgeTypes.DepositRevealInfo","name":"reveal","type":"tuple"},{"indexed":true,"internalType":"address","name":"l2DepositOwner","type":"address"},{"indexed":true,"internalType":"address","name":"l2Sender","type":"address"}],"name":"DepositInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"_l1BitcoinDepositor","type":"address"}],"name":"attachL1BitcoinDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_wormholeRelayer","type":"address"},{"internalType":"address","name":"_l2WormholeGateway","type":"address"},{"internalType":"uint16","name":"_l1ChainId","type":"uint16"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes4","name":"version","type":"bytes4"},{"internalType":"bytes","name":"inputVector","type":"bytes"},{"internalType":"bytes","name":"outputVector","type":"bytes"},{"internalType":"bytes4","name":"locktime","type":"bytes4"}],"internalType":"struct IBridgeTypes.BitcoinTxInfo","name":"fundingTx","type":"tuple"},{"components":[{"internalType":"uint32","name":"fundingOutputIndex","type":"uint32"},{"internalType":"bytes8","name":"blindingFactor","type":"bytes8"},{"internalType":"bytes20","name":"walletPubKeyHash","type":"bytes20"},{"internalType":"bytes20","name":"refundPubKeyHash","type":"bytes20"},{"internalType":"bytes4","name":"refundLocktime","type":"bytes4"},{"internalType":"address","name":"vault","type":"address"}],"internalType":"struct IBridgeTypes.DepositRevealInfo","name":"reveal","type":"tuple"},{"internalType":"address","name":"l2DepositOwner","type":"address"}],"name":"initializeDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"l1BitcoinDepositor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l1ChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2WormholeGateway","outputs":[{"internalType":"contract IL2WormholeGateway","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes[]","name":"additionalVaas","type":"bytes[]"},{"internalType":"bytes32","name":"sourceAddress","type":"bytes32"},{"internalType":"uint16","name":"sourceChain","type":"uint16"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"receiveWormholeMessages","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wormholeRelayer","outputs":[{"internalType":"contract IWormholeRelayer","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"attachL1BitcoinDepositor(address)":{"details":"Requirements:      - Can be called only by the contract owner,      - The address must not be set yet,      - The new address must not be 0x0.","params":{"_l1BitcoinDepositor":"Address of the `L1BitcoinDepositor` contract."}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":{"details":"The alternative approach of using Wormhole Relayer to send the      deposit data to L1 was considered. However, it turned out to be      too expensive. For example, relying deposit data from Base L2 to      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).      Moreover, the next iteration of the direct bridging mechanism      assumes that no L2 transaction will be required to initialize the      deposit and the relayer should obtain the deposit data off-chain.      There is a high chance this function will be removed then.      That said, there was no sense to explore another cross-chain      messaging solutions. Relying on simple on-chain event and custom      off-chain relayer seems to be the most reasonable way to go. It      also aligns with the future direction of the direct bridging mechanism.","params":{"fundingTx":"Bitcoin funding transaction data.","l2DepositOwner":"Address of the L2 deposit owner.","reveal":"Deposit reveal data."}},"owner()":{"details":"Returns the address of the current owner."},"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":{"details":"Requirements:      - Can be called only by the Wormhole Relayer contract,      - The source chain must be the expected L1 chain,      - The source address must be the corresponding        `L1BitcoinDepositor` contract,      - The message must carry exactly 1 additional VAA key representing        the token transfer.","params":{"additionalVaas":"Additional VAAs that are part of the Wormhole message.","sourceAddress":"Address of the source of the message (in Wormhole format).","sourceChain":"Wormhole chain ID of the source chain."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"L2BitcoinDepositor","version":1},"evm":{"bytecode":{"functionDebugData":{"@_5697":{"entryPoint":null,"id":5697,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_3282":{"entryPoint":40,"id":3282,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:21","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:21"},"nodeType":"YulFunctionCall","src":"113:19:21"},"nodeType":"YulExpressionStatement","src":"113:19:21"},{"nodeType":"YulAssignment","src":"141:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:21"},"nodeType":"YulFunctionCall","src":"156:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:21","type":""}],"src":"7:169:21"},{"body":{"nodeType":"YulBlock","src":"288:120:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:21"},"nodeType":"YulFunctionCall","src":"306:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:21","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:21"},"nodeType":"YulFunctionCall","src":"299:58:21"},"nodeType":"YulExpressionStatement","src":"299:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:21"},"nodeType":"YulFunctionCall","src":"374:15:21"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:21","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:21"},"nodeType":"YulFunctionCall","src":"367:34:21"},"nodeType":"YulExpressionStatement","src":"367:34:21"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:21","type":""}],"src":"182:226:21"},{"body":{"nodeType":"YulBlock","src":"560:220:21","statements":[{"nodeType":"YulAssignment","src":"570:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:21","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:21"},"nodeType":"YulFunctionCall","src":"577:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:21"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:21"},"nodeType":"YulFunctionCall","src":"653:93:21"},"nodeType":"YulExpressionStatement","src":"653:93:21"},{"nodeType":"YulAssignment","src":"755:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:21"},"nodeType":"YulFunctionCall","src":"762:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:21"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:21","type":""}],"src":"414:366:21"},{"body":{"nodeType":"YulBlock","src":"957:248:21","statements":[{"nodeType":"YulAssignment","src":"967:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:21"},"nodeType":"YulFunctionCall","src":"975:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:21"},"nodeType":"YulFunctionCall","src":"1010:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:21"},"nodeType":"YulFunctionCall","src":"1029:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:21"},"nodeType":"YulFunctionCall","src":"1003:47:21"},"nodeType":"YulExpressionStatement","src":"1003:47:21"},{"nodeType":"YulAssignment","src":"1059:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:21"},"nodeType":"YulFunctionCall","src":"1067:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:21","type":""}],"src":"786:419:21"},{"body":{"nodeType":"YulBlock","src":"1254:43:21","statements":[{"nodeType":"YulAssignment","src":"1264:27:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:21"},"nodeType":"YulFunctionCall","src":"1275:16:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:21"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:21","type":""}],"src":"1211:86:21"},{"body":{"nodeType":"YulBlock","src":"1364:51:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:21"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:21"},"nodeType":"YulFunctionCall","src":"1386:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:21"},"nodeType":"YulFunctionCall","src":"1374:35:21"},"nodeType":"YulExpressionStatement","src":"1374:35:21"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:21","type":""}],"src":"1303:112:21"},{"body":{"nodeType":"YulBlock","src":"1515:120:21","statements":[{"nodeType":"YulAssignment","src":"1525:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:21"},"nodeType":"YulFunctionCall","src":"1533:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:21"},"nodeType":"YulFunctionCall","src":"1610:17:21"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:21"},"nodeType":"YulFunctionCall","src":"1561:67:21"},"nodeType":"YulExpressionStatement","src":"1561:67:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:21","type":""}],"src":"1421:214:21"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1EB0 DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7EBEF529 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x7EBEF529 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xAA82E33B EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xDA25B725 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xE1551FC9 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x226 JUMPI PUSH2 0x9C JUMP JUMPDEST DUP1 PUSH4 0x12622E5B EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x31446C46 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x529DCA32 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x642DC033 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x13A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH2 0x24F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEE SWAP2 SWAP1 PUSH2 0xD61 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10A SWAP2 SWAP1 PUSH2 0x101C JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x690 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1182 JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x962 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x98C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x129A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x210 PUSH2 0x9D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0xD61 JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x66 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x26B PUSH2 0xA81 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x36B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x362 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x436 SWAP1 PUSH2 0x1410 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x490 SWAP1 PUSH2 0x14A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4DB DUP5 PUSH2 0xAFF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x531 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x528 SWAP1 PUSH2 0x1534 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP5 MLOAD EQ PUSH2 0x575 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x56C SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D21A596 DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C7 JUMPI PUSH2 0x5C6 PUSH2 0x15E6 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EB SWAP2 SWAP1 PUSH2 0x1694 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x619 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x69A2A6D267E87F99180657174CA85389598D457BA949435EE4940F621BB849CF DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x683 SWAP3 SWAP2 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x698 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x6A2 PUSH1 0x0 PUSH2 0xB0C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x6D5 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x702 JUMPI POP PUSH2 0x6E4 ADDRESS PUSH2 0xBD2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x738 SWAP1 PUSH2 0x1B43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x786 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7EC SWAP1 PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85B SWAP1 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x953 SWAP2 SWAP1 PUSH2 0x1CCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xA06 PUSH2 0xA81 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA6C SWAP1 PUSH2 0x1D5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7E DUP2 PUSH2 0xB0C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xA89 PUSH2 0xC4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAA7 PUSH2 0x962 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAF4 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4C PUSH2 0xC56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9C SWAP1 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB5 PUSH2 0xCB0 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0xB0C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCCE DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2E DUP3 PUSH2 0xD03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD3E DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP2 EQ PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD5B DUP2 PUSH2 0xD35 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD77 JUMPI PUSH2 0xD76 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD85 DUP5 DUP3 DUP6 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDE1 DUP3 PUSH2 0xD98 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE00 JUMPI PUSH2 0xDFF PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE13 PUSH2 0xCEF JUMP JUMPDEST SWAP1 POP PUSH2 0xE1F DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE3F JUMPI PUSH2 0xE3E PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST PUSH2 0xE48 DUP3 PUSH2 0xD98 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE77 PUSH2 0xE72 DUP5 PUSH2 0xE24 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xD93 JUMP JUMPDEST JUMPDEST PUSH2 0xE9E DUP5 DUP3 DUP6 PUSH2 0xE55 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xECB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEEF JUMPI PUSH2 0xEEE PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF18 PUSH2 0xF13 DUP5 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xF3B JUMPI PUSH2 0xF3A PUSH2 0xF00 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF82 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF60 JUMPI PUSH2 0xF5F PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH2 0xF6D DUP10 DUP3 PUSH2 0xEA6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF3D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFB1 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xF05 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0xFBA JUMP JUMPDEST DUP2 EQ PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFEA DUP2 PUSH2 0xFC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFF9 DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1016 DUP2 PUSH2 0xFF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1038 JUMPI PUSH2 0x1037 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1056 JUMPI PUSH2 0x1055 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x1062 DUP9 DUP3 DUP10 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1083 JUMPI PUSH2 0x1082 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x108F DUP9 DUP3 DUP10 ADD PUSH2 0xF8C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x10A0 DUP9 DUP3 DUP10 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x10B1 DUP9 DUP3 DUP10 ADD PUSH2 0x1007 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x10C2 DUP9 DUP3 DUP10 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10E9 PUSH2 0x10CF JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1109 JUMPI PUSH2 0x1108 PUSH2 0x10CF JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x114A JUMPI PUSH2 0x1149 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x1156 DUP7 DUP3 DUP8 ADD PUSH2 0x10D4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1167 DUP7 DUP3 DUP8 ADD PUSH2 0x10F3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x1178 DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x119B JUMPI PUSH2 0x119A PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11A9 DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x11BA DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x11CB DUP7 DUP3 DUP8 ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x11DE DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11F9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1224 PUSH2 0x121F PUSH2 0x121A DUP5 PUSH2 0xD03 JUMP JUMPDEST PUSH2 0x11FF JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1236 DUP3 PUSH2 0x1209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1248 DUP3 PUSH2 0x122B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1258 DUP2 PUSH2 0x123D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1273 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x124F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1284 DUP3 PUSH2 0x122B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1294 DUP2 PUSH2 0x1279 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12AF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x128B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4C3120426974636F696E204465706F7369746F7220616C726561647920736574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FC PUSH1 0x20 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1307 DUP3 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x132B DUP2 PUSH2 0x12EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C3120426974636F696E204465706F7369746F72206D757374206E6F74206265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030783000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x138E PUSH1 0x24 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1399 DUP3 PUSH2 0x1332 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13BD DUP2 PUSH2 0x1381 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616C6C6572206973206E6F7420576F726D686F6C652052656C617965720000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13FA PUSH1 0x1E DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1405 DUP3 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1429 DUP2 PUSH2 0x13ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x536F7572636520636861696E206973206E6F7420746865206578706563746564 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x204C3120636861696E0000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x148C PUSH1 0x29 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1497 DUP3 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14BB DUP2 PUSH2 0x147F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x536F757263652061646472657373206973206E6F742074686520657870656374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6564204C3120426974636F696E206465706F7369746F72000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151E PUSH1 0x37 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1529 DUP3 PUSH2 0x14C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x154D DUP2 PUSH2 0x1511 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45787065637465642031206164646974696F6E616C20564141206B657920666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7220746F6B656E207472616E7366657200000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B0 PUSH1 0x30 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x15BB DUP3 PUSH2 0x1554 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15DF DUP2 PUSH2 0x15A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1666 DUP3 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x1670 DUP2 DUP6 PUSH2 0x1620 JUMP JUMPDEST SWAP4 POP PUSH2 0x1680 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1631 JUMP JUMPDEST PUSH2 0x1689 DUP2 PUSH2 0xD98 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16AE DUP2 DUP5 PUSH2 0x165B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16EB DUP2 PUSH2 0x16B6 JUMP JUMPDEST DUP2 EQ PUSH2 0x16F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1708 DUP2 PUSH2 0x16E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171D PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x16F9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x172E DUP2 PUSH2 0x16B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP5 CALLDATASIZE SUB SUB DUP2 SLT PUSH2 0x1760 JUMPI PUSH2 0x175F PUSH2 0x173E JUMP JUMPDEST JUMPDEST DUP4 DUP2 ADD SWAP3 POP DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1788 JUMPI PUSH2 0x1787 PUSH2 0x1734 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x179E JUMPI PUSH2 0x179D PUSH2 0x1739 JUMP JUMPDEST JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C3 DUP4 DUP6 PUSH2 0x17A6 JUMP JUMPDEST SWAP4 POP PUSH2 0x17D0 DUP4 DUP6 DUP5 PUSH2 0xE55 JUMP JUMPDEST PUSH2 0x17D9 DUP4 PUSH2 0xD98 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH2 0x17F7 PUSH1 0x0 DUP5 ADD DUP5 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1804 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP PUSH2 0x1812 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1743 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x1825 DUP4 DUP3 DUP5 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1836 PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x1743 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x1849 DUP4 DUP3 DUP5 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x185A PUSH1 0x60 DUP5 ADD DUP5 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1867 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x188B DUP2 PUSH2 0x1872 JUMP JUMPDEST DUP2 EQ PUSH2 0x1896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A8 DUP2 PUSH2 0x1882 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BD PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1899 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18CE DUP2 PUSH2 0x1872 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1909 DUP2 PUSH2 0x18D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1926 DUP2 PUSH2 0x1900 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x193B PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1917 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x194C DUP2 PUSH2 0x18D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1987 DUP2 PUSH2 0x1952 JUMP JUMPDEST DUP2 EQ PUSH2 0x1992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19A4 DUP2 PUSH2 0x197E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B9 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1995 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19CA DUP2 PUSH2 0x1952 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DF PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0xD4C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F0 DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH2 0x1A07 PUSH1 0x0 DUP4 ADD DUP4 PUSH2 0x18AE JUMP JUMPDEST PUSH2 0x1A14 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x18C5 JUMP JUMPDEST POP PUSH2 0x1A22 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x192C JUMP JUMPDEST PUSH2 0x1A2F PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1943 JUMP JUMPDEST POP PUSH2 0x1A3D PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x1A4A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x19C1 JUMP JUMPDEST POP PUSH2 0x1A58 PUSH1 0x60 DUP4 ADD DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x1A65 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x19C1 JUMP JUMPDEST POP PUSH2 0x1A73 PUSH1 0x80 DUP4 ADD DUP4 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1A80 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP PUSH2 0x1A8E PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x19D0 JUMP JUMPDEST PUSH2 0x1A9B PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x19E7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ABB DUP2 DUP6 PUSH2 0x17E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x19F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B2D PUSH1 0x2E DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B38 DUP3 PUSH2 0x1AD1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B5C DUP2 PUSH2 0x1B20 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6552656C6179657220616464726573732063616E6E6F742062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65207A65726F0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBF PUSH1 0x26 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BCA DUP3 PUSH2 0x1B63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BEE DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C32576F726D686F6C654761746577617920616464726573732063616E6E6F74 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265207A65726F000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C51 PUSH1 0x28 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C5C DUP3 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C80 DUP2 PUSH2 0x1C44 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB9 PUSH2 0x1CB4 PUSH2 0x1CAF DUP5 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x1C91 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CC9 DUP2 PUSH2 0x1C9E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1CC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D46 PUSH1 0x26 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D51 DUP3 PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D75 DUP2 PUSH2 0x1D39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB2 PUSH1 0x20 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DBD DUP3 PUSH2 0x1D7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DE1 DUP2 PUSH2 0x1DA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E44 PUSH1 0x2B DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4F DUP3 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E73 DUP2 PUSH2 0x1E37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 MULMOD MSIZE EXTCODESIZE BALANCE CALLDATACOPY MSTORE DUP10 GT CALLER 0x24 0xA6 0xCB 0xC3 EQ 0xA9 SLOAD 0x2A PUSH13 0xF25C7F232016A4F467B68FB143 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"2094:6323:19:-:0;;;2843:53;;;;;;;;;;2867:22;:20;;;:22;;:::i;:::-;2094:6323;;5939:280:6;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:21:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;2094:6323:19:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_3027":{"entryPoint":3061,"id":3027,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_3038":{"entryPoint":3158,"id":3038,"parameterSlots":0,"returnSlots":0},"@_checkOwner_3069":{"entryPoint":2689,"id":3069,"parameterSlots":0,"returnSlots":0},"@_msgSender_4149":{"entryPoint":3150,"id":4149,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_3126":{"entryPoint":2828,"id":3126,"parameterSlots":1,"returnSlots":0},"@attachL1BitcoinDepositor_5781":{"entryPoint":611,"id":5781,"parameterSlots":1,"returnSlots":0},"@fromWormholeAddress_6054":{"entryPoint":2815,"id":6054,"parameterSlots":1,"returnSlots":1},"@initializeDeposit_5802":{"entryPoint":1572,"id":5802,"parameterSlots":3,"returnSlots":0},"@initialize_5748":{"entryPoint":1700,"id":5748,"parameterSlots":3,"returnSlots":0},"@isContract_3809":{"entryPoint":3026,"id":3809,"parameterSlots":1,"returnSlots":1},"@l1BitcoinDepositor_5677":{"entryPoint":2520,"id":5677,"parameterSlots":0,"returnSlots":0},"@l1ChainId_5674":{"entryPoint":591,"id":5674,"parameterSlots":0,"returnSlots":0},"@l2WormholeGateway_5671":{"entryPoint":2444,"id":5671,"parameterSlots":0,"returnSlots":0},"@owner_3055":{"entryPoint":2402,"id":3055,"parameterSlots":0,"returnSlots":1},"@receiveWormholeMessages_5862":{"entryPoint":943,"id":5862,"parameterSlots":5,"returnSlots":0},"@renounceOwnership_3083":{"entryPoint":1680,"id":3083,"parameterSlots":0,"returnSlots":0},"@transferOwnership_3106":{"entryPoint":2558,"id":3106,"parameterSlots":1,"returnSlots":0},"@wormholeRelayer_5667":{"entryPoint":2482,"id":5667,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":3845,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":3684,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3404,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":3980,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes20":{"entryPoint":6549,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":4059,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5881,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes8":{"entryPoint":6423,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":3750,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr":{"entryPoint":4308,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr":{"entryPoint":4339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":4103,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32":{"entryPoint":6297,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3425,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint16":{"entryPoint":4482,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32t_uint16t_bytes32":{"entryPoint":4124,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address":{"entryPoint":4370,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address":{"entryPoint":6631,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4565,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes20_to_t_bytes20":{"entryPoint":6593,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes4_to_t_bytes4":{"entryPoint":5925,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes8_to_t_bytes8":{"entryPoint":6467,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr":{"entryPoint":6071,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":5723,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IL2WormholeGateway_$5658_to_t_address_fromStack":{"entryPoint":4687,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack":{"entryPoint":4747,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":7360,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4847,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":7481,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967_to_t_string_memory_ptr_fromStack":{"entryPoint":5393,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92_to_t_string_memory_ptr_fromStack":{"entryPoint":5247,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":6944,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":7589,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack":{"entryPoint":7090,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3_to_t_string_memory_ptr_fromStack":{"entryPoint":5101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae_to_t_string_memory_ptr_fromStack":{"entryPoint":5539,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":7735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314_to_t_string_memory_ptr_fromStack":{"entryPoint":4993,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack":{"entryPoint":7236,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack":{"entryPoint":6116,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_struct$_DepositRevealInfo_$4744_calldata_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack":{"entryPoint":6646,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":3269,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32":{"entryPoint":6341,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":4580,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IL2WormholeGateway_$5658__to_t_address__fromStack_reversed":{"entryPoint":4702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed":{"entryPoint":4762,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":7375,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4882,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7516,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5428,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5282,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6979,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7624,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7125,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5136,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5574,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7770,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5028,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_t_struct$_DepositRevealInfo_$4744_calldata_ptr__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr__fromStack_reversed":{"entryPoint":6817,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":3284,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":3593,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":3311,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":3796,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":3620,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":5653,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr":{"entryPoint":6054,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":5664,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":4789,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_address":{"entryPoint":6608,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_bytes20":{"entryPoint":6570,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_bytes4":{"entryPoint":5902,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_bytes8":{"entryPoint":6444,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_bytes_calldata_ptr":{"entryPoint":5955,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_t_uint32":{"entryPoint":6318,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3363,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes20":{"entryPoint":6482,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4026,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5814,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes8":{"entryPoint":6356,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":7303,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":3255,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3331,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":6258,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":7313,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IL2WormholeGateway_$5658_to_t_address":{"entryPoint":4669,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IWormholeRelayer_$5928_to_t_address":{"entryPoint":4729,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":7326,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":4651,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":4617,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":3669,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5681,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":3544,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":4607,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":5606,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3497,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2":{"entryPoint":5940,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":3470,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":4303,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20":{"entryPoint":5945,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":3840,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":3475,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":3326,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4":{"entryPoint":5950,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3321,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3480,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6":{"entryPoint":4806,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":7402,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967":{"entryPoint":5314,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92":{"entryPoint":5168,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":6865,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":7548,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0":{"entryPoint":7011,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3":{"entryPoint":5060,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae":{"entryPoint":5460,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":7656,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314":{"entryPoint":4914,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349":{"entryPoint":7157,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3381,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes20":{"entryPoint":6526,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":4036,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5858,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes8":{"entryPoint":6400,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint16":{"entryPoint":4080,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":6274,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:34289:21","statements":[{"body":{"nodeType":"YulBlock","src":"51:45:21","statements":[{"nodeType":"YulAssignment","src":"61:29:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"76:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"83:6:21","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"72:3:21"},"nodeType":"YulFunctionCall","src":"72:18:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"61:7:21"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"43:7:21","type":""}],"src":"7:89:21"},{"body":{"nodeType":"YulBlock","src":"165:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"182:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"204:5:21"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"187:16:21"},"nodeType":"YulFunctionCall","src":"187:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"175:6:21"},"nodeType":"YulFunctionCall","src":"175:36:21"},"nodeType":"YulExpressionStatement","src":"175:36:21"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"153:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"160:3:21","type":""}],"src":"102:115:21"},{"body":{"nodeType":"YulBlock","src":"319:122:21","statements":[{"nodeType":"YulAssignment","src":"329:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"341:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"352:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"337:3:21"},"nodeType":"YulFunctionCall","src":"337:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"329:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"420:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"431:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"416:3:21"},"nodeType":"YulFunctionCall","src":"416:17:21"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"365:41:21"},"nodeType":"YulFunctionCall","src":"365:69:21"},"nodeType":"YulExpressionStatement","src":"365:69:21"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"291:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"303:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"314:4:21","type":""}],"src":"223:218:21"},{"body":{"nodeType":"YulBlock","src":"487:35:21","statements":[{"nodeType":"YulAssignment","src":"497:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"513:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"507:5:21"},"nodeType":"YulFunctionCall","src":"507:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"497:6:21"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"480:6:21","type":""}],"src":"447:75:21"},{"body":{"nodeType":"YulBlock","src":"617:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"634:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"637:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"627:6:21"},"nodeType":"YulFunctionCall","src":"627:12:21"},"nodeType":"YulExpressionStatement","src":"627:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"528:117:21"},{"body":{"nodeType":"YulBlock","src":"740:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"757:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"760:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"750:6:21"},"nodeType":"YulFunctionCall","src":"750:12:21"},"nodeType":"YulExpressionStatement","src":"750:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"651:117:21"},{"body":{"nodeType":"YulBlock","src":"819:81:21","statements":[{"nodeType":"YulAssignment","src":"829:65:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"844:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"851:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"840:3:21"},"nodeType":"YulFunctionCall","src":"840:54:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"829:7:21"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"801:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"811:7:21","type":""}],"src":"774:126:21"},{"body":{"nodeType":"YulBlock","src":"951:51:21","statements":[{"nodeType":"YulAssignment","src":"961:35:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"972:17:21"},"nodeType":"YulFunctionCall","src":"972:24:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"961:7:21"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"933:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"943:7:21","type":""}],"src":"906:96:21"},{"body":{"nodeType":"YulBlock","src":"1051:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"1108:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1117:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1120:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1110:6:21"},"nodeType":"YulFunctionCall","src":"1110:12:21"},"nodeType":"YulExpressionStatement","src":"1110:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1074:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1099:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1081:17:21"},"nodeType":"YulFunctionCall","src":"1081:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1071:2:21"},"nodeType":"YulFunctionCall","src":"1071:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1064:6:21"},"nodeType":"YulFunctionCall","src":"1064:43:21"},"nodeType":"YulIf","src":"1061:63:21"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1044:5:21","type":""}],"src":"1008:122:21"},{"body":{"nodeType":"YulBlock","src":"1188:87:21","statements":[{"nodeType":"YulAssignment","src":"1198:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1220:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1207:12:21"},"nodeType":"YulFunctionCall","src":"1207:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1198:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1263:5:21"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1236:26:21"},"nodeType":"YulFunctionCall","src":"1236:33:21"},"nodeType":"YulExpressionStatement","src":"1236:33:21"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1166:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1174:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1182:5:21","type":""}],"src":"1136:139:21"},{"body":{"nodeType":"YulBlock","src":"1347:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"1393:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1395:77:21"},"nodeType":"YulFunctionCall","src":"1395:79:21"},"nodeType":"YulExpressionStatement","src":"1395:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1368:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1377:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1364:3:21"},"nodeType":"YulFunctionCall","src":"1364:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1389:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1360:3:21"},"nodeType":"YulFunctionCall","src":"1360:32:21"},"nodeType":"YulIf","src":"1357:119:21"},{"nodeType":"YulBlock","src":"1486:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1501:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1515:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1505:6:21","type":""}]},{"nodeType":"YulAssignment","src":"1530:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1565:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1576:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1561:3:21"},"nodeType":"YulFunctionCall","src":"1561:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1585:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1540:20:21"},"nodeType":"YulFunctionCall","src":"1540:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1530:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1317:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1328:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1340:6:21","type":""}],"src":"1281:329:21"},{"body":{"nodeType":"YulBlock","src":"1705:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1722:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1725:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1715:6:21"},"nodeType":"YulFunctionCall","src":"1715:12:21"},"nodeType":"YulExpressionStatement","src":"1715:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1616:117:21"},{"body":{"nodeType":"YulBlock","src":"1828:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1845:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1838:6:21"},"nodeType":"YulFunctionCall","src":"1838:12:21"},"nodeType":"YulExpressionStatement","src":"1838:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"1739:117:21"},{"body":{"nodeType":"YulBlock","src":"1910:54:21","statements":[{"nodeType":"YulAssignment","src":"1920:38:21","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1938:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1945:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1934:3:21"},"nodeType":"YulFunctionCall","src":"1934:14:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1954:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1950:3:21"},"nodeType":"YulFunctionCall","src":"1950:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1930:3:21"},"nodeType":"YulFunctionCall","src":"1930:28:21"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1920:6:21"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1893:5:21","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1903:6:21","type":""}],"src":"1862:102:21"},{"body":{"nodeType":"YulBlock","src":"1998:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2015:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2018:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2008:6:21"},"nodeType":"YulFunctionCall","src":"2008:88:21"},"nodeType":"YulExpressionStatement","src":"2008:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2112:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2115:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2105:6:21"},"nodeType":"YulFunctionCall","src":"2105:15:21"},"nodeType":"YulExpressionStatement","src":"2105:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2136:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2139:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2129:6:21"},"nodeType":"YulFunctionCall","src":"2129:15:21"},"nodeType":"YulExpressionStatement","src":"2129:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1970:180:21"},{"body":{"nodeType":"YulBlock","src":"2199:238:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2209:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2231:6:21"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2261:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2239:21:21"},"nodeType":"YulFunctionCall","src":"2239:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2227:3:21"},"nodeType":"YulFunctionCall","src":"2227:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2213:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2378:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2380:16:21"},"nodeType":"YulFunctionCall","src":"2380:18:21"},"nodeType":"YulExpressionStatement","src":"2380:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2321:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2333:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2318:2:21"},"nodeType":"YulFunctionCall","src":"2318:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2357:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2369:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2354:2:21"},"nodeType":"YulFunctionCall","src":"2354:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2315:2:21"},"nodeType":"YulFunctionCall","src":"2315:62:21"},"nodeType":"YulIf","src":"2312:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2416:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2420:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2409:6:21"},"nodeType":"YulFunctionCall","src":"2409:22:21"},"nodeType":"YulExpressionStatement","src":"2409:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2185:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2193:4:21","type":""}],"src":"2156:281:21"},{"body":{"nodeType":"YulBlock","src":"2484:88:21","statements":[{"nodeType":"YulAssignment","src":"2494:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2504:18:21"},"nodeType":"YulFunctionCall","src":"2504:20:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2494:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2553:6:21"},{"name":"size","nodeType":"YulIdentifier","src":"2561:4:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2533:19:21"},"nodeType":"YulFunctionCall","src":"2533:33:21"},"nodeType":"YulExpressionStatement","src":"2533:33:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2468:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2477:6:21","type":""}],"src":"2443:129:21"},{"body":{"nodeType":"YulBlock","src":"2644:241:21","statements":[{"body":{"nodeType":"YulBlock","src":"2749:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2751:16:21"},"nodeType":"YulFunctionCall","src":"2751:18:21"},"nodeType":"YulExpressionStatement","src":"2751:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2721:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2729:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2718:2:21"},"nodeType":"YulFunctionCall","src":"2718:30:21"},"nodeType":"YulIf","src":"2715:56:21"},{"nodeType":"YulAssignment","src":"2781:37:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2811:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2789:21:21"},"nodeType":"YulFunctionCall","src":"2789:29:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2781:4:21"}]},{"nodeType":"YulAssignment","src":"2855:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2867:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2873:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2863:3:21"},"nodeType":"YulFunctionCall","src":"2863:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2855:4:21"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2628:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2639:4:21","type":""}],"src":"2578:307:21"},{"body":{"nodeType":"YulBlock","src":"2955:82:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2978:3:21"},{"name":"src","nodeType":"YulIdentifier","src":"2983:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"2988:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2965:12:21"},"nodeType":"YulFunctionCall","src":"2965:30:21"},"nodeType":"YulExpressionStatement","src":"2965:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3015:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3020:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3011:3:21"},"nodeType":"YulFunctionCall","src":"3011:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"3029:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3004:6:21"},"nodeType":"YulFunctionCall","src":"3004:27:21"},"nodeType":"YulExpressionStatement","src":"3004:27:21"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2937:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2942:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"2947:6:21","type":""}],"src":"2891:146:21"},{"body":{"nodeType":"YulBlock","src":"3126:340:21","statements":[{"nodeType":"YulAssignment","src":"3136:74:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3202:6:21"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3161:40:21"},"nodeType":"YulFunctionCall","src":"3161:48:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3145:15:21"},"nodeType":"YulFunctionCall","src":"3145:65:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3136:5:21"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3226:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"3233:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3219:6:21"},"nodeType":"YulFunctionCall","src":"3219:21:21"},"nodeType":"YulExpressionStatement","src":"3219:21:21"},{"nodeType":"YulVariableDeclaration","src":"3249:27:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:21"},"nodeType":"YulFunctionCall","src":"3260:16:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3253:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3314:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"3316:77:21"},"nodeType":"YulFunctionCall","src":"3316:79:21"},"nodeType":"YulExpressionStatement","src":"3316:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3295:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3300:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3291:3:21"},"nodeType":"YulFunctionCall","src":"3291:16:21"},{"name":"end","nodeType":"YulIdentifier","src":"3309:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3288:2:21"},"nodeType":"YulFunctionCall","src":"3288:25:21"},"nodeType":"YulIf","src":"3285:112:21"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3443:3:21"},{"name":"dst","nodeType":"YulIdentifier","src":"3448:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"3453:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3406:36:21"},"nodeType":"YulFunctionCall","src":"3406:54:21"},"nodeType":"YulExpressionStatement","src":"3406:54:21"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3099:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"3104:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3112:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3120:5:21","type":""}],"src":"3043:423:21"},{"body":{"nodeType":"YulBlock","src":"3546:277:21","statements":[{"body":{"nodeType":"YulBlock","src":"3595:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3597:77:21"},"nodeType":"YulFunctionCall","src":"3597:79:21"},"nodeType":"YulExpressionStatement","src":"3597:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3574:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3582:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3570:3:21"},"nodeType":"YulFunctionCall","src":"3570:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3589:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3566:3:21"},"nodeType":"YulFunctionCall","src":"3566:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3559:6:21"},"nodeType":"YulFunctionCall","src":"3559:35:21"},"nodeType":"YulIf","src":"3556:122:21"},{"nodeType":"YulVariableDeclaration","src":"3687:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3714:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3701:12:21"},"nodeType":"YulFunctionCall","src":"3701:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3691:6:21","type":""}]},{"nodeType":"YulAssignment","src":"3730:87:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3790:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3798:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3786:3:21"},"nodeType":"YulFunctionCall","src":"3786:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"3805:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"3813:3:21"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3739:46:21"},"nodeType":"YulFunctionCall","src":"3739:78:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3730:5:21"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3524:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3532:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3540:5:21","type":""}],"src":"3485:338:21"},{"body":{"nodeType":"YulBlock","src":"3920:229:21","statements":[{"body":{"nodeType":"YulBlock","src":"4025:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4027:16:21"},"nodeType":"YulFunctionCall","src":"4027:18:21"},"nodeType":"YulExpressionStatement","src":"4027:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3997:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4005:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3994:2:21"},"nodeType":"YulFunctionCall","src":"3994:30:21"},"nodeType":"YulIf","src":"3991:56:21"},{"nodeType":"YulAssignment","src":"4057:25:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4069:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4077:4:21","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4065:3:21"},"nodeType":"YulFunctionCall","src":"4065:17:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4057:4:21"}]},{"nodeType":"YulAssignment","src":"4119:23:21","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"4131:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"4137:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4127:3:21"},"nodeType":"YulFunctionCall","src":"4127:15:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4119:4:21"}]}]},"name":"array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3904:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3915:4:21","type":""}],"src":"3829:320:21"},{"body":{"nodeType":"YulBlock","src":"4244:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4261:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4264:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4254:6:21"},"nodeType":"YulFunctionCall","src":"4254:12:21"},"nodeType":"YulExpressionStatement","src":"4254:12:21"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"4155:117:21"},{"body":{"nodeType":"YulBlock","src":"4404:831:21","statements":[{"nodeType":"YulAssignment","src":"4414:99:21","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4505:6:21"}],"functionName":{"name":"array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4439:65:21"},"nodeType":"YulFunctionCall","src":"4439:73:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4423:15:21"},"nodeType":"YulFunctionCall","src":"4423:90:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4414:5:21"}]},{"nodeType":"YulVariableDeclaration","src":"4522:16:21","value":{"name":"array","nodeType":"YulIdentifier","src":"4533:5:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4526:3:21","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4555:5:21"},{"name":"length","nodeType":"YulIdentifier","src":"4562:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4548:6:21"},"nodeType":"YulFunctionCall","src":"4548:21:21"},"nodeType":"YulExpressionStatement","src":"4548:21:21"},{"nodeType":"YulAssignment","src":"4578:23:21","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4589:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"4596:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4585:3:21"},"nodeType":"YulFunctionCall","src":"4585:16:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4578:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"4611:44:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4629:6:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4641:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4649:4:21","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4637:3:21"},"nodeType":"YulFunctionCall","src":"4637:17:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4625:3:21"},"nodeType":"YulFunctionCall","src":"4625:30:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4615:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4683:103:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"4697:77:21"},"nodeType":"YulFunctionCall","src":"4697:79:21"},"nodeType":"YulExpressionStatement","src":"4697:79:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4670:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"4678:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4667:2:21"},"nodeType":"YulFunctionCall","src":"4667:15:21"},"nodeType":"YulIf","src":"4664:122:21"},{"body":{"nodeType":"YulBlock","src":"4871:358:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4886:36:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4918:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4905:12:21"},"nodeType":"YulFunctionCall","src":"4905:17:21"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"4890:11:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4974:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4976:77:21"},"nodeType":"YulFunctionCall","src":"4976:79:21"},"nodeType":"YulExpressionStatement","src":"4976:79:21"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"4941:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"4954:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4938:2:21"},"nodeType":"YulFunctionCall","src":"4938:35:21"},"nodeType":"YulIf","src":"4935:122:21"},{"nodeType":"YulVariableDeclaration","src":"5070:42:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5092:6:21"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"5100:11:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5088:3:21"},"nodeType":"YulFunctionCall","src":"5088:24:21"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"5074:10:21","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5133:3:21"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"5168:10:21"},{"name":"end","nodeType":"YulIdentifier","src":"5180:3:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5138:29:21"},"nodeType":"YulFunctionCall","src":"5138:46:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5126:6:21"},"nodeType":"YulFunctionCall","src":"5126:59:21"},"nodeType":"YulExpressionStatement","src":"5126:59:21"},{"nodeType":"YulAssignment","src":"5198:21:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5209:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"5214:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5205:3:21"},"nodeType":"YulFunctionCall","src":"5205:14:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5198:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4824:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4829:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4821:2:21"},"nodeType":"YulFunctionCall","src":"4821:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4837:25:21","statements":[{"nodeType":"YulAssignment","src":"4839:21:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4850:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"4855:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4846:3:21"},"nodeType":"YulFunctionCall","src":"4846:14:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4839:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"4799:21:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4801:17:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"4812:6:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4805:3:21","type":""}]}]},"src":"4795:434:21"}]},"name":"abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4374:6:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"4382:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"4390:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4398:5:21","type":""}],"src":"4293:942:21"},{"body":{"nodeType":"YulBlock","src":"5342:302:21","statements":[{"body":{"nodeType":"YulBlock","src":"5391:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5393:77:21"},"nodeType":"YulFunctionCall","src":"5393:79:21"},"nodeType":"YulExpressionStatement","src":"5393:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5370:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5378:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5366:3:21"},"nodeType":"YulFunctionCall","src":"5366:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"5385:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5362:3:21"},"nodeType":"YulFunctionCall","src":"5362:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5355:6:21"},"nodeType":"YulFunctionCall","src":"5355:35:21"},"nodeType":"YulIf","src":"5352:122:21"},{"nodeType":"YulVariableDeclaration","src":"5483:34:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5510:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5497:12:21"},"nodeType":"YulFunctionCall","src":"5497:20:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5487:6:21","type":""}]},{"nodeType":"YulAssignment","src":"5526:112:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5611:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5619:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5607:3:21"},"nodeType":"YulFunctionCall","src":"5607:17:21"},{"name":"length","nodeType":"YulIdentifier","src":"5626:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"5634:3:21"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"5535:71:21"},"nodeType":"YulFunctionCall","src":"5535:103:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5526:5:21"}]}]},"name":"abi_decode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5320:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"5328:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5336:5:21","type":""}],"src":"5256:388:21"},{"body":{"nodeType":"YulBlock","src":"5695:32:21","statements":[{"nodeType":"YulAssignment","src":"5705:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"5716:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5705:7:21"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5677:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5687:7:21","type":""}],"src":"5650:77:21"},{"body":{"nodeType":"YulBlock","src":"5776:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"5833:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5842:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5845:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5835:6:21"},"nodeType":"YulFunctionCall","src":"5835:12:21"},"nodeType":"YulExpressionStatement","src":"5835:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5799:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5824:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5806:17:21"},"nodeType":"YulFunctionCall","src":"5806:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5796:2:21"},"nodeType":"YulFunctionCall","src":"5796:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5789:6:21"},"nodeType":"YulFunctionCall","src":"5789:43:21"},"nodeType":"YulIf","src":"5786:63:21"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5769:5:21","type":""}],"src":"5733:122:21"},{"body":{"nodeType":"YulBlock","src":"5913:87:21","statements":[{"nodeType":"YulAssignment","src":"5923:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5945:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5932:12:21"},"nodeType":"YulFunctionCall","src":"5932:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5923:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5988:5:21"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"5961:26:21"},"nodeType":"YulFunctionCall","src":"5961:33:21"},"nodeType":"YulExpressionStatement","src":"5961:33:21"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5891:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"5899:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5907:5:21","type":""}],"src":"5861:139:21"},{"body":{"nodeType":"YulBlock","src":"6048:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"6104:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6113:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6116:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6106:6:21"},"nodeType":"YulFunctionCall","src":"6106:12:21"},"nodeType":"YulExpressionStatement","src":"6106:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6071:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6095:5:21"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"6078:16:21"},"nodeType":"YulFunctionCall","src":"6078:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6068:2:21"},"nodeType":"YulFunctionCall","src":"6068:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6061:6:21"},"nodeType":"YulFunctionCall","src":"6061:42:21"},"nodeType":"YulIf","src":"6058:62:21"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6041:5:21","type":""}],"src":"6006:120:21"},{"body":{"nodeType":"YulBlock","src":"6183:86:21","statements":[{"nodeType":"YulAssignment","src":"6193:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6215:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6202:12:21"},"nodeType":"YulFunctionCall","src":"6202:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6193:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6257:5:21"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"6231:25:21"},"nodeType":"YulFunctionCall","src":"6231:32:21"},"nodeType":"YulExpressionStatement","src":"6231:32:21"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6161:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"6169:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6177:5:21","type":""}],"src":"6132:137:21"},{"body":{"nodeType":"YulBlock","src":"6451:1139:21","statements":[{"body":{"nodeType":"YulBlock","src":"6498:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6500:77:21"},"nodeType":"YulFunctionCall","src":"6500:79:21"},"nodeType":"YulExpressionStatement","src":"6500:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6472:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6481:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6468:3:21"},"nodeType":"YulFunctionCall","src":"6468:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6493:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6464:3:21"},"nodeType":"YulFunctionCall","src":"6464:33:21"},"nodeType":"YulIf","src":"6461:120:21"},{"nodeType":"YulBlock","src":"6591:286:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6606:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6637:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6648:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6633:3:21"},"nodeType":"YulFunctionCall","src":"6633:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6620:12:21"},"nodeType":"YulFunctionCall","src":"6620:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6610:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6698:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6700:77:21"},"nodeType":"YulFunctionCall","src":"6700:79:21"},"nodeType":"YulExpressionStatement","src":"6700:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6670:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6678:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6667:2:21"},"nodeType":"YulFunctionCall","src":"6667:30:21"},"nodeType":"YulIf","src":"6664:117:21"},{"nodeType":"YulAssignment","src":"6795:72:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6839:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6850:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6835:3:21"},"nodeType":"YulFunctionCall","src":"6835:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6859:7:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6805:29:21"},"nodeType":"YulFunctionCall","src":"6805:62:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6795:6:21"}]}]},{"nodeType":"YulBlock","src":"6887:312:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6902:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6933:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6944:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6929:3:21"},"nodeType":"YulFunctionCall","src":"6929:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6916:12:21"},"nodeType":"YulFunctionCall","src":"6916:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6906:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6995:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6997:77:21"},"nodeType":"YulFunctionCall","src":"6997:79:21"},"nodeType":"YulExpressionStatement","src":"6997:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6967:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6975:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6964:2:21"},"nodeType":"YulFunctionCall","src":"6964:30:21"},"nodeType":"YulIf","src":"6961:117:21"},{"nodeType":"YulAssignment","src":"7092:97:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7161:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7172:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7157:3:21"},"nodeType":"YulFunctionCall","src":"7157:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7181:7:21"}],"functionName":{"name":"abi_decode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7102:54:21"},"nodeType":"YulFunctionCall","src":"7102:87:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7092:6:21"}]}]},{"nodeType":"YulBlock","src":"7209:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7224:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7238:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7228:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7254:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7289:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7300:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7285:3:21"},"nodeType":"YulFunctionCall","src":"7285:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7309:7:21"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7264:20:21"},"nodeType":"YulFunctionCall","src":"7264:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7254:6:21"}]}]},{"nodeType":"YulBlock","src":"7337:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7352:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7366:2:21","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7356:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7382:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7416:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7427:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7412:3:21"},"nodeType":"YulFunctionCall","src":"7412:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7436:7:21"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"7392:19:21"},"nodeType":"YulFunctionCall","src":"7392:52:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7382:6:21"}]}]},{"nodeType":"YulBlock","src":"7464:119:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7479:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7493:3:21","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7483:6:21","type":""}]},{"nodeType":"YulAssignment","src":"7510:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7545:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7556:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7541:3:21"},"nodeType":"YulFunctionCall","src":"7541:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7565:7:21"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7520:20:21"},"nodeType":"YulFunctionCall","src":"7520:53:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7510:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32t_uint16t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6389:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6400:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6412:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6420:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6428:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6436:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6444:6:21","type":""}],"src":"6275:1315:21"},{"body":{"nodeType":"YulBlock","src":"7685:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7702:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7705:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7695:6:21"},"nodeType":"YulFunctionCall","src":"7695:12:21"},"nodeType":"YulExpressionStatement","src":"7695:12:21"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"7596:117:21"},{"body":{"nodeType":"YulBlock","src":"7845:153:21","statements":[{"body":{"nodeType":"YulBlock","src":"7885:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"7887:77:21"},"nodeType":"YulFunctionCall","src":"7887:79:21"},"nodeType":"YulExpressionStatement","src":"7887:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"7866:3:21"},{"name":"offset","nodeType":"YulIdentifier","src":"7871:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7862:3:21"},"nodeType":"YulFunctionCall","src":"7862:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"7880:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7858:3:21"},"nodeType":"YulFunctionCall","src":"7858:26:21"},"nodeType":"YulIf","src":"7855:113:21"},{"nodeType":"YulAssignment","src":"7977:15:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"7986:6:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7977:5:21"}]}]},"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7823:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"7831:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7839:5:21","type":""}],"src":"7760:238:21"},{"body":{"nodeType":"YulBlock","src":"8138:153:21","statements":[{"body":{"nodeType":"YulBlock","src":"8178:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"8180:77:21"},"nodeType":"YulFunctionCall","src":"8180:79:21"},"nodeType":"YulExpressionStatement","src":"8180:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"8159:3:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8164:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8155:3:21"},"nodeType":"YulFunctionCall","src":"8155:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"8173:3:21","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8151:3:21"},"nodeType":"YulFunctionCall","src":"8151:26:21"},"nodeType":"YulIf","src":"8148:113:21"},{"nodeType":"YulAssignment","src":"8270:15:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"8279:6:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8270:5:21"}]}]},"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8116:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"8124:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8132:5:21","type":""}],"src":"8049:242:21"},{"body":{"nodeType":"YulBlock","src":"8467:751:21","statements":[{"body":{"nodeType":"YulBlock","src":"8514:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8516:77:21"},"nodeType":"YulFunctionCall","src":"8516:79:21"},"nodeType":"YulExpressionStatement","src":"8516:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8488:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8497:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8484:3:21"},"nodeType":"YulFunctionCall","src":"8484:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8509:3:21","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8480:3:21"},"nodeType":"YulFunctionCall","src":"8480:33:21"},"nodeType":"YulIf","src":"8477:120:21"},{"nodeType":"YulBlock","src":"8607:310:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8622:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8653:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8664:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:21"},"nodeType":"YulFunctionCall","src":"8649:17:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8636:12:21"},"nodeType":"YulFunctionCall","src":"8636:31:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8626:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8714:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8716:77:21"},"nodeType":"YulFunctionCall","src":"8716:79:21"},"nodeType":"YulExpressionStatement","src":"8716:79:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8686:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8694:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8683:2:21"},"nodeType":"YulFunctionCall","src":"8683:30:21"},"nodeType":"YulIf","src":"8680:117:21"},{"nodeType":"YulAssignment","src":"8811:96:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8879:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8890:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8875:3:21"},"nodeType":"YulFunctionCall","src":"8875:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8899:7:21"}],"functionName":{"name":"abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr","nodeType":"YulIdentifier","src":"8821:53:21"},"nodeType":"YulFunctionCall","src":"8821:86:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8811:6:21"}]}]},{"nodeType":"YulBlock","src":"8927:155:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8942:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"8956:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8946:6:21","type":""}]},{"nodeType":"YulAssignment","src":"8972:100:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9044:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9055:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9040:3:21"},"nodeType":"YulFunctionCall","src":"9040:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9064:7:21"}],"functionName":{"name":"abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr","nodeType":"YulIdentifier","src":"8982:57:21"},"nodeType":"YulFunctionCall","src":"8982:90:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8972:6:21"}]}]},{"nodeType":"YulBlock","src":"9092:119:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9107:17:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9121:3:21","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9111:6:21","type":""}]},{"nodeType":"YulAssignment","src":"9138:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9173:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9184:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9169:3:21"},"nodeType":"YulFunctionCall","src":"9169:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9193:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9148:20:21"},"nodeType":"YulFunctionCall","src":"9148:53:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9138:6:21"}]}]}]},"name":"abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8421:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8432:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8444:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8452:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8460:6:21","type":""}],"src":"8297:921:21"},{"body":{"nodeType":"YulBlock","src":"9323:518:21","statements":[{"body":{"nodeType":"YulBlock","src":"9369:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9371:77:21"},"nodeType":"YulFunctionCall","src":"9371:79:21"},"nodeType":"YulExpressionStatement","src":"9371:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9344:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9353:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9340:3:21"},"nodeType":"YulFunctionCall","src":"9340:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9365:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9336:3:21"},"nodeType":"YulFunctionCall","src":"9336:32:21"},"nodeType":"YulIf","src":"9333:119:21"},{"nodeType":"YulBlock","src":"9462:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9477:15:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9491:1:21","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9481:6:21","type":""}]},{"nodeType":"YulAssignment","src":"9506:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9541:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9552:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9537:3:21"},"nodeType":"YulFunctionCall","src":"9537:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9561:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9516:20:21"},"nodeType":"YulFunctionCall","src":"9516:53:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9506:6:21"}]}]},{"nodeType":"YulBlock","src":"9589:118:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9604:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9618:2:21","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9608:6:21","type":""}]},{"nodeType":"YulAssignment","src":"9634:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9669:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9680:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9665:3:21"},"nodeType":"YulFunctionCall","src":"9665:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9689:7:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9644:20:21"},"nodeType":"YulFunctionCall","src":"9644:53:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9634:6:21"}]}]},{"nodeType":"YulBlock","src":"9717:117:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9732:16:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9746:2:21","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9736:6:21","type":""}]},{"nodeType":"YulAssignment","src":"9762:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9796:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9807:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9792:3:21"},"nodeType":"YulFunctionCall","src":"9792:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9816:7:21"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"9772:19:21"},"nodeType":"YulFunctionCall","src":"9772:52:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9762:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9277:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9288:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9300:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9308:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9316:6:21","type":""}],"src":"9224:617:21"},{"body":{"nodeType":"YulBlock","src":"9912:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9929:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9952:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"9934:17:21"},"nodeType":"YulFunctionCall","src":"9934:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9922:6:21"},"nodeType":"YulFunctionCall","src":"9922:37:21"},"nodeType":"YulExpressionStatement","src":"9922:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9900:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9907:3:21","type":""}],"src":"9847:118:21"},{"body":{"nodeType":"YulBlock","src":"10069:124:21","statements":[{"nodeType":"YulAssignment","src":"10079:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10091:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10102:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10087:3:21"},"nodeType":"YulFunctionCall","src":"10087:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10079:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10159:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10172:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10183:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10168:3:21"},"nodeType":"YulFunctionCall","src":"10168:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10115:43:21"},"nodeType":"YulFunctionCall","src":"10115:71:21"},"nodeType":"YulExpressionStatement","src":"10115:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10041:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10053:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10064:4:21","type":""}],"src":"9971:222:21"},{"body":{"nodeType":"YulBlock","src":"10231:28:21","statements":[{"nodeType":"YulAssignment","src":"10241:12:21","value":{"name":"value","nodeType":"YulIdentifier","src":"10248:5:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10241:3:21"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10217:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10227:3:21","type":""}],"src":"10199:60:21"},{"body":{"nodeType":"YulBlock","src":"10325:82:21","statements":[{"nodeType":"YulAssignment","src":"10335:66:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10393:5:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10375:17:21"},"nodeType":"YulFunctionCall","src":"10375:24:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"10366:8:21"},"nodeType":"YulFunctionCall","src":"10366:34:21"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10348:17:21"},"nodeType":"YulFunctionCall","src":"10348:53:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10335:9:21"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10305:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10315:9:21","type":""}],"src":"10265:142:21"},{"body":{"nodeType":"YulBlock","src":"10473:66:21","statements":[{"nodeType":"YulAssignment","src":"10483:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10527:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"10496:30:21"},"nodeType":"YulFunctionCall","src":"10496:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10483:9:21"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10453:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10463:9:21","type":""}],"src":"10413:126:21"},{"body":{"nodeType":"YulBlock","src":"10632:66:21","statements":[{"nodeType":"YulAssignment","src":"10642:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10686:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"10655:30:21"},"nodeType":"YulFunctionCall","src":"10655:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10642:9:21"}]}]},"name":"convert_t_contract$_IL2WormholeGateway_$5658_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10612:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10622:9:21","type":""}],"src":"10545:153:21"},{"body":{"nodeType":"YulBlock","src":"10796:93:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10813:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10876:5:21"}],"functionName":{"name":"convert_t_contract$_IL2WormholeGateway_$5658_to_t_address","nodeType":"YulIdentifier","src":"10818:57:21"},"nodeType":"YulFunctionCall","src":"10818:64:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10806:6:21"},"nodeType":"YulFunctionCall","src":"10806:77:21"},"nodeType":"YulExpressionStatement","src":"10806:77:21"}]},"name":"abi_encode_t_contract$_IL2WormholeGateway_$5658_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10784:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10791:3:21","type":""}],"src":"10704:185:21"},{"body":{"nodeType":"YulBlock","src":"11020:151:21","statements":[{"nodeType":"YulAssignment","src":"11030:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11042:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11053:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11038:3:21"},"nodeType":"YulFunctionCall","src":"11038:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11030:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11137:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11150:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11161:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11146:3:21"},"nodeType":"YulFunctionCall","src":"11146:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IL2WormholeGateway_$5658_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11066:70:21"},"nodeType":"YulFunctionCall","src":"11066:98:21"},"nodeType":"YulExpressionStatement","src":"11066:98:21"}]},"name":"abi_encode_tuple_t_contract$_IL2WormholeGateway_$5658__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10992:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11004:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11015:4:21","type":""}],"src":"10895:276:21"},{"body":{"nodeType":"YulBlock","src":"11262:66:21","statements":[{"nodeType":"YulAssignment","src":"11272:50:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11316:5:21"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"11285:30:21"},"nodeType":"YulFunctionCall","src":"11285:37:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11272:9:21"}]}]},"name":"convert_t_contract$_IWormholeRelayer_$5928_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11242:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11252:9:21","type":""}],"src":"11177:151:21"},{"body":{"nodeType":"YulBlock","src":"11424:91:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11441:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11502:5:21"}],"functionName":{"name":"convert_t_contract$_IWormholeRelayer_$5928_to_t_address","nodeType":"YulIdentifier","src":"11446:55:21"},"nodeType":"YulFunctionCall","src":"11446:62:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11434:6:21"},"nodeType":"YulFunctionCall","src":"11434:75:21"},"nodeType":"YulExpressionStatement","src":"11434:75:21"}]},"name":"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11412:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11419:3:21","type":""}],"src":"11334:181:21"},{"body":{"nodeType":"YulBlock","src":"11644:149:21","statements":[{"nodeType":"YulAssignment","src":"11654:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11666:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11677:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11662:3:21"},"nodeType":"YulFunctionCall","src":"11662:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11654:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11759:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11772:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11783:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11768:3:21"},"nodeType":"YulFunctionCall","src":"11768:17:21"}],"functionName":{"name":"abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11690:68:21"},"nodeType":"YulFunctionCall","src":"11690:96:21"},"nodeType":"YulExpressionStatement","src":"11690:96:21"}]},"name":"abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11616:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11628:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11639:4:21","type":""}],"src":"11521:272:21"},{"body":{"nodeType":"YulBlock","src":"11895:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11912:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"11917:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11905:6:21"},"nodeType":"YulFunctionCall","src":"11905:19:21"},"nodeType":"YulExpressionStatement","src":"11905:19:21"},{"nodeType":"YulAssignment","src":"11933:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11952:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"11957:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11948:3:21"},"nodeType":"YulFunctionCall","src":"11948:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11933:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11867:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"11872:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"11883:11:21","type":""}],"src":"11799:169:21"},{"body":{"nodeType":"YulBlock","src":"12080:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12102:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"12110:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12098:3:21"},"nodeType":"YulFunctionCall","src":"12098:14:21"},{"hexValue":"4c3120426974636f696e204465706f7369746f7220616c726561647920736574","kind":"string","nodeType":"YulLiteral","src":"12114:34:21","type":"","value":"L1 Bitcoin Depositor already set"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12091:6:21"},"nodeType":"YulFunctionCall","src":"12091:58:21"},"nodeType":"YulExpressionStatement","src":"12091:58:21"}]},"name":"store_literal_in_memory_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12072:6:21","type":""}],"src":"11974:182:21"},{"body":{"nodeType":"YulBlock","src":"12308:220:21","statements":[{"nodeType":"YulAssignment","src":"12318:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12384:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12389:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12325:58:21"},"nodeType":"YulFunctionCall","src":"12325:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12318:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12490:3:21"}],"functionName":{"name":"store_literal_in_memory_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6","nodeType":"YulIdentifier","src":"12401:88:21"},"nodeType":"YulFunctionCall","src":"12401:93:21"},"nodeType":"YulExpressionStatement","src":"12401:93:21"},{"nodeType":"YulAssignment","src":"12503:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12514:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"12519:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12510:3:21"},"nodeType":"YulFunctionCall","src":"12510:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12503:3:21"}]}]},"name":"abi_encode_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12296:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12304:3:21","type":""}],"src":"12162:366:21"},{"body":{"nodeType":"YulBlock","src":"12705:248:21","statements":[{"nodeType":"YulAssignment","src":"12715:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12727:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12738:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12723:3:21"},"nodeType":"YulFunctionCall","src":"12723:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12715:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12762:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12773:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12758:3:21"},"nodeType":"YulFunctionCall","src":"12758:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12781:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12787:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12777:3:21"},"nodeType":"YulFunctionCall","src":"12777:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12751:6:21"},"nodeType":"YulFunctionCall","src":"12751:47:21"},"nodeType":"YulExpressionStatement","src":"12751:47:21"},{"nodeType":"YulAssignment","src":"12807:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12941:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12815:124:21"},"nodeType":"YulFunctionCall","src":"12815:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12807:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12685:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12700:4:21","type":""}],"src":"12534:419:21"},{"body":{"nodeType":"YulBlock","src":"13065:117:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13087:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"13095:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13083:3:21"},"nodeType":"YulFunctionCall","src":"13083:14:21"},{"hexValue":"4c3120426974636f696e204465706f7369746f72206d757374206e6f74206265","kind":"string","nodeType":"YulLiteral","src":"13099:34:21","type":"","value":"L1 Bitcoin Depositor must not be"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13076:6:21"},"nodeType":"YulFunctionCall","src":"13076:58:21"},"nodeType":"YulExpressionStatement","src":"13076:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13155:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"13163:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13151:3:21"},"nodeType":"YulFunctionCall","src":"13151:15:21"},{"hexValue":"20307830","kind":"string","nodeType":"YulLiteral","src":"13168:6:21","type":"","value":" 0x0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13144:6:21"},"nodeType":"YulFunctionCall","src":"13144:31:21"},"nodeType":"YulExpressionStatement","src":"13144:31:21"}]},"name":"store_literal_in_memory_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13057:6:21","type":""}],"src":"12959:223:21"},{"body":{"nodeType":"YulBlock","src":"13334:220:21","statements":[{"nodeType":"YulAssignment","src":"13344:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13410:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"13415:2:21","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13351:58:21"},"nodeType":"YulFunctionCall","src":"13351:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13344:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13516:3:21"}],"functionName":{"name":"store_literal_in_memory_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314","nodeType":"YulIdentifier","src":"13427:88:21"},"nodeType":"YulFunctionCall","src":"13427:93:21"},"nodeType":"YulExpressionStatement","src":"13427:93:21"},{"nodeType":"YulAssignment","src":"13529:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13540:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"13545:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13536:3:21"},"nodeType":"YulFunctionCall","src":"13536:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13529:3:21"}]}]},"name":"abi_encode_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13322:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13330:3:21","type":""}],"src":"13188:366:21"},{"body":{"nodeType":"YulBlock","src":"13731:248:21","statements":[{"nodeType":"YulAssignment","src":"13741:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13753:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13764:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13749:3:21"},"nodeType":"YulFunctionCall","src":"13749:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13741:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13788:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13799:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13784:3:21"},"nodeType":"YulFunctionCall","src":"13784:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13807:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13813:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13803:3:21"},"nodeType":"YulFunctionCall","src":"13803:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13777:6:21"},"nodeType":"YulFunctionCall","src":"13777:47:21"},"nodeType":"YulExpressionStatement","src":"13777:47:21"},{"nodeType":"YulAssignment","src":"13833:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13967:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13841:124:21"},"nodeType":"YulFunctionCall","src":"13841:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13833:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13711:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13726:4:21","type":""}],"src":"13560:419:21"},{"body":{"nodeType":"YulBlock","src":"14091:74:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14113:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14121:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14109:3:21"},"nodeType":"YulFunctionCall","src":"14109:14:21"},{"hexValue":"43616c6c6572206973206e6f7420576f726d686f6c652052656c61796572","kind":"string","nodeType":"YulLiteral","src":"14125:32:21","type":"","value":"Caller is not Wormhole Relayer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14102:6:21"},"nodeType":"YulFunctionCall","src":"14102:56:21"},"nodeType":"YulExpressionStatement","src":"14102:56:21"}]},"name":"store_literal_in_memory_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14083:6:21","type":""}],"src":"13985:180:21"},{"body":{"nodeType":"YulBlock","src":"14317:220:21","statements":[{"nodeType":"YulAssignment","src":"14327:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14393:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"14398:2:21","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14334:58:21"},"nodeType":"YulFunctionCall","src":"14334:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14327:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14499:3:21"}],"functionName":{"name":"store_literal_in_memory_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3","nodeType":"YulIdentifier","src":"14410:88:21"},"nodeType":"YulFunctionCall","src":"14410:93:21"},"nodeType":"YulExpressionStatement","src":"14410:93:21"},{"nodeType":"YulAssignment","src":"14512:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14523:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"14528:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14519:3:21"},"nodeType":"YulFunctionCall","src":"14519:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14512:3:21"}]}]},"name":"abi_encode_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14305:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14313:3:21","type":""}],"src":"14171:366:21"},{"body":{"nodeType":"YulBlock","src":"14714:248:21","statements":[{"nodeType":"YulAssignment","src":"14724:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14736:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14747:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14732:3:21"},"nodeType":"YulFunctionCall","src":"14732:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14724:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14771:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14782:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14767:3:21"},"nodeType":"YulFunctionCall","src":"14767:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14790:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14796:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14786:3:21"},"nodeType":"YulFunctionCall","src":"14786:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14760:6:21"},"nodeType":"YulFunctionCall","src":"14760:47:21"},"nodeType":"YulExpressionStatement","src":"14760:47:21"},{"nodeType":"YulAssignment","src":"14816:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14950:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14824:124:21"},"nodeType":"YulFunctionCall","src":"14824:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14816:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14694:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14709:4:21","type":""}],"src":"14543:419:21"},{"body":{"nodeType":"YulBlock","src":"15074:122:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15096:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15104:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15092:3:21"},"nodeType":"YulFunctionCall","src":"15092:14:21"},{"hexValue":"536f7572636520636861696e206973206e6f7420746865206578706563746564","kind":"string","nodeType":"YulLiteral","src":"15108:34:21","type":"","value":"Source chain is not the expected"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15085:6:21"},"nodeType":"YulFunctionCall","src":"15085:58:21"},"nodeType":"YulExpressionStatement","src":"15085:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15164:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"15172:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15160:3:21"},"nodeType":"YulFunctionCall","src":"15160:15:21"},{"hexValue":"204c3120636861696e","kind":"string","nodeType":"YulLiteral","src":"15177:11:21","type":"","value":" L1 chain"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15153:6:21"},"nodeType":"YulFunctionCall","src":"15153:36:21"},"nodeType":"YulExpressionStatement","src":"15153:36:21"}]},"name":"store_literal_in_memory_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15066:6:21","type":""}],"src":"14968:228:21"},{"body":{"nodeType":"YulBlock","src":"15348:220:21","statements":[{"nodeType":"YulAssignment","src":"15358:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15424:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15429:2:21","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15365:58:21"},"nodeType":"YulFunctionCall","src":"15365:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15358:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15530:3:21"}],"functionName":{"name":"store_literal_in_memory_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92","nodeType":"YulIdentifier","src":"15441:88:21"},"nodeType":"YulFunctionCall","src":"15441:93:21"},"nodeType":"YulExpressionStatement","src":"15441:93:21"},{"nodeType":"YulAssignment","src":"15543:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15554:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"15559:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15550:3:21"},"nodeType":"YulFunctionCall","src":"15550:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15543:3:21"}]}]},"name":"abi_encode_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15336:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15344:3:21","type":""}],"src":"15202:366:21"},{"body":{"nodeType":"YulBlock","src":"15745:248:21","statements":[{"nodeType":"YulAssignment","src":"15755:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15767:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15778:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15763:3:21"},"nodeType":"YulFunctionCall","src":"15763:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15755:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15802:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15813:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15798:3:21"},"nodeType":"YulFunctionCall","src":"15798:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15821:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"15827:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15817:3:21"},"nodeType":"YulFunctionCall","src":"15817:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15791:6:21"},"nodeType":"YulFunctionCall","src":"15791:47:21"},"nodeType":"YulExpressionStatement","src":"15791:47:21"},{"nodeType":"YulAssignment","src":"15847:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15981:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15855:124:21"},"nodeType":"YulFunctionCall","src":"15855:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15847:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15725:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15740:4:21","type":""}],"src":"15574:419:21"},{"body":{"nodeType":"YulBlock","src":"16105:136:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16127:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16135:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16123:3:21"},"nodeType":"YulFunctionCall","src":"16123:14:21"},{"hexValue":"536f757263652061646472657373206973206e6f742074686520657870656374","kind":"string","nodeType":"YulLiteral","src":"16139:34:21","type":"","value":"Source address is not the expect"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16116:6:21"},"nodeType":"YulFunctionCall","src":"16116:58:21"},"nodeType":"YulExpressionStatement","src":"16116:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16195:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16203:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16191:3:21"},"nodeType":"YulFunctionCall","src":"16191:15:21"},{"hexValue":"6564204c3120426974636f696e206465706f7369746f72","kind":"string","nodeType":"YulLiteral","src":"16208:25:21","type":"","value":"ed L1 Bitcoin depositor"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16184:6:21"},"nodeType":"YulFunctionCall","src":"16184:50:21"},"nodeType":"YulExpressionStatement","src":"16184:50:21"}]},"name":"store_literal_in_memory_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16097:6:21","type":""}],"src":"15999:242:21"},{"body":{"nodeType":"YulBlock","src":"16393:220:21","statements":[{"nodeType":"YulAssignment","src":"16403:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16469:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16474:2:21","type":"","value":"55"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16410:58:21"},"nodeType":"YulFunctionCall","src":"16410:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16403:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16575:3:21"}],"functionName":{"name":"store_literal_in_memory_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967","nodeType":"YulIdentifier","src":"16486:88:21"},"nodeType":"YulFunctionCall","src":"16486:93:21"},"nodeType":"YulExpressionStatement","src":"16486:93:21"},{"nodeType":"YulAssignment","src":"16588:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16599:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"16604:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16595:3:21"},"nodeType":"YulFunctionCall","src":"16595:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16588:3:21"}]}]},"name":"abi_encode_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16381:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16389:3:21","type":""}],"src":"16247:366:21"},{"body":{"nodeType":"YulBlock","src":"16790:248:21","statements":[{"nodeType":"YulAssignment","src":"16800:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16812:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16823:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16808:3:21"},"nodeType":"YulFunctionCall","src":"16808:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16800:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16847:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16858:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16843:3:21"},"nodeType":"YulFunctionCall","src":"16843:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16866:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"16872:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16862:3:21"},"nodeType":"YulFunctionCall","src":"16862:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16836:6:21"},"nodeType":"YulFunctionCall","src":"16836:47:21"},"nodeType":"YulExpressionStatement","src":"16836:47:21"},{"nodeType":"YulAssignment","src":"16892:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17026:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16900:124:21"},"nodeType":"YulFunctionCall","src":"16900:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16892:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16770:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16785:4:21","type":""}],"src":"16619:419:21"},{"body":{"nodeType":"YulBlock","src":"17150:129:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17172:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17180:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17168:3:21"},"nodeType":"YulFunctionCall","src":"17168:14:21"},{"hexValue":"45787065637465642031206164646974696f6e616c20564141206b657920666f","kind":"string","nodeType":"YulLiteral","src":"17184:34:21","type":"","value":"Expected 1 additional VAA key fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17161:6:21"},"nodeType":"YulFunctionCall","src":"17161:58:21"},"nodeType":"YulExpressionStatement","src":"17161:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17240:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17248:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17236:3:21"},"nodeType":"YulFunctionCall","src":"17236:15:21"},{"hexValue":"7220746f6b656e207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"17253:18:21","type":"","value":"r token transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17229:6:21"},"nodeType":"YulFunctionCall","src":"17229:43:21"},"nodeType":"YulExpressionStatement","src":"17229:43:21"}]},"name":"store_literal_in_memory_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17142:6:21","type":""}],"src":"17044:235:21"},{"body":{"nodeType":"YulBlock","src":"17431:220:21","statements":[{"nodeType":"YulAssignment","src":"17441:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17507:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17512:2:21","type":"","value":"48"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17448:58:21"},"nodeType":"YulFunctionCall","src":"17448:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17441:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17613:3:21"}],"functionName":{"name":"store_literal_in_memory_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae","nodeType":"YulIdentifier","src":"17524:88:21"},"nodeType":"YulFunctionCall","src":"17524:93:21"},"nodeType":"YulExpressionStatement","src":"17524:93:21"},{"nodeType":"YulAssignment","src":"17626:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17637:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17642:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17633:3:21"},"nodeType":"YulFunctionCall","src":"17633:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17626:3:21"}]}]},"name":"abi_encode_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17419:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17427:3:21","type":""}],"src":"17285:366:21"},{"body":{"nodeType":"YulBlock","src":"17828:248:21","statements":[{"nodeType":"YulAssignment","src":"17838:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17850:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17861:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17846:3:21"},"nodeType":"YulFunctionCall","src":"17846:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17838:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17885:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17896:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17881:3:21"},"nodeType":"YulFunctionCall","src":"17881:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17904:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"17910:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17900:3:21"},"nodeType":"YulFunctionCall","src":"17900:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17874:6:21"},"nodeType":"YulFunctionCall","src":"17874:47:21"},"nodeType":"YulExpressionStatement","src":"17874:47:21"},{"nodeType":"YulAssignment","src":"17930:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18064:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17938:124:21"},"nodeType":"YulFunctionCall","src":"17938:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17930:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17808:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17823:4:21","type":""}],"src":"17657:419:21"},{"body":{"nodeType":"YulBlock","src":"18110:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18127:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18130:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18120:6:21"},"nodeType":"YulFunctionCall","src":"18120:88:21"},"nodeType":"YulExpressionStatement","src":"18120:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18224:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18227:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18217:6:21"},"nodeType":"YulFunctionCall","src":"18217:15:21"},"nodeType":"YulExpressionStatement","src":"18217:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18248:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18251:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18241:6:21"},"nodeType":"YulFunctionCall","src":"18241:15:21"},"nodeType":"YulExpressionStatement","src":"18241:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18082:180:21"},{"body":{"nodeType":"YulBlock","src":"18326:40:21","statements":[{"nodeType":"YulAssignment","src":"18337:22:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18353:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18347:5:21"},"nodeType":"YulFunctionCall","src":"18347:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18337:6:21"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18309:5:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"18319:6:21","type":""}],"src":"18268:98:21"},{"body":{"nodeType":"YulBlock","src":"18467:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18484:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"18489:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18477:6:21"},"nodeType":"YulFunctionCall","src":"18477:19:21"},"nodeType":"YulExpressionStatement","src":"18477:19:21"},{"nodeType":"YulAssignment","src":"18505:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18524:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"18529:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18520:3:21"},"nodeType":"YulFunctionCall","src":"18520:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"18505:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18439:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"18444:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"18455:11:21","type":""}],"src":"18372:168:21"},{"body":{"nodeType":"YulBlock","src":"18608:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"18618:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"18627:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18622:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"18687:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18712:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"18717:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18708:3:21"},"nodeType":"YulFunctionCall","src":"18708:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18731:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"18736:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18727:3:21"},"nodeType":"YulFunctionCall","src":"18727:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18721:5:21"},"nodeType":"YulFunctionCall","src":"18721:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18701:6:21"},"nodeType":"YulFunctionCall","src":"18701:39:21"},"nodeType":"YulExpressionStatement","src":"18701:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18648:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"18651:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18645:2:21"},"nodeType":"YulFunctionCall","src":"18645:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18659:19:21","statements":[{"nodeType":"YulAssignment","src":"18661:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18670:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"18673:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18666:3:21"},"nodeType":"YulFunctionCall","src":"18666:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18661:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"18641:3:21","statements":[]},"src":"18637:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18770:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"18775:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18766:3:21"},"nodeType":"YulFunctionCall","src":"18766:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"18784:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18759:6:21"},"nodeType":"YulFunctionCall","src":"18759:27:21"},"nodeType":"YulExpressionStatement","src":"18759:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18590:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18595:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"18600:6:21","type":""}],"src":"18546:246:21"},{"body":{"nodeType":"YulBlock","src":"18888:283:21","statements":[{"nodeType":"YulVariableDeclaration","src":"18898:52:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18944:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"18912:31:21"},"nodeType":"YulFunctionCall","src":"18912:38:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18902:6:21","type":""}]},{"nodeType":"YulAssignment","src":"18959:77:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19024:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"19029:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18966:57:21"},"nodeType":"YulFunctionCall","src":"18966:70:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18959:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19084:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"19091:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19080:3:21"},"nodeType":"YulFunctionCall","src":"19080:16:21"},{"name":"pos","nodeType":"YulIdentifier","src":"19098:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"19103:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"19045:34:21"},"nodeType":"YulFunctionCall","src":"19045:65:21"},"nodeType":"YulExpressionStatement","src":"19045:65:21"},{"nodeType":"YulAssignment","src":"19119:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19130:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19157:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"19135:21:21"},"nodeType":"YulFunctionCall","src":"19135:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19126:3:21"},"nodeType":"YulFunctionCall","src":"19126:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19119:3:21"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18869:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18876:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18884:3:21","type":""}],"src":"18798:373:21"},{"body":{"nodeType":"YulBlock","src":"19293:193:21","statements":[{"nodeType":"YulAssignment","src":"19303:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19315:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19326:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19311:3:21"},"nodeType":"YulFunctionCall","src":"19311:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19303:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19350:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19361:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19346:3:21"},"nodeType":"YulFunctionCall","src":"19346:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19369:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"19375:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19365:3:21"},"nodeType":"YulFunctionCall","src":"19365:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:21"},"nodeType":"YulFunctionCall","src":"19339:47:21"},"nodeType":"YulExpressionStatement","src":"19339:47:21"},{"nodeType":"YulAssignment","src":"19395:84:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19465:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"19474:4:21"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19403:61:21"},"nodeType":"YulFunctionCall","src":"19403:76:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19395:4:21"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19265:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19277:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19288:4:21","type":""}],"src":"19177:309:21"},{"body":{"nodeType":"YulBlock","src":"19536:105:21","statements":[{"nodeType":"YulAssignment","src":"19546:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19561:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"19568:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19557:3:21"},"nodeType":"YulFunctionCall","src":"19557:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"19546:7:21"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19518:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"19528:7:21","type":""}],"src":"19492:149:21"},{"body":{"nodeType":"YulBlock","src":"19689:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"19745:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19754:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19757:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19747:6:21"},"nodeType":"YulFunctionCall","src":"19747:12:21"},"nodeType":"YulExpressionStatement","src":"19747:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19712:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19736:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"19719:16:21"},"nodeType":"YulFunctionCall","src":"19719:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19709:2:21"},"nodeType":"YulFunctionCall","src":"19709:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19702:6:21"},"nodeType":"YulFunctionCall","src":"19702:42:21"},"nodeType":"YulIf","src":"19699:62:21"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19682:5:21","type":""}],"src":"19647:120:21"},{"body":{"nodeType":"YulBlock","src":"19824:86:21","statements":[{"nodeType":"YulAssignment","src":"19834:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19856:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19843:12:21"},"nodeType":"YulFunctionCall","src":"19843:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19834:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19898:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"19872:25:21"},"nodeType":"YulFunctionCall","src":"19872:32:21"},"nodeType":"YulExpressionStatement","src":"19872:32:21"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"19802:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"19810:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19818:5:21","type":""}],"src":"19773:137:21"},{"body":{"nodeType":"YulBlock","src":"19973:63:21","statements":[{"nodeType":"YulAssignment","src":"19983:47:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"20012:3:21"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"20021:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"20026:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20017:3:21"},"nodeType":"YulFunctionCall","src":"20017:12:21"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"19992:19:21"},"nodeType":"YulFunctionCall","src":"19992:38:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19983:5:21"}]}]},"name":"calldata_access_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"19950:7:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"19959:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19967:5:21","type":""}],"src":"19916:120:21"},{"body":{"nodeType":"YulBlock","src":"20095:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20112:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20134:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"20117:16:21"},"nodeType":"YulFunctionCall","src":"20117:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20105:6:21"},"nodeType":"YulFunctionCall","src":"20105:36:21"},"nodeType":"YulExpressionStatement","src":"20105:36:21"}]},"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20083:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20090:3:21","type":""}],"src":"20042:105:21"},{"body":{"nodeType":"YulBlock","src":"20242:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20259:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20262:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20252:6:21"},"nodeType":"YulFunctionCall","src":"20252:12:21"},"nodeType":"YulExpressionStatement","src":"20252:12:21"}]},"name":"revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2","nodeType":"YulFunctionDefinition","src":"20153:117:21"},{"body":{"nodeType":"YulBlock","src":"20365:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20382:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20385:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20375:6:21"},"nodeType":"YulFunctionCall","src":"20375:12:21"},"nodeType":"YulExpressionStatement","src":"20375:12:21"}]},"name":"revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20","nodeType":"YulFunctionDefinition","src":"20276:117:21"},{"body":{"nodeType":"YulBlock","src":"20488:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20505:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20508:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20498:6:21"},"nodeType":"YulFunctionCall","src":"20498:12:21"},"nodeType":"YulExpressionStatement","src":"20498:12:21"}]},"name":"revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4","nodeType":"YulFunctionDefinition","src":"20399:117:21"},{"body":{"nodeType":"YulBlock","src":"20600:633:21","statements":[{"nodeType":"YulVariableDeclaration","src":"20610:43:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"20649:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20636:12:21"},"nodeType":"YulFunctionCall","src":"20636:17:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"20614:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"20747:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4","nodeType":"YulIdentifier","src":"20749:77:21"},"nodeType":"YulFunctionCall","src":"20749:79:21"},"nodeType":"YulExpressionStatement","src":"20749:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"20676:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"20704:12:21"},"nodeType":"YulFunctionCall","src":"20704:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"20720:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20700:3:21"},"nodeType":"YulFunctionCall","src":"20700:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20735:4:21","type":"","value":"0x20"},{"kind":"number","nodeType":"YulLiteral","src":"20741:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20731:3:21"},"nodeType":"YulFunctionCall","src":"20731:12:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20696:3:21"},"nodeType":"YulFunctionCall","src":"20696:48:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20672:3:21"},"nodeType":"YulFunctionCall","src":"20672:73:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20665:6:21"},"nodeType":"YulFunctionCall","src":"20665:81:21"},"nodeType":"YulIf","src":"20662:168:21"},{"nodeType":"YulAssignment","src":"20839:42:21","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"20852:18:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"20872:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20848:3:21"},"nodeType":"YulFunctionCall","src":"20848:33:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20839:5:21"}]},{"nodeType":"YulAssignment","src":"20891:29:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20914:5:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20901:12:21"},"nodeType":"YulFunctionCall","src":"20901:19:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20891:6:21"}]},{"nodeType":"YulAssignment","src":"20929:25:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20942:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"20949:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20938:3:21"},"nodeType":"YulFunctionCall","src":"20938:16:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20929:5:21"}]},{"body":{"nodeType":"YulBlock","src":"20997:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2","nodeType":"YulIdentifier","src":"20999:77:21"},"nodeType":"YulFunctionCall","src":"20999:79:21"},"nodeType":"YulExpressionStatement","src":"20999:79:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"20969:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"20977:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20966:2:21"},"nodeType":"YulFunctionCall","src":"20966:30:21"},"nodeType":"YulIf","src":"20963:117:21"},{"body":{"nodeType":"YulBlock","src":"21143:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20","nodeType":"YulIdentifier","src":"21145:77:21"},"nodeType":"YulFunctionCall","src":"21145:79:21"},"nodeType":"YulExpressionStatement","src":"21145:79:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21096:5:21"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"21107:12:21"},"nodeType":"YulFunctionCall","src":"21107:14:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21127:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"21135:4:21","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"21123:3:21"},"nodeType":"YulFunctionCall","src":"21123:17:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21103:3:21"},"nodeType":"YulFunctionCall","src":"21103:38:21"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"21092:3:21"},"nodeType":"YulFunctionCall","src":"21092:50:21"},"nodeType":"YulIf","src":"21089:137:21"}]},"name":"calldata_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"20568:8:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"20578:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"20586:5:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"20593:6:21","type":""}],"src":"20522:711:21"},{"body":{"nodeType":"YulBlock","src":"21324:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21341:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"21346:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21334:6:21"},"nodeType":"YulFunctionCall","src":"21334:19:21"},"nodeType":"YulExpressionStatement","src":"21334:19:21"},{"nodeType":"YulAssignment","src":"21362:29:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21381:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"21386:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21377:3:21"},"nodeType":"YulFunctionCall","src":"21377:14:21"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"21362:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21296:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"21301:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"21312:11:21","type":""}],"src":"21239:158:21"},{"body":{"nodeType":"YulBlock","src":"21515:204:21","statements":[{"nodeType":"YulAssignment","src":"21525:67:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21580:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"21585:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"21532:47:21"},"nodeType":"YulFunctionCall","src":"21532:60:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21525:3:21"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"21639:5:21"},{"name":"pos","nodeType":"YulIdentifier","src":"21646:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"21651:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"21602:36:21"},"nodeType":"YulFunctionCall","src":"21602:56:21"},"nodeType":"YulExpressionStatement","src":"21602:56:21"},{"nodeType":"YulAssignment","src":"21667:46:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21678:3:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21705:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"21683:21:21"},"nodeType":"YulFunctionCall","src":"21683:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21674:3:21"},"nodeType":"YulFunctionCall","src":"21674:39:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21667:3:21"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"21488:5:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"21495:6:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21503:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21511:3:21","type":""}],"src":"21425:294:21"},{"body":{"nodeType":"YulBlock","src":"21941:1103:21","statements":[{"nodeType":"YulVariableDeclaration","src":"21951:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21967:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"21972:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21963:3:21"},"nodeType":"YulFunctionCall","src":"21963:14:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"21955:4:21","type":""}]},{"nodeType":"YulBlock","src":"21987:191:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22025:69:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22070:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22081:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"22088:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22077:3:21"},"nodeType":"YulFunctionCall","src":"22077:16:21"}],"functionName":{"name":"calldata_access_t_bytes4","nodeType":"YulIdentifier","src":"22045:24:21"},"nodeType":"YulFunctionCall","src":"22045:49:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22029:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22139:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22157:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"22162:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22153:3:21"},"nodeType":"YulFunctionCall","src":"22153:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"22107:31:21"},"nodeType":"YulFunctionCall","src":"22107:61:21"},"nodeType":"YulExpressionStatement","src":"22107:61:21"}]},{"nodeType":"YulBlock","src":"22188:308:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22230:95:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22301:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22312:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"22319:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22308:3:21"},"nodeType":"YulFunctionCall","src":"22308:16:21"}],"functionName":{"name":"calldata_access_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"22264:36:21"},"nodeType":"YulFunctionCall","src":"22264:61:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22234:12:21","type":""},{"name":"memberValue1","nodeType":"YulTypedName","src":"22248:12:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22350:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"22355:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22346:3:21"},"nodeType":"YulFunctionCall","src":"22346:14:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22366:4:21"},{"name":"pos","nodeType":"YulIdentifier","src":"22372:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22362:3:21"},"nodeType":"YulFunctionCall","src":"22362:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22339:6:21"},"nodeType":"YulFunctionCall","src":"22339:38:21"},"nodeType":"YulExpressionStatement","src":"22339:38:21"},{"nodeType":"YulAssignment","src":"22390:95:21","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22452:12:21"},{"name":"memberValue1","nodeType":"YulIdentifier","src":"22466:12:21"},{"name":"tail","nodeType":"YulIdentifier","src":"22480:4:21"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22398:53:21"},"nodeType":"YulFunctionCall","src":"22398:87:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22390:4:21"}]}]},{"nodeType":"YulBlock","src":"22506:309:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22549:95:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22620:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22631:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"22638:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22627:3:21"},"nodeType":"YulFunctionCall","src":"22627:16:21"}],"functionName":{"name":"calldata_access_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"22583:36:21"},"nodeType":"YulFunctionCall","src":"22583:61:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22553:12:21","type":""},{"name":"memberValue1","nodeType":"YulTypedName","src":"22567:12:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22669:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"22674:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22665:3:21"},"nodeType":"YulFunctionCall","src":"22665:14:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22685:4:21"},{"name":"pos","nodeType":"YulIdentifier","src":"22691:3:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22681:3:21"},"nodeType":"YulFunctionCall","src":"22681:14:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22658:6:21"},"nodeType":"YulFunctionCall","src":"22658:38:21"},"nodeType":"YulExpressionStatement","src":"22658:38:21"},{"nodeType":"YulAssignment","src":"22709:95:21","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22771:12:21"},{"name":"memberValue1","nodeType":"YulIdentifier","src":"22785:12:21"},{"name":"tail","nodeType":"YulIdentifier","src":"22799:4:21"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22717:53:21"},"nodeType":"YulFunctionCall","src":"22717:87:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22709:4:21"}]}]},{"nodeType":"YulBlock","src":"22825:192:21","statements":[{"nodeType":"YulVariableDeclaration","src":"22864:69:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22909:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22920:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"22927:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22916:3:21"},"nodeType":"YulFunctionCall","src":"22916:16:21"}],"functionName":{"name":"calldata_access_t_bytes4","nodeType":"YulIdentifier","src":"22884:24:21"},"nodeType":"YulFunctionCall","src":"22884:49:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"22868:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22978:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22996:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"23001:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22992:3:21"},"nodeType":"YulFunctionCall","src":"22992:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"22946:31:21"},"nodeType":"YulFunctionCall","src":"22946:61:21"},"nodeType":"YulExpressionStatement","src":"22946:61:21"}]},{"nodeType":"YulAssignment","src":"23027:11:21","value":{"name":"tail","nodeType":"YulIdentifier","src":"23034:4:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23027:3:21"}]}]},"name":"abi_encode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21920:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21927:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21936:3:21","type":""}],"src":"21803:1241:21"},{"body":{"nodeType":"YulBlock","src":"23094:49:21","statements":[{"nodeType":"YulAssignment","src":"23104:33:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23119:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"23126:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23115:3:21"},"nodeType":"YulFunctionCall","src":"23115:22:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23104:7:21"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23076:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23086:7:21","type":""}],"src":"23050:93:21"},{"body":{"nodeType":"YulBlock","src":"23191:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"23247:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23256:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23259:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23249:6:21"},"nodeType":"YulFunctionCall","src":"23249:12:21"},"nodeType":"YulExpressionStatement","src":"23249:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23214:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23238:5:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"23221:16:21"},"nodeType":"YulFunctionCall","src":"23221:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23211:2:21"},"nodeType":"YulFunctionCall","src":"23211:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23204:6:21"},"nodeType":"YulFunctionCall","src":"23204:42:21"},"nodeType":"YulIf","src":"23201:62:21"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23184:5:21","type":""}],"src":"23149:120:21"},{"body":{"nodeType":"YulBlock","src":"23326:86:21","statements":[{"nodeType":"YulAssignment","src":"23336:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23358:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23345:12:21"},"nodeType":"YulFunctionCall","src":"23345:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23336:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23400:5:21"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"23374:25:21"},"nodeType":"YulFunctionCall","src":"23374:32:21"},"nodeType":"YulExpressionStatement","src":"23374:32:21"}]},"name":"abi_decode_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23304:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"23312:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23320:5:21","type":""}],"src":"23275:137:21"},{"body":{"nodeType":"YulBlock","src":"23475:63:21","statements":[{"nodeType":"YulAssignment","src":"23485:47:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"23514:3:21"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"23523:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"23528:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23519:3:21"},"nodeType":"YulFunctionCall","src":"23519:12:21"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"23494:19:21"},"nodeType":"YulFunctionCall","src":"23494:38:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23485:5:21"}]}]},"name":"calldata_access_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"23452:7:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"23461:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23469:5:21","type":""}],"src":"23418:120:21"},{"body":{"nodeType":"YulBlock","src":"23597:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23614:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23636:5:21"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"23619:16:21"},"nodeType":"YulFunctionCall","src":"23619:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23607:6:21"},"nodeType":"YulFunctionCall","src":"23607:36:21"},"nodeType":"YulExpressionStatement","src":"23607:36:21"}]},"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23585:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23592:3:21","type":""}],"src":"23544:105:21"},{"body":{"nodeType":"YulBlock","src":"23699:105:21","statements":[{"nodeType":"YulAssignment","src":"23709:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23724:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"23731:66:21","type":"","value":"0xffffffffffffffff000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23720:3:21"},"nodeType":"YulFunctionCall","src":"23720:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23709:7:21"}]}]},"name":"cleanup_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23681:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23691:7:21","type":""}],"src":"23655:149:21"},{"body":{"nodeType":"YulBlock","src":"23852:78:21","statements":[{"body":{"nodeType":"YulBlock","src":"23908:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23917:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23920:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23910:6:21"},"nodeType":"YulFunctionCall","src":"23910:12:21"},"nodeType":"YulExpressionStatement","src":"23910:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23875:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23899:5:21"}],"functionName":{"name":"cleanup_t_bytes8","nodeType":"YulIdentifier","src":"23882:16:21"},"nodeType":"YulFunctionCall","src":"23882:23:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23872:2:21"},"nodeType":"YulFunctionCall","src":"23872:34:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23865:6:21"},"nodeType":"YulFunctionCall","src":"23865:42:21"},"nodeType":"YulIf","src":"23862:62:21"}]},"name":"validator_revert_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23845:5:21","type":""}],"src":"23810:120:21"},{"body":{"nodeType":"YulBlock","src":"23987:86:21","statements":[{"nodeType":"YulAssignment","src":"23997:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24019:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"24006:12:21"},"nodeType":"YulFunctionCall","src":"24006:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23997:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24061:5:21"}],"functionName":{"name":"validator_revert_t_bytes8","nodeType":"YulIdentifier","src":"24035:25:21"},"nodeType":"YulFunctionCall","src":"24035:32:21"},"nodeType":"YulExpressionStatement","src":"24035:32:21"}]},"name":"abi_decode_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23965:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"23973:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23981:5:21","type":""}],"src":"23936:137:21"},{"body":{"nodeType":"YulBlock","src":"24136:63:21","statements":[{"nodeType":"YulAssignment","src":"24146:47:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"24175:3:21"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"24184:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"24189:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24180:3:21"},"nodeType":"YulFunctionCall","src":"24180:12:21"}],"functionName":{"name":"abi_decode_t_bytes8","nodeType":"YulIdentifier","src":"24155:19:21"},"nodeType":"YulFunctionCall","src":"24155:38:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24146:5:21"}]}]},"name":"calldata_access_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"24113:7:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"24122:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24130:5:21","type":""}],"src":"24079:120:21"},{"body":{"nodeType":"YulBlock","src":"24258:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24275:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24297:5:21"}],"functionName":{"name":"cleanup_t_bytes8","nodeType":"YulIdentifier","src":"24280:16:21"},"nodeType":"YulFunctionCall","src":"24280:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24268:6:21"},"nodeType":"YulFunctionCall","src":"24268:36:21"},"nodeType":"YulExpressionStatement","src":"24268:36:21"}]},"name":"abi_encode_t_bytes8_to_t_bytes8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24246:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24253:3:21","type":""}],"src":"24205:105:21"},{"body":{"nodeType":"YulBlock","src":"24361:105:21","statements":[{"nodeType":"YulAssignment","src":"24371:89:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24386:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"24393:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24382:3:21"},"nodeType":"YulFunctionCall","src":"24382:78:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"24371:7:21"}]}]},"name":"cleanup_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24343:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"24353:7:21","type":""}],"src":"24316:150:21"},{"body":{"nodeType":"YulBlock","src":"24515:79:21","statements":[{"body":{"nodeType":"YulBlock","src":"24572:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24581:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24584:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24574:6:21"},"nodeType":"YulFunctionCall","src":"24574:12:21"},"nodeType":"YulExpressionStatement","src":"24574:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24538:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24563:5:21"}],"functionName":{"name":"cleanup_t_bytes20","nodeType":"YulIdentifier","src":"24545:17:21"},"nodeType":"YulFunctionCall","src":"24545:24:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24535:2:21"},"nodeType":"YulFunctionCall","src":"24535:35:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24528:6:21"},"nodeType":"YulFunctionCall","src":"24528:43:21"},"nodeType":"YulIf","src":"24525:63:21"}]},"name":"validator_revert_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24508:5:21","type":""}],"src":"24472:122:21"},{"body":{"nodeType":"YulBlock","src":"24652:87:21","statements":[{"nodeType":"YulAssignment","src":"24662:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24684:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"24671:12:21"},"nodeType":"YulFunctionCall","src":"24671:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24662:5:21"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24727:5:21"}],"functionName":{"name":"validator_revert_t_bytes20","nodeType":"YulIdentifier","src":"24700:26:21"},"nodeType":"YulFunctionCall","src":"24700:33:21"},"nodeType":"YulExpressionStatement","src":"24700:33:21"}]},"name":"abi_decode_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24630:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"24638:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24646:5:21","type":""}],"src":"24600:139:21"},{"body":{"nodeType":"YulBlock","src":"24803:64:21","statements":[{"nodeType":"YulAssignment","src":"24813:48:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"24843:3:21"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"24852:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"24857:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24848:3:21"},"nodeType":"YulFunctionCall","src":"24848:12:21"}],"functionName":{"name":"abi_decode_t_bytes20","nodeType":"YulIdentifier","src":"24822:20:21"},"nodeType":"YulFunctionCall","src":"24822:39:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24813:5:21"}]}]},"name":"calldata_access_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"24780:7:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"24789:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24797:5:21","type":""}],"src":"24745:122:21"},{"body":{"nodeType":"YulBlock","src":"24928:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24945:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24968:5:21"}],"functionName":{"name":"cleanup_t_bytes20","nodeType":"YulIdentifier","src":"24950:17:21"},"nodeType":"YulFunctionCall","src":"24950:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24938:6:21"},"nodeType":"YulFunctionCall","src":"24938:37:21"},"nodeType":"YulExpressionStatement","src":"24938:37:21"}]},"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24916:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24923:3:21","type":""}],"src":"24873:108:21"},{"body":{"nodeType":"YulBlock","src":"25045:64:21","statements":[{"nodeType":"YulAssignment","src":"25055:48:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"25085:3:21"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"25094:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"25099:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25090:3:21"},"nodeType":"YulFunctionCall","src":"25090:12:21"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"25064:20:21"},"nodeType":"YulFunctionCall","src":"25064:39:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25055:5:21"}]}]},"name":"calldata_access_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"25022:7:21","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"25031:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"25039:5:21","type":""}],"src":"24987:122:21"},{"body":{"nodeType":"YulBlock","src":"25170:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25187:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25210:5:21"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"25192:17:21"},"nodeType":"YulFunctionCall","src":"25192:24:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25180:6:21"},"nodeType":"YulFunctionCall","src":"25180:37:21"},"nodeType":"YulExpressionStatement","src":"25180:37:21"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25158:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25165:3:21","type":""}],"src":"25115:108:21"},{"body":{"nodeType":"YulBlock","src":"25453:1299:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25463:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25479:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"25484:4:21","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25475:3:21"},"nodeType":"YulFunctionCall","src":"25475:14:21"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"25467:4:21","type":""}]},{"nodeType":"YulBlock","src":"25499:202:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25548:69:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25593:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25604:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"25611:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25600:3:21"},"nodeType":"YulFunctionCall","src":"25600:16:21"}],"functionName":{"name":"calldata_access_t_uint32","nodeType":"YulIdentifier","src":"25568:24:21"},"nodeType":"YulFunctionCall","src":"25568:49:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"25552:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"25662:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25680:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"25685:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25676:3:21"},"nodeType":"YulFunctionCall","src":"25676:14:21"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulIdentifier","src":"25630:31:21"},"nodeType":"YulFunctionCall","src":"25630:61:21"},"nodeType":"YulExpressionStatement","src":"25630:61:21"}]},{"nodeType":"YulBlock","src":"25711:198:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25756:69:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25801:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25812:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"25819:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25808:3:21"},"nodeType":"YulFunctionCall","src":"25808:16:21"}],"functionName":{"name":"calldata_access_t_bytes8","nodeType":"YulIdentifier","src":"25776:24:21"},"nodeType":"YulFunctionCall","src":"25776:49:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"25760:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"25870:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25888:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"25893:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25884:3:21"},"nodeType":"YulFunctionCall","src":"25884:14:21"}],"functionName":{"name":"abi_encode_t_bytes8_to_t_bytes8","nodeType":"YulIdentifier","src":"25838:31:21"},"nodeType":"YulFunctionCall","src":"25838:61:21"},"nodeType":"YulExpressionStatement","src":"25838:61:21"}]},{"nodeType":"YulBlock","src":"25919:203:21","statements":[{"nodeType":"YulVariableDeclaration","src":"25966:70:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26012:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26023:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26030:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26019:3:21"},"nodeType":"YulFunctionCall","src":"26019:16:21"}],"functionName":{"name":"calldata_access_t_bytes20","nodeType":"YulIdentifier","src":"25986:25:21"},"nodeType":"YulFunctionCall","src":"25986:50:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"25970:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"26083:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26101:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"26106:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26097:3:21"},"nodeType":"YulFunctionCall","src":"26097:14:21"}],"functionName":{"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulIdentifier","src":"26049:33:21"},"nodeType":"YulFunctionCall","src":"26049:63:21"},"nodeType":"YulExpressionStatement","src":"26049:63:21"}]},{"nodeType":"YulBlock","src":"26132:203:21","statements":[{"nodeType":"YulVariableDeclaration","src":"26179:70:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26225:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26236:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26243:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26232:3:21"},"nodeType":"YulFunctionCall","src":"26232:16:21"}],"functionName":{"name":"calldata_access_t_bytes20","nodeType":"YulIdentifier","src":"26199:25:21"},"nodeType":"YulFunctionCall","src":"26199:50:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"26183:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"26296:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26314:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"26319:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26310:3:21"},"nodeType":"YulFunctionCall","src":"26310:14:21"}],"functionName":{"name":"abi_encode_t_bytes20_to_t_bytes20","nodeType":"YulIdentifier","src":"26262:33:21"},"nodeType":"YulFunctionCall","src":"26262:63:21"},"nodeType":"YulExpressionStatement","src":"26262:63:21"}]},{"nodeType":"YulBlock","src":"26345:198:21","statements":[{"nodeType":"YulVariableDeclaration","src":"26390:69:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26435:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26446:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26453:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26442:3:21"},"nodeType":"YulFunctionCall","src":"26442:16:21"}],"functionName":{"name":"calldata_access_t_bytes4","nodeType":"YulIdentifier","src":"26410:24:21"},"nodeType":"YulFunctionCall","src":"26410:49:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"26394:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"26504:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26522:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"26527:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26518:3:21"},"nodeType":"YulFunctionCall","src":"26518:14:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4","nodeType":"YulIdentifier","src":"26472:31:21"},"nodeType":"YulFunctionCall","src":"26472:61:21"},"nodeType":"YulExpressionStatement","src":"26472:61:21"}]},{"nodeType":"YulBlock","src":"26553:192:21","statements":[{"nodeType":"YulVariableDeclaration","src":"26589:70:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26635:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26646:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"26653:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26642:3:21"},"nodeType":"YulFunctionCall","src":"26642:16:21"}],"functionName":{"name":"calldata_access_t_address","nodeType":"YulIdentifier","src":"26609:25:21"},"nodeType":"YulFunctionCall","src":"26609:50:21"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"26593:12:21","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"26706:12:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26724:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"26729:4:21","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26720:3:21"},"nodeType":"YulFunctionCall","src":"26720:14:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"26672:33:21"},"nodeType":"YulFunctionCall","src":"26672:63:21"},"nodeType":"YulExpressionStatement","src":"26672:63:21"}]}]},"name":"abi_encode_t_struct$_DepositRevealInfo_$4744_calldata_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25440:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25447:3:21","type":""}],"src":"25315:1437:21"},{"body":{"nodeType":"YulBlock","src":"27020:394:21","statements":[{"nodeType":"YulAssignment","src":"27030:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27042:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27053:3:21","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27038:3:21"},"nodeType":"YulFunctionCall","src":"27038:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27030:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27078:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27089:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27074:3:21"},"nodeType":"YulFunctionCall","src":"27074:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27097:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"27103:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27093:3:21"},"nodeType":"YulFunctionCall","src":"27093:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27067:6:21"},"nodeType":"YulFunctionCall","src":"27067:47:21"},"nodeType":"YulExpressionStatement","src":"27067:47:21"},{"nodeType":"YulAssignment","src":"27123:130:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27239:6:21"},{"name":"tail","nodeType":"YulIdentifier","src":"27248:4:21"}],"functionName":{"name":"abi_encode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27131:107:21"},"nodeType":"YulFunctionCall","src":"27131:122:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27123:4:21"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27379:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27392:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27403:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27388:3:21"},"nodeType":"YulFunctionCall","src":"27388:18:21"}],"functionName":{"name":"abi_encode_t_struct$_DepositRevealInfo_$4744_calldata_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27263:115:21"},"nodeType":"YulFunctionCall","src":"27263:144:21"},"nodeType":"YulExpressionStatement","src":"27263:144:21"}]},"name":"abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_t_struct$_DepositRevealInfo_$4744_calldata_ptr__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26984:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26996:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27004:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27015:4:21","type":""}],"src":"26758:656:21"},{"body":{"nodeType":"YulBlock","src":"27526:127:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27548:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"27556:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27544:3:21"},"nodeType":"YulFunctionCall","src":"27544:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"27560:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27537:6:21"},"nodeType":"YulFunctionCall","src":"27537:58:21"},"nodeType":"YulExpressionStatement","src":"27537:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27616:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"27624:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27612:3:21"},"nodeType":"YulFunctionCall","src":"27612:15:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"27629:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27605:6:21"},"nodeType":"YulFunctionCall","src":"27605:41:21"},"nodeType":"YulExpressionStatement","src":"27605:41:21"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27518:6:21","type":""}],"src":"27420:233:21"},{"body":{"nodeType":"YulBlock","src":"27805:220:21","statements":[{"nodeType":"YulAssignment","src":"27815:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27881:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"27886:2:21","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27822:58:21"},"nodeType":"YulFunctionCall","src":"27822:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27815:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27987:3:21"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"27898:88:21"},"nodeType":"YulFunctionCall","src":"27898:93:21"},"nodeType":"YulExpressionStatement","src":"27898:93:21"},{"nodeType":"YulAssignment","src":"28000:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28011:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"28016:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28007:3:21"},"nodeType":"YulFunctionCall","src":"28007:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28000:3:21"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27793:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27801:3:21","type":""}],"src":"27659:366:21"},{"body":{"nodeType":"YulBlock","src":"28202:248:21","statements":[{"nodeType":"YulAssignment","src":"28212:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28224:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"28235:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28220:3:21"},"nodeType":"YulFunctionCall","src":"28220:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28212:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28259:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"28270:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28255:3:21"},"nodeType":"YulFunctionCall","src":"28255:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28278:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"28284:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28274:3:21"},"nodeType":"YulFunctionCall","src":"28274:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28248:6:21"},"nodeType":"YulFunctionCall","src":"28248:47:21"},"nodeType":"YulExpressionStatement","src":"28248:47:21"},{"nodeType":"YulAssignment","src":"28304:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28438:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28312:124:21"},"nodeType":"YulFunctionCall","src":"28312:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28304:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28182:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28197:4:21","type":""}],"src":"28031:419:21"},{"body":{"nodeType":"YulBlock","src":"28562:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28584:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"28592:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28580:3:21"},"nodeType":"YulFunctionCall","src":"28580:14:21"},{"hexValue":"576f726d686f6c6552656c6179657220616464726573732063616e6e6f742062","kind":"string","nodeType":"YulLiteral","src":"28596:34:21","type":"","value":"WormholeRelayer address cannot b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28573:6:21"},"nodeType":"YulFunctionCall","src":"28573:58:21"},"nodeType":"YulExpressionStatement","src":"28573:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28652:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"28660:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28648:3:21"},"nodeType":"YulFunctionCall","src":"28648:15:21"},{"hexValue":"65207a65726f","kind":"string","nodeType":"YulLiteral","src":"28665:8:21","type":"","value":"e zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28641:6:21"},"nodeType":"YulFunctionCall","src":"28641:33:21"},"nodeType":"YulExpressionStatement","src":"28641:33:21"}]},"name":"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28554:6:21","type":""}],"src":"28456:225:21"},{"body":{"nodeType":"YulBlock","src":"28833:220:21","statements":[{"nodeType":"YulAssignment","src":"28843:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28909:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"28914:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28850:58:21"},"nodeType":"YulFunctionCall","src":"28850:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28843:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29015:3:21"}],"functionName":{"name":"store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0","nodeType":"YulIdentifier","src":"28926:88:21"},"nodeType":"YulFunctionCall","src":"28926:93:21"},"nodeType":"YulExpressionStatement","src":"28926:93:21"},{"nodeType":"YulAssignment","src":"29028:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29039:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29044:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29035:3:21"},"nodeType":"YulFunctionCall","src":"29035:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29028:3:21"}]}]},"name":"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28821:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28829:3:21","type":""}],"src":"28687:366:21"},{"body":{"nodeType":"YulBlock","src":"29230:248:21","statements":[{"nodeType":"YulAssignment","src":"29240:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29252:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"29263:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29248:3:21"},"nodeType":"YulFunctionCall","src":"29248:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29240:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29287:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"29298:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29283:3:21"},"nodeType":"YulFunctionCall","src":"29283:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29306:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"29312:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29302:3:21"},"nodeType":"YulFunctionCall","src":"29302:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29276:6:21"},"nodeType":"YulFunctionCall","src":"29276:47:21"},"nodeType":"YulExpressionStatement","src":"29276:47:21"},{"nodeType":"YulAssignment","src":"29332:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29466:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29340:124:21"},"nodeType":"YulFunctionCall","src":"29340:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29332:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29210:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29225:4:21","type":""}],"src":"29059:419:21"},{"body":{"nodeType":"YulBlock","src":"29590:121:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29612:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"29620:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29608:3:21"},"nodeType":"YulFunctionCall","src":"29608:14:21"},{"hexValue":"4c32576f726d686f6c654761746577617920616464726573732063616e6e6f74","kind":"string","nodeType":"YulLiteral","src":"29624:34:21","type":"","value":"L2WormholeGateway address cannot"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29601:6:21"},"nodeType":"YulFunctionCall","src":"29601:58:21"},"nodeType":"YulExpressionStatement","src":"29601:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29680:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"29688:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29676:3:21"},"nodeType":"YulFunctionCall","src":"29676:15:21"},{"hexValue":"206265207a65726f","kind":"string","nodeType":"YulLiteral","src":"29693:10:21","type":"","value":" be zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29669:6:21"},"nodeType":"YulFunctionCall","src":"29669:35:21"},"nodeType":"YulExpressionStatement","src":"29669:35:21"}]},"name":"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29582:6:21","type":""}],"src":"29484:227:21"},{"body":{"nodeType":"YulBlock","src":"29863:220:21","statements":[{"nodeType":"YulAssignment","src":"29873:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29939:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"29944:2:21","type":"","value":"40"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29880:58:21"},"nodeType":"YulFunctionCall","src":"29880:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29873:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30045:3:21"}],"functionName":{"name":"store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349","nodeType":"YulIdentifier","src":"29956:88:21"},"nodeType":"YulFunctionCall","src":"29956:93:21"},"nodeType":"YulExpressionStatement","src":"29956:93:21"},{"nodeType":"YulAssignment","src":"30058:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30069:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"30074:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30065:3:21"},"nodeType":"YulFunctionCall","src":"30065:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30058:3:21"}]}]},"name":"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29851:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29859:3:21","type":""}],"src":"29717:366:21"},{"body":{"nodeType":"YulBlock","src":"30260:248:21","statements":[{"nodeType":"YulAssignment","src":"30270:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30282:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"30293:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30278:3:21"},"nodeType":"YulFunctionCall","src":"30278:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30270:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30317:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"30328:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30313:3:21"},"nodeType":"YulFunctionCall","src":"30313:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30336:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"30342:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30332:3:21"},"nodeType":"YulFunctionCall","src":"30332:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30306:6:21"},"nodeType":"YulFunctionCall","src":"30306:47:21"},"nodeType":"YulExpressionStatement","src":"30306:47:21"},{"nodeType":"YulAssignment","src":"30362:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30496:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30370:124:21"},"nodeType":"YulFunctionCall","src":"30370:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30362:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30240:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30255:4:21","type":""}],"src":"30089:419:21"},{"body":{"nodeType":"YulBlock","src":"30567:32:21","statements":[{"nodeType":"YulAssignment","src":"30577:16:21","value":{"name":"value","nodeType":"YulIdentifier","src":"30588:5:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30577:7:21"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30549:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30559:7:21","type":""}],"src":"30514:85:21"},{"body":{"nodeType":"YulBlock","src":"30648:43:21","statements":[{"nodeType":"YulAssignment","src":"30658:27:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30673:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"30680:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30669:3:21"},"nodeType":"YulFunctionCall","src":"30669:16:21"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30658:7:21"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30630:5:21","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30640:7:21","type":""}],"src":"30605:86:21"},{"body":{"nodeType":"YulBlock","src":"30763:88:21","statements":[{"nodeType":"YulAssignment","src":"30773:72:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30837:5:21"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"30811:25:21"},"nodeType":"YulFunctionCall","src":"30811:32:21"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"30802:8:21"},"nodeType":"YulFunctionCall","src":"30802:42:21"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"30786:15:21"},"nodeType":"YulFunctionCall","src":"30786:59:21"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"30773:9:21"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30743:5:21","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"30753:9:21","type":""}],"src":"30697:154:21"},{"body":{"nodeType":"YulBlock","src":"30928:72:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30945:3:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30987:5:21"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"30950:36:21"},"nodeType":"YulFunctionCall","src":"30950:43:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30938:6:21"},"nodeType":"YulFunctionCall","src":"30938:56:21"},"nodeType":"YulExpressionStatement","src":"30938:56:21"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30916:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"30923:3:21","type":""}],"src":"30857:143:21"},{"body":{"nodeType":"YulBlock","src":"31110:130:21","statements":[{"nodeType":"YulAssignment","src":"31120:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31132:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"31143:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31128:3:21"},"nodeType":"YulFunctionCall","src":"31128:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31120:4:21"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31206:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31219:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"31230:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31215:3:21"},"nodeType":"YulFunctionCall","src":"31215:17:21"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"31156:49:21"},"nodeType":"YulFunctionCall","src":"31156:77:21"},"nodeType":"YulExpressionStatement","src":"31156:77:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31082:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31094:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31105:4:21","type":""}],"src":"31006:234:21"},{"body":{"nodeType":"YulBlock","src":"31352:119:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31374:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31382:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31370:3:21"},"nodeType":"YulFunctionCall","src":"31370:14:21"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"31386:34:21","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31363:6:21"},"nodeType":"YulFunctionCall","src":"31363:58:21"},"nodeType":"YulExpressionStatement","src":"31363:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31442:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"31450:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31438:3:21"},"nodeType":"YulFunctionCall","src":"31438:15:21"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"31455:8:21","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31431:6:21"},"nodeType":"YulFunctionCall","src":"31431:33:21"},"nodeType":"YulExpressionStatement","src":"31431:33:21"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31344:6:21","type":""}],"src":"31246:225:21"},{"body":{"nodeType":"YulBlock","src":"31623:220:21","statements":[{"nodeType":"YulAssignment","src":"31633:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31699:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"31704:2:21","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31640:58:21"},"nodeType":"YulFunctionCall","src":"31640:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31633:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31805:3:21"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"31716:88:21"},"nodeType":"YulFunctionCall","src":"31716:93:21"},"nodeType":"YulExpressionStatement","src":"31716:93:21"},{"nodeType":"YulAssignment","src":"31818:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31829:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"31834:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31825:3:21"},"nodeType":"YulFunctionCall","src":"31825:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31818:3:21"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31611:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31619:3:21","type":""}],"src":"31477:366:21"},{"body":{"nodeType":"YulBlock","src":"32020:248:21","statements":[{"nodeType":"YulAssignment","src":"32030:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32042:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"32053:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32038:3:21"},"nodeType":"YulFunctionCall","src":"32038:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32030:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32077:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"32088:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32073:3:21"},"nodeType":"YulFunctionCall","src":"32073:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32096:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"32102:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32092:3:21"},"nodeType":"YulFunctionCall","src":"32092:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32066:6:21"},"nodeType":"YulFunctionCall","src":"32066:47:21"},"nodeType":"YulExpressionStatement","src":"32066:47:21"},{"nodeType":"YulAssignment","src":"32122:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32256:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32130:124:21"},"nodeType":"YulFunctionCall","src":"32130:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32122:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32000:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32015:4:21","type":""}],"src":"31849:419:21"},{"body":{"nodeType":"YulBlock","src":"32380:76:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32402:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"32410:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32398:3:21"},"nodeType":"YulFunctionCall","src":"32398:14:21"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"32414:34:21","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32391:6:21"},"nodeType":"YulFunctionCall","src":"32391:58:21"},"nodeType":"YulExpressionStatement","src":"32391:58:21"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32372:6:21","type":""}],"src":"32274:182:21"},{"body":{"nodeType":"YulBlock","src":"32608:220:21","statements":[{"nodeType":"YulAssignment","src":"32618:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32684:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"32689:2:21","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32625:58:21"},"nodeType":"YulFunctionCall","src":"32625:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32618:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32790:3:21"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"32701:88:21"},"nodeType":"YulFunctionCall","src":"32701:93:21"},"nodeType":"YulExpressionStatement","src":"32701:93:21"},{"nodeType":"YulAssignment","src":"32803:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32814:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"32819:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32810:3:21"},"nodeType":"YulFunctionCall","src":"32810:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32803:3:21"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32596:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32604:3:21","type":""}],"src":"32462:366:21"},{"body":{"nodeType":"YulBlock","src":"33005:248:21","statements":[{"nodeType":"YulAssignment","src":"33015:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33027:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"33038:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33023:3:21"},"nodeType":"YulFunctionCall","src":"33023:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33015:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33062:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"33073:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33058:3:21"},"nodeType":"YulFunctionCall","src":"33058:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33081:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"33087:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33077:3:21"},"nodeType":"YulFunctionCall","src":"33077:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33051:6:21"},"nodeType":"YulFunctionCall","src":"33051:47:21"},"nodeType":"YulExpressionStatement","src":"33051:47:21"},{"nodeType":"YulAssignment","src":"33107:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33241:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33115:124:21"},"nodeType":"YulFunctionCall","src":"33115:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33107:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32985:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33000:4:21","type":""}],"src":"32834:419:21"},{"body":{"nodeType":"YulBlock","src":"33365:124:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33387:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33395:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33383:3:21"},"nodeType":"YulFunctionCall","src":"33383:14:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"33399:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33376:6:21"},"nodeType":"YulFunctionCall","src":"33376:58:21"},"nodeType":"YulExpressionStatement","src":"33376:58:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33455:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"33463:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33451:3:21"},"nodeType":"YulFunctionCall","src":"33451:15:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"33468:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33444:6:21"},"nodeType":"YulFunctionCall","src":"33444:38:21"},"nodeType":"YulExpressionStatement","src":"33444:38:21"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33357:6:21","type":""}],"src":"33259:230:21"},{"body":{"nodeType":"YulBlock","src":"33641:220:21","statements":[{"nodeType":"YulAssignment","src":"33651:74:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33717:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"33722:2:21","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33658:58:21"},"nodeType":"YulFunctionCall","src":"33658:67:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33651:3:21"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33823:3:21"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"33734:88:21"},"nodeType":"YulFunctionCall","src":"33734:93:21"},"nodeType":"YulExpressionStatement","src":"33734:93:21"},{"nodeType":"YulAssignment","src":"33836:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33847:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"33852:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33843:3:21"},"nodeType":"YulFunctionCall","src":"33843:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33836:3:21"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33629:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33637:3:21","type":""}],"src":"33495:366:21"},{"body":{"nodeType":"YulBlock","src":"34038:248:21","statements":[{"nodeType":"YulAssignment","src":"34048:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34060:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"34071:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34056:3:21"},"nodeType":"YulFunctionCall","src":"34056:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34048:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34095:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"34106:1:21","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34091:3:21"},"nodeType":"YulFunctionCall","src":"34091:17:21"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34114:4:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"34120:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34110:3:21"},"nodeType":"YulFunctionCall","src":"34110:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34084:6:21"},"nodeType":"YulFunctionCall","src":"34084:47:21"},"nodeType":"YulExpressionStatement","src":"34084:47:21"},{"nodeType":"YulAssignment","src":"34140:139:21","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34274:4:21"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34148:124:21"},"nodeType":"YulFunctionCall","src":"34148:131:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34140:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34018:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34033:4:21","type":""}],"src":"33867:419:21"}]},"contents":"{\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes[]\n    function abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n            let elementPos := add(offset, innerOffset)\n\n            mstore(dst, abi_decode_t_bytes_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // bytes[]\n    function abi_decode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32t_uint16t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct IBridgeTypes.BitcoinTxInfo\n    function abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 128) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    // struct IBridgeTypes.DepositRevealInfo\n    function abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 192) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function abi_decode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptrt_struct$_DepositRevealInfo_$4744_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 256) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_struct$_DepositRevealInfo_$4744_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint16(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IL2WormholeGateway_$5658_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IL2WormholeGateway_$5658_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IL2WormholeGateway_$5658_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IL2WormholeGateway_$5658__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IL2WormholeGateway_$5658_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IWormholeRelayer_$5928_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IWormholeRelayer_$5928_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IWormholeRelayer_$5928__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IWormholeRelayer_$5928_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"L1 Bitcoin Depositor already set\")\n\n    }\n\n    function abi_encode_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_22c5c232cca5af2150c4190478117f5e21582e07c41825cebb58edfb110c95b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314(memPtr) {\n\n        mstore(add(memPtr, 0), \"L1 Bitcoin Depositor must not be\")\n\n        mstore(add(memPtr, 32), \" 0x0\")\n\n    }\n\n    function abi_encode_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_efa883159a648ceb141d8c1f6658f0ac26f0a02d46bd1bd2cfa474c4ec020314_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Caller is not Wormhole Relayer\")\n\n    }\n\n    function abi_encode_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b339e39aab18a476dde5bc1f98bdf861de4c95cbdb129860a839c6efcd4ab1f3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92(memPtr) {\n\n        mstore(add(memPtr, 0), \"Source chain is not the expected\")\n\n        mstore(add(memPtr, 32), \" L1 chain\")\n\n    }\n\n    function abi_encode_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_31e68c34abf5f8298cae4cb7597757bd5ec8bed715334d5547f30b6a46583f92_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967(memPtr) {\n\n        mstore(add(memPtr, 0), \"Source address is not the expect\")\n\n        mstore(add(memPtr, 32), \"ed L1 Bitcoin depositor\")\n\n    }\n\n    function abi_encode_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)\n        store_literal_in_memory_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_296a535db463aff7e476a7b7232ab4cdff8aaf854ae2ede035dcd5d5307d6967_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae(memPtr) {\n\n        mstore(add(memPtr, 0), \"Expected 1 additional VAA key fo\")\n\n        mstore(add(memPtr, 32), \"r token transfer\")\n\n    }\n\n    function abi_encode_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 48)\n        store_literal_in_memory_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b5ebee155a5a952498acd4009e72445946ec51247980210888d82e319324c6ae_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function calldata_access_t_bytes4(baseRef, ptr) -> value {\n        value := abi_decode_t_bytes4(ptr, add(ptr, 32))\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2() {\n        revert(0, 0)\n    }\n\n    function revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20() {\n        revert(0, 0)\n    }\n\n    function revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4() {\n        revert(0, 0)\n    }\n\n    function calldata_access_t_bytes_calldata_ptr(base_ref, ptr) -> value, length {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, sub(sub(calldatasize(), base_ref), sub(0x20, 1)))) { revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4() }\n        value := add(rel_offset_of_tail, base_ref)\n\n        length := calldataload(value)\n        value := add(value, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2() }\n        if sgt(value, sub(calldatasize(), mul(length, 0x01))) { revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20() }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // struct IBridgeTypes.BitcoinTxInfo -> struct IBridgeTypes.BitcoinTxInfo\n    function abi_encode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // version\n\n            let memberValue0 := calldata_access_t_bytes4(value, add(value, 0x00))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // inputVector\n\n            let memberValue0, memberValue1 := calldata_access_t_bytes_calldata_ptr(value, add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(memberValue0, memberValue1, tail)\n\n        }\n\n        {\n            // outputVector\n\n            let memberValue0, memberValue1 := calldata_access_t_bytes_calldata_ptr(value, add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(memberValue0, memberValue1, tail)\n\n        }\n\n        {\n            // locktime\n\n            let memberValue0 := calldata_access_t_bytes4(value, add(value, 0x60))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x60))\n        }\n\n        end := tail\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function calldata_access_t_uint32(baseRef, ptr) -> value {\n        value := abi_decode_t_uint32(ptr, add(ptr, 32))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function cleanup_t_bytes8(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes8(value) {\n        if iszero(eq(value, cleanup_t_bytes8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes8(value)\n    }\n\n    function calldata_access_t_bytes8(baseRef, ptr) -> value {\n        value := abi_decode_t_bytes8(ptr, add(ptr, 32))\n    }\n\n    function abi_encode_t_bytes8_to_t_bytes8(value, pos) {\n        mstore(pos, cleanup_t_bytes8(value))\n    }\n\n    function cleanup_t_bytes20(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes20(value) {\n        if iszero(eq(value, cleanup_t_bytes20(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes20(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes20(value)\n    }\n\n    function calldata_access_t_bytes20(baseRef, ptr) -> value {\n        value := abi_decode_t_bytes20(ptr, add(ptr, 32))\n    }\n\n    function abi_encode_t_bytes20_to_t_bytes20(value, pos) {\n        mstore(pos, cleanup_t_bytes20(value))\n    }\n\n    function calldata_access_t_address(baseRef, ptr) -> value {\n        value := abi_decode_t_address(ptr, add(ptr, 32))\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct IBridgeTypes.DepositRevealInfo -> struct IBridgeTypes.DepositRevealInfo\n    function abi_encode_t_struct$_DepositRevealInfo_$4744_calldata_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xc0)\n\n        {\n            // fundingOutputIndex\n\n            let memberValue0 := calldata_access_t_uint32(value, add(value, 0x00))\n            abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // blindingFactor\n\n            let memberValue0 := calldata_access_t_bytes8(value, add(value, 0x20))\n            abi_encode_t_bytes8_to_t_bytes8(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // walletPubKeyHash\n\n            let memberValue0 := calldata_access_t_bytes20(value, add(value, 0x40))\n            abi_encode_t_bytes20_to_t_bytes20(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // refundPubKeyHash\n\n            let memberValue0 := calldata_access_t_bytes20(value, add(value, 0x60))\n            abi_encode_t_bytes20_to_t_bytes20(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // refundLocktime\n\n            let memberValue0 := calldata_access_t_bytes4(value, add(value, 0x80))\n            abi_encode_t_bytes4_to_t_bytes4(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // vault\n\n            let memberValue0 := calldata_access_t_address(value, add(value, 0xa0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xa0))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_t_struct$_DepositRevealInfo_$4744_calldata_ptr__to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_t_struct$_DepositRevealInfo_$4744_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_BitcoinTxInfo_$4731_calldata_ptr_to_t_struct$_BitcoinTxInfo_$4731_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_struct$_DepositRevealInfo_$4744_calldata_ptr_to_t_struct$_DepositRevealInfo_$4744_memory_ptr_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0(memPtr) {\n\n        mstore(add(memPtr, 0), \"WormholeRelayer address cannot b\")\n\n        mstore(add(memPtr, 32), \"e zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9d9f10b27fa5e238dfe3a8d53141c129e62f02b37c632d47c322e5de35aa66e0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349(memPtr) {\n\n        mstore(add(memPtr, 0), \"L2WormholeGateway address cannot\")\n\n        mstore(add(memPtr, 32), \" be zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fd2cd1607e5cd6d3be51dd7074e5e42195d6bf9aadf9522b20c8c82fbc61b349_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061009c5760003560e01c80637ebef529116100645780637ebef529146101515780638da5cb5b1461017a578063aa82e33b146101a5578063da25b725146101d0578063e1551fc9146101fb578063f2fde38b146102265761009c565b806312622e5b146100a157806331446c46146100cc578063529dca32146100f5578063642dc03314610111578063715018a61461013a575b600080fd5b3480156100ad57600080fd5b506100b661024f565b6040516100c39190610cd4565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610d61565b610263565b005b61010f600480360381019061010a919061101c565b6103af565b005b34801561011d57600080fd5b5061013860048036038101906101339190611112565b610624565b005b34801561014657600080fd5b5061014f610690565b005b34801561015d57600080fd5b5061017860048036038101906101739190611182565b6106a4565b005b34801561018657600080fd5b5061018f610962565b60405161019c91906111e4565b60405180910390f35b3480156101b157600080fd5b506101ba61098c565b6040516101c7919061125e565b60405180910390f35b3480156101dc57600080fd5b506101e56109b2565b6040516101f2919061129a565b60405180910390f35b34801561020757600080fd5b506102106109d8565b60405161021d91906111e4565b60405180910390f35b34801561023257600080fd5b5061024d60048036038101906102489190610d61565b6109fe565b005b606660149054906101000a900461ffff1681565b61026b610a81565b600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390611312565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361036b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610362906113a4565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043690611410565b60405180910390fd5b606660149054906101000a900461ffff1661ffff168261ffff1614610499576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610490906114a2565b60405180910390fd5b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104db84610aff565b73ffffffffffffffffffffffffffffffffffffffff1614610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611534565b60405180910390fd5b6001845114610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c906115c6565b60405180910390fd5b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d21a596856000815181106105c7576105c66115e6565b5b60200260200101516040518263ffffffff1660e01b81526004016105eb9190611694565b600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f69a2a6d267e87f99180657174ca85389598d457ba949435ee4940f621bb849cf8585604051610683929190611aa1565b60405180910390a3505050565b610698610a81565b6106a26000610b0c565b565b60008060019054906101000a900460ff161590508080156106d55750600160008054906101000a900460ff1660ff16105b8061070257506106e430610bd2565b1580156107015750600160008054906101000a900460ff1660ff16145b5b610741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073890611b43565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561077e576001600060016101000a81548160ff0219169083151502179055505b610786610bf5565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90611bd5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085b90611c67565b60405180910390fd5b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660146101000a81548161ffff021916908361ffff160217905550801561095c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109539190611ccf565b60405180910390a15b50505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a06610a81565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90611d5c565b60405180910390fd5b610a7e81610b0c565b50565b610a89610c4e565b73ffffffffffffffffffffffffffffffffffffffff16610aa7610962565b73ffffffffffffffffffffffffffffffffffffffff1614610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490611dc8565b60405180910390fd5b565b60008160001c9050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611e5a565b60405180910390fd5b610c4c610c56565b565b600033905090565b600060019054906101000a900460ff16610ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9c90611e5a565b60405180910390fd5b610cb5610cb0610c4e565b610b0c565b565b600061ffff82169050919050565b610cce81610cb7565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2e82610d03565b9050919050565b610d3e81610d23565b8114610d4957600080fd5b50565b600081359050610d5b81610d35565b92915050565b600060208284031215610d7757610d76610cf9565b5b6000610d8584828501610d4c565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610de182610d98565b810181811067ffffffffffffffff82111715610e0057610dff610da9565b5b80604052505050565b6000610e13610cef565b9050610e1f8282610dd8565b919050565b600067ffffffffffffffff821115610e3f57610e3e610da9565b5b610e4882610d98565b9050602081019050919050565b82818337600083830152505050565b6000610e77610e7284610e24565b610e09565b905082815260208101848484011115610e9357610e92610d93565b5b610e9e848285610e55565b509392505050565b600082601f830112610ebb57610eba610d8e565b5b8135610ecb848260208601610e64565b91505092915050565b600067ffffffffffffffff821115610eef57610eee610da9565b5b602082029050602081019050919050565b600080fd5b6000610f18610f1384610ed4565b610e09565b90508083825260208201905060208402830185811115610f3b57610f3a610f00565b5b835b81811015610f8257803567ffffffffffffffff811115610f6057610f5f610d8e565b5b808601610f6d8982610ea6565b85526020850194505050602081019050610f3d565b5050509392505050565b600082601f830112610fa157610fa0610d8e565b5b8135610fb1848260208601610f05565b91505092915050565b6000819050919050565b610fcd81610fba565b8114610fd857600080fd5b50565b600081359050610fea81610fc4565b92915050565b610ff981610cb7565b811461100457600080fd5b50565b60008135905061101681610ff0565b92915050565b600080600080600060a0868803121561103857611037610cf9565b5b600086013567ffffffffffffffff81111561105657611055610cfe565b5b61106288828901610ea6565b955050602086013567ffffffffffffffff81111561108357611082610cfe565b5b61108f88828901610f8c565b94505060406110a088828901610fdb565b93505060606110b188828901611007565b92505060806110c288828901610fdb565b9150509295509295909350565b600080fd5b6000608082840312156110ea576110e96110cf565b5b81905092915050565b600060c08284031215611109576111086110cf565b5b81905092915050565b6000806000610100848603121561112c5761112b610cf9565b5b600084013567ffffffffffffffff81111561114a57611149610cfe565b5b611156868287016110d4565b9350506020611167868287016110f3565b92505060e061117886828701610d4c565b9150509250925092565b60008060006060848603121561119b5761119a610cf9565b5b60006111a986828701610d4c565b93505060206111ba86828701610d4c565b92505060406111cb86828701611007565b9150509250925092565b6111de81610d23565b82525050565b60006020820190506111f960008301846111d5565b92915050565b6000819050919050565b600061122461121f61121a84610d03565b6111ff565b610d03565b9050919050565b600061123682611209565b9050919050565b60006112488261122b565b9050919050565b6112588161123d565b82525050565b6000602082019050611273600083018461124f565b92915050565b60006112848261122b565b9050919050565b61129481611279565b82525050565b60006020820190506112af600083018461128b565b92915050565b600082825260208201905092915050565b7f4c3120426974636f696e204465706f7369746f7220616c726561647920736574600082015250565b60006112fc6020836112b5565b9150611307826112c6565b602082019050919050565b6000602082019050818103600083015261132b816112ef565b9050919050565b7f4c3120426974636f696e204465706f7369746f72206d757374206e6f7420626560008201527f2030783000000000000000000000000000000000000000000000000000000000602082015250565b600061138e6024836112b5565b915061139982611332565b604082019050919050565b600060208201905081810360008301526113bd81611381565b9050919050565b7f43616c6c6572206973206e6f7420576f726d686f6c652052656c617965720000600082015250565b60006113fa601e836112b5565b9150611405826113c4565b602082019050919050565b60006020820190508181036000830152611429816113ed565b9050919050565b7f536f7572636520636861696e206973206e6f742074686520657870656374656460008201527f204c3120636861696e0000000000000000000000000000000000000000000000602082015250565b600061148c6029836112b5565b915061149782611430565b604082019050919050565b600060208201905081810360008301526114bb8161147f565b9050919050565b7f536f757263652061646472657373206973206e6f74207468652065787065637460008201527f6564204c3120426974636f696e206465706f7369746f72000000000000000000602082015250565b600061151e6037836112b5565b9150611529826114c2565b604082019050919050565b6000602082019050818103600083015261154d81611511565b9050919050565b7f45787065637465642031206164646974696f6e616c20564141206b657920666f60008201527f7220746f6b656e207472616e7366657200000000000000000000000000000000602082015250565b60006115b06030836112b5565b91506115bb82611554565b604082019050919050565b600060208201905081810360008301526115df816115a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b8381101561164f578082015181840152602081019050611634565b60008484015250505050565b600061166682611615565b6116708185611620565b9350611680818560208601611631565b61168981610d98565b840191505092915050565b600060208201905081810360008301526116ae818461165b565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116eb816116b6565b81146116f657600080fd5b50565b600081359050611708816116e2565b92915050565b600061171d60208401846116f9565b905092915050565b61172e816116b6565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117605761175f61173e565b5b83810192508235915060208301925067ffffffffffffffff82111561178857611787611734565b5b60018202360383131561179e5761179d611739565b5b509250929050565b600082825260208201905092915050565b60006117c383856117a6565b93506117d0838584610e55565b6117d983610d98565b840190509392505050565b6000608083016117f7600084018461170e565b6118046000860182611725565b506118126020840184611743565b85830360208701526118258382846117b7565b925050506118366040840184611743565b85830360408701526118498382846117b7565b9250505061185a606084018461170e565b6118676060860182611725565b508091505092915050565b600063ffffffff82169050919050565b61188b81611872565b811461189657600080fd5b50565b6000813590506118a881611882565b92915050565b60006118bd6020840184611899565b905092915050565b6118ce81611872565b82525050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b611909816118d4565b811461191457600080fd5b50565b60008135905061192681611900565b92915050565b600061193b6020840184611917565b905092915050565b61194c816118d4565b82525050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b61198781611952565b811461199257600080fd5b50565b6000813590506119a48161197e565b92915050565b60006119b96020840184611995565b905092915050565b6119ca81611952565b82525050565b60006119df6020840184610d4c565b905092915050565b6119f081610d23565b82525050565b60c08201611a0760008301836118ae565b611a1460008501826118c5565b50611a22602083018361192c565b611a2f6020850182611943565b50611a3d60408301836119aa565b611a4a60408501826119c1565b50611a5860608301836119aa565b611a6560608501826119c1565b50611a73608083018361170e565b611a806080850182611725565b50611a8e60a08301836119d0565b611a9b60a08501826119e7565b50505050565b600060e0820190508181036000830152611abb81856117e4565b9050611aca60208301846119f6565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611b2d602e836112b5565b9150611b3882611ad1565b604082019050919050565b60006020820190508181036000830152611b5c81611b20565b9050919050565b7f576f726d686f6c6552656c6179657220616464726573732063616e6e6f74206260008201527f65207a65726f0000000000000000000000000000000000000000000000000000602082015250565b6000611bbf6026836112b5565b9150611bca82611b63565b604082019050919050565b60006020820190508181036000830152611bee81611bb2565b9050919050565b7f4c32576f726d686f6c654761746577617920616464726573732063616e6e6f7460008201527f206265207a65726f000000000000000000000000000000000000000000000000602082015250565b6000611c516028836112b5565b9150611c5c82611bf5565b604082019050919050565b60006020820190508181036000830152611c8081611c44565b9050919050565b6000819050919050565b600060ff82169050919050565b6000611cb9611cb4611caf84611c87565b6111ff565b611c91565b9050919050565b611cc981611c9e565b82525050565b6000602082019050611ce46000830184611cc0565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d466026836112b5565b9150611d5182611cea565b604082019050919050565b60006020820190508181036000830152611d7581611d39565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611db26020836112b5565b9150611dbd82611d7c565b602082019050919050565b60006020820190508181036000830152611de181611da5565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611e44602b836112b5565b9150611e4f82611de8565b604082019050919050565b60006020820190508181036000830152611e7381611e37565b905091905056fea2646970667358221220d509593b31375289113324a6cbc314a9542a6cf25c7f232016a4f467b68fb14364736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7EBEF529 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x7EBEF529 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xAA82E33B EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xDA25B725 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xE1551FC9 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x226 JUMPI PUSH2 0x9C JUMP JUMPDEST DUP1 PUSH4 0x12622E5B EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x31446C46 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x529DCA32 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x642DC033 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x13A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH2 0x24F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xCD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEE SWAP2 SWAP1 PUSH2 0xD61 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10A SWAP2 SWAP1 PUSH2 0x101C JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x690 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x178 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x173 SWAP2 SWAP1 PUSH2 0x1182 JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH2 0x962 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA PUSH2 0x98C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E5 PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x129A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x210 PUSH2 0x9D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0xD61 JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x66 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x26B PUSH2 0xA81 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0x1312 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x36B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x362 SWAP1 PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x43F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x436 SWAP1 PUSH2 0x1410 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP3 PUSH2 0xFFFF AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x490 SWAP1 PUSH2 0x14A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4DB DUP5 PUSH2 0xAFF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x531 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x528 SWAP1 PUSH2 0x1534 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP5 MLOAD EQ PUSH2 0x575 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x56C SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D21A596 DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C7 JUMPI PUSH2 0x5C6 PUSH2 0x15E6 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EB SWAP2 SWAP1 PUSH2 0x1694 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x619 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x69A2A6D267E87F99180657174CA85389598D457BA949435EE4940F621BB849CF DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x683 SWAP3 SWAP2 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x698 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x6A2 PUSH1 0x0 PUSH2 0xB0C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x6D5 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x702 JUMPI POP PUSH2 0x6E4 ADDRESS PUSH2 0xBD2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x741 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x738 SWAP1 PUSH2 0x1B43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x786 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7EC SWAP1 PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85B SWAP1 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x66 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x95C JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x953 SWAP2 SWAP1 PUSH2 0x1CCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xA06 PUSH2 0xA81 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA6C SWAP1 PUSH2 0x1D5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA7E DUP2 PUSH2 0xB0C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xA89 PUSH2 0xC4E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAA7 PUSH2 0x962 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAF4 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4C PUSH2 0xC56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xCA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9C SWAP1 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB5 PUSH2 0xCB0 PUSH2 0xC4E JUMP JUMPDEST PUSH2 0xB0C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCCE DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCE9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD2E DUP3 PUSH2 0xD03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD3E DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP2 EQ PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD5B DUP2 PUSH2 0xD35 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD77 JUMPI PUSH2 0xD76 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD85 DUP5 DUP3 DUP6 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDE1 DUP3 PUSH2 0xD98 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xE00 JUMPI PUSH2 0xDFF PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE13 PUSH2 0xCEF JUMP JUMPDEST SWAP1 POP PUSH2 0xE1F DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xE3F JUMPI PUSH2 0xE3E PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST PUSH2 0xE48 DUP3 PUSH2 0xD98 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE77 PUSH2 0xE72 DUP5 PUSH2 0xE24 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xD93 JUMP JUMPDEST JUMPDEST PUSH2 0xE9E DUP5 DUP3 DUP6 PUSH2 0xE55 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xECB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xEEF JUMPI PUSH2 0xEEE PUSH2 0xDA9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF18 PUSH2 0xF13 DUP5 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xF3B JUMPI PUSH2 0xF3A PUSH2 0xF00 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF82 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF60 JUMPI PUSH2 0xF5F PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH2 0xF6D DUP10 DUP3 PUSH2 0xEA6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF3D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xD8E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFB1 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xF05 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0xFBA JUMP JUMPDEST DUP2 EQ PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFEA DUP2 PUSH2 0xFC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFF9 DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1016 DUP2 PUSH2 0xFF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1038 JUMPI PUSH2 0x1037 PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1056 JUMPI PUSH2 0x1055 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x1062 DUP9 DUP3 DUP10 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1083 JUMPI PUSH2 0x1082 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x108F DUP9 DUP3 DUP10 ADD PUSH2 0xF8C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x10A0 DUP9 DUP3 DUP10 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x10B1 DUP9 DUP3 DUP10 ADD PUSH2 0x1007 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x10C2 DUP9 DUP3 DUP10 ADD PUSH2 0xFDB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10E9 PUSH2 0x10CF JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1109 JUMPI PUSH2 0x1108 PUSH2 0x10CF JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x114A JUMPI PUSH2 0x1149 PUSH2 0xCFE JUMP JUMPDEST JUMPDEST PUSH2 0x1156 DUP7 DUP3 DUP8 ADD PUSH2 0x10D4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1167 DUP7 DUP3 DUP8 ADD PUSH2 0x10F3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x1178 DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x119B JUMPI PUSH2 0x119A PUSH2 0xCF9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11A9 DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x11BA DUP7 DUP3 DUP8 ADD PUSH2 0xD4C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x11CB DUP7 DUP3 DUP8 ADD PUSH2 0x1007 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x11DE DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11F9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1224 PUSH2 0x121F PUSH2 0x121A DUP5 PUSH2 0xD03 JUMP JUMPDEST PUSH2 0x11FF JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1236 DUP3 PUSH2 0x1209 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1248 DUP3 PUSH2 0x122B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1258 DUP2 PUSH2 0x123D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1273 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x124F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1284 DUP3 PUSH2 0x122B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1294 DUP2 PUSH2 0x1279 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12AF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x128B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4C3120426974636F696E204465706F7369746F7220616C726561647920736574 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FC PUSH1 0x20 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1307 DUP3 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x132B DUP2 PUSH2 0x12EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C3120426974636F696E204465706F7369746F72206D757374206E6F74206265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030783000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x138E PUSH1 0x24 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1399 DUP3 PUSH2 0x1332 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13BD DUP2 PUSH2 0x1381 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616C6C6572206973206E6F7420576F726D686F6C652052656C617965720000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13FA PUSH1 0x1E DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1405 DUP3 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1429 DUP2 PUSH2 0x13ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x536F7572636520636861696E206973206E6F7420746865206578706563746564 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x204C3120636861696E0000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x148C PUSH1 0x29 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1497 DUP3 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14BB DUP2 PUSH2 0x147F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x536F757263652061646472657373206973206E6F742074686520657870656374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6564204C3120426974636F696E206465706F7369746F72000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151E PUSH1 0x37 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1529 DUP3 PUSH2 0x14C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x154D DUP2 PUSH2 0x1511 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45787065637465642031206164646974696F6E616C20564141206B657920666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7220746F6B656E207472616E7366657200000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B0 PUSH1 0x30 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x15BB DUP3 PUSH2 0x1554 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15DF DUP2 PUSH2 0x15A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1666 DUP3 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x1670 DUP2 DUP6 PUSH2 0x1620 JUMP JUMPDEST SWAP4 POP PUSH2 0x1680 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1631 JUMP JUMPDEST PUSH2 0x1689 DUP2 PUSH2 0xD98 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16AE DUP2 DUP5 PUSH2 0x165B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16EB DUP2 PUSH2 0x16B6 JUMP JUMPDEST DUP2 EQ PUSH2 0x16F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1708 DUP2 PUSH2 0x16E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171D PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x16F9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x172E DUP2 PUSH2 0x16B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP5 CALLDATASIZE SUB SUB DUP2 SLT PUSH2 0x1760 JUMPI PUSH2 0x175F PUSH2 0x173E JUMP JUMPDEST JUMPDEST DUP4 DUP2 ADD SWAP3 POP DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1788 JUMPI PUSH2 0x1787 PUSH2 0x1734 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x179E JUMPI PUSH2 0x179D PUSH2 0x1739 JUMP JUMPDEST JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C3 DUP4 DUP6 PUSH2 0x17A6 JUMP JUMPDEST SWAP4 POP PUSH2 0x17D0 DUP4 DUP6 DUP5 PUSH2 0xE55 JUMP JUMPDEST PUSH2 0x17D9 DUP4 PUSH2 0xD98 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH2 0x17F7 PUSH1 0x0 DUP5 ADD DUP5 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1804 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP PUSH2 0x1812 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1743 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x1825 DUP4 DUP3 DUP5 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1836 PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x1743 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x1849 DUP4 DUP3 DUP5 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x185A PUSH1 0x60 DUP5 ADD DUP5 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1867 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x188B DUP2 PUSH2 0x1872 JUMP JUMPDEST DUP2 EQ PUSH2 0x1896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A8 DUP2 PUSH2 0x1882 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BD PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1899 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18CE DUP2 PUSH2 0x1872 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1909 DUP2 PUSH2 0x18D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1926 DUP2 PUSH2 0x1900 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x193B PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1917 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x194C DUP2 PUSH2 0x18D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1987 DUP2 PUSH2 0x1952 JUMP JUMPDEST DUP2 EQ PUSH2 0x1992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19A4 DUP2 PUSH2 0x197E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B9 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1995 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19CA DUP2 PUSH2 0x1952 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DF PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0xD4C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19F0 DUP2 PUSH2 0xD23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH2 0x1A07 PUSH1 0x0 DUP4 ADD DUP4 PUSH2 0x18AE JUMP JUMPDEST PUSH2 0x1A14 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x18C5 JUMP JUMPDEST POP PUSH2 0x1A22 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x192C JUMP JUMPDEST PUSH2 0x1A2F PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1943 JUMP JUMPDEST POP PUSH2 0x1A3D PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x1A4A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x19C1 JUMP JUMPDEST POP PUSH2 0x1A58 PUSH1 0x60 DUP4 ADD DUP4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x1A65 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x19C1 JUMP JUMPDEST POP PUSH2 0x1A73 PUSH1 0x80 DUP4 ADD DUP4 PUSH2 0x170E JUMP JUMPDEST PUSH2 0x1A80 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1725 JUMP JUMPDEST POP PUSH2 0x1A8E PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x19D0 JUMP JUMPDEST PUSH2 0x1A9B PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x19E7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ABB DUP2 DUP6 PUSH2 0x17E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x19F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B2D PUSH1 0x2E DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B38 DUP3 PUSH2 0x1AD1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B5C DUP2 PUSH2 0x1B20 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x576F726D686F6C6552656C6179657220616464726573732063616E6E6F742062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x65207A65726F0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBF PUSH1 0x26 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BCA DUP3 PUSH2 0x1B63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BEE DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C32576F726D686F6C654761746577617920616464726573732063616E6E6F74 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x206265207A65726F000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C51 PUSH1 0x28 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C5C DUP3 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C80 DUP2 PUSH2 0x1C44 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB9 PUSH2 0x1CB4 PUSH2 0x1CAF DUP5 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x1C91 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CC9 DUP2 PUSH2 0x1C9E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1CC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D46 PUSH1 0x26 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D51 DUP3 PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D75 DUP2 PUSH2 0x1D39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB2 PUSH1 0x20 DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DBD DUP3 PUSH2 0x1D7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1DE1 DUP2 PUSH2 0x1DA5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E44 PUSH1 0x2B DUP4 PUSH2 0x12B5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E4F DUP3 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E73 DUP2 PUSH2 0x1E37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 MULMOD MSIZE EXTCODESIZE BALANCE CALLDATACOPY MSTORE DUP10 GT CALLER 0x24 0xA6 0xCB 0xC3 EQ 0xA9 SLOAD 0x2A PUSH13 0xF25C7F232016A4F467B68FB143 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"2094:6323:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2435:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4068:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7577:838;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5954:272;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2085:101:5;;;;;;;;;;;;;:::i;:::-;;2902:595:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1462:85:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2321:43:19;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2219:39;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2546:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2335:198:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2435:23:19;;;;;;;;;;;;;:::o;4068:406::-;1355:13:5;:11;:13::i;:::-;4231:1:19::1;4201:32;;:18;;;;;;;;;;;:32;;;4180:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;4353:1;4322:33;;:19;:33;;::::0;4301:116:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;4448:19;4427:18;;:40;;;;;;;;;;;;;;;;;;4068:406:::0;:::o;7577:838::-;7823:15;;;;;;;;;;;7801:38;;:10;:38;;;7780:115;;;;;;;;;;;;:::i;:::-;;;;;;;;;7942:9;;;;;;;;;;;7927:24;;:11;:24;;;7906:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;8118:18;;;;;;;;;;;8050:86;;:48;8084:13;8050:33;:48::i;:::-;:86;;;8029:188;;;;;;;;;;;;:::i;:::-;;;;;;;;;8274:1;8249:14;:21;:26;8228:121;;;;;;;;;;;;:::i;:::-;;;;;;;;;8360:17;;;;;;;;;;;:29;;;8390:14;8405:1;8390:17;;;;;;;;:::i;:::-;;;;;;;;8360:48;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7577:838;;;;;:::o;5954:272::-;6208:10;6154:65;;6192:14;6154:65;;;6173:9;6184:6;6154:65;;;;;;;:::i;:::-;;;;;;;;5954:272;;;:::o;2085:101:5:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;:::-;2085:101::o:0;2902:595:19:-;3279:19:6;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;3056:16:19::1;:14;:16::i;:::-;3132:1;3104:30;;:16;:30;;::::0;3083:115:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3259:1;3229:32;;:18;:32;;::::0;3208:119:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3373:16;3338:15;;:52;;;;;;;;;;;;;;;;;;3439:18;3400:17;;:58;;;;;;;;;;;;;;;;;;3480:10;3468:9;;:22;;;;;;;;;;;;;;;;;;3651:14:6::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;2902:595:19;;;:::o;1462:85:5:-;1508:7;1534:6;;;;;;;;;;;1527:13;;1462:85;:::o;2321:43:19:-;;;;;;;;;;;;;:::o;2219:39::-;;;;;;;;;;;;;:::o;2546:33::-;;;;;;;;;;;;;:::o;2335:198:5:-;1355:13;:11;:13::i;:::-;2443:1:::1;2423:22;;:8;:22;;::::0;2415:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2498:28;2517:8;2498:18;:28::i;:::-;2335:198:::0;:::o;1620:130::-;1694:12;:10;:12::i;:::-;1683:23;;:7;:5;:7::i;:::-;:23;;;1675:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1620:130::o;5651:166:20:-;5745:7;5799:8;5791:17;;5768:42;;5651:166;;;:::o;2687:187:5:-;2760:16;2779:6;;;;;;;;;;;2760:25;;2804:8;2795:6;;:17;;;;;;;;;;;;;;;;;;2858:8;2827:40;;2848:8;2827:40;;;;;;;;;;;;2750:124;2687:187;:::o;1423:320:10:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1024:95:5:-;5374:13:6;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1086:26:5::1;:24;:26::i;:::-;1024:95::o:0;886:96:11:-;939:7;965:10;958:17;;886:96;:::o;1125:111:5:-;5374:13:6;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1197:32:5::1;1216:12;:10;:12::i;:::-;1197:18;:32::i;:::-;1125:111::o:0;7:89:21:-;43:7;83:6;76:5;72:18;61:29;;7:89;;;:::o;102:115::-;187:23;204:5;187:23;:::i;:::-;182:3;175:36;102:115;;:::o;223:218::-;314:4;352:2;341:9;337:18;329:26;;365:69;431:1;420:9;416:17;407:6;365:69;:::i;:::-;223:218;;;;:::o;447:75::-;480:6;513:2;507:9;497:19;;447:75;:::o;528:117::-;637:1;634;627:12;651:117;760:1;757;750:12;774:126;811:7;851:42;844:5;840:54;829:65;;774:126;;;:::o;906:96::-;943:7;972:24;990:5;972:24;:::i;:::-;961:35;;906:96;;;:::o;1008:122::-;1081:24;1099:5;1081:24;:::i;:::-;1074:5;1071:35;1061:63;;1120:1;1117;1110:12;1061:63;1008:122;:::o;1136:139::-;1182:5;1220:6;1207:20;1198:29;;1236:33;1263:5;1236:33;:::i;:::-;1136:139;;;;:::o;1281:329::-;1340:6;1389:2;1377:9;1368:7;1364:23;1360:32;1357:119;;;1395:79;;:::i;:::-;1357:119;1515:1;1540:53;1585:7;1576:6;1565:9;1561:22;1540:53;:::i;:::-;1530:63;;1486:117;1281:329;;;;:::o;1616:117::-;1725:1;1722;1715:12;1739:117;1848:1;1845;1838:12;1862:102;1903:6;1954:2;1950:7;1945:2;1938:5;1934:14;1930:28;1920:38;;1862:102;;;:::o;1970:180::-;2018:77;2015:1;2008:88;2115:4;2112:1;2105:15;2139:4;2136:1;2129:15;2156:281;2239:27;2261:4;2239:27;:::i;:::-;2231:6;2227:40;2369:6;2357:10;2354:22;2333:18;2321:10;2318:34;2315:62;2312:88;;;2380:18;;:::i;:::-;2312:88;2420:10;2416:2;2409:22;2199:238;2156:281;;:::o;2443:129::-;2477:6;2504:20;;:::i;:::-;2494:30;;2533:33;2561:4;2553:6;2533:33;:::i;:::-;2443:129;;;:::o;2578:307::-;2639:4;2729:18;2721:6;2718:30;2715:56;;;2751:18;;:::i;:::-;2715:56;2789:29;2811:6;2789:29;:::i;:::-;2781:37;;2873:4;2867;2863:15;2855:23;;2578:307;;;:::o;2891:146::-;2988:6;2983:3;2978;2965:30;3029:1;3020:6;3015:3;3011:16;3004:27;2891:146;;;:::o;3043:423::-;3120:5;3145:65;3161:48;3202:6;3161:48;:::i;:::-;3145:65;:::i;:::-;3136:74;;3233:6;3226:5;3219:21;3271:4;3264:5;3260:16;3309:3;3300:6;3295:3;3291:16;3288:25;3285:112;;;3316:79;;:::i;:::-;3285:112;3406:54;3453:6;3448:3;3443;3406:54;:::i;:::-;3126:340;3043:423;;;;;:::o;3485:338::-;3540:5;3589:3;3582:4;3574:6;3570:17;3566:27;3556:122;;3597:79;;:::i;:::-;3556:122;3714:6;3701:20;3739:78;3813:3;3805:6;3798:4;3790:6;3786:17;3739:78;:::i;:::-;3730:87;;3546:277;3485:338;;;;:::o;3829:320::-;3915:4;4005:18;3997:6;3994:30;3991:56;;;4027:18;;:::i;:::-;3991:56;4077:4;4069:6;4065:17;4057:25;;4137:4;4131;4127:15;4119:23;;3829:320;;;:::o;4155:117::-;4264:1;4261;4254:12;4293:942;4398:5;4423:90;4439:73;4505:6;4439:73;:::i;:::-;4423:90;:::i;:::-;4414:99;;4533:5;4562:6;4555:5;4548:21;4596:4;4589:5;4585:16;4578:23;;4649:4;4641:6;4637:17;4629:6;4625:30;4678:3;4670:6;4667:15;4664:122;;;4697:79;;:::i;:::-;4664:122;4812:6;4795:434;4829:6;4824:3;4821:15;4795:434;;;4918:3;4905:17;4954:18;4941:11;4938:35;4935:122;;;4976:79;;:::i;:::-;4935:122;5100:11;5092:6;5088:24;5138:46;5180:3;5168:10;5138:46;:::i;:::-;5133:3;5126:59;5214:4;5209:3;5205:14;5198:21;;4871:358;;4855:4;4850:3;4846:14;4839:21;;4795:434;;;4799:21;4404:831;;4293:942;;;;;:::o;5256:388::-;5336:5;5385:3;5378:4;5370:6;5366:17;5362:27;5352:122;;5393:79;;:::i;:::-;5352:122;5510:6;5497:20;5535:103;5634:3;5626:6;5619:4;5611:6;5607:17;5535:103;:::i;:::-;5526:112;;5342:302;5256:388;;;;:::o;5650:77::-;5687:7;5716:5;5705:16;;5650:77;;;:::o;5733:122::-;5806:24;5824:5;5806:24;:::i;:::-;5799:5;5796:35;5786:63;;5845:1;5842;5835:12;5786:63;5733:122;:::o;5861:139::-;5907:5;5945:6;5932:20;5923:29;;5961:33;5988:5;5961:33;:::i;:::-;5861:139;;;;:::o;6006:120::-;6078:23;6095:5;6078:23;:::i;:::-;6071:5;6068:34;6058:62;;6116:1;6113;6106:12;6058:62;6006:120;:::o;6132:137::-;6177:5;6215:6;6202:20;6193:29;;6231:32;6257:5;6231:32;:::i;:::-;6132:137;;;;:::o;6275:1315::-;6412:6;6420;6428;6436;6444;6493:3;6481:9;6472:7;6468:23;6464:33;6461:120;;;6500:79;;:::i;:::-;6461:120;6648:1;6637:9;6633:17;6620:31;6678:18;6670:6;6667:30;6664:117;;;6700:79;;:::i;:::-;6664:117;6805:62;6859:7;6850:6;6839:9;6835:22;6805:62;:::i;:::-;6795:72;;6591:286;6944:2;6933:9;6929:18;6916:32;6975:18;6967:6;6964:30;6961:117;;;6997:79;;:::i;:::-;6961:117;7102:87;7181:7;7172:6;7161:9;7157:22;7102:87;:::i;:::-;7092:97;;6887:312;7238:2;7264:53;7309:7;7300:6;7289:9;7285:22;7264:53;:::i;:::-;7254:63;;7209:118;7366:2;7392:52;7436:7;7427:6;7416:9;7412:22;7392:52;:::i;:::-;7382:62;;7337:117;7493:3;7520:53;7565:7;7556:6;7545:9;7541:22;7520:53;:::i;:::-;7510:63;;7464:119;6275:1315;;;;;;;;:::o;7596:117::-;7705:1;7702;7695:12;7760:238;7839:5;7880:3;7871:6;7866:3;7862:16;7858:26;7855:113;;;7887:79;;:::i;:::-;7855:113;7986:6;7977:15;;7760:238;;;;:::o;8049:242::-;8132:5;8173:3;8164:6;8159:3;8155:16;8151:26;8148:113;;;8180:79;;:::i;:::-;8148:113;8279:6;8270:15;;8049:242;;;;:::o;8297:921::-;8444:6;8452;8460;8509:3;8497:9;8488:7;8484:23;8480:33;8477:120;;;8516:79;;:::i;:::-;8477:120;8664:1;8653:9;8649:17;8636:31;8694:18;8686:6;8683:30;8680:117;;;8716:79;;:::i;:::-;8680:117;8821:86;8899:7;8890:6;8879:9;8875:22;8821:86;:::i;:::-;8811:96;;8607:310;8956:2;8982:90;9064:7;9055:6;9044:9;9040:22;8982:90;:::i;:::-;8972:100;;8927:155;9121:3;9148:53;9193:7;9184:6;9173:9;9169:22;9148:53;:::i;:::-;9138:63;;9092:119;8297:921;;;;;:::o;9224:617::-;9300:6;9308;9316;9365:2;9353:9;9344:7;9340:23;9336:32;9333:119;;;9371:79;;:::i;:::-;9333:119;9491:1;9516:53;9561:7;9552:6;9541:9;9537:22;9516:53;:::i;:::-;9506:63;;9462:117;9618:2;9644:53;9689:7;9680:6;9669:9;9665:22;9644:53;:::i;:::-;9634:63;;9589:118;9746:2;9772:52;9816:7;9807:6;9796:9;9792:22;9772:52;:::i;:::-;9762:62;;9717:117;9224:617;;;;;:::o;9847:118::-;9934:24;9952:5;9934:24;:::i;:::-;9929:3;9922:37;9847:118;;:::o;9971:222::-;10064:4;10102:2;10091:9;10087:18;10079:26;;10115:71;10183:1;10172:9;10168:17;10159:6;10115:71;:::i;:::-;9971:222;;;;:::o;10199:60::-;10227:3;10248:5;10241:12;;10199:60;;;:::o;10265:142::-;10315:9;10348:53;10366:34;10375:24;10393:5;10375:24;:::i;:::-;10366:34;:::i;:::-;10348:53;:::i;:::-;10335:66;;10265:142;;;:::o;10413:126::-;10463:9;10496:37;10527:5;10496:37;:::i;:::-;10483:50;;10413:126;;;:::o;10545:153::-;10622:9;10655:37;10686:5;10655:37;:::i;:::-;10642:50;;10545:153;;;:::o;10704:185::-;10818:64;10876:5;10818:64;:::i;:::-;10813:3;10806:77;10704:185;;:::o;10895:276::-;11015:4;11053:2;11042:9;11038:18;11030:26;;11066:98;11161:1;11150:9;11146:17;11137:6;11066:98;:::i;:::-;10895:276;;;;:::o;11177:151::-;11252:9;11285:37;11316:5;11285:37;:::i;:::-;11272:50;;11177:151;;;:::o;11334:181::-;11446:62;11502:5;11446:62;:::i;:::-;11441:3;11434:75;11334:181;;:::o;11521:272::-;11639:4;11677:2;11666:9;11662:18;11654:26;;11690:96;11783:1;11772:9;11768:17;11759:6;11690:96;:::i;:::-;11521:272;;;;:::o;11799:169::-;11883:11;11917:6;11912:3;11905:19;11957:4;11952:3;11948:14;11933:29;;11799:169;;;;:::o;11974:182::-;12114:34;12110:1;12102:6;12098:14;12091:58;11974:182;:::o;12162:366::-;12304:3;12325:67;12389:2;12384:3;12325:67;:::i;:::-;12318:74;;12401:93;12490:3;12401:93;:::i;:::-;12519:2;12514:3;12510:12;12503:19;;12162:366;;;:::o;12534:419::-;12700:4;12738:2;12727:9;12723:18;12715:26;;12787:9;12781:4;12777:20;12773:1;12762:9;12758:17;12751:47;12815:131;12941:4;12815:131;:::i;:::-;12807:139;;12534:419;;;:::o;12959:223::-;13099:34;13095:1;13087:6;13083:14;13076:58;13168:6;13163:2;13155:6;13151:15;13144:31;12959:223;:::o;13188:366::-;13330:3;13351:67;13415:2;13410:3;13351:67;:::i;:::-;13344:74;;13427:93;13516:3;13427:93;:::i;:::-;13545:2;13540:3;13536:12;13529:19;;13188:366;;;:::o;13560:419::-;13726:4;13764:2;13753:9;13749:18;13741:26;;13813:9;13807:4;13803:20;13799:1;13788:9;13784:17;13777:47;13841:131;13967:4;13841:131;:::i;:::-;13833:139;;13560:419;;;:::o;13985:180::-;14125:32;14121:1;14113:6;14109:14;14102:56;13985:180;:::o;14171:366::-;14313:3;14334:67;14398:2;14393:3;14334:67;:::i;:::-;14327:74;;14410:93;14499:3;14410:93;:::i;:::-;14528:2;14523:3;14519:12;14512:19;;14171:366;;;:::o;14543:419::-;14709:4;14747:2;14736:9;14732:18;14724:26;;14796:9;14790:4;14786:20;14782:1;14771:9;14767:17;14760:47;14824:131;14950:4;14824:131;:::i;:::-;14816:139;;14543:419;;;:::o;14968:228::-;15108:34;15104:1;15096:6;15092:14;15085:58;15177:11;15172:2;15164:6;15160:15;15153:36;14968:228;:::o;15202:366::-;15344:3;15365:67;15429:2;15424:3;15365:67;:::i;:::-;15358:74;;15441:93;15530:3;15441:93;:::i;:::-;15559:2;15554:3;15550:12;15543:19;;15202:366;;;:::o;15574:419::-;15740:4;15778:2;15767:9;15763:18;15755:26;;15827:9;15821:4;15817:20;15813:1;15802:9;15798:17;15791:47;15855:131;15981:4;15855:131;:::i;:::-;15847:139;;15574:419;;;:::o;15999:242::-;16139:34;16135:1;16127:6;16123:14;16116:58;16208:25;16203:2;16195:6;16191:15;16184:50;15999:242;:::o;16247:366::-;16389:3;16410:67;16474:2;16469:3;16410:67;:::i;:::-;16403:74;;16486:93;16575:3;16486:93;:::i;:::-;16604:2;16599:3;16595:12;16588:19;;16247:366;;;:::o;16619:419::-;16785:4;16823:2;16812:9;16808:18;16800:26;;16872:9;16866:4;16862:20;16858:1;16847:9;16843:17;16836:47;16900:131;17026:4;16900:131;:::i;:::-;16892:139;;16619:419;;;:::o;17044:235::-;17184:34;17180:1;17172:6;17168:14;17161:58;17253:18;17248:2;17240:6;17236:15;17229:43;17044:235;:::o;17285:366::-;17427:3;17448:67;17512:2;17507:3;17448:67;:::i;:::-;17441:74;;17524:93;17613:3;17524:93;:::i;:::-;17642:2;17637:3;17633:12;17626:19;;17285:366;;;:::o;17657:419::-;17823:4;17861:2;17850:9;17846:18;17838:26;;17910:9;17904:4;17900:20;17896:1;17885:9;17881:17;17874:47;17938:131;18064:4;17938:131;:::i;:::-;17930:139;;17657:419;;;:::o;18082:180::-;18130:77;18127:1;18120:88;18227:4;18224:1;18217:15;18251:4;18248:1;18241:15;18268:98;18319:6;18353:5;18347:12;18337:22;;18268:98;;;:::o;18372:168::-;18455:11;18489:6;18484:3;18477:19;18529:4;18524:3;18520:14;18505:29;;18372:168;;;;:::o;18546:246::-;18627:1;18637:113;18651:6;18648:1;18645:13;18637:113;;;18736:1;18731:3;18727:11;18721:18;18717:1;18712:3;18708:11;18701:39;18673:2;18670:1;18666:10;18661:15;;18637:113;;;18784:1;18775:6;18770:3;18766:16;18759:27;18608:184;18546:246;;;:::o;18798:373::-;18884:3;18912:38;18944:5;18912:38;:::i;:::-;18966:70;19029:6;19024:3;18966:70;:::i;:::-;18959:77;;19045:65;19103:6;19098:3;19091:4;19084:5;19080:16;19045:65;:::i;:::-;19135:29;19157:6;19135:29;:::i;:::-;19130:3;19126:39;19119:46;;18888:283;18798:373;;;;:::o;19177:309::-;19288:4;19326:2;19315:9;19311:18;19303:26;;19375:9;19369:4;19365:20;19361:1;19350:9;19346:17;19339:47;19403:76;19474:4;19465:6;19403:76;:::i;:::-;19395:84;;19177:309;;;;:::o;19492:149::-;19528:7;19568:66;19561:5;19557:78;19546:89;;19492:149;;;:::o;19647:120::-;19719:23;19736:5;19719:23;:::i;:::-;19712:5;19709:34;19699:62;;19757:1;19754;19747:12;19699:62;19647:120;:::o;19773:137::-;19818:5;19856:6;19843:20;19834:29;;19872:32;19898:5;19872:32;:::i;:::-;19773:137;;;;:::o;19916:120::-;19967:5;19992:38;20026:2;20021:3;20017:12;20012:3;19992:38;:::i;:::-;19983:47;;19916:120;;;;:::o;20042:105::-;20117:23;20134:5;20117:23;:::i;:::-;20112:3;20105:36;20042:105;;:::o;20153:117::-;20262:1;20259;20252:12;20276:117;20385:1;20382;20375:12;20399:117;20508:1;20505;20498:12;20522:711;20586:5;20593:6;20649:3;20636:17;20741:1;20735:4;20731:12;20720:8;20704:14;20700:29;20696:48;20676:18;20672:73;20662:168;;20749:79;;:::i;:::-;20662:168;20872:8;20852:18;20848:33;20839:42;;20914:5;20901:19;20891:29;;20949:4;20942:5;20938:16;20929:25;;20977:18;20969:6;20966:30;20963:117;;;20999:79;;:::i;:::-;20963:117;21135:4;21127:6;21123:17;21107:14;21103:38;21096:5;21092:50;21089:137;;;21145:79;;:::i;:::-;21089:137;20600:633;20522:711;;;;;:::o;21239:158::-;21312:11;21346:6;21341:3;21334:19;21386:4;21381:3;21377:14;21362:29;;21239:158;;;;:::o;21425:294::-;21511:3;21532:60;21585:6;21580:3;21532:60;:::i;:::-;21525:67;;21602:56;21651:6;21646:3;21639:5;21602:56;:::i;:::-;21683:29;21705:6;21683:29;:::i;:::-;21678:3;21674:39;21667:46;;21425:294;;;;;:::o;21803:1241::-;21936:3;21972:4;21967:3;21963:14;22045:49;22088:4;22081:5;22077:16;22070:5;22045:49;:::i;:::-;22107:61;22162:4;22157:3;22153:14;22139:12;22107:61;:::i;:::-;21987:191;22264:61;22319:4;22312:5;22308:16;22301:5;22264:61;:::i;:::-;22372:3;22366:4;22362:14;22355:4;22350:3;22346:14;22339:38;22398:87;22480:4;22466:12;22452;22398:87;:::i;:::-;22390:95;;22188:308;;22583:61;22638:4;22631:5;22627:16;22620:5;22583:61;:::i;:::-;22691:3;22685:4;22681:14;22674:4;22669:3;22665:14;22658:38;22717:87;22799:4;22785:12;22771;22717:87;:::i;:::-;22709:95;;22506:309;;22884:49;22927:4;22920:5;22916:16;22909:5;22884:49;:::i;:::-;22946:61;23001:4;22996:3;22992:14;22978:12;22946:61;:::i;:::-;22825:192;23034:4;23027:11;;21941:1103;21803:1241;;;;:::o;23050:93::-;23086:7;23126:10;23119:5;23115:22;23104:33;;23050:93;;;:::o;23149:120::-;23221:23;23238:5;23221:23;:::i;:::-;23214:5;23211:34;23201:62;;23259:1;23256;23249:12;23201:62;23149:120;:::o;23275:137::-;23320:5;23358:6;23345:20;23336:29;;23374:32;23400:5;23374:32;:::i;:::-;23275:137;;;;:::o;23418:120::-;23469:5;23494:38;23528:2;23523:3;23519:12;23514:3;23494:38;:::i;:::-;23485:47;;23418:120;;;;:::o;23544:105::-;23619:23;23636:5;23619:23;:::i;:::-;23614:3;23607:36;23544:105;;:::o;23655:149::-;23691:7;23731:66;23724:5;23720:78;23709:89;;23655:149;;;:::o;23810:120::-;23882:23;23899:5;23882:23;:::i;:::-;23875:5;23872:34;23862:62;;23920:1;23917;23910:12;23862:62;23810:120;:::o;23936:137::-;23981:5;24019:6;24006:20;23997:29;;24035:32;24061:5;24035:32;:::i;:::-;23936:137;;;;:::o;24079:120::-;24130:5;24155:38;24189:2;24184:3;24180:12;24175:3;24155:38;:::i;:::-;24146:47;;24079:120;;;;:::o;24205:105::-;24280:23;24297:5;24280:23;:::i;:::-;24275:3;24268:36;24205:105;;:::o;24316:150::-;24353:7;24393:66;24386:5;24382:78;24371:89;;24316:150;;;:::o;24472:122::-;24545:24;24563:5;24545:24;:::i;:::-;24538:5;24535:35;24525:63;;24584:1;24581;24574:12;24525:63;24472:122;:::o;24600:139::-;24646:5;24684:6;24671:20;24662:29;;24700:33;24727:5;24700:33;:::i;:::-;24600:139;;;;:::o;24745:122::-;24797:5;24822:39;24857:2;24852:3;24848:12;24843:3;24822:39;:::i;:::-;24813:48;;24745:122;;;;:::o;24873:108::-;24950:24;24968:5;24950:24;:::i;:::-;24945:3;24938:37;24873:108;;:::o;24987:122::-;25039:5;25064:39;25099:2;25094:3;25090:12;25085:3;25064:39;:::i;:::-;25055:48;;24987:122;;;;:::o;25115:108::-;25192:24;25210:5;25192:24;:::i;:::-;25187:3;25180:37;25115:108;;:::o;25315:1437::-;25484:4;25479:3;25475:14;25568:49;25611:4;25604:5;25600:16;25593:5;25568:49;:::i;:::-;25630:61;25685:4;25680:3;25676:14;25662:12;25630:61;:::i;:::-;25499:202;25776:49;25819:4;25812:5;25808:16;25801:5;25776:49;:::i;:::-;25838:61;25893:4;25888:3;25884:14;25870:12;25838:61;:::i;:::-;25711:198;25986:50;26030:4;26023:5;26019:16;26012:5;25986:50;:::i;:::-;26049:63;26106:4;26101:3;26097:14;26083:12;26049:63;:::i;:::-;25919:203;26199:50;26243:4;26236:5;26232:16;26225:5;26199:50;:::i;:::-;26262:63;26319:4;26314:3;26310:14;26296:12;26262:63;:::i;:::-;26132:203;26410:49;26453:4;26446:5;26442:16;26435:5;26410:49;:::i;:::-;26472:61;26527:4;26522:3;26518:14;26504:12;26472:61;:::i;:::-;26345:198;26609:50;26653:4;26646:5;26642:16;26635:5;26609:50;:::i;:::-;26672:63;26729:4;26724:3;26720:14;26706:12;26672:63;:::i;:::-;26553:192;25453:1299;25315:1437;;:::o;26758:656::-;27015:4;27053:3;27042:9;27038:19;27030:27;;27103:9;27097:4;27093:20;27089:1;27078:9;27074:17;27067:47;27131:122;27248:4;27239:6;27131:122;:::i;:::-;27123:130;;27263:144;27403:2;27392:9;27388:18;27379:6;27263:144;:::i;:::-;26758:656;;;;;:::o;27420:233::-;27560:34;27556:1;27548:6;27544:14;27537:58;27629:16;27624:2;27616:6;27612:15;27605:41;27420:233;:::o;27659:366::-;27801:3;27822:67;27886:2;27881:3;27822:67;:::i;:::-;27815:74;;27898:93;27987:3;27898:93;:::i;:::-;28016:2;28011:3;28007:12;28000:19;;27659:366;;;:::o;28031:419::-;28197:4;28235:2;28224:9;28220:18;28212:26;;28284:9;28278:4;28274:20;28270:1;28259:9;28255:17;28248:47;28312:131;28438:4;28312:131;:::i;:::-;28304:139;;28031:419;;;:::o;28456:225::-;28596:34;28592:1;28584:6;28580:14;28573:58;28665:8;28660:2;28652:6;28648:15;28641:33;28456:225;:::o;28687:366::-;28829:3;28850:67;28914:2;28909:3;28850:67;:::i;:::-;28843:74;;28926:93;29015:3;28926:93;:::i;:::-;29044:2;29039:3;29035:12;29028:19;;28687:366;;;:::o;29059:419::-;29225:4;29263:2;29252:9;29248:18;29240:26;;29312:9;29306:4;29302:20;29298:1;29287:9;29283:17;29276:47;29340:131;29466:4;29340:131;:::i;:::-;29332:139;;29059:419;;;:::o;29484:227::-;29624:34;29620:1;29612:6;29608:14;29601:58;29693:10;29688:2;29680:6;29676:15;29669:35;29484:227;:::o;29717:366::-;29859:3;29880:67;29944:2;29939:3;29880:67;:::i;:::-;29873:74;;29956:93;30045:3;29956:93;:::i;:::-;30074:2;30069:3;30065:12;30058:19;;29717:366;;;:::o;30089:419::-;30255:4;30293:2;30282:9;30278:18;30270:26;;30342:9;30336:4;30332:20;30328:1;30317:9;30313:17;30306:47;30370:131;30496:4;30370:131;:::i;:::-;30362:139;;30089:419;;;:::o;30514:85::-;30559:7;30588:5;30577:16;;30514:85;;;:::o;30605:86::-;30640:7;30680:4;30673:5;30669:16;30658:27;;30605:86;;;:::o;30697:154::-;30753:9;30786:59;30802:42;30811:32;30837:5;30811:32;:::i;:::-;30802:42;:::i;:::-;30786:59;:::i;:::-;30773:72;;30697:154;;;:::o;30857:143::-;30950:43;30987:5;30950:43;:::i;:::-;30945:3;30938:56;30857:143;;:::o;31006:234::-;31105:4;31143:2;31132:9;31128:18;31120:26;;31156:77;31230:1;31219:9;31215:17;31206:6;31156:77;:::i;:::-;31006:234;;;;:::o;31246:225::-;31386:34;31382:1;31374:6;31370:14;31363:58;31455:8;31450:2;31442:6;31438:15;31431:33;31246:225;:::o;31477:366::-;31619:3;31640:67;31704:2;31699:3;31640:67;:::i;:::-;31633:74;;31716:93;31805:3;31716:93;:::i;:::-;31834:2;31829:3;31825:12;31818:19;;31477:366;;;:::o;31849:419::-;32015:4;32053:2;32042:9;32038:18;32030:26;;32102:9;32096:4;32092:20;32088:1;32077:9;32073:17;32066:47;32130:131;32256:4;32130:131;:::i;:::-;32122:139;;31849:419;;;:::o;32274:182::-;32414:34;32410:1;32402:6;32398:14;32391:58;32274:182;:::o;32462:366::-;32604:3;32625:67;32689:2;32684:3;32625:67;:::i;:::-;32618:74;;32701:93;32790:3;32701:93;:::i;:::-;32819:2;32814:3;32810:12;32803:19;;32462:366;;;:::o;32834:419::-;33000:4;33038:2;33027:9;33023:18;33015:26;;33087:9;33081:4;33077:20;33073:1;33062:9;33058:17;33051:47;33115:131;33241:4;33115:131;:::i;:::-;33107:139;;32834:419;;;:::o;33259:230::-;33399:34;33395:1;33387:6;33383:14;33376:58;33468:13;33463:2;33455:6;33451:15;33444:38;33259:230;:::o;33495:366::-;33637:3;33658:67;33722:2;33717:3;33658:67;:::i;:::-;33651:74;;33734:93;33823:3;33734:93;:::i;:::-;33852:2;33847:3;33843:12;33836:19;;33495:366;;;:::o;33867:419::-;34033:4;34071:2;34060:9;34056:18;34048:26;;34120:9;34114:4;34110:20;34106:1;34095:9;34091:17;34084:47;34148:131;34274:4;34148:131;:::i;:::-;34140:139;;33867:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1571200","executionCost":"infinite","totalCost":"infinite"},"external":{"attachL1BitcoinDepositor(address)":"29215","initialize(address,address,uint16)":"infinite","initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":"infinite","l1BitcoinDepositor()":"2602","l1ChainId()":"2522","l2WormholeGateway()":"infinite","owner()":"2544","receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":"infinite","renounceOwnership()":"30487","transferOwnership(address)":"30854","wormholeRelayer()":"infinite"}},"methodIdentifiers":{"attachL1BitcoinDepositor(address)":"31446c46","initialize(address,address,uint16)":"7ebef529","initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":"642dc033","l1BitcoinDepositor()":"e1551fc9","l1ChainId()":"12622e5b","l2WormholeGateway()":"aa82e33b","owner()":"8da5cb5b","receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":"529dca32","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","wormholeRelayer()":"da25b725"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"inputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"}],\"indexed\":false,\"internalType\":\"struct IBridgeTypes.BitcoinTxInfo\",\"name\":\"fundingTx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes8\",\"name\":\"blindingFactor\",\"type\":\"bytes8\"},{\"internalType\":\"bytes20\",\"name\":\"walletPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"refundPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes4\",\"name\":\"refundLocktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IBridgeTypes.DepositRevealInfo\",\"name\":\"reveal\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2DepositOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Sender\",\"type\":\"address\"}],\"name\":\"DepositInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BitcoinDepositor\",\"type\":\"address\"}],\"name\":\"attachL1BitcoinDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wormholeRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2WormholeGateway\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_l1ChainId\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"inputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"}],\"internalType\":\"struct IBridgeTypes.BitcoinTxInfo\",\"name\":\"fundingTx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes8\",\"name\":\"blindingFactor\",\"type\":\"bytes8\"},{\"internalType\":\"bytes20\",\"name\":\"walletPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"refundPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes4\",\"name\":\"refundLocktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct IBridgeTypes.DepositRevealInfo\",\"name\":\"reveal\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"l2DepositOwner\",\"type\":\"address\"}],\"name\":\"initializeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BitcoinDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2WormholeGateway\",\"outputs\":[{\"internalType\":\"contract IL2WormholeGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalVaas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attachL1BitcoinDepositor(address)\":{\"details\":\"Requirements:      - Can be called only by the contract owner,      - The address must not be set yet,      - The new address must not be 0x0.\",\"params\":{\"_l1BitcoinDepositor\":\"Address of the `L1BitcoinDepositor` contract.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)\":{\"details\":\"The alternative approach of using Wormhole Relayer to send the      deposit data to L1 was considered. However, it turned out to be      too expensive. For example, relying deposit data from Base L2 to      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).      Moreover, the next iteration of the direct bridging mechanism      assumes that no L2 transaction will be required to initialize the      deposit and the relayer should obtain the deposit data off-chain.      There is a high chance this function will be removed then.      That said, there was no sense to explore another cross-chain      messaging solutions. Relying on simple on-chain event and custom      off-chain relayer seems to be the most reasonable way to go. It      also aligns with the future direction of the direct bridging mechanism.\",\"params\":{\"fundingTx\":\"Bitcoin funding transaction data.\",\"l2DepositOwner\":\"Address of the L2 deposit owner.\",\"reveal\":\"Deposit reveal data.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"details\":\"Requirements:      - Can be called only by the Wormhole Relayer contract,      - The source chain must be the expected L1 chain,      - The source address must be the corresponding        `L1BitcoinDepositor` contract,      - The message must carry exactly 1 additional VAA key representing        the token transfer.\",\"params\":{\"additionalVaas\":\"Additional VAAs that are part of the Wormhole message.\",\"sourceAddress\":\"Address of the source of the message (in Wormhole format).\",\"sourceChain\":\"Wormhole chain ID of the source chain.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"L2BitcoinDepositor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attachL1BitcoinDepositor(address)\":{\"notice\":\"Sets the address of the `L1BitcoinDepositor` contract on the         corresponding L1 chain. This function solves the chicken-and-egg         problem of setting the `L1BitcoinDepositor` contract address         on the `L2BitcoinDepositor` contract and vice versa.\"},\"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)\":{\"notice\":\"Initializes the deposit process on L2 by emitting an event         containing the deposit data (funding transaction and         components of the P2(W)SH deposit address). The event is         supposed to be picked up by the relayer and used to initialize         the deposit on L1 through the `L1BitcoinDepositor` contract.\"},\"l1BitcoinDepositor()\":{\"notice\":\"tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain.\"},\"l1ChainId()\":{\"notice\":\"Wormhole chain ID of the corresponding L1 chain.\"},\"l2WormholeGateway()\":{\"notice\":\"tBTC `L2WormholeGateway` contract on L2.\"},\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"notice\":\"Receives Wormhole messages originating from the corresponding         `L1BitcoinDepositor` contract that lives on the L1 chain.         Messages are issued upon deposit finalization on L1 and         are supposed to carry the VAA of the Wormhole token transfer of         ERC20 L1 TBTC to the L2 chain. This contract performs some basic         checks and forwards the VAA to the `L2WormholeGateway` contract         that is authorized to withdraw the Wormhole-wrapped L2 TBTC         from the Wormhole Token Bridge (representing the ERC20 TBTC         locked on L1) and use it to mint the canonical L2 TBTC for the         deposit owner.\"},\"wormholeRelayer()\":{\"notice\":\"`WormholeRelayer` contract on L2.\"}},\"notice\":\"This contract is part of the direct bridging mechanism allowing         users to obtain ERC20 TBTC on supported L2 chains, without the need         to interact with the L1 tBTC ledger chain where minting occurs.         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`         pair is responsible for a specific L2 chain.         Please consult the `L1BitcoinDepositor` docstring for an         outline of the direct bridging mechanism\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/L2BitcoinDepositor.sol\":\"L2BitcoinDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/integrator/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice Namespace which groups all types relevant to the IBridge interface.\\n/// @dev This is a mirror of the real types used in the Bridge contract.\\n///      This way, the `integrator` subpackage does not need to import\\n///      anything from the `bridge` subpackage and explicitly depend on it.\\n///      This simplifies the dependency graph for integrators.\\nlibrary IBridgeTypes {\\n    /// @dev See bridge/BitcoinTx.sol#Info\\n    struct BitcoinTxInfo {\\n        bytes4 version;\\n        bytes inputVector;\\n        bytes outputVector;\\n        bytes4 locktime;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRevealInfo\\n    struct DepositRevealInfo {\\n        uint32 fundingOutputIndex;\\n        bytes8 blindingFactor;\\n        bytes20 walletPubKeyHash;\\n        bytes20 refundPubKeyHash;\\n        bytes4 refundLocktime;\\n        address vault;\\n    }\\n\\n    /// @dev See bridge/Deposit.sol#DepositRequest\\n    struct DepositRequest {\\n        address depositor;\\n        uint64 amount;\\n        uint32 revealedAt;\\n        address vault;\\n        uint64 treasuryFee;\\n        uint32 sweptAt;\\n        bytes32 extraData;\\n    }\\n}\\n\\n/// @notice Interface of the Bridge contract.\\n/// @dev See bridge/Bridge.sol\\ninterface IBridge {\\n    /// @dev See {Bridge#revealDepositWithExtraData}\\n    function revealDepositWithExtraData(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @dev See {Bridge#deposits}\\n    function deposits(uint256 depositKey)\\n        external\\n        view\\n        returns (IBridgeTypes.DepositRequest memory);\\n\\n    /// @dev See {Bridge#depositParameters}\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x4e598d96404a19609f511f10503e80f457602ad694d081df739571f67f6e0c4e\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/L2BitcoinDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../integrator/IBridge.sol\\\";\\nimport \\\"./Wormhole.sol\\\";\\n\\n/// @title IL2WormholeGateway\\n/// @notice Interface to the `L2WormholeGateway` contract.\\ninterface IL2WormholeGateway {\\n    /// @dev See ./L2WormholeGateway.sol#receiveTbtc\\n    function receiveTbtc(bytes memory vaa) external;\\n}\\n\\n/// @title L2BitcoinDepositor\\n/// @notice This contract is part of the direct bridging mechanism allowing\\n///         users to obtain ERC20 TBTC on supported L2 chains, without the need\\n///         to interact with the L1 tBTC ledger chain where minting occurs.\\n///\\n///         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with\\n///         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the\\n///         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`\\n///         pair is responsible for a specific L2 chain.\\n///\\n///         Please consult the `L1BitcoinDepositor` docstring for an\\n///         outline of the direct bridging mechanism\\n// slither-disable-next-line locked-ether\\ncontract L2BitcoinDepositor is IWormholeReceiver, OwnableUpgradeable {\\n    /// @notice `WormholeRelayer` contract on L2.\\n    IWormholeRelayer public wormholeRelayer;\\n    /// @notice tBTC `L2WormholeGateway` contract on L2.\\n    IL2WormholeGateway public l2WormholeGateway;\\n    /// @notice Wormhole chain ID of the corresponding L1 chain.\\n    uint16 public l1ChainId;\\n    /// @notice tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain.\\n    address public l1BitcoinDepositor;\\n\\n    event DepositInitialized(\\n        IBridgeTypes.BitcoinTxInfo fundingTx,\\n        IBridgeTypes.DepositRevealInfo reveal,\\n        address indexed l2DepositOwner,\\n        address indexed l2Sender\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _wormholeRelayer,\\n        address _l2WormholeGateway,\\n        uint16 _l1ChainId\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        require(\\n            _wormholeRelayer != address(0),\\n            \\\"WormholeRelayer address cannot be zero\\\"\\n        );\\n        require(\\n            _l2WormholeGateway != address(0),\\n            \\\"L2WormholeGateway address cannot be zero\\\"\\n        );\\n\\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\\n        l2WormholeGateway = IL2WormholeGateway(_l2WormholeGateway);\\n        l1ChainId = _l1ChainId;\\n    }\\n\\n    /// @notice Sets the address of the `L1BitcoinDepositor` contract on the\\n    ///         corresponding L1 chain. This function solves the chicken-and-egg\\n    ///         problem of setting the `L1BitcoinDepositor` contract address\\n    ///         on the `L2BitcoinDepositor` contract and vice versa.\\n    /// @param _l1BitcoinDepositor Address of the `L1BitcoinDepositor` contract.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the contract owner,\\n    ///      - The address must not be set yet,\\n    ///      - The new address must not be 0x0.\\n    function attachL1BitcoinDepositor(address _l1BitcoinDepositor)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            l1BitcoinDepositor == address(0),\\n            \\\"L1 Bitcoin Depositor already set\\\"\\n        );\\n        require(\\n            _l1BitcoinDepositor != address(0),\\n            \\\"L1 Bitcoin Depositor must not be 0x0\\\"\\n        );\\n        l1BitcoinDepositor = _l1BitcoinDepositor;\\n    }\\n\\n    /// @notice Initializes the deposit process on L2 by emitting an event\\n    ///         containing the deposit data (funding transaction and\\n    ///         components of the P2(W)SH deposit address). The event is\\n    ///         supposed to be picked up by the relayer and used to initialize\\n    ///         the deposit on L1 through the `L1BitcoinDepositor` contract.\\n    /// @param fundingTx Bitcoin funding transaction data.\\n    /// @param reveal Deposit reveal data.\\n    /// @param l2DepositOwner Address of the L2 deposit owner.\\n    /// @dev The alternative approach of using Wormhole Relayer to send the\\n    ///      deposit data to L1 was considered. However, it turned out to be\\n    ///      too expensive. For example, relying deposit data from Base L2 to\\n    ///      Ethereum L1 costs around ~0.045 ETH (~170 USD at the moment of writing).\\n    ///      Moreover, the next iteration of the direct bridging mechanism\\n    ///      assumes that no L2 transaction will be required to initialize the\\n    ///      deposit and the relayer should obtain the deposit data off-chain.\\n    ///      There is a high chance this function will be removed then.\\n    ///      That said, there was no sense to explore another cross-chain\\n    ///      messaging solutions. Relying on simple on-chain event and custom\\n    ///      off-chain relayer seems to be the most reasonable way to go. It\\n    ///      also aligns with the future direction of the direct bridging mechanism.\\n    function initializeDeposit(\\n        IBridgeTypes.BitcoinTxInfo calldata fundingTx,\\n        IBridgeTypes.DepositRevealInfo calldata reveal,\\n        address l2DepositOwner\\n    ) external {\\n        emit DepositInitialized(fundingTx, reveal, l2DepositOwner, msg.sender);\\n    }\\n\\n    /// @notice Receives Wormhole messages originating from the corresponding\\n    ///         `L1BitcoinDepositor` contract that lives on the L1 chain.\\n    ///         Messages are issued upon deposit finalization on L1 and\\n    ///         are supposed to carry the VAA of the Wormhole token transfer of\\n    ///         ERC20 L1 TBTC to the L2 chain. This contract performs some basic\\n    ///         checks and forwards the VAA to the `L2WormholeGateway` contract\\n    ///         that is authorized to withdraw the Wormhole-wrapped L2 TBTC\\n    ///         from the Wormhole Token Bridge (representing the ERC20 TBTC\\n    ///         locked on L1) and use it to mint the canonical L2 TBTC for the\\n    ///         deposit owner.\\n    /// @param additionalVaas Additional VAAs that are part of the Wormhole message.\\n    /// @param sourceAddress Address of the source of the message (in Wormhole format).\\n    /// @param sourceChain Wormhole chain ID of the source chain.\\n    /// @dev Requirements:\\n    ///      - Can be called only by the Wormhole Relayer contract,\\n    ///      - The source chain must be the expected L1 chain,\\n    ///      - The source address must be the corresponding\\n    ///        `L1BitcoinDepositor` contract,\\n    ///      - The message must carry exactly 1 additional VAA key representing\\n    ///        the token transfer.\\n    function receiveWormholeMessages(\\n        bytes memory,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32\\n    ) external payable {\\n        require(\\n            msg.sender == address(wormholeRelayer),\\n            \\\"Caller is not Wormhole Relayer\\\"\\n        );\\n\\n        require(\\n            sourceChain == l1ChainId,\\n            \\\"Source chain is not the expected L1 chain\\\"\\n        );\\n\\n        require(\\n            WormholeUtils.fromWormholeAddress(sourceAddress) ==\\n                l1BitcoinDepositor,\\n            \\\"Source address is not the expected L1 Bitcoin depositor\\\"\\n        );\\n\\n        require(\\n            additionalVaas.length == 1,\\n            \\\"Expected 1 additional VAA key for token transfer\\\"\\n        );\\n\\n        l2WormholeGateway.receiveTbtc(additionalVaas[0]);\\n    }\\n}\\n\",\"keccak256\":\"0xcdca450675748cbcbd948ccdca051bd1bf361d75b658fc516eab327837324ce6\",\"license\":\"GPL-3.0-only\"},\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3139,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3142,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":4171,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3011,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":3131,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":5667,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"wormholeRelayer","offset":0,"slot":"101","type":"t_contract(IWormholeRelayer)5928"},{"astId":5671,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"l2WormholeGateway","offset":0,"slot":"102","type":"t_contract(IL2WormholeGateway)5658"},{"astId":5674,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"l1ChainId","offset":20,"slot":"102","type":"t_uint16"},{"astId":5677,"contract":"contracts/l2/L2BitcoinDepositor.sol:L2BitcoinDepositor","label":"l1BitcoinDepositor","offset":0,"slot":"103","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IL2WormholeGateway)5658":{"encoding":"inplace","label":"contract IL2WormholeGateway","numberOfBytes":"20"},"t_contract(IWormholeRelayer)5928":{"encoding":"inplace","label":"contract IWormholeRelayer","numberOfBytes":"20"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"attachL1BitcoinDepositor(address)":{"notice":"Sets the address of the `L1BitcoinDepositor` contract on the         corresponding L1 chain. This function solves the chicken-and-egg         problem of setting the `L1BitcoinDepositor` contract address         on the `L2BitcoinDepositor` contract and vice versa."},"initializeDeposit((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address)":{"notice":"Initializes the deposit process on L2 by emitting an event         containing the deposit data (funding transaction and         components of the P2(W)SH deposit address). The event is         supposed to be picked up by the relayer and used to initialize         the deposit on L1 through the `L1BitcoinDepositor` contract."},"l1BitcoinDepositor()":{"notice":"tBTC `L1BitcoinDepositor` contract on the corresponding L1 chain."},"l1ChainId()":{"notice":"Wormhole chain ID of the corresponding L1 chain."},"l2WormholeGateway()":{"notice":"tBTC `L2WormholeGateway` contract on L2."},"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":{"notice":"Receives Wormhole messages originating from the corresponding         `L1BitcoinDepositor` contract that lives on the L1 chain.         Messages are issued upon deposit finalization on L1 and         are supposed to carry the VAA of the Wormhole token transfer of         ERC20 L1 TBTC to the L2 chain. This contract performs some basic         checks and forwards the VAA to the `L2WormholeGateway` contract         that is authorized to withdraw the Wormhole-wrapped L2 TBTC         from the Wormhole Token Bridge (representing the ERC20 TBTC         locked on L1) and use it to mint the canonical L2 TBTC for the         deposit owner."},"wormholeRelayer()":{"notice":"`WormholeRelayer` contract on L2."}},"notice":"This contract is part of the direct bridging mechanism allowing         users to obtain ERC20 TBTC on supported L2 chains, without the need         to interact with the L1 tBTC ledger chain where minting occurs.         `L2BitcoinDepositor` is deployed on the L2 chain and interacts with         their L1 counterpart, the `L1BitcoinDepositor`, deployed on the         L1 tBTC ledger chain. Each `L1BitcoinDepositor` & `L2BitcoinDepositor`         pair is responsible for a specific L2 chain.         Please consult the `L1BitcoinDepositor` docstring for an         outline of the direct bridging mechanism","version":1}}},"contracts/l2/Wormhole.sol":{"IWormhole":{"abi":[{"inputs":[],"name":"chainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"messageFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6","kind":"dev","methods":{"chainId()":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109"},"messageFee()":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117"}},"title":"IWormhole","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"chainId()":"9a8a0592","messageFee()":"1a90a219"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\",\"kind\":\"dev\",\"methods\":{\"chainId()\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\"},\"messageFee()\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\"}},\"title\":\"IWormhole\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Wormhole interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"IWormhole\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Wormhole interface.","version":1}},"IWormholeReceiver":{"abi":[{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"bytes[]","name":"additionalVaas","type":"bytes[]"},{"internalType":"bytes32","name":"sourceAddress","type":"bytes32"},{"internalType":"uint16","name":"sourceChain","type":"uint16"},{"internalType":"bytes32","name":"deliveryHash","type":"bytes32"}],"name":"receiveWormholeMessages","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8","kind":"dev","methods":{"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44"}},"title":"IWormholeReceiver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)":"529dca32"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalVaas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\",\"kind\":\"dev\",\"methods\":{\"receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\"}},\"title\":\"IWormholeReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Wormhole Receiver interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"IWormholeReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Wormhole Receiver interface.","version":1}},"IWormholeRelayer":{"abi":[{"inputs":[{"internalType":"uint16","name":"targetChain","type":"uint16"},{"internalType":"uint256","name":"receiverValue","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"}],"name":"quoteEVMDeliveryPrice","outputs":[{"internalType":"uint256","name":"nativePriceQuote","type":"uint256"},{"internalType":"uint256","name":"targetChainRefundPerGasUnused","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"targetChain","type":"uint16"},{"internalType":"address","name":"targetAddress","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"uint256","name":"receiverValue","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"components":[{"internalType":"uint16","name":"chainId","type":"uint16"},{"internalType":"bytes32","name":"emitterAddress","type":"bytes32"},{"internalType":"uint64","name":"sequence","type":"uint64"}],"internalType":"struct WormholeTypes.VaaKey[]","name":"vaaKeys","type":"tuple[]"},{"internalType":"uint16","name":"refundChain","type":"uint16"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"sendVaasToEvm","outputs":[{"internalType":"uint64","name":"sequence","type":"uint64"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74","kind":"dev","methods":{"quoteEVMDeliveryPrice(uint16,uint256,uint256)":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442"},"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182"}},"title":"IWormholeRelayer","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteEVMDeliveryPrice(uint16,uint256,uint256)":"c23ee3c3","sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)":"32b2fc0e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"quoteEVMDeliveryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativePriceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainRefundPerGasUnused\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"internalType\":\"struct WormholeTypes.VaaKey[]\",\"name\":\"vaaKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"refundChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendVaasToEvm\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\",\"kind\":\"dev\",\"methods\":{\"quoteEVMDeliveryPrice(uint16,uint256,uint256)\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\"},\"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\"}},\"title\":\"IWormholeRelayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Wormhole Relayer interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"IWormholeRelayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Wormhole Relayer interface.","version":1}},"IWormholeTokenBridge":{"abi":[{"inputs":[{"internalType":"bytes","name":"encodedVm","type":"bytes"}],"name":"completeTransferWithPayload","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"parseTransferWithPayload","outputs":[{"components":[{"internalType":"uint8","name":"payloadID","type":"uint8"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"tokenAddress","type":"bytes32"},{"internalType":"uint16","name":"tokenChain","type":"uint16"},{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"uint16","name":"toChain","type":"uint16"},{"internalType":"bytes32","name":"fromAddress","type":"bytes32"},{"internalType":"bytes","name":"payload","type":"bytes"}],"internalType":"struct IWormholeTokenBridge.TransferWithPayload","name":"transfer","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint16","name":"recipientChain","type":"uint16"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"uint256","name":"arbiterFee","type":"uint256"},{"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"transferTokens","outputs":[{"internalType":"uint64","name":"sequence","type":"uint64"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint16","name":"recipientChain","type":"uint16"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"transferTokensWithPayload","outputs":[{"internalType":"uint64","name":"sequence","type":"uint64"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9","kind":"dev","methods":{},"title":"IWormholeTokenBridge","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"completeTransferWithPayload(bytes)":"c3f511c1","parseTransferWithPayload(bytes)":"ea63738d","transferTokens(address,uint256,uint16,bytes32,uint256,uint32)":"0f5287b0","transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)":"c5a5ebda"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"completeTransferWithPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"parseTransferWithPayload\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"tokenChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"toChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"fromAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct IWormholeTokenBridge.TransferWithPayload\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"arbiterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"transferTokens\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"transferTokensWithPayload\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\",\"kind\":\"dev\",\"methods\":{},\"title\":\"IWormholeTokenBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Wormhole Token Bridge interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"IWormholeTokenBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Wormhole Token Bridge interface.","version":1}},"WormholeTypes":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"WormholeTypes","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7622530d25011361e7ee47bb8f1c9680a79a8b9af3b75c7a55e3aa0b918838564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 PUSH3 0x2530D2 POP GT CALLDATASIZE 0x1E PUSH31 0xE47BB8F1C9680A79A8B9AF3B75C7A55E3AA0B918838564736F6C6343000811 STOP CALLER ","sourceMap":"1100:297:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7622530d25011361e7ee47bb8f1c9680a79a8b9af3b75c7a55e3aa0b918838564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 PUSH3 0x2530D2 POP GT CALLDATASIZE 0x1E PUSH31 0xE47BB8F1C9680A79A8B9AF3B75C7A55E3AA0B918838564736F6C6343000811 STOP CALLER ","sourceMap":"1100:297:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"WormholeTypes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Namespace which groups all types relevant to Wormhole interfaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"WormholeTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Namespace which groups all types relevant to Wormhole interfaces.","version":1}},"WormholeUtils":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"WormholeUtils","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206918be80e85e596a05acc6cc54c68ca38b1929b32ca70b75e8b214eeb54c839464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x18BE80E85E596A05ACC6 0xCC SLOAD 0xC6 DUP13 LOG3 DUP12 NOT 0x29 0xB3 0x2C 0xA7 SIGNEXTEND PUSH22 0xE8B214EEB54C839464736F6C63430008110033000000 ","sourceMap":"5229:1104:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206918be80e85e596a05acc6cc54c68ca38b1929b32ca70b75e8b214eeb54c839464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x18BE80E85E596A05ACC6 0xCC SLOAD 0xC6 DUP13 LOG3 DUP12 NOT 0x29 0xB3 0x2C 0xA7 SIGNEXTEND PUSH22 0xE8B214EEB54C839464736F6C63430008110033000000 ","sourceMap":"5229:1104:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"fromWormholeAddress(bytes32)":"infinite","normalize(uint256)":"infinite","toWormholeAddress(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"WormholeUtils\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for Wormhole utilities.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2/Wormhole.sol\":\"WormholeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/l2/Wormhole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\n/// @title WormholeTypes\\n/// @notice Namespace which groups all types relevant to Wormhole interfaces.\\nlibrary WormholeTypes {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L22\\n    struct VaaKey {\\n        uint16 chainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n    }\\n}\\n\\n/// @title IWormhole\\n/// @notice Wormhole interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L6\\ninterface IWormhole {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L109\\n    function chainId() external view returns (uint16);\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormhole.sol#L117\\n    function messageFee() external view returns (uint256);\\n}\\n\\n/// @title IWormholeRelayer\\n/// @notice Wormhole Relayer interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L74\\ninterface IWormholeRelayer {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L442\\n    function quoteEVMDeliveryPrice(\\n        uint16 targetChain,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nativePriceQuote,\\n            uint256 targetChainRefundPerGasUnused\\n        );\\n\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeRelayer.sol#L182\\n    function sendVaasToEvm(\\n        uint16 targetChain,\\n        address targetAddress,\\n        bytes memory payload,\\n        uint256 receiverValue,\\n        uint256 gasLimit,\\n        WormholeTypes.VaaKey[] memory vaaKeys,\\n        uint16 refundChain,\\n        address refundAddress\\n    ) external payable returns (uint64 sequence);\\n}\\n\\n/// @title IWormholeReceiver\\n/// @notice Wormhole Receiver interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L8\\ninterface IWormholeReceiver {\\n    /// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/IWormholeReceiver.sol#L44\\n    function receiveWormholeMessages(\\n        bytes memory payload,\\n        bytes[] memory additionalVaas,\\n        bytes32 sourceAddress,\\n        uint16 sourceChain,\\n        bytes32 deliveryHash\\n    ) external payable;\\n}\\n\\n/// @title IWormholeTokenBridge\\n/// @notice Wormhole Token Bridge interface.\\n/// @dev See: https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/2b7db51f99b49eda99b44f4a044e751cb0b2e8ea/src/interfaces/ITokenBridge.sol#L9\\ninterface IWormholeTokenBridge {\\n    function completeTransferWithPayload(bytes memory encodedVm)\\n        external\\n        returns (bytes memory);\\n\\n    function parseTransferWithPayload(bytes memory encoded)\\n        external\\n        pure\\n        returns (TransferWithPayload memory transfer);\\n\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint32 nonce,\\n        bytes memory payload\\n    ) external payable returns (uint64 sequence);\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n}\\n\\n/// @title WormholeUtils\\n/// @notice Library for Wormhole utilities.\\nlibrary WormholeUtils {\\n    /// @notice Converts Ethereum address into Wormhole format.\\n    /// @param _address The address to convert.\\n    function toWormholeAddress(address _address)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(_address)));\\n    }\\n\\n    /// @notice Converts Wormhole address into Ethereum format.\\n    /// @param _address The address to convert.\\n    function fromWormholeAddress(bytes32 _address)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_address)));\\n    }\\n\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\n        // slither-disable-next-line divide-before-multiply\\n        amount /= 10**10;\\n        amount *= 10**10;\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe862dd230cac5f6521582ca8deffec70ac8405c059de24a945e0f57dae0a52ef\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Library for Wormhole utilities.","version":1}}}}}}